
FlightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a54  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  08006be4  08006be4  00007be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006df4  08006df4  0000805c  2**0
                  CONTENTS
  4 .ARM          00000008  08006df4  08006df4  00007df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006dfc  08006dfc  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006dfc  08006dfc  00007dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006e00  08006e00  00007e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08006e04  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000805c  2**0
                  CONTENTS
 10 .bss          0000036c  2000005c  2000005c  0000805c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003c8  200003c8  0000805c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013292  00000000  00000000  0000808c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000297b  00000000  00000000  0001b31e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001090  00000000  00000000  0001dca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d15  00000000  00000000  0001ed30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c212  00000000  00000000  0001fa45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001632c  00000000  00000000  0003bc57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a5ea7  00000000  00000000  00051f83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f7e2a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004ba4  00000000  00000000  000f7e70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  000fca14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006bcc 	.word	0x08006bcc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08006bcc 	.word	0x08006bcc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <sendSensorData>:
void UART_Init(void) {
    HAL_UART_Init(&huart1); // ya se hace en el main así que creo que no hace falta
}

// Función para enviar datos de los sensores al ESP8266
void sendSensorData(void) {
 8000280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000282:	b0b1      	sub	sp, #196	@ 0xc4
 8000284:	af08      	add	r7, sp, #32

    int16_t ax, ay, az;
    int16_t gx, gy, gz;
    int16_t mx, my, mz;

    ADXL345_ReadData(&ax, &ay, &az);  // Leer datos acelerómetro
 8000286:	f107 021a 	add.w	r2, r7, #26
 800028a:	f107 011c 	add.w	r1, r7, #28
 800028e:	f107 031e 	add.w	r3, r7, #30
 8000292:	4618      	mov	r0, r3
 8000294:	f000 f8fc 	bl	8000490 <ADXL345_ReadData>
    ITG3205_ReadData(&gx, &gy, &gz);  // Leer datos giroscopio
 8000298:	f107 0214 	add.w	r2, r7, #20
 800029c:	f107 0116 	add.w	r1, r7, #22
 80002a0:	f107 0318 	add.w	r3, r7, #24
 80002a4:	4618      	mov	r0, r3
 80002a6:	f000 f95f 	bl	8000568 <ITG3205_ReadData>
    HMC5883L_ReadData(&mx, &my, &mz);  // Leer datos magnetómetro
 80002aa:	f107 020e 	add.w	r2, r7, #14
 80002ae:	f107 0110 	add.w	r1, r7, #16
 80002b2:	f107 0312 	add.w	r3, r7, #18
 80002b6:	4618      	mov	r0, r3
 80002b8:	f000 f920 	bl	80004fc <HMC5883L_ReadData>

    snprintf(data_msg, sizeof(data_msg), "ACCX:%d ACCY:%d ACCZ:%d GYX:%d GYY:%d GYZ:%d MAGX:%d MAGY:%d MAGZ:%d\r\n",
 80002bc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80002c0:	469c      	mov	ip, r3
 80002c2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80002c6:	607b      	str	r3, [r7, #4]
 80002c8:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80002cc:	f9b7 1018 	ldrsh.w	r1, [r7, #24]
 80002d0:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 80002d4:	4604      	mov	r4, r0
 80002d6:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 80002da:	4605      	mov	r5, r0
 80002dc:	f9b7 0012 	ldrsh.w	r0, [r7, #18]
 80002e0:	4606      	mov	r6, r0
 80002e2:	f9b7 0010 	ldrsh.w	r0, [r7, #16]
 80002e6:	6038      	str	r0, [r7, #0]
 80002e8:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 80002ec:	4603      	mov	r3, r0
 80002ee:	f107 0020 	add.w	r0, r7, #32
 80002f2:	9307      	str	r3, [sp, #28]
 80002f4:	683b      	ldr	r3, [r7, #0]
 80002f6:	9306      	str	r3, [sp, #24]
 80002f8:	9605      	str	r6, [sp, #20]
 80002fa:	9504      	str	r5, [sp, #16]
 80002fc:	9403      	str	r4, [sp, #12]
 80002fe:	9102      	str	r1, [sp, #8]
 8000300:	9201      	str	r2, [sp, #4]
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	9300      	str	r3, [sp, #0]
 8000306:	4663      	mov	r3, ip
 8000308:	4a0a      	ldr	r2, [pc, #40]	@ (8000334 <sendSensorData+0xb4>)
 800030a:	2180      	movs	r1, #128	@ 0x80
 800030c:	f005 ff98 	bl	8006240 <sniprintf>
             ax, ay, az, gx, gy, gz, mx, my, mz);

    // Enviar los datos a través de UART
    HAL_UART_Transmit(&huart1, (uint8_t*)data_msg, strlen(data_msg), HAL_MAX_DELAY);
 8000310:	f107 0320 	add.w	r3, r7, #32
 8000314:	4618      	mov	r0, r3
 8000316:	f7ff ff5b 	bl	80001d0 <strlen>
 800031a:	4603      	mov	r3, r0
 800031c:	b29a      	uxth	r2, r3
 800031e:	f107 0120 	add.w	r1, r7, #32
 8000322:	f04f 33ff 	mov.w	r3, #4294967295
 8000326:	4804      	ldr	r0, [pc, #16]	@ (8000338 <sendSensorData+0xb8>)
 8000328:	f004 fc52 	bl	8004bd0 <HAL_UART_Transmit>
}
 800032c:	bf00      	nop
 800032e:	37a4      	adds	r7, #164	@ 0xa4
 8000330:	46bd      	mov	sp, r7
 8000332:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000334:	08006be4 	.word	0x08006be4
 8000338:	20000164 	.word	0x20000164

0800033c <sendControlCommand>:

// Función para enviar un comando de control al ESP8266 (ejemplo: "start", "stop", "set_speed 100")
void sendControlCommand(const char* command) {
 800033c:	b580      	push	{r7, lr}
 800033e:	b092      	sub	sp, #72	@ 0x48
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
    char cmd_msg[64];
    snprintf(cmd_msg, sizeof(cmd_msg), "%s\r\n", command);  // Agregar salto de línea al final del comando
 8000344:	f107 0008 	add.w	r0, r7, #8
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	4a0b      	ldr	r2, [pc, #44]	@ (8000378 <sendControlCommand+0x3c>)
 800034c:	2140      	movs	r1, #64	@ 0x40
 800034e:	f005 ff77 	bl	8006240 <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)cmd_msg, strlen(cmd_msg), HAL_MAX_DELAY);
 8000352:	f107 0308 	add.w	r3, r7, #8
 8000356:	4618      	mov	r0, r3
 8000358:	f7ff ff3a 	bl	80001d0 <strlen>
 800035c:	4603      	mov	r3, r0
 800035e:	b29a      	uxth	r2, r3
 8000360:	f107 0108 	add.w	r1, r7, #8
 8000364:	f04f 33ff 	mov.w	r3, #4294967295
 8000368:	4804      	ldr	r0, [pc, #16]	@ (800037c <sendControlCommand+0x40>)
 800036a:	f004 fc31 	bl	8004bd0 <HAL_UART_Transmit>
}
 800036e:	bf00      	nop
 8000370:	3748      	adds	r7, #72	@ 0x48
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	08006c2c 	.word	0x08006c2c
 800037c:	20000164 	.word	0x20000164

08000380 <receiveControlCommand>:

// Función para recibir comandos del ESP8266
void receiveControlCommand(void) {
 8000380:	b580      	push	{r7, lr}
 8000382:	b092      	sub	sp, #72	@ 0x48
 8000384:	af00      	add	r7, sp, #0
    uint8_t rx_buffer[64];  // Buffer para almacenar el comando recibido
    HAL_StatusTypeDef status = HAL_UART_Receive(&huart1, rx_buffer, sizeof(rx_buffer) - 1, 1000);  // Timeout 1 segundo
 8000386:	4639      	mov	r1, r7
 8000388:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800038c:	223f      	movs	r2, #63	@ 0x3f
 800038e:	481e      	ldr	r0, [pc, #120]	@ (8000408 <receiveControlCommand+0x88>)
 8000390:	f004 fca7 	bl	8004ce2 <HAL_UART_Receive>
 8000394:	4603      	mov	r3, r0
 8000396:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    if (status == HAL_OK) {
 800039a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d12e      	bne.n	8000400 <receiveControlCommand+0x80>
        rx_buffer[sizeof(rx_buffer) - 1] = '\0';  // Asegurarse de que la cadena esté terminada en nulo
 80003a2:	2300      	movs	r3, #0
 80003a4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

        // Aquí procesas el comando recibido. Ejemplo:
        if (strncmp((char*)rx_buffer, "stop", 4) == 0) {
 80003a8:	463b      	mov	r3, r7
 80003aa:	2204      	movs	r2, #4
 80003ac:	4917      	ldr	r1, [pc, #92]	@ (800040c <receiveControlCommand+0x8c>)
 80003ae:	4618      	mov	r0, r3
 80003b0:	f005 ff82 	bl	80062b8 <strncmp>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d103      	bne.n	80003c2 <receiveControlCommand+0x42>
            // Detener los motores
            sendControlCommand("Motor stopped");
 80003ba:	4815      	ldr	r0, [pc, #84]	@ (8000410 <receiveControlCommand+0x90>)
 80003bc:	f7ff ffbe 	bl	800033c <sendControlCommand>
            // Extraer la velocidad del comando
            int speed = atoi((char*)rx_buffer + 10);  // Asumimos que el valor de velocidad viene después de "set_speed "
            sendControlCommand("Speed set");
        }
    }
}
 80003c0:	e01e      	b.n	8000400 <receiveControlCommand+0x80>
        } else if (strncmp((char*)rx_buffer, "start", 5) == 0) {
 80003c2:	463b      	mov	r3, r7
 80003c4:	2205      	movs	r2, #5
 80003c6:	4913      	ldr	r1, [pc, #76]	@ (8000414 <receiveControlCommand+0x94>)
 80003c8:	4618      	mov	r0, r3
 80003ca:	f005 ff75 	bl	80062b8 <strncmp>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d103      	bne.n	80003dc <receiveControlCommand+0x5c>
            sendControlCommand("Motor started at speed 100");
 80003d4:	4810      	ldr	r0, [pc, #64]	@ (8000418 <receiveControlCommand+0x98>)
 80003d6:	f7ff ffb1 	bl	800033c <sendControlCommand>
}
 80003da:	e011      	b.n	8000400 <receiveControlCommand+0x80>
        } else if (strncmp((char*)rx_buffer, "set_speed", 9) == 0) {
 80003dc:	463b      	mov	r3, r7
 80003de:	2209      	movs	r2, #9
 80003e0:	490e      	ldr	r1, [pc, #56]	@ (800041c <receiveControlCommand+0x9c>)
 80003e2:	4618      	mov	r0, r3
 80003e4:	f005 ff68 	bl	80062b8 <strncmp>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d108      	bne.n	8000400 <receiveControlCommand+0x80>
            int speed = atoi((char*)rx_buffer + 10);  // Asumimos que el valor de velocidad viene después de "set_speed "
 80003ee:	463b      	mov	r3, r7
 80003f0:	330a      	adds	r3, #10
 80003f2:	4618      	mov	r0, r3
 80003f4:	f005 fe9c 	bl	8006130 <atoi>
 80003f8:	6438      	str	r0, [r7, #64]	@ 0x40
            sendControlCommand("Speed set");
 80003fa:	4809      	ldr	r0, [pc, #36]	@ (8000420 <receiveControlCommand+0xa0>)
 80003fc:	f7ff ff9e 	bl	800033c <sendControlCommand>
}
 8000400:	bf00      	nop
 8000402:	3748      	adds	r7, #72	@ 0x48
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}
 8000408:	20000164 	.word	0x20000164
 800040c:	08006c34 	.word	0x08006c34
 8000410:	08006c3c 	.word	0x08006c3c
 8000414:	08006c4c 	.word	0x08006c4c
 8000418:	08006c54 	.word	0x08006c54
 800041c:	08006c70 	.word	0x08006c70
 8000420:	08006c7c 	.word	0x08006c7c

08000424 <GY85_Init>:
#define HMC5883L_ADDR 0x1E
#define ITG3205_ADDR  0x68

extern I2C_HandleTypeDef hi2c1;

void GY85_Init() {
 8000424:	b580      	push	{r7, lr}
 8000426:	b086      	sub	sp, #24
 8000428:	af04      	add	r7, sp, #16
    // Inicializar el acelerómetro (ADXL345)
    uint8_t data = 0x08; // Encender el sensor
 800042a:	2308      	movs	r3, #8
 800042c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, (ADXL345_ADDR << 1), 0x2D, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 800042e:	f04f 33ff 	mov.w	r3, #4294967295
 8000432:	9302      	str	r3, [sp, #8]
 8000434:	2301      	movs	r3, #1
 8000436:	9301      	str	r3, [sp, #4]
 8000438:	1dfb      	adds	r3, r7, #7
 800043a:	9300      	str	r3, [sp, #0]
 800043c:	2301      	movs	r3, #1
 800043e:	222d      	movs	r2, #45	@ 0x2d
 8000440:	21a6      	movs	r1, #166	@ 0xa6
 8000442:	4812      	ldr	r0, [pc, #72]	@ (800048c <GY85_Init+0x68>)
 8000444:	f001 fa18 	bl	8001878 <HAL_I2C_Mem_Write>

    // Inicializar el magnetómetro (HMC5883L)
    data = 0x70; // Configuración estándar
 8000448:	2370      	movs	r3, #112	@ 0x70
 800044a:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, (HMC5883L_ADDR << 1), 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 800044c:	f04f 33ff 	mov.w	r3, #4294967295
 8000450:	9302      	str	r3, [sp, #8]
 8000452:	2301      	movs	r3, #1
 8000454:	9301      	str	r3, [sp, #4]
 8000456:	1dfb      	adds	r3, r7, #7
 8000458:	9300      	str	r3, [sp, #0]
 800045a:	2301      	movs	r3, #1
 800045c:	2200      	movs	r2, #0
 800045e:	213c      	movs	r1, #60	@ 0x3c
 8000460:	480a      	ldr	r0, [pc, #40]	@ (800048c <GY85_Init+0x68>)
 8000462:	f001 fa09 	bl	8001878 <HAL_I2C_Mem_Write>

    // Inicializar el giroscopio (ITG-3205)
    data = 0x00; // Configuración estándar
 8000466:	2300      	movs	r3, #0
 8000468:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, (ITG3205_ADDR << 1), 0x3E, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 800046a:	f04f 33ff 	mov.w	r3, #4294967295
 800046e:	9302      	str	r3, [sp, #8]
 8000470:	2301      	movs	r3, #1
 8000472:	9301      	str	r3, [sp, #4]
 8000474:	1dfb      	adds	r3, r7, #7
 8000476:	9300      	str	r3, [sp, #0]
 8000478:	2301      	movs	r3, #1
 800047a:	223e      	movs	r2, #62	@ 0x3e
 800047c:	21d0      	movs	r1, #208	@ 0xd0
 800047e:	4803      	ldr	r0, [pc, #12]	@ (800048c <GY85_Init+0x68>)
 8000480:	f001 f9fa 	bl	8001878 <HAL_I2C_Mem_Write>
}
 8000484:	bf00      	nop
 8000486:	3708      	adds	r7, #8
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}
 800048c:	20000078 	.word	0x20000078

08000490 <ADXL345_ReadData>:

void ADXL345_ReadData(int16_t *x, int16_t *y, int16_t *z) {
 8000490:	b580      	push	{r7, lr}
 8000492:	b08a      	sub	sp, #40	@ 0x28
 8000494:	af04      	add	r7, sp, #16
 8000496:	60f8      	str	r0, [r7, #12]
 8000498:	60b9      	str	r1, [r7, #8]
 800049a:	607a      	str	r2, [r7, #4]
    uint8_t buffer[6];
    HAL_I2C_Mem_Read(&hi2c1, (ADXL345_ADDR << 1), 0x32, I2C_MEMADD_SIZE_8BIT, buffer, 6, HAL_MAX_DELAY);
 800049c:	f04f 33ff 	mov.w	r3, #4294967295
 80004a0:	9302      	str	r3, [sp, #8]
 80004a2:	2306      	movs	r3, #6
 80004a4:	9301      	str	r3, [sp, #4]
 80004a6:	f107 0310 	add.w	r3, r7, #16
 80004aa:	9300      	str	r3, [sp, #0]
 80004ac:	2301      	movs	r3, #1
 80004ae:	2232      	movs	r2, #50	@ 0x32
 80004b0:	21a6      	movs	r1, #166	@ 0xa6
 80004b2:	4811      	ldr	r0, [pc, #68]	@ (80004f8 <ADXL345_ReadData+0x68>)
 80004b4:	f001 faf4 	bl	8001aa0 <HAL_I2C_Mem_Read>
    *x = (int16_t)((buffer[1] << 8) | buffer[0]);
 80004b8:	7c7b      	ldrb	r3, [r7, #17]
 80004ba:	021b      	lsls	r3, r3, #8
 80004bc:	b21a      	sxth	r2, r3
 80004be:	7c3b      	ldrb	r3, [r7, #16]
 80004c0:	b21b      	sxth	r3, r3
 80004c2:	4313      	orrs	r3, r2
 80004c4:	b21a      	sxth	r2, r3
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	801a      	strh	r2, [r3, #0]
    *y = (int16_t)((buffer[3] << 8) | buffer[2]);
 80004ca:	7cfb      	ldrb	r3, [r7, #19]
 80004cc:	021b      	lsls	r3, r3, #8
 80004ce:	b21a      	sxth	r2, r3
 80004d0:	7cbb      	ldrb	r3, [r7, #18]
 80004d2:	b21b      	sxth	r3, r3
 80004d4:	4313      	orrs	r3, r2
 80004d6:	b21a      	sxth	r2, r3
 80004d8:	68bb      	ldr	r3, [r7, #8]
 80004da:	801a      	strh	r2, [r3, #0]
    *z = (int16_t)((buffer[5] << 8) | buffer[4]);
 80004dc:	7d7b      	ldrb	r3, [r7, #21]
 80004de:	021b      	lsls	r3, r3, #8
 80004e0:	b21a      	sxth	r2, r3
 80004e2:	7d3b      	ldrb	r3, [r7, #20]
 80004e4:	b21b      	sxth	r3, r3
 80004e6:	4313      	orrs	r3, r2
 80004e8:	b21a      	sxth	r2, r3
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	801a      	strh	r2, [r3, #0]
}
 80004ee:	bf00      	nop
 80004f0:	3718      	adds	r7, #24
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	20000078 	.word	0x20000078

080004fc <HMC5883L_ReadData>:

void HMC5883L_ReadData(int16_t *x, int16_t *y, int16_t *z) {
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b08a      	sub	sp, #40	@ 0x28
 8000500:	af04      	add	r7, sp, #16
 8000502:	60f8      	str	r0, [r7, #12]
 8000504:	60b9      	str	r1, [r7, #8]
 8000506:	607a      	str	r2, [r7, #4]
    uint8_t buffer[6];
    HAL_I2C_Mem_Read(&hi2c1, (HMC5883L_ADDR << 1), 0x03, I2C_MEMADD_SIZE_8BIT, buffer, 6, HAL_MAX_DELAY);
 8000508:	f04f 33ff 	mov.w	r3, #4294967295
 800050c:	9302      	str	r3, [sp, #8]
 800050e:	2306      	movs	r3, #6
 8000510:	9301      	str	r3, [sp, #4]
 8000512:	f107 0310 	add.w	r3, r7, #16
 8000516:	9300      	str	r3, [sp, #0]
 8000518:	2301      	movs	r3, #1
 800051a:	2203      	movs	r2, #3
 800051c:	213c      	movs	r1, #60	@ 0x3c
 800051e:	4811      	ldr	r0, [pc, #68]	@ (8000564 <HMC5883L_ReadData+0x68>)
 8000520:	f001 fabe 	bl	8001aa0 <HAL_I2C_Mem_Read>
    *x = (int16_t)((buffer[0] << 8) | buffer[1]);
 8000524:	7c3b      	ldrb	r3, [r7, #16]
 8000526:	021b      	lsls	r3, r3, #8
 8000528:	b21a      	sxth	r2, r3
 800052a:	7c7b      	ldrb	r3, [r7, #17]
 800052c:	b21b      	sxth	r3, r3
 800052e:	4313      	orrs	r3, r2
 8000530:	b21a      	sxth	r2, r3
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	801a      	strh	r2, [r3, #0]
    *z = (int16_t)((buffer[2] << 8) | buffer[3]);
 8000536:	7cbb      	ldrb	r3, [r7, #18]
 8000538:	021b      	lsls	r3, r3, #8
 800053a:	b21a      	sxth	r2, r3
 800053c:	7cfb      	ldrb	r3, [r7, #19]
 800053e:	b21b      	sxth	r3, r3
 8000540:	4313      	orrs	r3, r2
 8000542:	b21a      	sxth	r2, r3
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	801a      	strh	r2, [r3, #0]
    *y = (int16_t)((buffer[4] << 8) | buffer[5]);
 8000548:	7d3b      	ldrb	r3, [r7, #20]
 800054a:	021b      	lsls	r3, r3, #8
 800054c:	b21a      	sxth	r2, r3
 800054e:	7d7b      	ldrb	r3, [r7, #21]
 8000550:	b21b      	sxth	r3, r3
 8000552:	4313      	orrs	r3, r2
 8000554:	b21a      	sxth	r2, r3
 8000556:	68bb      	ldr	r3, [r7, #8]
 8000558:	801a      	strh	r2, [r3, #0]
}
 800055a:	bf00      	nop
 800055c:	3718      	adds	r7, #24
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	20000078 	.word	0x20000078

08000568 <ITG3205_ReadData>:

void ITG3205_ReadData(int16_t *x, int16_t *y, int16_t *z) {
 8000568:	b580      	push	{r7, lr}
 800056a:	b08a      	sub	sp, #40	@ 0x28
 800056c:	af04      	add	r7, sp, #16
 800056e:	60f8      	str	r0, [r7, #12]
 8000570:	60b9      	str	r1, [r7, #8]
 8000572:	607a      	str	r2, [r7, #4]
    uint8_t buffer[6];
    HAL_I2C_Mem_Read(&hi2c1, (ITG3205_ADDR << 1), 0x1D, I2C_MEMADD_SIZE_8BIT, buffer, 6, HAL_MAX_DELAY);
 8000574:	f04f 33ff 	mov.w	r3, #4294967295
 8000578:	9302      	str	r3, [sp, #8]
 800057a:	2306      	movs	r3, #6
 800057c:	9301      	str	r3, [sp, #4]
 800057e:	f107 0310 	add.w	r3, r7, #16
 8000582:	9300      	str	r3, [sp, #0]
 8000584:	2301      	movs	r3, #1
 8000586:	221d      	movs	r2, #29
 8000588:	21d0      	movs	r1, #208	@ 0xd0
 800058a:	4811      	ldr	r0, [pc, #68]	@ (80005d0 <ITG3205_ReadData+0x68>)
 800058c:	f001 fa88 	bl	8001aa0 <HAL_I2C_Mem_Read>
    *x = (int16_t)((buffer[0] << 8) | buffer[1]);
 8000590:	7c3b      	ldrb	r3, [r7, #16]
 8000592:	021b      	lsls	r3, r3, #8
 8000594:	b21a      	sxth	r2, r3
 8000596:	7c7b      	ldrb	r3, [r7, #17]
 8000598:	b21b      	sxth	r3, r3
 800059a:	4313      	orrs	r3, r2
 800059c:	b21a      	sxth	r2, r3
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	801a      	strh	r2, [r3, #0]
    *y = (int16_t)((buffer[2] << 8) | buffer[3]);
 80005a2:	7cbb      	ldrb	r3, [r7, #18]
 80005a4:	021b      	lsls	r3, r3, #8
 80005a6:	b21a      	sxth	r2, r3
 80005a8:	7cfb      	ldrb	r3, [r7, #19]
 80005aa:	b21b      	sxth	r3, r3
 80005ac:	4313      	orrs	r3, r2
 80005ae:	b21a      	sxth	r2, r3
 80005b0:	68bb      	ldr	r3, [r7, #8]
 80005b2:	801a      	strh	r2, [r3, #0]
    *z = (int16_t)((buffer[4] << 8) | buffer[5]);
 80005b4:	7d3b      	ldrb	r3, [r7, #20]
 80005b6:	021b      	lsls	r3, r3, #8
 80005b8:	b21a      	sxth	r2, r3
 80005ba:	7d7b      	ldrb	r3, [r7, #21]
 80005bc:	b21b      	sxth	r3, r3
 80005be:	4313      	orrs	r3, r2
 80005c0:	b21a      	sxth	r2, r3
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	801a      	strh	r2, [r3, #0]
}
 80005c6:	bf00      	nop
 80005c8:	3718      	adds	r7, #24
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	20000078 	.word	0x20000078

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d8:	f000 fd10 	bl	8000ffc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005dc:	f000 f836 	bl	800064c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e0:	f000 fa68 	bl	8000ab4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005e4:	f000 fa36 	bl	8000a54 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80005e8:	f000 fa04 	bl	80009f4 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80005ec:	f000 f888 	bl	8000700 <MX_I2C1_Init>
  MX_TIM1_Init();
 80005f0:	f000 f8c6 	bl	8000780 <MX_TIM1_Init>
  MX_TIM2_Init();
 80005f4:	f000 f97c 	bl	80008f0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  // Inicializar el sensor GY-85
  GY85_Init();//Acelerometro
 80005f8:	f7ff ff14 	bl	8000424 <GY85_Init>


  HAL_UART_Receive_IT(&huart1, rx_buffer, sizeof(rx_buffer));
 80005fc:	2204      	movs	r2, #4
 80005fe:	490f      	ldr	r1, [pc, #60]	@ (800063c <main+0x68>)
 8000600:	480f      	ldr	r0, [pc, #60]	@ (8000640 <main+0x6c>)
 8000602:	f004 fc37 	bl	8004e74 <HAL_UART_Receive_IT>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000606:	2100      	movs	r1, #0
 8000608:	480e      	ldr	r0, [pc, #56]	@ (8000644 <main+0x70>)
 800060a:	f003 faf9 	bl	8003c00 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800060e:	210c      	movs	r1, #12
 8000610:	480c      	ldr	r0, [pc, #48]	@ (8000644 <main+0x70>)
 8000612:	f003 faf5 	bl	8003c00 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000616:	2100      	movs	r1, #0
 8000618:	480b      	ldr	r0, [pc, #44]	@ (8000648 <main+0x74>)
 800061a:	f003 faf1 	bl	8003c00 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800061e:	2104      	movs	r1, #4
 8000620:	4809      	ldr	r0, [pc, #36]	@ (8000648 <main+0x74>)
 8000622:	f003 faed 	bl	8003c00 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

      sendSensorData();
 8000626:	f7ff fe2b 	bl	8000280 <sendSensorData>

      // Recibir comandos desde el ESP8266
      receiveControlCommand();
 800062a:	f7ff fea9 	bl	8000380 <receiveControlCommand>

      HAL_Delay(1000);
 800062e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000632:	f000 fd49 	bl	80010c8 <HAL_Delay>
      sendSensorData();
 8000636:	bf00      	nop
 8000638:	e7f5      	b.n	8000626 <main+0x52>
 800063a:	bf00      	nop
 800063c:	20000274 	.word	0x20000274
 8000640:	20000164 	.word	0x20000164
 8000644:	200000cc 	.word	0x200000cc
 8000648:	20000118 	.word	0x20000118

0800064c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b096      	sub	sp, #88	@ 0x58
 8000650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000652:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000656:	2228      	movs	r2, #40	@ 0x28
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f005 fe24 	bl	80062a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000660:	f107 031c 	add.w	r3, r7, #28
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
 8000678:	609a      	str	r2, [r3, #8]
 800067a:	60da      	str	r2, [r3, #12]
 800067c:	611a      	str	r2, [r3, #16]
 800067e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000680:	2302      	movs	r3, #2
 8000682:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000684:	2301      	movs	r3, #1
 8000686:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000688:	2310      	movs	r3, #16
 800068a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800068c:	2300      	movs	r3, #0
 800068e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000690:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000694:	4618      	mov	r0, r3
 8000696:	f001 fe77 	bl	8002388 <HAL_RCC_OscConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80006a0:	f000 fa52 	bl	8000b48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a4:	230f      	movs	r3, #15
 80006a6:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006a8:	2300      	movs	r3, #0
 80006aa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006ba:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006bc:	f107 031c 	add.w	r3, r7, #28
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f002 fe9e 	bl	8003404 <HAL_RCC_ClockConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0x86>
  {
    Error_Handler();
 80006ce:	f000 fa3b 	bl	8000b48 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 80006d2:	f241 0321 	movw	r3, #4129	@ 0x1021
 80006d6:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80006d8:	2300      	movs	r3, #0
 80006da:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80006dc:	2300      	movs	r3, #0
 80006de:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80006e0:	2300      	movs	r3, #0
 80006e2:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	4618      	mov	r0, r3
 80006e8:	f003 f8ac 	bl	8003844 <HAL_RCCEx_PeriphCLKConfig>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006f2:	f000 fa29 	bl	8000b48 <Error_Handler>
  }
}
 80006f6:	bf00      	nop
 80006f8:	3758      	adds	r7, #88	@ 0x58
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
	...

08000700 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000704:	4b1b      	ldr	r3, [pc, #108]	@ (8000774 <MX_I2C1_Init+0x74>)
 8000706:	4a1c      	ldr	r2, [pc, #112]	@ (8000778 <MX_I2C1_Init+0x78>)
 8000708:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 800070a:	4b1a      	ldr	r3, [pc, #104]	@ (8000774 <MX_I2C1_Init+0x74>)
 800070c:	4a1b      	ldr	r2, [pc, #108]	@ (800077c <MX_I2C1_Init+0x7c>)
 800070e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000710:	4b18      	ldr	r3, [pc, #96]	@ (8000774 <MX_I2C1_Init+0x74>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000716:	4b17      	ldr	r3, [pc, #92]	@ (8000774 <MX_I2C1_Init+0x74>)
 8000718:	2201      	movs	r2, #1
 800071a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800071c:	4b15      	ldr	r3, [pc, #84]	@ (8000774 <MX_I2C1_Init+0x74>)
 800071e:	2200      	movs	r2, #0
 8000720:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000722:	4b14      	ldr	r3, [pc, #80]	@ (8000774 <MX_I2C1_Init+0x74>)
 8000724:	2200      	movs	r2, #0
 8000726:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000728:	4b12      	ldr	r3, [pc, #72]	@ (8000774 <MX_I2C1_Init+0x74>)
 800072a:	2200      	movs	r2, #0
 800072c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800072e:	4b11      	ldr	r3, [pc, #68]	@ (8000774 <MX_I2C1_Init+0x74>)
 8000730:	2200      	movs	r2, #0
 8000732:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000734:	4b0f      	ldr	r3, [pc, #60]	@ (8000774 <MX_I2C1_Init+0x74>)
 8000736:	2200      	movs	r2, #0
 8000738:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800073a:	480e      	ldr	r0, [pc, #56]	@ (8000774 <MX_I2C1_Init+0x74>)
 800073c:	f001 f800 	bl	8001740 <HAL_I2C_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000746:	f000 f9ff 	bl	8000b48 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800074a:	2100      	movs	r1, #0
 800074c:	4809      	ldr	r0, [pc, #36]	@ (8000774 <MX_I2C1_Init+0x74>)
 800074e:	f001 fd83 	bl	8002258 <HAL_I2CEx_ConfigAnalogFilter>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000758:	f000 f9f6 	bl	8000b48 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800075c:	2100      	movs	r1, #0
 800075e:	4805      	ldr	r0, [pc, #20]	@ (8000774 <MX_I2C1_Init+0x74>)
 8000760:	f001 fdc5 	bl	80022ee <HAL_I2CEx_ConfigDigitalFilter>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800076a:	f000 f9ed 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000078 	.word	0x20000078
 8000778:	40005400 	.word	0x40005400
 800077c:	00201d2b 	.word	0x00201d2b

08000780 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b09a      	sub	sp, #104	@ 0x68
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000786:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000794:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007a0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]
 80007b0:	615a      	str	r2, [r3, #20]
 80007b2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007b4:	1d3b      	adds	r3, r7, #4
 80007b6:	222c      	movs	r2, #44	@ 0x2c
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f005 fd74 	bl	80062a8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007c0:	4b49      	ldr	r3, [pc, #292]	@ (80008e8 <MX_TIM1_Init+0x168>)
 80007c2:	4a4a      	ldr	r2, [pc, #296]	@ (80008ec <MX_TIM1_Init+0x16c>)
 80007c4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 80007c6:	4b48      	ldr	r3, [pc, #288]	@ (80008e8 <MX_TIM1_Init+0x168>)
 80007c8:	224f      	movs	r2, #79	@ 0x4f
 80007ca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007cc:	4b46      	ldr	r3, [pc, #280]	@ (80008e8 <MX_TIM1_Init+0x168>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000-1;
 80007d2:	4b45      	ldr	r3, [pc, #276]	@ (80008e8 <MX_TIM1_Init+0x168>)
 80007d4:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80007d8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007da:	4b43      	ldr	r3, [pc, #268]	@ (80008e8 <MX_TIM1_Init+0x168>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007e0:	4b41      	ldr	r3, [pc, #260]	@ (80008e8 <MX_TIM1_Init+0x168>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007e6:	4b40      	ldr	r3, [pc, #256]	@ (80008e8 <MX_TIM1_Init+0x168>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007ec:	483e      	ldr	r0, [pc, #248]	@ (80008e8 <MX_TIM1_Init+0x168>)
 80007ee:	f003 f94f 	bl	8003a90 <HAL_TIM_Base_Init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80007f8:	f000 f9a6 	bl	8000b48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000800:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000802:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000806:	4619      	mov	r1, r3
 8000808:	4837      	ldr	r0, [pc, #220]	@ (80008e8 <MX_TIM1_Init+0x168>)
 800080a:	f003 fbf9 	bl	8004000 <HAL_TIM_ConfigClockSource>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000814:	f000 f998 	bl	8000b48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000818:	4833      	ldr	r0, [pc, #204]	@ (80008e8 <MX_TIM1_Init+0x168>)
 800081a:	f003 f990 	bl	8003b3e <HAL_TIM_PWM_Init>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000824:	f000 f990 	bl	8000b48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000828:	2300      	movs	r3, #0
 800082a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800082c:	2300      	movs	r3, #0
 800082e:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000830:	2300      	movs	r3, #0
 8000832:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000834:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000838:	4619      	mov	r1, r3
 800083a:	482b      	ldr	r0, [pc, #172]	@ (80008e8 <MX_TIM1_Init+0x168>)
 800083c:	f004 f894 	bl	8004968 <HAL_TIMEx_MasterConfigSynchronization>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000846:	f000 f97f 	bl	8000b48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800084a:	2360      	movs	r3, #96	@ 0x60
 800084c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800084e:	2300      	movs	r3, #0
 8000850:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000852:	2300      	movs	r3, #0
 8000854:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000856:	2300      	movs	r3, #0
 8000858:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800085a:	2300      	movs	r3, #0
 800085c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800085e:	2300      	movs	r3, #0
 8000860:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000862:	2300      	movs	r3, #0
 8000864:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000866:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800086a:	2200      	movs	r2, #0
 800086c:	4619      	mov	r1, r3
 800086e:	481e      	ldr	r0, [pc, #120]	@ (80008e8 <MX_TIM1_Init+0x168>)
 8000870:	f003 fab2 	bl	8003dd8 <HAL_TIM_PWM_ConfigChannel>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800087a:	f000 f965 	bl	8000b48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800087e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000882:	220c      	movs	r2, #12
 8000884:	4619      	mov	r1, r3
 8000886:	4818      	ldr	r0, [pc, #96]	@ (80008e8 <MX_TIM1_Init+0x168>)
 8000888:	f003 faa6 	bl	8003dd8 <HAL_TIM_PWM_ConfigChannel>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000892:	f000 f959 	bl	8000b48 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000896:	2300      	movs	r3, #0
 8000898:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800089a:	2300      	movs	r3, #0
 800089c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800089e:	2300      	movs	r3, #0
 80008a0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008a6:	2300      	movs	r3, #0
 80008a8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008aa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008ae:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80008b4:	2300      	movs	r3, #0
 80008b6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80008b8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80008bc:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	4619      	mov	r1, r3
 80008ca:	4807      	ldr	r0, [pc, #28]	@ (80008e8 <MX_TIM1_Init+0x168>)
 80008cc:	f004 f8ba 	bl	8004a44 <HAL_TIMEx_ConfigBreakDeadTime>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 80008d6:	f000 f937 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008da:	4803      	ldr	r0, [pc, #12]	@ (80008e8 <MX_TIM1_Init+0x168>)
 80008dc:	f000 f9e8 	bl	8000cb0 <HAL_TIM_MspPostInit>

}
 80008e0:	bf00      	nop
 80008e2:	3768      	adds	r7, #104	@ 0x68
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	200000cc 	.word	0x200000cc
 80008ec:	40012c00 	.word	0x40012c00

080008f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08e      	sub	sp, #56	@ 0x38
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000904:	f107 031c 	add.w	r3, r7, #28
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000910:	463b      	mov	r3, r7
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	609a      	str	r2, [r3, #8]
 800091a:	60da      	str	r2, [r3, #12]
 800091c:	611a      	str	r2, [r3, #16]
 800091e:	615a      	str	r2, [r3, #20]
 8000920:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000922:	4b33      	ldr	r3, [pc, #204]	@ (80009f0 <MX_TIM2_Init+0x100>)
 8000924:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000928:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 800092a:	4b31      	ldr	r3, [pc, #196]	@ (80009f0 <MX_TIM2_Init+0x100>)
 800092c:	224f      	movs	r2, #79	@ 0x4f
 800092e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000930:	4b2f      	ldr	r3, [pc, #188]	@ (80009f0 <MX_TIM2_Init+0x100>)
 8000932:	2200      	movs	r2, #0
 8000934:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 8000936:	4b2e      	ldr	r3, [pc, #184]	@ (80009f0 <MX_TIM2_Init+0x100>)
 8000938:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 800093c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800093e:	4b2c      	ldr	r3, [pc, #176]	@ (80009f0 <MX_TIM2_Init+0x100>)
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000944:	4b2a      	ldr	r3, [pc, #168]	@ (80009f0 <MX_TIM2_Init+0x100>)
 8000946:	2200      	movs	r2, #0
 8000948:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800094a:	4829      	ldr	r0, [pc, #164]	@ (80009f0 <MX_TIM2_Init+0x100>)
 800094c:	f003 f8a0 	bl	8003a90 <HAL_TIM_Base_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000956:	f000 f8f7 	bl	8000b48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800095a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800095e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000960:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000964:	4619      	mov	r1, r3
 8000966:	4822      	ldr	r0, [pc, #136]	@ (80009f0 <MX_TIM2_Init+0x100>)
 8000968:	f003 fb4a 	bl	8004000 <HAL_TIM_ConfigClockSource>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000972:	f000 f8e9 	bl	8000b48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000976:	481e      	ldr	r0, [pc, #120]	@ (80009f0 <MX_TIM2_Init+0x100>)
 8000978:	f003 f8e1 	bl	8003b3e <HAL_TIM_PWM_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000982:	f000 f8e1 	bl	8000b48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000986:	2300      	movs	r3, #0
 8000988:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800098a:	2300      	movs	r3, #0
 800098c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	4619      	mov	r1, r3
 8000994:	4816      	ldr	r0, [pc, #88]	@ (80009f0 <MX_TIM2_Init+0x100>)
 8000996:	f003 ffe7 	bl	8004968 <HAL_TIMEx_MasterConfigSynchronization>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80009a0:	f000 f8d2 	bl	8000b48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009a4:	2360      	movs	r3, #96	@ 0x60
 80009a6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80009a8:	2300      	movs	r3, #0
 80009aa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009ac:	2300      	movs	r3, #0
 80009ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009b0:	2300      	movs	r3, #0
 80009b2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009b4:	463b      	mov	r3, r7
 80009b6:	2200      	movs	r2, #0
 80009b8:	4619      	mov	r1, r3
 80009ba:	480d      	ldr	r0, [pc, #52]	@ (80009f0 <MX_TIM2_Init+0x100>)
 80009bc:	f003 fa0c 	bl	8003dd8 <HAL_TIM_PWM_ConfigChannel>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80009c6:	f000 f8bf 	bl	8000b48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009ca:	463b      	mov	r3, r7
 80009cc:	2204      	movs	r2, #4
 80009ce:	4619      	mov	r1, r3
 80009d0:	4807      	ldr	r0, [pc, #28]	@ (80009f0 <MX_TIM2_Init+0x100>)
 80009d2:	f003 fa01 	bl	8003dd8 <HAL_TIM_PWM_ConfigChannel>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80009dc:	f000 f8b4 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80009e0:	4803      	ldr	r0, [pc, #12]	@ (80009f0 <MX_TIM2_Init+0x100>)
 80009e2:	f000 f965 	bl	8000cb0 <HAL_TIM_MspPostInit>

}
 80009e6:	bf00      	nop
 80009e8:	3738      	adds	r7, #56	@ 0x38
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000118 	.word	0x20000118

080009f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009f8:	4b14      	ldr	r3, [pc, #80]	@ (8000a4c <MX_USART1_UART_Init+0x58>)
 80009fa:	4a15      	ldr	r2, [pc, #84]	@ (8000a50 <MX_USART1_UART_Init+0x5c>)
 80009fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80009fe:	4b13      	ldr	r3, [pc, #76]	@ (8000a4c <MX_USART1_UART_Init+0x58>)
 8000a00:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000a04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a06:	4b11      	ldr	r3, [pc, #68]	@ (8000a4c <MX_USART1_UART_Init+0x58>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a4c <MX_USART1_UART_Init+0x58>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a12:	4b0e      	ldr	r3, [pc, #56]	@ (8000a4c <MX_USART1_UART_Init+0x58>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a18:	4b0c      	ldr	r3, [pc, #48]	@ (8000a4c <MX_USART1_UART_Init+0x58>)
 8000a1a:	220c      	movs	r2, #12
 8000a1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a4c <MX_USART1_UART_Init+0x58>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a24:	4b09      	ldr	r3, [pc, #36]	@ (8000a4c <MX_USART1_UART_Init+0x58>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a2a:	4b08      	ldr	r3, [pc, #32]	@ (8000a4c <MX_USART1_UART_Init+0x58>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a30:	4b06      	ldr	r3, [pc, #24]	@ (8000a4c <MX_USART1_UART_Init+0x58>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a36:	4805      	ldr	r0, [pc, #20]	@ (8000a4c <MX_USART1_UART_Init+0x58>)
 8000a38:	f004 f87c 	bl	8004b34 <HAL_UART_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000a42:	f000 f881 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20000164 	.word	0x20000164
 8000a50:	40013800 	.word	0x40013800

08000a54 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a58:	4b14      	ldr	r3, [pc, #80]	@ (8000aac <MX_USART2_UART_Init+0x58>)
 8000a5a:	4a15      	ldr	r2, [pc, #84]	@ (8000ab0 <MX_USART2_UART_Init+0x5c>)
 8000a5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a5e:	4b13      	ldr	r3, [pc, #76]	@ (8000aac <MX_USART2_UART_Init+0x58>)
 8000a60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a66:	4b11      	ldr	r3, [pc, #68]	@ (8000aac <MX_USART2_UART_Init+0x58>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000aac <MX_USART2_UART_Init+0x58>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a72:	4b0e      	ldr	r3, [pc, #56]	@ (8000aac <MX_USART2_UART_Init+0x58>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a78:	4b0c      	ldr	r3, [pc, #48]	@ (8000aac <MX_USART2_UART_Init+0x58>)
 8000a7a:	220c      	movs	r2, #12
 8000a7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000aac <MX_USART2_UART_Init+0x58>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a84:	4b09      	ldr	r3, [pc, #36]	@ (8000aac <MX_USART2_UART_Init+0x58>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a8a:	4b08      	ldr	r3, [pc, #32]	@ (8000aac <MX_USART2_UART_Init+0x58>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a90:	4b06      	ldr	r3, [pc, #24]	@ (8000aac <MX_USART2_UART_Init+0x58>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a96:	4805      	ldr	r0, [pc, #20]	@ (8000aac <MX_USART2_UART_Init+0x58>)
 8000a98:	f004 f84c 	bl	8004b34 <HAL_UART_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000aa2:	f000 f851 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	200001ec 	.word	0x200001ec
 8000ab0:	40004400 	.word	0x40004400

08000ab4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b088      	sub	sp, #32
 8000ab8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aba:	f107 030c 	add.w	r3, r7, #12
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	605a      	str	r2, [r3, #4]
 8000ac4:	609a      	str	r2, [r3, #8]
 8000ac6:	60da      	str	r2, [r3, #12]
 8000ac8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000aca:	4b1d      	ldr	r3, [pc, #116]	@ (8000b40 <MX_GPIO_Init+0x8c>)
 8000acc:	695b      	ldr	r3, [r3, #20]
 8000ace:	4a1c      	ldr	r2, [pc, #112]	@ (8000b40 <MX_GPIO_Init+0x8c>)
 8000ad0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ad4:	6153      	str	r3, [r2, #20]
 8000ad6:	4b1a      	ldr	r3, [pc, #104]	@ (8000b40 <MX_GPIO_Init+0x8c>)
 8000ad8:	695b      	ldr	r3, [r3, #20]
 8000ada:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ade:	60bb      	str	r3, [r7, #8]
 8000ae0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae2:	4b17      	ldr	r3, [pc, #92]	@ (8000b40 <MX_GPIO_Init+0x8c>)
 8000ae4:	695b      	ldr	r3, [r3, #20]
 8000ae6:	4a16      	ldr	r2, [pc, #88]	@ (8000b40 <MX_GPIO_Init+0x8c>)
 8000ae8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000aec:	6153      	str	r3, [r2, #20]
 8000aee:	4b14      	ldr	r3, [pc, #80]	@ (8000b40 <MX_GPIO_Init+0x8c>)
 8000af0:	695b      	ldr	r3, [r3, #20]
 8000af2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afa:	4b11      	ldr	r3, [pc, #68]	@ (8000b40 <MX_GPIO_Init+0x8c>)
 8000afc:	695b      	ldr	r3, [r3, #20]
 8000afe:	4a10      	ldr	r2, [pc, #64]	@ (8000b40 <MX_GPIO_Init+0x8c>)
 8000b00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b04:	6153      	str	r3, [r2, #20]
 8000b06:	4b0e      	ldr	r3, [pc, #56]	@ (8000b40 <MX_GPIO_Init+0x8c>)
 8000b08:	695b      	ldr	r3, [r3, #20]
 8000b0a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b0e:	603b      	str	r3, [r7, #0]
 8000b10:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2108      	movs	r1, #8
 8000b16:	480b      	ldr	r0, [pc, #44]	@ (8000b44 <MX_GPIO_Init+0x90>)
 8000b18:	f000 fdfa 	bl	8001710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b1c:	2308      	movs	r3, #8
 8000b1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b20:	2301      	movs	r3, #1
 8000b22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2c:	f107 030c 	add.w	r3, r7, #12
 8000b30:	4619      	mov	r1, r3
 8000b32:	4804      	ldr	r0, [pc, #16]	@ (8000b44 <MX_GPIO_Init+0x90>)
 8000b34:	f000 fc7a 	bl	800142c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b38:	bf00      	nop
 8000b3a:	3720      	adds	r7, #32
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40021000 	.word	0x40021000
 8000b44:	48000400 	.word	0x48000400

08000b48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b4c:	b672      	cpsid	i
}
 8000b4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b50:	bf00      	nop
 8000b52:	e7fd      	b.n	8000b50 <Error_Handler+0x8>

08000b54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000b98 <HAL_MspInit+0x44>)
 8000b5c:	699b      	ldr	r3, [r3, #24]
 8000b5e:	4a0e      	ldr	r2, [pc, #56]	@ (8000b98 <HAL_MspInit+0x44>)
 8000b60:	f043 0301 	orr.w	r3, r3, #1
 8000b64:	6193      	str	r3, [r2, #24]
 8000b66:	4b0c      	ldr	r3, [pc, #48]	@ (8000b98 <HAL_MspInit+0x44>)
 8000b68:	699b      	ldr	r3, [r3, #24]
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b72:	4b09      	ldr	r3, [pc, #36]	@ (8000b98 <HAL_MspInit+0x44>)
 8000b74:	69db      	ldr	r3, [r3, #28]
 8000b76:	4a08      	ldr	r2, [pc, #32]	@ (8000b98 <HAL_MspInit+0x44>)
 8000b78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b7c:	61d3      	str	r3, [r2, #28]
 8000b7e:	4b06      	ldr	r3, [pc, #24]	@ (8000b98 <HAL_MspInit+0x44>)
 8000b80:	69db      	ldr	r3, [r3, #28]
 8000b82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b86:	603b      	str	r3, [r7, #0]
 8000b88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	40021000 	.word	0x40021000

08000b9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08a      	sub	sp, #40	@ 0x28
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a17      	ldr	r2, [pc, #92]	@ (8000c18 <HAL_I2C_MspInit+0x7c>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d127      	bne.n	8000c0e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bbe:	4b17      	ldr	r3, [pc, #92]	@ (8000c1c <HAL_I2C_MspInit+0x80>)
 8000bc0:	695b      	ldr	r3, [r3, #20]
 8000bc2:	4a16      	ldr	r2, [pc, #88]	@ (8000c1c <HAL_I2C_MspInit+0x80>)
 8000bc4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000bc8:	6153      	str	r3, [r2, #20]
 8000bca:	4b14      	ldr	r3, [pc, #80]	@ (8000c1c <HAL_I2C_MspInit+0x80>)
 8000bcc:	695b      	ldr	r3, [r3, #20]
 8000bce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000bd2:	613b      	str	r3, [r7, #16]
 8000bd4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bd6:	23c0      	movs	r3, #192	@ 0xc0
 8000bd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bda:	2312      	movs	r3, #18
 8000bdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000be2:	2303      	movs	r3, #3
 8000be4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000be6:	2304      	movs	r3, #4
 8000be8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bea:	f107 0314 	add.w	r3, r7, #20
 8000bee:	4619      	mov	r1, r3
 8000bf0:	480b      	ldr	r0, [pc, #44]	@ (8000c20 <HAL_I2C_MspInit+0x84>)
 8000bf2:	f000 fc1b 	bl	800142c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bf6:	4b09      	ldr	r3, [pc, #36]	@ (8000c1c <HAL_I2C_MspInit+0x80>)
 8000bf8:	69db      	ldr	r3, [r3, #28]
 8000bfa:	4a08      	ldr	r2, [pc, #32]	@ (8000c1c <HAL_I2C_MspInit+0x80>)
 8000bfc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c00:	61d3      	str	r3, [r2, #28]
 8000c02:	4b06      	ldr	r3, [pc, #24]	@ (8000c1c <HAL_I2C_MspInit+0x80>)
 8000c04:	69db      	ldr	r3, [r3, #28]
 8000c06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000c0e:	bf00      	nop
 8000c10:	3728      	adds	r7, #40	@ 0x28
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40005400 	.word	0x40005400
 8000c1c:	40021000 	.word	0x40021000
 8000c20:	48000400 	.word	0x48000400

08000c24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b087      	sub	sp, #28
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a1c      	ldr	r2, [pc, #112]	@ (8000ca4 <HAL_TIM_Base_MspInit+0x80>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d10c      	bne.n	8000c50 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c36:	4b1c      	ldr	r3, [pc, #112]	@ (8000ca8 <HAL_TIM_Base_MspInit+0x84>)
 8000c38:	699b      	ldr	r3, [r3, #24]
 8000c3a:	4a1b      	ldr	r2, [pc, #108]	@ (8000ca8 <HAL_TIM_Base_MspInit+0x84>)
 8000c3c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000c40:	6193      	str	r3, [r2, #24]
 8000c42:	4b19      	ldr	r3, [pc, #100]	@ (8000ca8 <HAL_TIM_Base_MspInit+0x84>)
 8000c44:	699b      	ldr	r3, [r3, #24]
 8000c46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000c4a:	617b      	str	r3, [r7, #20]
 8000c4c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000c4e:	e022      	b.n	8000c96 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM2)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c58:	d10c      	bne.n	8000c74 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c5a:	4b13      	ldr	r3, [pc, #76]	@ (8000ca8 <HAL_TIM_Base_MspInit+0x84>)
 8000c5c:	69db      	ldr	r3, [r3, #28]
 8000c5e:	4a12      	ldr	r2, [pc, #72]	@ (8000ca8 <HAL_TIM_Base_MspInit+0x84>)
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	61d3      	str	r3, [r2, #28]
 8000c66:	4b10      	ldr	r3, [pc, #64]	@ (8000ca8 <HAL_TIM_Base_MspInit+0x84>)
 8000c68:	69db      	ldr	r3, [r3, #28]
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	613b      	str	r3, [r7, #16]
 8000c70:	693b      	ldr	r3, [r7, #16]
}
 8000c72:	e010      	b.n	8000c96 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a0c      	ldr	r2, [pc, #48]	@ (8000cac <HAL_TIM_Base_MspInit+0x88>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d10b      	bne.n	8000c96 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca8 <HAL_TIM_Base_MspInit+0x84>)
 8000c80:	69db      	ldr	r3, [r3, #28]
 8000c82:	4a09      	ldr	r2, [pc, #36]	@ (8000ca8 <HAL_TIM_Base_MspInit+0x84>)
 8000c84:	f043 0302 	orr.w	r3, r3, #2
 8000c88:	61d3      	str	r3, [r2, #28]
 8000c8a:	4b07      	ldr	r3, [pc, #28]	@ (8000ca8 <HAL_TIM_Base_MspInit+0x84>)
 8000c8c:	69db      	ldr	r3, [r3, #28]
 8000c8e:	f003 0302 	and.w	r3, r3, #2
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]
}
 8000c96:	bf00      	nop
 8000c98:	371c      	adds	r7, #28
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	40012c00 	.word	0x40012c00
 8000ca8:	40021000 	.word	0x40021000
 8000cac:	40000400 	.word	0x40000400

08000cb0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08a      	sub	sp, #40	@ 0x28
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a2c      	ldr	r2, [pc, #176]	@ (8000d80 <HAL_TIM_MspPostInit+0xd0>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d130      	bne.n	8000d34 <HAL_TIM_MspPostInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd2:	4b2c      	ldr	r3, [pc, #176]	@ (8000d84 <HAL_TIM_MspPostInit+0xd4>)
 8000cd4:	695b      	ldr	r3, [r3, #20]
 8000cd6:	4a2b      	ldr	r2, [pc, #172]	@ (8000d84 <HAL_TIM_MspPostInit+0xd4>)
 8000cd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cdc:	6153      	str	r3, [r2, #20]
 8000cde:	4b29      	ldr	r3, [pc, #164]	@ (8000d84 <HAL_TIM_MspPostInit+0xd4>)
 8000ce0:	695b      	ldr	r3, [r3, #20]
 8000ce2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ce6:	613b      	str	r3, [r7, #16]
 8000ce8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000cea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000cfc:	2306      	movs	r3, #6
 8000cfe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	4619      	mov	r1, r3
 8000d06:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d0a:	f000 fb8f 	bl	800142c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000d0e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000d12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d14:	2302      	movs	r3, #2
 8000d16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 8000d20:	230b      	movs	r3, #11
 8000d22:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d24:	f107 0314 	add.w	r3, r7, #20
 8000d28:	4619      	mov	r1, r3
 8000d2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d2e:	f000 fb7d 	bl	800142c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000d32:	e021      	b.n	8000d78 <HAL_TIM_MspPostInit+0xc8>
  else if(htim->Instance==TIM2)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d3c:	d11c      	bne.n	8000d78 <HAL_TIM_MspPostInit+0xc8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3e:	4b11      	ldr	r3, [pc, #68]	@ (8000d84 <HAL_TIM_MspPostInit+0xd4>)
 8000d40:	695b      	ldr	r3, [r3, #20]
 8000d42:	4a10      	ldr	r2, [pc, #64]	@ (8000d84 <HAL_TIM_MspPostInit+0xd4>)
 8000d44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d48:	6153      	str	r3, [r2, #20]
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d84 <HAL_TIM_MspPostInit+0xd4>)
 8000d4c:	695b      	ldr	r3, [r3, #20]
 8000d4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d56:	2303      	movs	r3, #3
 8000d58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d62:	2300      	movs	r3, #0
 8000d64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d66:	2301      	movs	r3, #1
 8000d68:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6a:	f107 0314 	add.w	r3, r7, #20
 8000d6e:	4619      	mov	r1, r3
 8000d70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d74:	f000 fb5a 	bl	800142c <HAL_GPIO_Init>
}
 8000d78:	bf00      	nop
 8000d7a:	3728      	adds	r7, #40	@ 0x28
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	40012c00 	.word	0x40012c00
 8000d84:	40021000 	.word	0x40021000

08000d88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08c      	sub	sp, #48	@ 0x30
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d90:	f107 031c 	add.w	r3, r7, #28
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a37      	ldr	r2, [pc, #220]	@ (8000e84 <HAL_UART_MspInit+0xfc>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d132      	bne.n	8000e10 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000daa:	4b37      	ldr	r3, [pc, #220]	@ (8000e88 <HAL_UART_MspInit+0x100>)
 8000dac:	699b      	ldr	r3, [r3, #24]
 8000dae:	4a36      	ldr	r2, [pc, #216]	@ (8000e88 <HAL_UART_MspInit+0x100>)
 8000db0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000db4:	6193      	str	r3, [r2, #24]
 8000db6:	4b34      	ldr	r3, [pc, #208]	@ (8000e88 <HAL_UART_MspInit+0x100>)
 8000db8:	699b      	ldr	r3, [r3, #24]
 8000dba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dbe:	61bb      	str	r3, [r7, #24]
 8000dc0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc2:	4b31      	ldr	r3, [pc, #196]	@ (8000e88 <HAL_UART_MspInit+0x100>)
 8000dc4:	695b      	ldr	r3, [r3, #20]
 8000dc6:	4a30      	ldr	r2, [pc, #192]	@ (8000e88 <HAL_UART_MspInit+0x100>)
 8000dc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dcc:	6153      	str	r3, [r2, #20]
 8000dce:	4b2e      	ldr	r3, [pc, #184]	@ (8000e88 <HAL_UART_MspInit+0x100>)
 8000dd0:	695b      	ldr	r3, [r3, #20]
 8000dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dd6:	617b      	str	r3, [r7, #20]
 8000dd8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000dda:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000dde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de0:	2302      	movs	r3, #2
 8000de2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000de8:	2303      	movs	r3, #3
 8000dea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000dec:	2307      	movs	r3, #7
 8000dee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df0:	f107 031c 	add.w	r3, r7, #28
 8000df4:	4619      	mov	r1, r3
 8000df6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dfa:	f000 fb17 	bl	800142c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2100      	movs	r1, #0
 8000e02:	2025      	movs	r0, #37	@ 0x25
 8000e04:	f000 fa5f 	bl	80012c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e08:	2025      	movs	r0, #37	@ 0x25
 8000e0a:	f000 fa78 	bl	80012fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e0e:	e035      	b.n	8000e7c <HAL_UART_MspInit+0xf4>
  else if(huart->Instance==USART2)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a1d      	ldr	r2, [pc, #116]	@ (8000e8c <HAL_UART_MspInit+0x104>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d130      	bne.n	8000e7c <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e1a:	4b1b      	ldr	r3, [pc, #108]	@ (8000e88 <HAL_UART_MspInit+0x100>)
 8000e1c:	69db      	ldr	r3, [r3, #28]
 8000e1e:	4a1a      	ldr	r2, [pc, #104]	@ (8000e88 <HAL_UART_MspInit+0x100>)
 8000e20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e24:	61d3      	str	r3, [r2, #28]
 8000e26:	4b18      	ldr	r3, [pc, #96]	@ (8000e88 <HAL_UART_MspInit+0x100>)
 8000e28:	69db      	ldr	r3, [r3, #28]
 8000e2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e2e:	613b      	str	r3, [r7, #16]
 8000e30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e32:	4b15      	ldr	r3, [pc, #84]	@ (8000e88 <HAL_UART_MspInit+0x100>)
 8000e34:	695b      	ldr	r3, [r3, #20]
 8000e36:	4a14      	ldr	r2, [pc, #80]	@ (8000e88 <HAL_UART_MspInit+0x100>)
 8000e38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e3c:	6153      	str	r3, [r2, #20]
 8000e3e:	4b12      	ldr	r3, [pc, #72]	@ (8000e88 <HAL_UART_MspInit+0x100>)
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000e4a:	230c      	movs	r3, #12
 8000e4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e56:	2303      	movs	r3, #3
 8000e58:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e5a:	2307      	movs	r3, #7
 8000e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5e:	f107 031c 	add.w	r3, r7, #28
 8000e62:	4619      	mov	r1, r3
 8000e64:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e68:	f000 fae0 	bl	800142c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2100      	movs	r1, #0
 8000e70:	2026      	movs	r0, #38	@ 0x26
 8000e72:	f000 fa28 	bl	80012c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e76:	2026      	movs	r0, #38	@ 0x26
 8000e78:	f000 fa41 	bl	80012fe <HAL_NVIC_EnableIRQ>
}
 8000e7c:	bf00      	nop
 8000e7e:	3730      	adds	r7, #48	@ 0x30
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40013800 	.word	0x40013800
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	40004400 	.word	0x40004400

08000e90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e94:	bf00      	nop
 8000e96:	e7fd      	b.n	8000e94 <NMI_Handler+0x4>

08000e98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e9c:	bf00      	nop
 8000e9e:	e7fd      	b.n	8000e9c <HardFault_Handler+0x4>

08000ea0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea4:	bf00      	nop
 8000ea6:	e7fd      	b.n	8000ea4 <MemManage_Handler+0x4>

08000ea8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eac:	bf00      	nop
 8000eae:	e7fd      	b.n	8000eac <BusFault_Handler+0x4>

08000eb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb4:	bf00      	nop
 8000eb6:	e7fd      	b.n	8000eb4 <UsageFault_Handler+0x4>

08000eb8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr

08000ec6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ee6:	f000 f8cf 	bl	8001088 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
	...

08000ef0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ef4:	4802      	ldr	r0, [pc, #8]	@ (8000f00 <USART1_IRQHandler+0x10>)
 8000ef6:	f004 f801 	bl	8004efc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000164 	.word	0x20000164

08000f04 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f08:	4802      	ldr	r0, [pc, #8]	@ (8000f14 <USART2_IRQHandler+0x10>)
 8000f0a:	f003 fff7 	bl	8004efc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	200001ec 	.word	0x200001ec

08000f18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f20:	4a14      	ldr	r2, [pc, #80]	@ (8000f74 <_sbrk+0x5c>)
 8000f22:	4b15      	ldr	r3, [pc, #84]	@ (8000f78 <_sbrk+0x60>)
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f2c:	4b13      	ldr	r3, [pc, #76]	@ (8000f7c <_sbrk+0x64>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d102      	bne.n	8000f3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f34:	4b11      	ldr	r3, [pc, #68]	@ (8000f7c <_sbrk+0x64>)
 8000f36:	4a12      	ldr	r2, [pc, #72]	@ (8000f80 <_sbrk+0x68>)
 8000f38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f3a:	4b10      	ldr	r3, [pc, #64]	@ (8000f7c <_sbrk+0x64>)
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4413      	add	r3, r2
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d207      	bcs.n	8000f58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f48:	f005 f9c8 	bl	80062dc <__errno>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	220c      	movs	r2, #12
 8000f50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f52:	f04f 33ff 	mov.w	r3, #4294967295
 8000f56:	e009      	b.n	8000f6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f58:	4b08      	ldr	r3, [pc, #32]	@ (8000f7c <_sbrk+0x64>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f5e:	4b07      	ldr	r3, [pc, #28]	@ (8000f7c <_sbrk+0x64>)
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4413      	add	r3, r2
 8000f66:	4a05      	ldr	r2, [pc, #20]	@ (8000f7c <_sbrk+0x64>)
 8000f68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3718      	adds	r7, #24
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20003000 	.word	0x20003000
 8000f78:	00000400 	.word	0x00000400
 8000f7c:	20000278 	.word	0x20000278
 8000f80:	200003c8 	.word	0x200003c8

08000f84 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f88:	4b06      	ldr	r3, [pc, #24]	@ (8000fa4 <SystemInit+0x20>)
 8000f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f8e:	4a05      	ldr	r2, [pc, #20]	@ (8000fa4 <SystemInit+0x20>)
 8000f90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000fa8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fe0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fac:	f7ff ffea 	bl	8000f84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fb0:	480c      	ldr	r0, [pc, #48]	@ (8000fe4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fb2:	490d      	ldr	r1, [pc, #52]	@ (8000fe8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fb4:	4a0d      	ldr	r2, [pc, #52]	@ (8000fec <LoopForever+0xe>)
  movs r3, #0
 8000fb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fb8:	e002      	b.n	8000fc0 <LoopCopyDataInit>

08000fba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fbe:	3304      	adds	r3, #4

08000fc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc4:	d3f9      	bcc.n	8000fba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fc6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fc8:	4c0a      	ldr	r4, [pc, #40]	@ (8000ff4 <LoopForever+0x16>)
  movs r3, #0
 8000fca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fcc:	e001      	b.n	8000fd2 <LoopFillZerobss>

08000fce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd0:	3204      	adds	r2, #4

08000fd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd4:	d3fb      	bcc.n	8000fce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fd6:	f005 f987 	bl	80062e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fda:	f7ff fafb 	bl	80005d4 <main>

08000fde <LoopForever>:

LoopForever:
    b LoopForever
 8000fde:	e7fe      	b.n	8000fde <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000fe0:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000fe4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fe8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000fec:	08006e04 	.word	0x08006e04
  ldr r2, =_sbss
 8000ff0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000ff4:	200003c8 	.word	0x200003c8

08000ff8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ff8:	e7fe      	b.n	8000ff8 <ADC1_2_IRQHandler>
	...

08000ffc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001000:	4b08      	ldr	r3, [pc, #32]	@ (8001024 <HAL_Init+0x28>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a07      	ldr	r2, [pc, #28]	@ (8001024 <HAL_Init+0x28>)
 8001006:	f043 0310 	orr.w	r3, r3, #16
 800100a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800100c:	2003      	movs	r0, #3
 800100e:	f000 f94f 	bl	80012b0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001012:	2000      	movs	r0, #0
 8001014:	f000 f808 	bl	8001028 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001018:	f7ff fd9c 	bl	8000b54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800101c:	2300      	movs	r3, #0
}
 800101e:	4618      	mov	r0, r3
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40022000 	.word	0x40022000

08001028 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001030:	4b12      	ldr	r3, [pc, #72]	@ (800107c <HAL_InitTick+0x54>)
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	4b12      	ldr	r3, [pc, #72]	@ (8001080 <HAL_InitTick+0x58>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	4619      	mov	r1, r3
 800103a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800103e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001042:	fbb2 f3f3 	udiv	r3, r2, r3
 8001046:	4618      	mov	r0, r3
 8001048:	f000 f967 	bl	800131a <HAL_SYSTICK_Config>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e00e      	b.n	8001074 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2b0f      	cmp	r3, #15
 800105a:	d80a      	bhi.n	8001072 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800105c:	2200      	movs	r2, #0
 800105e:	6879      	ldr	r1, [r7, #4]
 8001060:	f04f 30ff 	mov.w	r0, #4294967295
 8001064:	f000 f92f 	bl	80012c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001068:	4a06      	ldr	r2, [pc, #24]	@ (8001084 <HAL_InitTick+0x5c>)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800106e:	2300      	movs	r3, #0
 8001070:	e000      	b.n	8001074 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
}
 8001074:	4618      	mov	r0, r3
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	20000000 	.word	0x20000000
 8001080:	20000008 	.word	0x20000008
 8001084:	20000004 	.word	0x20000004

08001088 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800108c:	4b06      	ldr	r3, [pc, #24]	@ (80010a8 <HAL_IncTick+0x20>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	461a      	mov	r2, r3
 8001092:	4b06      	ldr	r3, [pc, #24]	@ (80010ac <HAL_IncTick+0x24>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4413      	add	r3, r2
 8001098:	4a04      	ldr	r2, [pc, #16]	@ (80010ac <HAL_IncTick+0x24>)
 800109a:	6013      	str	r3, [r2, #0]
}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	20000008 	.word	0x20000008
 80010ac:	2000027c 	.word	0x2000027c

080010b0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  return uwTick;  
 80010b4:	4b03      	ldr	r3, [pc, #12]	@ (80010c4 <HAL_GetTick+0x14>)
 80010b6:	681b      	ldr	r3, [r3, #0]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	2000027c 	.word	0x2000027c

080010c8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010d0:	f7ff ffee 	bl	80010b0 <HAL_GetTick>
 80010d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010e0:	d005      	beq.n	80010ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010e2:	4b0a      	ldr	r3, [pc, #40]	@ (800110c <HAL_Delay+0x44>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	461a      	mov	r2, r3
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	4413      	add	r3, r2
 80010ec:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80010ee:	bf00      	nop
 80010f0:	f7ff ffde 	bl	80010b0 <HAL_GetTick>
 80010f4:	4602      	mov	r2, r0
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	68fa      	ldr	r2, [r7, #12]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d8f7      	bhi.n	80010f0 <HAL_Delay+0x28>
  {
  }
}
 8001100:	bf00      	nop
 8001102:	bf00      	nop
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000008 	.word	0x20000008

08001110 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f003 0307 	and.w	r3, r3, #7
 800111e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001120:	4b0c      	ldr	r3, [pc, #48]	@ (8001154 <__NVIC_SetPriorityGrouping+0x44>)
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001126:	68ba      	ldr	r2, [r7, #8]
 8001128:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800112c:	4013      	ands	r3, r2
 800112e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001138:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800113c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001140:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001142:	4a04      	ldr	r2, [pc, #16]	@ (8001154 <__NVIC_SetPriorityGrouping+0x44>)
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	60d3      	str	r3, [r2, #12]
}
 8001148:	bf00      	nop
 800114a:	3714      	adds	r7, #20
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800115c:	4b04      	ldr	r3, [pc, #16]	@ (8001170 <__NVIC_GetPriorityGrouping+0x18>)
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	0a1b      	lsrs	r3, r3, #8
 8001162:	f003 0307 	and.w	r3, r3, #7
}
 8001166:	4618      	mov	r0, r3
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800117e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001182:	2b00      	cmp	r3, #0
 8001184:	db0b      	blt.n	800119e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	f003 021f 	and.w	r2, r3, #31
 800118c:	4907      	ldr	r1, [pc, #28]	@ (80011ac <__NVIC_EnableIRQ+0x38>)
 800118e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001192:	095b      	lsrs	r3, r3, #5
 8001194:	2001      	movs	r0, #1
 8001196:	fa00 f202 	lsl.w	r2, r0, r2
 800119a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800119e:	bf00      	nop
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	e000e100 	.word	0xe000e100

080011b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	6039      	str	r1, [r7, #0]
 80011ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	db0a      	blt.n	80011da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	b2da      	uxtb	r2, r3
 80011c8:	490c      	ldr	r1, [pc, #48]	@ (80011fc <__NVIC_SetPriority+0x4c>)
 80011ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ce:	0112      	lsls	r2, r2, #4
 80011d0:	b2d2      	uxtb	r2, r2
 80011d2:	440b      	add	r3, r1
 80011d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011d8:	e00a      	b.n	80011f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	b2da      	uxtb	r2, r3
 80011de:	4908      	ldr	r1, [pc, #32]	@ (8001200 <__NVIC_SetPriority+0x50>)
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	f003 030f 	and.w	r3, r3, #15
 80011e6:	3b04      	subs	r3, #4
 80011e8:	0112      	lsls	r2, r2, #4
 80011ea:	b2d2      	uxtb	r2, r2
 80011ec:	440b      	add	r3, r1
 80011ee:	761a      	strb	r2, [r3, #24]
}
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	e000e100 	.word	0xe000e100
 8001200:	e000ed00 	.word	0xe000ed00

08001204 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001204:	b480      	push	{r7}
 8001206:	b089      	sub	sp, #36	@ 0x24
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	f003 0307 	and.w	r3, r3, #7
 8001216:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	f1c3 0307 	rsb	r3, r3, #7
 800121e:	2b04      	cmp	r3, #4
 8001220:	bf28      	it	cs
 8001222:	2304      	movcs	r3, #4
 8001224:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	3304      	adds	r3, #4
 800122a:	2b06      	cmp	r3, #6
 800122c:	d902      	bls.n	8001234 <NVIC_EncodePriority+0x30>
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	3b03      	subs	r3, #3
 8001232:	e000      	b.n	8001236 <NVIC_EncodePriority+0x32>
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001238:	f04f 32ff 	mov.w	r2, #4294967295
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	43da      	mvns	r2, r3
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	401a      	ands	r2, r3
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800124c:	f04f 31ff 	mov.w	r1, #4294967295
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	fa01 f303 	lsl.w	r3, r1, r3
 8001256:	43d9      	mvns	r1, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800125c:	4313      	orrs	r3, r2
         );
}
 800125e:	4618      	mov	r0, r3
 8001260:	3724      	adds	r7, #36	@ 0x24
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
	...

0800126c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	3b01      	subs	r3, #1
 8001278:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800127c:	d301      	bcc.n	8001282 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800127e:	2301      	movs	r3, #1
 8001280:	e00f      	b.n	80012a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001282:	4a0a      	ldr	r2, [pc, #40]	@ (80012ac <SysTick_Config+0x40>)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3b01      	subs	r3, #1
 8001288:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800128a:	210f      	movs	r1, #15
 800128c:	f04f 30ff 	mov.w	r0, #4294967295
 8001290:	f7ff ff8e 	bl	80011b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001294:	4b05      	ldr	r3, [pc, #20]	@ (80012ac <SysTick_Config+0x40>)
 8001296:	2200      	movs	r2, #0
 8001298:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800129a:	4b04      	ldr	r3, [pc, #16]	@ (80012ac <SysTick_Config+0x40>)
 800129c:	2207      	movs	r2, #7
 800129e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	e000e010 	.word	0xe000e010

080012b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f7ff ff29 	bl	8001110 <__NVIC_SetPriorityGrouping>
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b086      	sub	sp, #24
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	4603      	mov	r3, r0
 80012ce:	60b9      	str	r1, [r7, #8]
 80012d0:	607a      	str	r2, [r7, #4]
 80012d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012d8:	f7ff ff3e 	bl	8001158 <__NVIC_GetPriorityGrouping>
 80012dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	68b9      	ldr	r1, [r7, #8]
 80012e2:	6978      	ldr	r0, [r7, #20]
 80012e4:	f7ff ff8e 	bl	8001204 <NVIC_EncodePriority>
 80012e8:	4602      	mov	r2, r0
 80012ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ee:	4611      	mov	r1, r2
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff ff5d 	bl	80011b0 <__NVIC_SetPriority>
}
 80012f6:	bf00      	nop
 80012f8:	3718      	adds	r7, #24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b082      	sub	sp, #8
 8001302:	af00      	add	r7, sp, #0
 8001304:	4603      	mov	r3, r0
 8001306:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff ff31 	bl	8001174 <__NVIC_EnableIRQ>
}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b082      	sub	sp, #8
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff ffa2 	bl	800126c <SysTick_Config>
 8001328:	4603      	mov	r3, r0
}
 800132a:	4618      	mov	r0, r3
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001332:	b480      	push	{r7}
 8001334:	b083      	sub	sp, #12
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d101      	bne.n	8001344 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e02e      	b.n	80013a2 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800134a:	2b02      	cmp	r3, #2
 800134c:	d008      	beq.n	8001360 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2204      	movs	r2, #4
 8001352:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2200      	movs	r2, #0
 8001358:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	e020      	b.n	80013a2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f022 020e 	bic.w	r2, r2, #14
 800136e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f022 0201 	bic.w	r2, r2, #1
 800137e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001388:	2101      	movs	r1, #1
 800138a:	fa01 f202 	lsl.w	r2, r1, r2
 800138e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2201      	movs	r2, #1
 8001394:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2200      	movs	r2, #0
 800139c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr

080013ae <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b084      	sub	sp, #16
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013b6:	2300      	movs	r3, #0
 80013b8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d005      	beq.n	80013d0 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2204      	movs	r2, #4
 80013c8:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	73fb      	strb	r3, [r7, #15]
 80013ce:	e027      	b.n	8001420 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f022 020e 	bic.w	r2, r2, #14
 80013de:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f022 0201 	bic.w	r2, r2, #1
 80013ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013f8:	2101      	movs	r1, #1
 80013fa:	fa01 f202 	lsl.w	r2, r1, r2
 80013fe:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2201      	movs	r2, #1
 8001404:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2200      	movs	r2, #0
 800140c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001414:	2b00      	cmp	r3, #0
 8001416:	d003      	beq.n	8001420 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	4798      	blx	r3
    }
  }
  return status;
 8001420:	7bfb      	ldrb	r3, [r7, #15]
}
 8001422:	4618      	mov	r0, r3
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
	...

0800142c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800142c:	b480      	push	{r7}
 800142e:	b087      	sub	sp, #28
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001436:	2300      	movs	r3, #0
 8001438:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800143a:	e14e      	b.n	80016da <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	2101      	movs	r1, #1
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	fa01 f303 	lsl.w	r3, r1, r3
 8001448:	4013      	ands	r3, r2
 800144a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2b00      	cmp	r3, #0
 8001450:	f000 8140 	beq.w	80016d4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f003 0303 	and.w	r3, r3, #3
 800145c:	2b01      	cmp	r3, #1
 800145e:	d005      	beq.n	800146c <HAL_GPIO_Init+0x40>
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f003 0303 	and.w	r3, r3, #3
 8001468:	2b02      	cmp	r3, #2
 800146a:	d130      	bne.n	80014ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	2203      	movs	r2, #3
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	43db      	mvns	r3, r3
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	4013      	ands	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	68da      	ldr	r2, [r3, #12]
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	693a      	ldr	r2, [r7, #16]
 8001492:	4313      	orrs	r3, r2
 8001494:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014a2:	2201      	movs	r2, #1
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	43db      	mvns	r3, r3
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	4013      	ands	r3, r2
 80014b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	091b      	lsrs	r3, r3, #4
 80014b8:	f003 0201 	and.w	r2, r3, #1
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f003 0303 	and.w	r3, r3, #3
 80014d6:	2b03      	cmp	r3, #3
 80014d8:	d017      	beq.n	800150a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	2203      	movs	r2, #3
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	43db      	mvns	r3, r3
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	4013      	ands	r3, r2
 80014f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	689a      	ldr	r2, [r3, #8]
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	4313      	orrs	r3, r2
 8001502:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f003 0303 	and.w	r3, r3, #3
 8001512:	2b02      	cmp	r3, #2
 8001514:	d123      	bne.n	800155e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	08da      	lsrs	r2, r3, #3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	3208      	adds	r2, #8
 800151e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001522:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	f003 0307 	and.w	r3, r3, #7
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	220f      	movs	r2, #15
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	43db      	mvns	r3, r3
 8001534:	693a      	ldr	r2, [r7, #16]
 8001536:	4013      	ands	r3, r2
 8001538:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	691a      	ldr	r2, [r3, #16]
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	f003 0307 	and.w	r3, r3, #7
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	4313      	orrs	r3, r2
 800154e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	08da      	lsrs	r2, r3, #3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	3208      	adds	r2, #8
 8001558:	6939      	ldr	r1, [r7, #16]
 800155a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	2203      	movs	r2, #3
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	43db      	mvns	r3, r3
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	4013      	ands	r3, r2
 8001574:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f003 0203 	and.w	r2, r3, #3
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	4313      	orrs	r3, r2
 800158a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800159a:	2b00      	cmp	r3, #0
 800159c:	f000 809a 	beq.w	80016d4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a0:	4b55      	ldr	r3, [pc, #340]	@ (80016f8 <HAL_GPIO_Init+0x2cc>)
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	4a54      	ldr	r2, [pc, #336]	@ (80016f8 <HAL_GPIO_Init+0x2cc>)
 80015a6:	f043 0301 	orr.w	r3, r3, #1
 80015aa:	6193      	str	r3, [r2, #24]
 80015ac:	4b52      	ldr	r3, [pc, #328]	@ (80016f8 <HAL_GPIO_Init+0x2cc>)
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	f003 0301 	and.w	r3, r3, #1
 80015b4:	60bb      	str	r3, [r7, #8]
 80015b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015b8:	4a50      	ldr	r2, [pc, #320]	@ (80016fc <HAL_GPIO_Init+0x2d0>)
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	089b      	lsrs	r3, r3, #2
 80015be:	3302      	adds	r3, #2
 80015c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	f003 0303 	and.w	r3, r3, #3
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	220f      	movs	r2, #15
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	43db      	mvns	r3, r3
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	4013      	ands	r3, r2
 80015da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80015e2:	d013      	beq.n	800160c <HAL_GPIO_Init+0x1e0>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	4a46      	ldr	r2, [pc, #280]	@ (8001700 <HAL_GPIO_Init+0x2d4>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d00d      	beq.n	8001608 <HAL_GPIO_Init+0x1dc>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4a45      	ldr	r2, [pc, #276]	@ (8001704 <HAL_GPIO_Init+0x2d8>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d007      	beq.n	8001604 <HAL_GPIO_Init+0x1d8>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4a44      	ldr	r2, [pc, #272]	@ (8001708 <HAL_GPIO_Init+0x2dc>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d101      	bne.n	8001600 <HAL_GPIO_Init+0x1d4>
 80015fc:	2303      	movs	r3, #3
 80015fe:	e006      	b.n	800160e <HAL_GPIO_Init+0x1e2>
 8001600:	2305      	movs	r3, #5
 8001602:	e004      	b.n	800160e <HAL_GPIO_Init+0x1e2>
 8001604:	2302      	movs	r3, #2
 8001606:	e002      	b.n	800160e <HAL_GPIO_Init+0x1e2>
 8001608:	2301      	movs	r3, #1
 800160a:	e000      	b.n	800160e <HAL_GPIO_Init+0x1e2>
 800160c:	2300      	movs	r3, #0
 800160e:	697a      	ldr	r2, [r7, #20]
 8001610:	f002 0203 	and.w	r2, r2, #3
 8001614:	0092      	lsls	r2, r2, #2
 8001616:	4093      	lsls	r3, r2
 8001618:	693a      	ldr	r2, [r7, #16]
 800161a:	4313      	orrs	r3, r2
 800161c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800161e:	4937      	ldr	r1, [pc, #220]	@ (80016fc <HAL_GPIO_Init+0x2d0>)
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	089b      	lsrs	r3, r3, #2
 8001624:	3302      	adds	r3, #2
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800162c:	4b37      	ldr	r3, [pc, #220]	@ (800170c <HAL_GPIO_Init+0x2e0>)
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	43db      	mvns	r3, r3
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	4013      	ands	r3, r2
 800163a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d003      	beq.n	8001650 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	4313      	orrs	r3, r2
 800164e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001650:	4a2e      	ldr	r2, [pc, #184]	@ (800170c <HAL_GPIO_Init+0x2e0>)
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001656:	4b2d      	ldr	r3, [pc, #180]	@ (800170c <HAL_GPIO_Init+0x2e0>)
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	43db      	mvns	r3, r3
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	4013      	ands	r3, r2
 8001664:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d003      	beq.n	800167a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	4313      	orrs	r3, r2
 8001678:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800167a:	4a24      	ldr	r2, [pc, #144]	@ (800170c <HAL_GPIO_Init+0x2e0>)
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001680:	4b22      	ldr	r3, [pc, #136]	@ (800170c <HAL_GPIO_Init+0x2e0>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	43db      	mvns	r3, r3
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	4013      	ands	r3, r2
 800168e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d003      	beq.n	80016a4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80016a4:	4a19      	ldr	r2, [pc, #100]	@ (800170c <HAL_GPIO_Init+0x2e0>)
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016aa:	4b18      	ldr	r3, [pc, #96]	@ (800170c <HAL_GPIO_Init+0x2e0>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	43db      	mvns	r3, r3
 80016b4:	693a      	ldr	r2, [r7, #16]
 80016b6:	4013      	ands	r3, r2
 80016b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d003      	beq.n	80016ce <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80016ce:	4a0f      	ldr	r2, [pc, #60]	@ (800170c <HAL_GPIO_Init+0x2e0>)
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	3301      	adds	r3, #1
 80016d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	fa22 f303 	lsr.w	r3, r2, r3
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	f47f aea9 	bne.w	800143c <HAL_GPIO_Init+0x10>
  }
}
 80016ea:	bf00      	nop
 80016ec:	bf00      	nop
 80016ee:	371c      	adds	r7, #28
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	40021000 	.word	0x40021000
 80016fc:	40010000 	.word	0x40010000
 8001700:	48000400 	.word	0x48000400
 8001704:	48000800 	.word	0x48000800
 8001708:	48000c00 	.word	0x48000c00
 800170c:	40010400 	.word	0x40010400

08001710 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	460b      	mov	r3, r1
 800171a:	807b      	strh	r3, [r7, #2]
 800171c:	4613      	mov	r3, r2
 800171e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001720:	787b      	ldrb	r3, [r7, #1]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d003      	beq.n	800172e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001726:	887a      	ldrh	r2, [r7, #2]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800172c:	e002      	b.n	8001734 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800172e:	887a      	ldrh	r2, [r7, #2]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001734:	bf00      	nop
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d101      	bne.n	8001752 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e08d      	b.n	800186e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001758:	b2db      	uxtb	r3, r3
 800175a:	2b00      	cmp	r3, #0
 800175c:	d106      	bne.n	800176c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f7ff fa18 	bl	8000b9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2224      	movs	r2, #36	@ 0x24
 8001770:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f022 0201 	bic.w	r2, r2, #1
 8001782:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685a      	ldr	r2, [r3, #4]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001790:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	689a      	ldr	r2, [r3, #8]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80017a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d107      	bne.n	80017ba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	689a      	ldr	r2, [r3, #8]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	e006      	b.n	80017c8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	689a      	ldr	r2, [r3, #8]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80017c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d108      	bne.n	80017e2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	685a      	ldr	r2, [r3, #4]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80017de:	605a      	str	r2, [r3, #4]
 80017e0:	e007      	b.n	80017f2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	685a      	ldr	r2, [r3, #4]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80017f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	6812      	ldr	r2, [r2, #0]
 80017fc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001800:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001804:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	68da      	ldr	r2, [r3, #12]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001814:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	691a      	ldr	r2, [r3, #16]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	695b      	ldr	r3, [r3, #20]
 800181e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	699b      	ldr	r3, [r3, #24]
 8001826:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	430a      	orrs	r2, r1
 800182e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	69d9      	ldr	r1, [r3, #28]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a1a      	ldr	r2, [r3, #32]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	430a      	orrs	r2, r1
 800183e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f042 0201 	orr.w	r2, r2, #1
 800184e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2220      	movs	r2, #32
 800185a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
	...

08001878 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b088      	sub	sp, #32
 800187c:	af02      	add	r7, sp, #8
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	4608      	mov	r0, r1
 8001882:	4611      	mov	r1, r2
 8001884:	461a      	mov	r2, r3
 8001886:	4603      	mov	r3, r0
 8001888:	817b      	strh	r3, [r7, #10]
 800188a:	460b      	mov	r3, r1
 800188c:	813b      	strh	r3, [r7, #8]
 800188e:	4613      	mov	r3, r2
 8001890:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b20      	cmp	r3, #32
 800189c:	f040 80f9 	bne.w	8001a92 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80018a0:	6a3b      	ldr	r3, [r7, #32]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d002      	beq.n	80018ac <HAL_I2C_Mem_Write+0x34>
 80018a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d105      	bne.n	80018b8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018b2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e0ed      	b.n	8001a94 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d101      	bne.n	80018c6 <HAL_I2C_Mem_Write+0x4e>
 80018c2:	2302      	movs	r3, #2
 80018c4:	e0e6      	b.n	8001a94 <HAL_I2C_Mem_Write+0x21c>
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2201      	movs	r2, #1
 80018ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80018ce:	f7ff fbef 	bl	80010b0 <HAL_GetTick>
 80018d2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	9300      	str	r3, [sp, #0]
 80018d8:	2319      	movs	r3, #25
 80018da:	2201      	movs	r2, #1
 80018dc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80018e0:	68f8      	ldr	r0, [r7, #12]
 80018e2:	f000 fac3 	bl	8001e6c <I2C_WaitOnFlagUntilTimeout>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e0d1      	b.n	8001a94 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2221      	movs	r2, #33	@ 0x21
 80018f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2240      	movs	r2, #64	@ 0x40
 80018fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2200      	movs	r2, #0
 8001904:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	6a3a      	ldr	r2, [r7, #32]
 800190a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001910:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2200      	movs	r2, #0
 8001916:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001918:	88f8      	ldrh	r0, [r7, #6]
 800191a:	893a      	ldrh	r2, [r7, #8]
 800191c:	8979      	ldrh	r1, [r7, #10]
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	9301      	str	r3, [sp, #4]
 8001922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001924:	9300      	str	r3, [sp, #0]
 8001926:	4603      	mov	r3, r0
 8001928:	68f8      	ldr	r0, [r7, #12]
 800192a:	f000 f9d3 	bl	8001cd4 <I2C_RequestMemoryWrite>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d005      	beq.n	8001940 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2200      	movs	r2, #0
 8001938:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e0a9      	b.n	8001a94 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001944:	b29b      	uxth	r3, r3
 8001946:	2bff      	cmp	r3, #255	@ 0xff
 8001948:	d90e      	bls.n	8001968 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	22ff      	movs	r2, #255	@ 0xff
 800194e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001954:	b2da      	uxtb	r2, r3
 8001956:	8979      	ldrh	r1, [r7, #10]
 8001958:	2300      	movs	r3, #0
 800195a:	9300      	str	r3, [sp, #0]
 800195c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001960:	68f8      	ldr	r0, [r7, #12]
 8001962:	f000 fc47 	bl	80021f4 <I2C_TransferConfig>
 8001966:	e00f      	b.n	8001988 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800196c:	b29a      	uxth	r2, r3
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001976:	b2da      	uxtb	r2, r3
 8001978:	8979      	ldrh	r1, [r7, #10]
 800197a:	2300      	movs	r3, #0
 800197c:	9300      	str	r3, [sp, #0]
 800197e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001982:	68f8      	ldr	r0, [r7, #12]
 8001984:	f000 fc36 	bl	80021f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001988:	697a      	ldr	r2, [r7, #20]
 800198a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800198c:	68f8      	ldr	r0, [r7, #12]
 800198e:	f000 fac6 	bl	8001f1e <I2C_WaitOnTXISFlagUntilTimeout>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e07b      	b.n	8001a94 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019a0:	781a      	ldrb	r2, [r3, #0]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ac:	1c5a      	adds	r2, r3, #1
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	3b01      	subs	r3, #1
 80019ba:	b29a      	uxth	r2, r3
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019c4:	3b01      	subs	r3, #1
 80019c6:	b29a      	uxth	r2, r3
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d034      	beq.n	8001a40 <HAL_I2C_Mem_Write+0x1c8>
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d130      	bne.n	8001a40 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	9300      	str	r3, [sp, #0]
 80019e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019e4:	2200      	movs	r2, #0
 80019e6:	2180      	movs	r1, #128	@ 0x80
 80019e8:	68f8      	ldr	r0, [r7, #12]
 80019ea:	f000 fa3f 	bl	8001e6c <I2C_WaitOnFlagUntilTimeout>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e04d      	b.n	8001a94 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	2bff      	cmp	r3, #255	@ 0xff
 8001a00:	d90e      	bls.n	8001a20 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	22ff      	movs	r2, #255	@ 0xff
 8001a06:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a0c:	b2da      	uxtb	r2, r3
 8001a0e:	8979      	ldrh	r1, [r7, #10]
 8001a10:	2300      	movs	r3, #0
 8001a12:	9300      	str	r3, [sp, #0]
 8001a14:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001a18:	68f8      	ldr	r0, [r7, #12]
 8001a1a:	f000 fbeb 	bl	80021f4 <I2C_TransferConfig>
 8001a1e:	e00f      	b.n	8001a40 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a24:	b29a      	uxth	r2, r3
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a2e:	b2da      	uxtb	r2, r3
 8001a30:	8979      	ldrh	r1, [r7, #10]
 8001a32:	2300      	movs	r3, #0
 8001a34:	9300      	str	r3, [sp, #0]
 8001a36:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a3a:	68f8      	ldr	r0, [r7, #12]
 8001a3c:	f000 fbda 	bl	80021f4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d19e      	bne.n	8001988 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a4a:	697a      	ldr	r2, [r7, #20]
 8001a4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001a4e:	68f8      	ldr	r0, [r7, #12]
 8001a50:	f000 faac 	bl	8001fac <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e01a      	b.n	8001a94 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2220      	movs	r2, #32
 8001a64:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	6859      	ldr	r1, [r3, #4]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	4b0a      	ldr	r3, [pc, #40]	@ (8001a9c <HAL_I2C_Mem_Write+0x224>)
 8001a72:	400b      	ands	r3, r1
 8001a74:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2220      	movs	r2, #32
 8001a7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	e000      	b.n	8001a94 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001a92:	2302      	movs	r3, #2
  }
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3718      	adds	r7, #24
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	fe00e800 	.word	0xfe00e800

08001aa0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b088      	sub	sp, #32
 8001aa4:	af02      	add	r7, sp, #8
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	4608      	mov	r0, r1
 8001aaa:	4611      	mov	r1, r2
 8001aac:	461a      	mov	r2, r3
 8001aae:	4603      	mov	r3, r0
 8001ab0:	817b      	strh	r3, [r7, #10]
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	813b      	strh	r3, [r7, #8]
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	2b20      	cmp	r3, #32
 8001ac4:	f040 80fd 	bne.w	8001cc2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ac8:	6a3b      	ldr	r3, [r7, #32]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d002      	beq.n	8001ad4 <HAL_I2C_Mem_Read+0x34>
 8001ace:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d105      	bne.n	8001ae0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ada:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e0f1      	b.n	8001cc4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d101      	bne.n	8001aee <HAL_I2C_Mem_Read+0x4e>
 8001aea:	2302      	movs	r3, #2
 8001aec:	e0ea      	b.n	8001cc4 <HAL_I2C_Mem_Read+0x224>
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2201      	movs	r2, #1
 8001af2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001af6:	f7ff fadb 	bl	80010b0 <HAL_GetTick>
 8001afa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	9300      	str	r3, [sp, #0]
 8001b00:	2319      	movs	r3, #25
 8001b02:	2201      	movs	r2, #1
 8001b04:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b08:	68f8      	ldr	r0, [r7, #12]
 8001b0a:	f000 f9af 	bl	8001e6c <I2C_WaitOnFlagUntilTimeout>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e0d5      	b.n	8001cc4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2222      	movs	r2, #34	@ 0x22
 8001b1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2240      	movs	r2, #64	@ 0x40
 8001b24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	6a3a      	ldr	r2, [r7, #32]
 8001b32:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001b38:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b40:	88f8      	ldrh	r0, [r7, #6]
 8001b42:	893a      	ldrh	r2, [r7, #8]
 8001b44:	8979      	ldrh	r1, [r7, #10]
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	9301      	str	r3, [sp, #4]
 8001b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b4c:	9300      	str	r3, [sp, #0]
 8001b4e:	4603      	mov	r3, r0
 8001b50:	68f8      	ldr	r0, [r7, #12]
 8001b52:	f000 f913 	bl	8001d7c <I2C_RequestMemoryRead>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d005      	beq.n	8001b68 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e0ad      	b.n	8001cc4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	2bff      	cmp	r3, #255	@ 0xff
 8001b70:	d90e      	bls.n	8001b90 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2201      	movs	r2, #1
 8001b76:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b7c:	b2da      	uxtb	r2, r3
 8001b7e:	8979      	ldrh	r1, [r7, #10]
 8001b80:	4b52      	ldr	r3, [pc, #328]	@ (8001ccc <HAL_I2C_Mem_Read+0x22c>)
 8001b82:	9300      	str	r3, [sp, #0]
 8001b84:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001b88:	68f8      	ldr	r0, [r7, #12]
 8001b8a:	f000 fb33 	bl	80021f4 <I2C_TransferConfig>
 8001b8e:	e00f      	b.n	8001bb0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b94:	b29a      	uxth	r2, r3
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b9e:	b2da      	uxtb	r2, r3
 8001ba0:	8979      	ldrh	r1, [r7, #10]
 8001ba2:	4b4a      	ldr	r3, [pc, #296]	@ (8001ccc <HAL_I2C_Mem_Read+0x22c>)
 8001ba4:	9300      	str	r3, [sp, #0]
 8001ba6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001baa:	68f8      	ldr	r0, [r7, #12]
 8001bac:	f000 fb22 	bl	80021f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	9300      	str	r3, [sp, #0]
 8001bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	2104      	movs	r1, #4
 8001bba:	68f8      	ldr	r0, [r7, #12]
 8001bbc:	f000 f956 	bl	8001e6c <I2C_WaitOnFlagUntilTimeout>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e07c      	b.n	8001cc4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bd4:	b2d2      	uxtb	r2, r2
 8001bd6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bdc:	1c5a      	adds	r2, r3, #1
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001be6:	3b01      	subs	r3, #1
 8001be8:	b29a      	uxth	r2, r3
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	3b01      	subs	r3, #1
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d034      	beq.n	8001c70 <HAL_I2C_Mem_Read+0x1d0>
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d130      	bne.n	8001c70 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	9300      	str	r3, [sp, #0]
 8001c12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c14:	2200      	movs	r2, #0
 8001c16:	2180      	movs	r1, #128	@ 0x80
 8001c18:	68f8      	ldr	r0, [r7, #12]
 8001c1a:	f000 f927 	bl	8001e6c <I2C_WaitOnFlagUntilTimeout>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e04d      	b.n	8001cc4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	2bff      	cmp	r3, #255	@ 0xff
 8001c30:	d90e      	bls.n	8001c50 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2201      	movs	r2, #1
 8001c36:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c3c:	b2da      	uxtb	r2, r3
 8001c3e:	8979      	ldrh	r1, [r7, #10]
 8001c40:	2300      	movs	r3, #0
 8001c42:	9300      	str	r3, [sp, #0]
 8001c44:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c48:	68f8      	ldr	r0, [r7, #12]
 8001c4a:	f000 fad3 	bl	80021f4 <I2C_TransferConfig>
 8001c4e:	e00f      	b.n	8001c70 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c54:	b29a      	uxth	r2, r3
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c5e:	b2da      	uxtb	r2, r3
 8001c60:	8979      	ldrh	r1, [r7, #10]
 8001c62:	2300      	movs	r3, #0
 8001c64:	9300      	str	r3, [sp, #0]
 8001c66:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c6a:	68f8      	ldr	r0, [r7, #12]
 8001c6c:	f000 fac2 	bl	80021f4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d19a      	bne.n	8001bb0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c7a:	697a      	ldr	r2, [r7, #20]
 8001c7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001c7e:	68f8      	ldr	r0, [r7, #12]
 8001c80:	f000 f994 	bl	8001fac <I2C_WaitOnSTOPFlagUntilTimeout>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e01a      	b.n	8001cc4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2220      	movs	r2, #32
 8001c94:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	6859      	ldr	r1, [r3, #4]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd0 <HAL_I2C_Mem_Read+0x230>)
 8001ca2:	400b      	ands	r3, r1
 8001ca4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2220      	movs	r2, #32
 8001caa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	e000      	b.n	8001cc4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001cc2:	2302      	movs	r3, #2
  }
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3718      	adds	r7, #24
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	80002400 	.word	0x80002400
 8001cd0:	fe00e800 	.word	0xfe00e800

08001cd4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af02      	add	r7, sp, #8
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	4608      	mov	r0, r1
 8001cde:	4611      	mov	r1, r2
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	817b      	strh	r3, [r7, #10]
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	813b      	strh	r3, [r7, #8]
 8001cea:	4613      	mov	r3, r2
 8001cec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001cee:	88fb      	ldrh	r3, [r7, #6]
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	8979      	ldrh	r1, [r7, #10]
 8001cf4:	4b20      	ldr	r3, [pc, #128]	@ (8001d78 <I2C_RequestMemoryWrite+0xa4>)
 8001cf6:	9300      	str	r3, [sp, #0]
 8001cf8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001cfc:	68f8      	ldr	r0, [r7, #12]
 8001cfe:	f000 fa79 	bl	80021f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d02:	69fa      	ldr	r2, [r7, #28]
 8001d04:	69b9      	ldr	r1, [r7, #24]
 8001d06:	68f8      	ldr	r0, [r7, #12]
 8001d08:	f000 f909 	bl	8001f1e <I2C_WaitOnTXISFlagUntilTimeout>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e02c      	b.n	8001d70 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001d16:	88fb      	ldrh	r3, [r7, #6]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d105      	bne.n	8001d28 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001d1c:	893b      	ldrh	r3, [r7, #8]
 8001d1e:	b2da      	uxtb	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	629a      	str	r2, [r3, #40]	@ 0x28
 8001d26:	e015      	b.n	8001d54 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001d28:	893b      	ldrh	r3, [r7, #8]
 8001d2a:	0a1b      	lsrs	r3, r3, #8
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	b2da      	uxtb	r2, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d36:	69fa      	ldr	r2, [r7, #28]
 8001d38:	69b9      	ldr	r1, [r7, #24]
 8001d3a:	68f8      	ldr	r0, [r7, #12]
 8001d3c:	f000 f8ef 	bl	8001f1e <I2C_WaitOnTXISFlagUntilTimeout>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e012      	b.n	8001d70 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001d4a:	893b      	ldrh	r3, [r7, #8]
 8001d4c:	b2da      	uxtb	r2, r3
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	9300      	str	r3, [sp, #0]
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	2180      	movs	r1, #128	@ 0x80
 8001d5e:	68f8      	ldr	r0, [r7, #12]
 8001d60:	f000 f884 	bl	8001e6c <I2C_WaitOnFlagUntilTimeout>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e000      	b.n	8001d70 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3710      	adds	r7, #16
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	80002000 	.word	0x80002000

08001d7c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af02      	add	r7, sp, #8
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	4608      	mov	r0, r1
 8001d86:	4611      	mov	r1, r2
 8001d88:	461a      	mov	r2, r3
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	817b      	strh	r3, [r7, #10]
 8001d8e:	460b      	mov	r3, r1
 8001d90:	813b      	strh	r3, [r7, #8]
 8001d92:	4613      	mov	r3, r2
 8001d94:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001d96:	88fb      	ldrh	r3, [r7, #6]
 8001d98:	b2da      	uxtb	r2, r3
 8001d9a:	8979      	ldrh	r1, [r7, #10]
 8001d9c:	4b20      	ldr	r3, [pc, #128]	@ (8001e20 <I2C_RequestMemoryRead+0xa4>)
 8001d9e:	9300      	str	r3, [sp, #0]
 8001da0:	2300      	movs	r3, #0
 8001da2:	68f8      	ldr	r0, [r7, #12]
 8001da4:	f000 fa26 	bl	80021f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001da8:	69fa      	ldr	r2, [r7, #28]
 8001daa:	69b9      	ldr	r1, [r7, #24]
 8001dac:	68f8      	ldr	r0, [r7, #12]
 8001dae:	f000 f8b6 	bl	8001f1e <I2C_WaitOnTXISFlagUntilTimeout>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e02c      	b.n	8001e16 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001dbc:	88fb      	ldrh	r3, [r7, #6]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d105      	bne.n	8001dce <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001dc2:	893b      	ldrh	r3, [r7, #8]
 8001dc4:	b2da      	uxtb	r2, r3
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	629a      	str	r2, [r3, #40]	@ 0x28
 8001dcc:	e015      	b.n	8001dfa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001dce:	893b      	ldrh	r3, [r7, #8]
 8001dd0:	0a1b      	lsrs	r3, r3, #8
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	b2da      	uxtb	r2, r3
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ddc:	69fa      	ldr	r2, [r7, #28]
 8001dde:	69b9      	ldr	r1, [r7, #24]
 8001de0:	68f8      	ldr	r0, [r7, #12]
 8001de2:	f000 f89c 	bl	8001f1e <I2C_WaitOnTXISFlagUntilTimeout>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e012      	b.n	8001e16 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001df0:	893b      	ldrh	r3, [r7, #8]
 8001df2:	b2da      	uxtb	r2, r3
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	9300      	str	r3, [sp, #0]
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	2200      	movs	r2, #0
 8001e02:	2140      	movs	r1, #64	@ 0x40
 8001e04:	68f8      	ldr	r0, [r7, #12]
 8001e06:	f000 f831 	bl	8001e6c <I2C_WaitOnFlagUntilTimeout>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e000      	b.n	8001e16 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3710      	adds	r7, #16
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	80002000 	.word	0x80002000

08001e24 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d103      	bne.n	8001e42 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	f003 0301 	and.w	r3, r3, #1
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d007      	beq.n	8001e60 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	699a      	ldr	r2, [r3, #24]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f042 0201 	orr.w	r2, r2, #1
 8001e5e:	619a      	str	r2, [r3, #24]
  }
}
 8001e60:	bf00      	nop
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	603b      	str	r3, [r7, #0]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e7c:	e03b      	b.n	8001ef6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	6839      	ldr	r1, [r7, #0]
 8001e82:	68f8      	ldr	r0, [r7, #12]
 8001e84:	f000 f8d6 	bl	8002034 <I2C_IsErrorOccurred>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e041      	b.n	8001f16 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e98:	d02d      	beq.n	8001ef6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e9a:	f7ff f909 	bl	80010b0 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d302      	bcc.n	8001eb0 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d122      	bne.n	8001ef6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	699a      	ldr	r2, [r3, #24]
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	68ba      	ldr	r2, [r7, #8]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	bf0c      	ite	eq
 8001ec0:	2301      	moveq	r3, #1
 8001ec2:	2300      	movne	r3, #0
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	79fb      	ldrb	r3, [r7, #7]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d113      	bne.n	8001ef6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ed2:	f043 0220 	orr.w	r2, r3, #32
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2220      	movs	r2, #32
 8001ede:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e00f      	b.n	8001f16 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	699a      	ldr	r2, [r3, #24]
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	4013      	ands	r3, r2
 8001f00:	68ba      	ldr	r2, [r7, #8]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	bf0c      	ite	eq
 8001f06:	2301      	moveq	r3, #1
 8001f08:	2300      	movne	r3, #0
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	79fb      	ldrb	r3, [r7, #7]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d0b4      	beq.n	8001e7e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b084      	sub	sp, #16
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	60f8      	str	r0, [r7, #12]
 8001f26:	60b9      	str	r1, [r7, #8]
 8001f28:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f2a:	e033      	b.n	8001f94 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	68b9      	ldr	r1, [r7, #8]
 8001f30:	68f8      	ldr	r0, [r7, #12]
 8001f32:	f000 f87f 	bl	8002034 <I2C_IsErrorOccurred>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e031      	b.n	8001fa4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f46:	d025      	beq.n	8001f94 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f48:	f7ff f8b2 	bl	80010b0 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	68ba      	ldr	r2, [r7, #8]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d302      	bcc.n	8001f5e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d11a      	bne.n	8001f94 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d013      	beq.n	8001f94 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f70:	f043 0220 	orr.w	r2, r3, #32
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2220      	movs	r2, #32
 8001f7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e007      	b.n	8001fa4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d1c4      	bne.n	8001f2c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3710      	adds	r7, #16
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fb8:	e02f      	b.n	800201a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	68b9      	ldr	r1, [r7, #8]
 8001fbe:	68f8      	ldr	r0, [r7, #12]
 8001fc0:	f000 f838 	bl	8002034 <I2C_IsErrorOccurred>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e02d      	b.n	800202a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fce:	f7ff f86f 	bl	80010b0 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	68ba      	ldr	r2, [r7, #8]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d302      	bcc.n	8001fe4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d11a      	bne.n	800201a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	f003 0320 	and.w	r3, r3, #32
 8001fee:	2b20      	cmp	r3, #32
 8001ff0:	d013      	beq.n	800201a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ff6:	f043 0220 	orr.w	r2, r3, #32
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2220      	movs	r2, #32
 8002002:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e007      	b.n	800202a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	f003 0320 	and.w	r3, r3, #32
 8002024:	2b20      	cmp	r3, #32
 8002026:	d1c8      	bne.n	8001fba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
	...

08002034 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b08a      	sub	sp, #40	@ 0x28
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002040:	2300      	movs	r3, #0
 8002042:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800204e:	2300      	movs	r3, #0
 8002050:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	f003 0310 	and.w	r3, r3, #16
 800205c:	2b00      	cmp	r3, #0
 800205e:	d068      	beq.n	8002132 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2210      	movs	r2, #16
 8002066:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002068:	e049      	b.n	80020fe <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002070:	d045      	beq.n	80020fe <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002072:	f7ff f81d 	bl	80010b0 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	68ba      	ldr	r2, [r7, #8]
 800207e:	429a      	cmp	r2, r3
 8002080:	d302      	bcc.n	8002088 <I2C_IsErrorOccurred+0x54>
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d13a      	bne.n	80020fe <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002092:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800209a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80020a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80020aa:	d121      	bne.n	80020f0 <I2C_IsErrorOccurred+0xbc>
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80020b2:	d01d      	beq.n	80020f0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80020b4:	7cfb      	ldrb	r3, [r7, #19]
 80020b6:	2b20      	cmp	r3, #32
 80020b8:	d01a      	beq.n	80020f0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	685a      	ldr	r2, [r3, #4]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80020c8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80020ca:	f7fe fff1 	bl	80010b0 <HAL_GetTick>
 80020ce:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020d0:	e00e      	b.n	80020f0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80020d2:	f7fe ffed 	bl	80010b0 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b19      	cmp	r3, #25
 80020de:	d907      	bls.n	80020f0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80020e0:	6a3b      	ldr	r3, [r7, #32]
 80020e2:	f043 0320 	orr.w	r3, r3, #32
 80020e6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80020ee:	e006      	b.n	80020fe <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	699b      	ldr	r3, [r3, #24]
 80020f6:	f003 0320 	and.w	r3, r3, #32
 80020fa:	2b20      	cmp	r3, #32
 80020fc:	d1e9      	bne.n	80020d2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	f003 0320 	and.w	r3, r3, #32
 8002108:	2b20      	cmp	r3, #32
 800210a:	d003      	beq.n	8002114 <I2C_IsErrorOccurred+0xe0>
 800210c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002110:	2b00      	cmp	r3, #0
 8002112:	d0aa      	beq.n	800206a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002114:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002118:	2b00      	cmp	r3, #0
 800211a:	d103      	bne.n	8002124 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2220      	movs	r2, #32
 8002122:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002124:	6a3b      	ldr	r3, [r7, #32]
 8002126:	f043 0304 	orr.w	r3, r3, #4
 800212a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002140:	2b00      	cmp	r3, #0
 8002142:	d00b      	beq.n	800215c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002144:	6a3b      	ldr	r3, [r7, #32]
 8002146:	f043 0301 	orr.w	r3, r3, #1
 800214a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002154:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00b      	beq.n	800217e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002166:	6a3b      	ldr	r3, [r7, #32]
 8002168:	f043 0308 	orr.w	r3, r3, #8
 800216c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002176:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002184:	2b00      	cmp	r3, #0
 8002186:	d00b      	beq.n	80021a0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002188:	6a3b      	ldr	r3, [r7, #32]
 800218a:	f043 0302 	orr.w	r3, r3, #2
 800218e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002198:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80021a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d01c      	beq.n	80021e2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80021a8:	68f8      	ldr	r0, [r7, #12]
 80021aa:	f7ff fe3b 	bl	8001e24 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	6859      	ldr	r1, [r3, #4]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	4b0d      	ldr	r3, [pc, #52]	@ (80021f0 <I2C_IsErrorOccurred+0x1bc>)
 80021ba:	400b      	ands	r3, r1
 80021bc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80021c2:	6a3b      	ldr	r3, [r7, #32]
 80021c4:	431a      	orrs	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2220      	movs	r2, #32
 80021ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80021e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3728      	adds	r7, #40	@ 0x28
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	fe00e800 	.word	0xfe00e800

080021f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b087      	sub	sp, #28
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	607b      	str	r3, [r7, #4]
 80021fe:	460b      	mov	r3, r1
 8002200:	817b      	strh	r3, [r7, #10]
 8002202:	4613      	mov	r3, r2
 8002204:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002206:	897b      	ldrh	r3, [r7, #10]
 8002208:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800220c:	7a7b      	ldrb	r3, [r7, #9]
 800220e:	041b      	lsls	r3, r3, #16
 8002210:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002214:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800221a:	6a3b      	ldr	r3, [r7, #32]
 800221c:	4313      	orrs	r3, r2
 800221e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002222:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	685a      	ldr	r2, [r3, #4]
 800222a:	6a3b      	ldr	r3, [r7, #32]
 800222c:	0d5b      	lsrs	r3, r3, #21
 800222e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002232:	4b08      	ldr	r3, [pc, #32]	@ (8002254 <I2C_TransferConfig+0x60>)
 8002234:	430b      	orrs	r3, r1
 8002236:	43db      	mvns	r3, r3
 8002238:	ea02 0103 	and.w	r1, r2, r3
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	697a      	ldr	r2, [r7, #20]
 8002242:	430a      	orrs	r2, r1
 8002244:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002246:	bf00      	nop
 8002248:	371c      	adds	r7, #28
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	03ff63ff 	.word	0x03ff63ff

08002258 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b20      	cmp	r3, #32
 800226c:	d138      	bne.n	80022e0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002274:	2b01      	cmp	r3, #1
 8002276:	d101      	bne.n	800227c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002278:	2302      	movs	r3, #2
 800227a:	e032      	b.n	80022e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2224      	movs	r2, #36	@ 0x24
 8002288:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f022 0201 	bic.w	r2, r2, #1
 800229a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80022aa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6819      	ldr	r1, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	430a      	orrs	r2, r1
 80022ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f042 0201 	orr.w	r2, r2, #1
 80022ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2220      	movs	r2, #32
 80022d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80022dc:	2300      	movs	r3, #0
 80022de:	e000      	b.n	80022e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80022e0:	2302      	movs	r3, #2
  }
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr

080022ee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80022ee:	b480      	push	{r7}
 80022f0:	b085      	sub	sp, #20
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
 80022f6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	2b20      	cmp	r3, #32
 8002302:	d139      	bne.n	8002378 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800230a:	2b01      	cmp	r3, #1
 800230c:	d101      	bne.n	8002312 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800230e:	2302      	movs	r3, #2
 8002310:	e033      	b.n	800237a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2201      	movs	r2, #1
 8002316:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2224      	movs	r2, #36	@ 0x24
 800231e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f022 0201 	bic.w	r2, r2, #1
 8002330:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002340:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	021b      	lsls	r3, r3, #8
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	4313      	orrs	r3, r2
 800234a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	68fa      	ldr	r2, [r7, #12]
 8002352:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f042 0201 	orr.w	r2, r2, #1
 8002362:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2220      	movs	r2, #32
 8002368:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002374:	2300      	movs	r3, #0
 8002376:	e000      	b.n	800237a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002378:	2302      	movs	r3, #2
  }
}
 800237a:	4618      	mov	r0, r3
 800237c:	3714      	adds	r7, #20
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
	...

08002388 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800238e:	af00      	add	r7, sp, #0
 8002390:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002394:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002398:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800239a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800239e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d102      	bne.n	80023ae <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	f001 b823 	b.w	80033f4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023b2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	f000 817d 	beq.w	80026be <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80023c4:	4bbc      	ldr	r3, [pc, #752]	@ (80026b8 <HAL_RCC_OscConfig+0x330>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f003 030c 	and.w	r3, r3, #12
 80023cc:	2b04      	cmp	r3, #4
 80023ce:	d00c      	beq.n	80023ea <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023d0:	4bb9      	ldr	r3, [pc, #740]	@ (80026b8 <HAL_RCC_OscConfig+0x330>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f003 030c 	and.w	r3, r3, #12
 80023d8:	2b08      	cmp	r3, #8
 80023da:	d15c      	bne.n	8002496 <HAL_RCC_OscConfig+0x10e>
 80023dc:	4bb6      	ldr	r3, [pc, #728]	@ (80026b8 <HAL_RCC_OscConfig+0x330>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023e8:	d155      	bne.n	8002496 <HAL_RCC_OscConfig+0x10e>
 80023ea:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80023ee:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80023f6:	fa93 f3a3 	rbit	r3, r3
 80023fa:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80023fe:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002402:	fab3 f383 	clz	r3, r3
 8002406:	b2db      	uxtb	r3, r3
 8002408:	095b      	lsrs	r3, r3, #5
 800240a:	b2db      	uxtb	r3, r3
 800240c:	f043 0301 	orr.w	r3, r3, #1
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b01      	cmp	r3, #1
 8002414:	d102      	bne.n	800241c <HAL_RCC_OscConfig+0x94>
 8002416:	4ba8      	ldr	r3, [pc, #672]	@ (80026b8 <HAL_RCC_OscConfig+0x330>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	e015      	b.n	8002448 <HAL_RCC_OscConfig+0xc0>
 800241c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002420:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002424:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8002428:	fa93 f3a3 	rbit	r3, r3
 800242c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002430:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002434:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002438:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 800243c:	fa93 f3a3 	rbit	r3, r3
 8002440:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8002444:	4b9c      	ldr	r3, [pc, #624]	@ (80026b8 <HAL_RCC_OscConfig+0x330>)
 8002446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002448:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800244c:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8002450:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002454:	fa92 f2a2 	rbit	r2, r2
 8002458:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 800245c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8002460:	fab2 f282 	clz	r2, r2
 8002464:	b2d2      	uxtb	r2, r2
 8002466:	f042 0220 	orr.w	r2, r2, #32
 800246a:	b2d2      	uxtb	r2, r2
 800246c:	f002 021f 	and.w	r2, r2, #31
 8002470:	2101      	movs	r1, #1
 8002472:	fa01 f202 	lsl.w	r2, r1, r2
 8002476:	4013      	ands	r3, r2
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 811f 	beq.w	80026bc <HAL_RCC_OscConfig+0x334>
 800247e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002482:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	f040 8116 	bne.w	80026bc <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	f000 bfaf 	b.w	80033f4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002496:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800249a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024a6:	d106      	bne.n	80024b6 <HAL_RCC_OscConfig+0x12e>
 80024a8:	4b83      	ldr	r3, [pc, #524]	@ (80026b8 <HAL_RCC_OscConfig+0x330>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a82      	ldr	r2, [pc, #520]	@ (80026b8 <HAL_RCC_OscConfig+0x330>)
 80024ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024b2:	6013      	str	r3, [r2, #0]
 80024b4:	e036      	b.n	8002524 <HAL_RCC_OscConfig+0x19c>
 80024b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10c      	bne.n	80024e0 <HAL_RCC_OscConfig+0x158>
 80024c6:	4b7c      	ldr	r3, [pc, #496]	@ (80026b8 <HAL_RCC_OscConfig+0x330>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a7b      	ldr	r2, [pc, #492]	@ (80026b8 <HAL_RCC_OscConfig+0x330>)
 80024cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024d0:	6013      	str	r3, [r2, #0]
 80024d2:	4b79      	ldr	r3, [pc, #484]	@ (80026b8 <HAL_RCC_OscConfig+0x330>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a78      	ldr	r2, [pc, #480]	@ (80026b8 <HAL_RCC_OscConfig+0x330>)
 80024d8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024dc:	6013      	str	r3, [r2, #0]
 80024de:	e021      	b.n	8002524 <HAL_RCC_OscConfig+0x19c>
 80024e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024e4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024f0:	d10c      	bne.n	800250c <HAL_RCC_OscConfig+0x184>
 80024f2:	4b71      	ldr	r3, [pc, #452]	@ (80026b8 <HAL_RCC_OscConfig+0x330>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a70      	ldr	r2, [pc, #448]	@ (80026b8 <HAL_RCC_OscConfig+0x330>)
 80024f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024fc:	6013      	str	r3, [r2, #0]
 80024fe:	4b6e      	ldr	r3, [pc, #440]	@ (80026b8 <HAL_RCC_OscConfig+0x330>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a6d      	ldr	r2, [pc, #436]	@ (80026b8 <HAL_RCC_OscConfig+0x330>)
 8002504:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002508:	6013      	str	r3, [r2, #0]
 800250a:	e00b      	b.n	8002524 <HAL_RCC_OscConfig+0x19c>
 800250c:	4b6a      	ldr	r3, [pc, #424]	@ (80026b8 <HAL_RCC_OscConfig+0x330>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a69      	ldr	r2, [pc, #420]	@ (80026b8 <HAL_RCC_OscConfig+0x330>)
 8002512:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002516:	6013      	str	r3, [r2, #0]
 8002518:	4b67      	ldr	r3, [pc, #412]	@ (80026b8 <HAL_RCC_OscConfig+0x330>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a66      	ldr	r2, [pc, #408]	@ (80026b8 <HAL_RCC_OscConfig+0x330>)
 800251e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002522:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002524:	4b64      	ldr	r3, [pc, #400]	@ (80026b8 <HAL_RCC_OscConfig+0x330>)
 8002526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002528:	f023 020f 	bic.w	r2, r3, #15
 800252c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002530:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	495f      	ldr	r1, [pc, #380]	@ (80026b8 <HAL_RCC_OscConfig+0x330>)
 800253a:	4313      	orrs	r3, r2
 800253c:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800253e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002542:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d059      	beq.n	8002602 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800254e:	f7fe fdaf 	bl	80010b0 <HAL_GetTick>
 8002552:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002556:	e00a      	b.n	800256e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002558:	f7fe fdaa 	bl	80010b0 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b64      	cmp	r3, #100	@ 0x64
 8002566:	d902      	bls.n	800256e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	f000 bf43 	b.w	80033f4 <HAL_RCC_OscConfig+0x106c>
 800256e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002572:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002576:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800257a:	fa93 f3a3 	rbit	r3, r3
 800257e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002582:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002586:	fab3 f383 	clz	r3, r3
 800258a:	b2db      	uxtb	r3, r3
 800258c:	095b      	lsrs	r3, r3, #5
 800258e:	b2db      	uxtb	r3, r3
 8002590:	f043 0301 	orr.w	r3, r3, #1
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b01      	cmp	r3, #1
 8002598:	d102      	bne.n	80025a0 <HAL_RCC_OscConfig+0x218>
 800259a:	4b47      	ldr	r3, [pc, #284]	@ (80026b8 <HAL_RCC_OscConfig+0x330>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	e015      	b.n	80025cc <HAL_RCC_OscConfig+0x244>
 80025a0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025a4:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80025ac:	fa93 f3a3 	rbit	r3, r3
 80025b0:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80025b4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025b8:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80025bc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80025c0:	fa93 f3a3 	rbit	r3, r3
 80025c4:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80025c8:	4b3b      	ldr	r3, [pc, #236]	@ (80026b8 <HAL_RCC_OscConfig+0x330>)
 80025ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025cc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80025d0:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80025d4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80025d8:	fa92 f2a2 	rbit	r2, r2
 80025dc:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80025e0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80025e4:	fab2 f282 	clz	r2, r2
 80025e8:	b2d2      	uxtb	r2, r2
 80025ea:	f042 0220 	orr.w	r2, r2, #32
 80025ee:	b2d2      	uxtb	r2, r2
 80025f0:	f002 021f 	and.w	r2, r2, #31
 80025f4:	2101      	movs	r1, #1
 80025f6:	fa01 f202 	lsl.w	r2, r1, r2
 80025fa:	4013      	ands	r3, r2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d0ab      	beq.n	8002558 <HAL_RCC_OscConfig+0x1d0>
 8002600:	e05d      	b.n	80026be <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002602:	f7fe fd55 	bl	80010b0 <HAL_GetTick>
 8002606:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800260a:	e00a      	b.n	8002622 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800260c:	f7fe fd50 	bl	80010b0 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b64      	cmp	r3, #100	@ 0x64
 800261a:	d902      	bls.n	8002622 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	f000 bee9 	b.w	80033f4 <HAL_RCC_OscConfig+0x106c>
 8002622:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002626:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800262e:	fa93 f3a3 	rbit	r3, r3
 8002632:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8002636:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800263a:	fab3 f383 	clz	r3, r3
 800263e:	b2db      	uxtb	r3, r3
 8002640:	095b      	lsrs	r3, r3, #5
 8002642:	b2db      	uxtb	r3, r3
 8002644:	f043 0301 	orr.w	r3, r3, #1
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b01      	cmp	r3, #1
 800264c:	d102      	bne.n	8002654 <HAL_RCC_OscConfig+0x2cc>
 800264e:	4b1a      	ldr	r3, [pc, #104]	@ (80026b8 <HAL_RCC_OscConfig+0x330>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	e015      	b.n	8002680 <HAL_RCC_OscConfig+0x2f8>
 8002654:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002658:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002660:	fa93 f3a3 	rbit	r3, r3
 8002664:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002668:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800266c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002670:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002674:	fa93 f3a3 	rbit	r3, r3
 8002678:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 800267c:	4b0e      	ldr	r3, [pc, #56]	@ (80026b8 <HAL_RCC_OscConfig+0x330>)
 800267e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002680:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002684:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002688:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800268c:	fa92 f2a2 	rbit	r2, r2
 8002690:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002694:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002698:	fab2 f282 	clz	r2, r2
 800269c:	b2d2      	uxtb	r2, r2
 800269e:	f042 0220 	orr.w	r2, r2, #32
 80026a2:	b2d2      	uxtb	r2, r2
 80026a4:	f002 021f 	and.w	r2, r2, #31
 80026a8:	2101      	movs	r1, #1
 80026aa:	fa01 f202 	lsl.w	r2, r1, r2
 80026ae:	4013      	ands	r3, r2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d1ab      	bne.n	800260c <HAL_RCC_OscConfig+0x284>
 80026b4:	e003      	b.n	80026be <HAL_RCC_OscConfig+0x336>
 80026b6:	bf00      	nop
 80026b8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026c2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	f000 817d 	beq.w	80029ce <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80026d4:	4ba6      	ldr	r3, [pc, #664]	@ (8002970 <HAL_RCC_OscConfig+0x5e8>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f003 030c 	and.w	r3, r3, #12
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00b      	beq.n	80026f8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80026e0:	4ba3      	ldr	r3, [pc, #652]	@ (8002970 <HAL_RCC_OscConfig+0x5e8>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f003 030c 	and.w	r3, r3, #12
 80026e8:	2b08      	cmp	r3, #8
 80026ea:	d172      	bne.n	80027d2 <HAL_RCC_OscConfig+0x44a>
 80026ec:	4ba0      	ldr	r3, [pc, #640]	@ (8002970 <HAL_RCC_OscConfig+0x5e8>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d16c      	bne.n	80027d2 <HAL_RCC_OscConfig+0x44a>
 80026f8:	2302      	movs	r3, #2
 80026fa:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fe:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002702:	fa93 f3a3 	rbit	r3, r3
 8002706:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800270a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800270e:	fab3 f383 	clz	r3, r3
 8002712:	b2db      	uxtb	r3, r3
 8002714:	095b      	lsrs	r3, r3, #5
 8002716:	b2db      	uxtb	r3, r3
 8002718:	f043 0301 	orr.w	r3, r3, #1
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b01      	cmp	r3, #1
 8002720:	d102      	bne.n	8002728 <HAL_RCC_OscConfig+0x3a0>
 8002722:	4b93      	ldr	r3, [pc, #588]	@ (8002970 <HAL_RCC_OscConfig+0x5e8>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	e013      	b.n	8002750 <HAL_RCC_OscConfig+0x3c8>
 8002728:	2302      	movs	r3, #2
 800272a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272e:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002732:	fa93 f3a3 	rbit	r3, r3
 8002736:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800273a:	2302      	movs	r3, #2
 800273c:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002740:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002744:	fa93 f3a3 	rbit	r3, r3
 8002748:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 800274c:	4b88      	ldr	r3, [pc, #544]	@ (8002970 <HAL_RCC_OscConfig+0x5e8>)
 800274e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002750:	2202      	movs	r2, #2
 8002752:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002756:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800275a:	fa92 f2a2 	rbit	r2, r2
 800275e:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002762:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002766:	fab2 f282 	clz	r2, r2
 800276a:	b2d2      	uxtb	r2, r2
 800276c:	f042 0220 	orr.w	r2, r2, #32
 8002770:	b2d2      	uxtb	r2, r2
 8002772:	f002 021f 	and.w	r2, r2, #31
 8002776:	2101      	movs	r1, #1
 8002778:	fa01 f202 	lsl.w	r2, r1, r2
 800277c:	4013      	ands	r3, r2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00a      	beq.n	8002798 <HAL_RCC_OscConfig+0x410>
 8002782:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002786:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d002      	beq.n	8002798 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	f000 be2e 	b.w	80033f4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002798:	4b75      	ldr	r3, [pc, #468]	@ (8002970 <HAL_RCC_OscConfig+0x5e8>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027a4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	695b      	ldr	r3, [r3, #20]
 80027ac:	21f8      	movs	r1, #248	@ 0xf8
 80027ae:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b2:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80027b6:	fa91 f1a1 	rbit	r1, r1
 80027ba:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80027be:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80027c2:	fab1 f181 	clz	r1, r1
 80027c6:	b2c9      	uxtb	r1, r1
 80027c8:	408b      	lsls	r3, r1
 80027ca:	4969      	ldr	r1, [pc, #420]	@ (8002970 <HAL_RCC_OscConfig+0x5e8>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027d0:	e0fd      	b.n	80029ce <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027d6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	f000 8088 	beq.w	80028f4 <HAL_RCC_OscConfig+0x56c>
 80027e4:	2301      	movs	r3, #1
 80027e6:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ea:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80027ee:	fa93 f3a3 	rbit	r3, r3
 80027f2:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80027f6:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027fa:	fab3 f383 	clz	r3, r3
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002804:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	461a      	mov	r2, r3
 800280c:	2301      	movs	r3, #1
 800280e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002810:	f7fe fc4e 	bl	80010b0 <HAL_GetTick>
 8002814:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002818:	e00a      	b.n	8002830 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800281a:	f7fe fc49 	bl	80010b0 <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b02      	cmp	r3, #2
 8002828:	d902      	bls.n	8002830 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	f000 bde2 	b.w	80033f4 <HAL_RCC_OscConfig+0x106c>
 8002830:	2302      	movs	r3, #2
 8002832:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002836:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800283a:	fa93 f3a3 	rbit	r3, r3
 800283e:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002842:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002846:	fab3 f383 	clz	r3, r3
 800284a:	b2db      	uxtb	r3, r3
 800284c:	095b      	lsrs	r3, r3, #5
 800284e:	b2db      	uxtb	r3, r3
 8002850:	f043 0301 	orr.w	r3, r3, #1
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b01      	cmp	r3, #1
 8002858:	d102      	bne.n	8002860 <HAL_RCC_OscConfig+0x4d8>
 800285a:	4b45      	ldr	r3, [pc, #276]	@ (8002970 <HAL_RCC_OscConfig+0x5e8>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	e013      	b.n	8002888 <HAL_RCC_OscConfig+0x500>
 8002860:	2302      	movs	r3, #2
 8002862:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002866:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800286a:	fa93 f3a3 	rbit	r3, r3
 800286e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002872:	2302      	movs	r3, #2
 8002874:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002878:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800287c:	fa93 f3a3 	rbit	r3, r3
 8002880:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002884:	4b3a      	ldr	r3, [pc, #232]	@ (8002970 <HAL_RCC_OscConfig+0x5e8>)
 8002886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002888:	2202      	movs	r2, #2
 800288a:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800288e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002892:	fa92 f2a2 	rbit	r2, r2
 8002896:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800289a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800289e:	fab2 f282 	clz	r2, r2
 80028a2:	b2d2      	uxtb	r2, r2
 80028a4:	f042 0220 	orr.w	r2, r2, #32
 80028a8:	b2d2      	uxtb	r2, r2
 80028aa:	f002 021f 	and.w	r2, r2, #31
 80028ae:	2101      	movs	r1, #1
 80028b0:	fa01 f202 	lsl.w	r2, r1, r2
 80028b4:	4013      	ands	r3, r2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d0af      	beq.n	800281a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ba:	4b2d      	ldr	r3, [pc, #180]	@ (8002970 <HAL_RCC_OscConfig+0x5e8>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028c6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	21f8      	movs	r1, #248	@ 0xf8
 80028d0:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d4:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80028d8:	fa91 f1a1 	rbit	r1, r1
 80028dc:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80028e0:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80028e4:	fab1 f181 	clz	r1, r1
 80028e8:	b2c9      	uxtb	r1, r1
 80028ea:	408b      	lsls	r3, r1
 80028ec:	4920      	ldr	r1, [pc, #128]	@ (8002970 <HAL_RCC_OscConfig+0x5e8>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	600b      	str	r3, [r1, #0]
 80028f2:	e06c      	b.n	80029ce <HAL_RCC_OscConfig+0x646>
 80028f4:	2301      	movs	r3, #1
 80028f6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fa:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80028fe:	fa93 f3a3 	rbit	r3, r3
 8002902:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002906:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800290a:	fab3 f383 	clz	r3, r3
 800290e:	b2db      	uxtb	r3, r3
 8002910:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002914:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	461a      	mov	r2, r3
 800291c:	2300      	movs	r3, #0
 800291e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002920:	f7fe fbc6 	bl	80010b0 <HAL_GetTick>
 8002924:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002928:	e00a      	b.n	8002940 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800292a:	f7fe fbc1 	bl	80010b0 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d902      	bls.n	8002940 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	f000 bd5a 	b.w	80033f4 <HAL_RCC_OscConfig+0x106c>
 8002940:	2302      	movs	r3, #2
 8002942:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002946:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800294a:	fa93 f3a3 	rbit	r3, r3
 800294e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002952:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002956:	fab3 f383 	clz	r3, r3
 800295a:	b2db      	uxtb	r3, r3
 800295c:	095b      	lsrs	r3, r3, #5
 800295e:	b2db      	uxtb	r3, r3
 8002960:	f043 0301 	orr.w	r3, r3, #1
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b01      	cmp	r3, #1
 8002968:	d104      	bne.n	8002974 <HAL_RCC_OscConfig+0x5ec>
 800296a:	4b01      	ldr	r3, [pc, #4]	@ (8002970 <HAL_RCC_OscConfig+0x5e8>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	e015      	b.n	800299c <HAL_RCC_OscConfig+0x614>
 8002970:	40021000 	.word	0x40021000
 8002974:	2302      	movs	r3, #2
 8002976:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800297e:	fa93 f3a3 	rbit	r3, r3
 8002982:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002986:	2302      	movs	r3, #2
 8002988:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800298c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002990:	fa93 f3a3 	rbit	r3, r3
 8002994:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002998:	4bc8      	ldr	r3, [pc, #800]	@ (8002cbc <HAL_RCC_OscConfig+0x934>)
 800299a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800299c:	2202      	movs	r2, #2
 800299e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80029a2:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80029a6:	fa92 f2a2 	rbit	r2, r2
 80029aa:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80029ae:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80029b2:	fab2 f282 	clz	r2, r2
 80029b6:	b2d2      	uxtb	r2, r2
 80029b8:	f042 0220 	orr.w	r2, r2, #32
 80029bc:	b2d2      	uxtb	r2, r2
 80029be:	f002 021f 	and.w	r2, r2, #31
 80029c2:	2101      	movs	r1, #1
 80029c4:	fa01 f202 	lsl.w	r2, r1, r2
 80029c8:	4013      	ands	r3, r2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1ad      	bne.n	800292a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029d2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0308 	and.w	r3, r3, #8
 80029de:	2b00      	cmp	r3, #0
 80029e0:	f000 8110 	beq.w	8002c04 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029e8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d079      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x760>
 80029f4:	2301      	movs	r3, #1
 80029f6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fa:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80029fe:	fa93 f3a3 	rbit	r3, r3
 8002a02:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002a06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a0a:	fab3 f383 	clz	r3, r3
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	461a      	mov	r2, r3
 8002a12:	4bab      	ldr	r3, [pc, #684]	@ (8002cc0 <HAL_RCC_OscConfig+0x938>)
 8002a14:	4413      	add	r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	461a      	mov	r2, r3
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a1e:	f7fe fb47 	bl	80010b0 <HAL_GetTick>
 8002a22:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a26:	e00a      	b.n	8002a3e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a28:	f7fe fb42 	bl	80010b0 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d902      	bls.n	8002a3e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	f000 bcdb 	b.w	80033f4 <HAL_RCC_OscConfig+0x106c>
 8002a3e:	2302      	movs	r3, #2
 8002a40:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a44:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002a48:	fa93 f3a3 	rbit	r3, r3
 8002a4c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002a50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a54:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002a58:	2202      	movs	r2, #2
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a60:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	fa93 f2a3 	rbit	r2, r3
 8002a6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a6e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002a7c:	2202      	movs	r2, #2
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	fa93 f2a3 	rbit	r2, r3
 8002a8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a92:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002a96:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a98:	4b88      	ldr	r3, [pc, #544]	@ (8002cbc <HAL_RCC_OscConfig+0x934>)
 8002a9a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aa0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002aa4:	2102      	movs	r1, #2
 8002aa6:	6019      	str	r1, [r3, #0]
 8002aa8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aac:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	fa93 f1a3 	rbit	r1, r3
 8002ab6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aba:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002abe:	6019      	str	r1, [r3, #0]
  return result;
 8002ac0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ac4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	fab3 f383 	clz	r3, r3
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	f003 031f 	and.w	r3, r3, #31
 8002ada:	2101      	movs	r1, #1
 8002adc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d0a0      	beq.n	8002a28 <HAL_RCC_OscConfig+0x6a0>
 8002ae6:	e08d      	b.n	8002c04 <HAL_RCC_OscConfig+0x87c>
 8002ae8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aec:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002af0:	2201      	movs	r2, #1
 8002af2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002af8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	fa93 f2a3 	rbit	r2, r3
 8002b02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b06:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002b0a:	601a      	str	r2, [r3, #0]
  return result;
 8002b0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b10:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002b14:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b16:	fab3 f383 	clz	r3, r3
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	4b68      	ldr	r3, [pc, #416]	@ (8002cc0 <HAL_RCC_OscConfig+0x938>)
 8002b20:	4413      	add	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	461a      	mov	r2, r3
 8002b26:	2300      	movs	r3, #0
 8002b28:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b2a:	f7fe fac1 	bl	80010b0 <HAL_GetTick>
 8002b2e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b32:	e00a      	b.n	8002b4a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b34:	f7fe fabc 	bl	80010b0 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d902      	bls.n	8002b4a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	f000 bc55 	b.w	80033f4 <HAL_RCC_OscConfig+0x106c>
 8002b4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b4e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002b52:	2202      	movs	r2, #2
 8002b54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b5a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	fa93 f2a3 	rbit	r2, r3
 8002b64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b68:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002b6c:	601a      	str	r2, [r3, #0]
 8002b6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b72:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002b76:	2202      	movs	r2, #2
 8002b78:	601a      	str	r2, [r3, #0]
 8002b7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b7e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	fa93 f2a3 	rbit	r2, r3
 8002b88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b8c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002b90:	601a      	str	r2, [r3, #0]
 8002b92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b96:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002b9a:	2202      	movs	r2, #2
 8002b9c:	601a      	str	r2, [r3, #0]
 8002b9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ba2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	fa93 f2a3 	rbit	r2, r3
 8002bac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bb0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002bb4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bb6:	4b41      	ldr	r3, [pc, #260]	@ (8002cbc <HAL_RCC_OscConfig+0x934>)
 8002bb8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002bba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bbe:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002bc2:	2102      	movs	r1, #2
 8002bc4:	6019      	str	r1, [r3, #0]
 8002bc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bca:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	fa93 f1a3 	rbit	r1, r3
 8002bd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bd8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002bdc:	6019      	str	r1, [r3, #0]
  return result;
 8002bde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002be2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	fab3 f383 	clz	r3, r3
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	f003 031f 	and.w	r3, r3, #31
 8002bf8:	2101      	movs	r1, #1
 8002bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8002bfe:	4013      	ands	r3, r2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d197      	bne.n	8002b34 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c08:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0304 	and.w	r3, r3, #4
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	f000 81a1 	beq.w	8002f5c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c20:	4b26      	ldr	r3, [pc, #152]	@ (8002cbc <HAL_RCC_OscConfig+0x934>)
 8002c22:	69db      	ldr	r3, [r3, #28]
 8002c24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d116      	bne.n	8002c5a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c2c:	4b23      	ldr	r3, [pc, #140]	@ (8002cbc <HAL_RCC_OscConfig+0x934>)
 8002c2e:	69db      	ldr	r3, [r3, #28]
 8002c30:	4a22      	ldr	r2, [pc, #136]	@ (8002cbc <HAL_RCC_OscConfig+0x934>)
 8002c32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c36:	61d3      	str	r3, [r2, #28]
 8002c38:	4b20      	ldr	r3, [pc, #128]	@ (8002cbc <HAL_RCC_OscConfig+0x934>)
 8002c3a:	69db      	ldr	r3, [r3, #28]
 8002c3c:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002c40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c44:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002c48:	601a      	str	r2, [r3, #0]
 8002c4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c4e:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002c52:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002c54:	2301      	movs	r3, #1
 8002c56:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c5a:	4b1a      	ldr	r3, [pc, #104]	@ (8002cc4 <HAL_RCC_OscConfig+0x93c>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d11a      	bne.n	8002c9c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c66:	4b17      	ldr	r3, [pc, #92]	@ (8002cc4 <HAL_RCC_OscConfig+0x93c>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a16      	ldr	r2, [pc, #88]	@ (8002cc4 <HAL_RCC_OscConfig+0x93c>)
 8002c6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c70:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c72:	f7fe fa1d 	bl	80010b0 <HAL_GetTick>
 8002c76:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c7a:	e009      	b.n	8002c90 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c7c:	f7fe fa18 	bl	80010b0 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	2b64      	cmp	r3, #100	@ 0x64
 8002c8a:	d901      	bls.n	8002c90 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e3b1      	b.n	80033f4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c90:	4b0c      	ldr	r3, [pc, #48]	@ (8002cc4 <HAL_RCC_OscConfig+0x93c>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d0ef      	beq.n	8002c7c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ca0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d10d      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x940>
 8002cac:	4b03      	ldr	r3, [pc, #12]	@ (8002cbc <HAL_RCC_OscConfig+0x934>)
 8002cae:	6a1b      	ldr	r3, [r3, #32]
 8002cb0:	4a02      	ldr	r2, [pc, #8]	@ (8002cbc <HAL_RCC_OscConfig+0x934>)
 8002cb2:	f043 0301 	orr.w	r3, r3, #1
 8002cb6:	6213      	str	r3, [r2, #32]
 8002cb8:	e03c      	b.n	8002d34 <HAL_RCC_OscConfig+0x9ac>
 8002cba:	bf00      	nop
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	10908120 	.word	0x10908120
 8002cc4:	40007000 	.word	0x40007000
 8002cc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ccc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d10c      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x96a>
 8002cd8:	4bc1      	ldr	r3, [pc, #772]	@ (8002fe0 <HAL_RCC_OscConfig+0xc58>)
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	4ac0      	ldr	r2, [pc, #768]	@ (8002fe0 <HAL_RCC_OscConfig+0xc58>)
 8002cde:	f023 0301 	bic.w	r3, r3, #1
 8002ce2:	6213      	str	r3, [r2, #32]
 8002ce4:	4bbe      	ldr	r3, [pc, #760]	@ (8002fe0 <HAL_RCC_OscConfig+0xc58>)
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
 8002ce8:	4abd      	ldr	r2, [pc, #756]	@ (8002fe0 <HAL_RCC_OscConfig+0xc58>)
 8002cea:	f023 0304 	bic.w	r3, r3, #4
 8002cee:	6213      	str	r3, [r2, #32]
 8002cf0:	e020      	b.n	8002d34 <HAL_RCC_OscConfig+0x9ac>
 8002cf2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cf6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	2b05      	cmp	r3, #5
 8002d00:	d10c      	bne.n	8002d1c <HAL_RCC_OscConfig+0x994>
 8002d02:	4bb7      	ldr	r3, [pc, #732]	@ (8002fe0 <HAL_RCC_OscConfig+0xc58>)
 8002d04:	6a1b      	ldr	r3, [r3, #32]
 8002d06:	4ab6      	ldr	r2, [pc, #728]	@ (8002fe0 <HAL_RCC_OscConfig+0xc58>)
 8002d08:	f043 0304 	orr.w	r3, r3, #4
 8002d0c:	6213      	str	r3, [r2, #32]
 8002d0e:	4bb4      	ldr	r3, [pc, #720]	@ (8002fe0 <HAL_RCC_OscConfig+0xc58>)
 8002d10:	6a1b      	ldr	r3, [r3, #32]
 8002d12:	4ab3      	ldr	r2, [pc, #716]	@ (8002fe0 <HAL_RCC_OscConfig+0xc58>)
 8002d14:	f043 0301 	orr.w	r3, r3, #1
 8002d18:	6213      	str	r3, [r2, #32]
 8002d1a:	e00b      	b.n	8002d34 <HAL_RCC_OscConfig+0x9ac>
 8002d1c:	4bb0      	ldr	r3, [pc, #704]	@ (8002fe0 <HAL_RCC_OscConfig+0xc58>)
 8002d1e:	6a1b      	ldr	r3, [r3, #32]
 8002d20:	4aaf      	ldr	r2, [pc, #700]	@ (8002fe0 <HAL_RCC_OscConfig+0xc58>)
 8002d22:	f023 0301 	bic.w	r3, r3, #1
 8002d26:	6213      	str	r3, [r2, #32]
 8002d28:	4bad      	ldr	r3, [pc, #692]	@ (8002fe0 <HAL_RCC_OscConfig+0xc58>)
 8002d2a:	6a1b      	ldr	r3, [r3, #32]
 8002d2c:	4aac      	ldr	r2, [pc, #688]	@ (8002fe0 <HAL_RCC_OscConfig+0xc58>)
 8002d2e:	f023 0304 	bic.w	r3, r3, #4
 8002d32:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d38:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	f000 8081 	beq.w	8002e48 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d46:	f7fe f9b3 	bl	80010b0 <HAL_GetTick>
 8002d4a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d4e:	e00b      	b.n	8002d68 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d50:	f7fe f9ae 	bl	80010b0 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d901      	bls.n	8002d68 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e345      	b.n	80033f4 <HAL_RCC_OscConfig+0x106c>
 8002d68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d6c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002d70:	2202      	movs	r2, #2
 8002d72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d78:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	fa93 f2a3 	rbit	r2, r3
 8002d82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d86:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002d8a:	601a      	str	r2, [r3, #0]
 8002d8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d90:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002d94:	2202      	movs	r2, #2
 8002d96:	601a      	str	r2, [r3, #0]
 8002d98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d9c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	fa93 f2a3 	rbit	r2, r3
 8002da6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002daa:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002dae:	601a      	str	r2, [r3, #0]
  return result;
 8002db0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002db4:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002db8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dba:	fab3 f383 	clz	r3, r3
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	095b      	lsrs	r3, r3, #5
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	f043 0302 	orr.w	r3, r3, #2
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d102      	bne.n	8002dd4 <HAL_RCC_OscConfig+0xa4c>
 8002dce:	4b84      	ldr	r3, [pc, #528]	@ (8002fe0 <HAL_RCC_OscConfig+0xc58>)
 8002dd0:	6a1b      	ldr	r3, [r3, #32]
 8002dd2:	e013      	b.n	8002dfc <HAL_RCC_OscConfig+0xa74>
 8002dd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dd8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002ddc:	2202      	movs	r2, #2
 8002dde:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002de4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	fa93 f2a3 	rbit	r2, r3
 8002dee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002df2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	4b79      	ldr	r3, [pc, #484]	@ (8002fe0 <HAL_RCC_OscConfig+0xc58>)
 8002dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dfc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e00:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002e04:	2102      	movs	r1, #2
 8002e06:	6011      	str	r1, [r2, #0]
 8002e08:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e0c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002e10:	6812      	ldr	r2, [r2, #0]
 8002e12:	fa92 f1a2 	rbit	r1, r2
 8002e16:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e1a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002e1e:	6011      	str	r1, [r2, #0]
  return result;
 8002e20:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e24:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002e28:	6812      	ldr	r2, [r2, #0]
 8002e2a:	fab2 f282 	clz	r2, r2
 8002e2e:	b2d2      	uxtb	r2, r2
 8002e30:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e34:	b2d2      	uxtb	r2, r2
 8002e36:	f002 021f 	and.w	r2, r2, #31
 8002e3a:	2101      	movs	r1, #1
 8002e3c:	fa01 f202 	lsl.w	r2, r1, r2
 8002e40:	4013      	ands	r3, r2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d084      	beq.n	8002d50 <HAL_RCC_OscConfig+0x9c8>
 8002e46:	e07f      	b.n	8002f48 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e48:	f7fe f932 	bl	80010b0 <HAL_GetTick>
 8002e4c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e50:	e00b      	b.n	8002e6a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e52:	f7fe f92d 	bl	80010b0 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e2c4      	b.n	80033f4 <HAL_RCC_OscConfig+0x106c>
 8002e6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e6e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002e72:	2202      	movs	r2, #2
 8002e74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e7a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	fa93 f2a3 	rbit	r2, r3
 8002e84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e88:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002e8c:	601a      	str	r2, [r3, #0]
 8002e8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e92:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002e96:	2202      	movs	r2, #2
 8002e98:	601a      	str	r2, [r3, #0]
 8002e9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e9e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	fa93 f2a3 	rbit	r2, r3
 8002ea8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eac:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002eb0:	601a      	str	r2, [r3, #0]
  return result;
 8002eb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eb6:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002eba:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ebc:	fab3 f383 	clz	r3, r3
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	095b      	lsrs	r3, r3, #5
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	f043 0302 	orr.w	r3, r3, #2
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d102      	bne.n	8002ed6 <HAL_RCC_OscConfig+0xb4e>
 8002ed0:	4b43      	ldr	r3, [pc, #268]	@ (8002fe0 <HAL_RCC_OscConfig+0xc58>)
 8002ed2:	6a1b      	ldr	r3, [r3, #32]
 8002ed4:	e013      	b.n	8002efe <HAL_RCC_OscConfig+0xb76>
 8002ed6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eda:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002ede:	2202      	movs	r2, #2
 8002ee0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ee6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	fa93 f2a3 	rbit	r2, r3
 8002ef0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ef4:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002ef8:	601a      	str	r2, [r3, #0]
 8002efa:	4b39      	ldr	r3, [pc, #228]	@ (8002fe0 <HAL_RCC_OscConfig+0xc58>)
 8002efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002efe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f02:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002f06:	2102      	movs	r1, #2
 8002f08:	6011      	str	r1, [r2, #0]
 8002f0a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f0e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002f12:	6812      	ldr	r2, [r2, #0]
 8002f14:	fa92 f1a2 	rbit	r1, r2
 8002f18:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f1c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002f20:	6011      	str	r1, [r2, #0]
  return result;
 8002f22:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f26:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002f2a:	6812      	ldr	r2, [r2, #0]
 8002f2c:	fab2 f282 	clz	r2, r2
 8002f30:	b2d2      	uxtb	r2, r2
 8002f32:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f36:	b2d2      	uxtb	r2, r2
 8002f38:	f002 021f 	and.w	r2, r2, #31
 8002f3c:	2101      	movs	r1, #1
 8002f3e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f42:	4013      	ands	r3, r2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d184      	bne.n	8002e52 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f48:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d105      	bne.n	8002f5c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f50:	4b23      	ldr	r3, [pc, #140]	@ (8002fe0 <HAL_RCC_OscConfig+0xc58>)
 8002f52:	69db      	ldr	r3, [r3, #28]
 8002f54:	4a22      	ldr	r2, [pc, #136]	@ (8002fe0 <HAL_RCC_OscConfig+0xc58>)
 8002f56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f5a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f60:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	69db      	ldr	r3, [r3, #28]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f000 8242 	beq.w	80033f2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f6e:	4b1c      	ldr	r3, [pc, #112]	@ (8002fe0 <HAL_RCC_OscConfig+0xc58>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f003 030c 	and.w	r3, r3, #12
 8002f76:	2b08      	cmp	r3, #8
 8002f78:	f000 8213 	beq.w	80033a2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f80:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	69db      	ldr	r3, [r3, #28]
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	f040 8162 	bne.w	8003252 <HAL_RCC_OscConfig+0xeca>
 8002f8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f92:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002f96:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002f9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fa0:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	fa93 f2a3 	rbit	r2, r3
 8002faa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fae:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002fb2:	601a      	str	r2, [r3, #0]
  return result;
 8002fb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fb8:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002fbc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fbe:	fab3 f383 	clz	r3, r3
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002fc8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	461a      	mov	r2, r3
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd4:	f7fe f86c 	bl	80010b0 <HAL_GetTick>
 8002fd8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fdc:	e00c      	b.n	8002ff8 <HAL_RCC_OscConfig+0xc70>
 8002fde:	bf00      	nop
 8002fe0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fe4:	f7fe f864 	bl	80010b0 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d901      	bls.n	8002ff8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e1fd      	b.n	80033f4 <HAL_RCC_OscConfig+0x106c>
 8002ff8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ffc:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003000:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003004:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003006:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800300a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	fa93 f2a3 	rbit	r2, r3
 8003014:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003018:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800301c:	601a      	str	r2, [r3, #0]
  return result;
 800301e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003022:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003026:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003028:	fab3 f383 	clz	r3, r3
 800302c:	b2db      	uxtb	r3, r3
 800302e:	095b      	lsrs	r3, r3, #5
 8003030:	b2db      	uxtb	r3, r3
 8003032:	f043 0301 	orr.w	r3, r3, #1
 8003036:	b2db      	uxtb	r3, r3
 8003038:	2b01      	cmp	r3, #1
 800303a:	d102      	bne.n	8003042 <HAL_RCC_OscConfig+0xcba>
 800303c:	4bb0      	ldr	r3, [pc, #704]	@ (8003300 <HAL_RCC_OscConfig+0xf78>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	e027      	b.n	8003092 <HAL_RCC_OscConfig+0xd0a>
 8003042:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003046:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800304a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800304e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003050:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003054:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	fa93 f2a3 	rbit	r2, r3
 800305e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003062:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003066:	601a      	str	r2, [r3, #0]
 8003068:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800306c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003070:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003074:	601a      	str	r2, [r3, #0]
 8003076:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800307a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	fa93 f2a3 	rbit	r2, r3
 8003084:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003088:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800308c:	601a      	str	r2, [r3, #0]
 800308e:	4b9c      	ldr	r3, [pc, #624]	@ (8003300 <HAL_RCC_OscConfig+0xf78>)
 8003090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003092:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003096:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800309a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800309e:	6011      	str	r1, [r2, #0]
 80030a0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030a4:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80030a8:	6812      	ldr	r2, [r2, #0]
 80030aa:	fa92 f1a2 	rbit	r1, r2
 80030ae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030b2:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80030b6:	6011      	str	r1, [r2, #0]
  return result;
 80030b8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030bc:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80030c0:	6812      	ldr	r2, [r2, #0]
 80030c2:	fab2 f282 	clz	r2, r2
 80030c6:	b2d2      	uxtb	r2, r2
 80030c8:	f042 0220 	orr.w	r2, r2, #32
 80030cc:	b2d2      	uxtb	r2, r2
 80030ce:	f002 021f 	and.w	r2, r2, #31
 80030d2:	2101      	movs	r1, #1
 80030d4:	fa01 f202 	lsl.w	r2, r1, r2
 80030d8:	4013      	ands	r3, r2
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d182      	bne.n	8002fe4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030de:	4b88      	ldr	r3, [pc, #544]	@ (8003300 <HAL_RCC_OscConfig+0xf78>)
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80030e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030ea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80030f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030f6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6a1b      	ldr	r3, [r3, #32]
 80030fe:	430b      	orrs	r3, r1
 8003100:	497f      	ldr	r1, [pc, #508]	@ (8003300 <HAL_RCC_OscConfig+0xf78>)
 8003102:	4313      	orrs	r3, r2
 8003104:	604b      	str	r3, [r1, #4]
 8003106:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800310a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800310e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003112:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003114:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003118:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	fa93 f2a3 	rbit	r2, r3
 8003122:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003126:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800312a:	601a      	str	r2, [r3, #0]
  return result;
 800312c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003130:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003134:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003136:	fab3 f383 	clz	r3, r3
 800313a:	b2db      	uxtb	r3, r3
 800313c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003140:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	461a      	mov	r2, r3
 8003148:	2301      	movs	r3, #1
 800314a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800314c:	f7fd ffb0 	bl	80010b0 <HAL_GetTick>
 8003150:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003154:	e009      	b.n	800316a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003156:	f7fd ffab 	bl	80010b0 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b02      	cmp	r3, #2
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e144      	b.n	80033f4 <HAL_RCC_OscConfig+0x106c>
 800316a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800316e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003172:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003176:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003178:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800317c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	fa93 f2a3 	rbit	r2, r3
 8003186:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800318a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800318e:	601a      	str	r2, [r3, #0]
  return result;
 8003190:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003194:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003198:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800319a:	fab3 f383 	clz	r3, r3
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	095b      	lsrs	r3, r3, #5
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	f043 0301 	orr.w	r3, r3, #1
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d102      	bne.n	80031b4 <HAL_RCC_OscConfig+0xe2c>
 80031ae:	4b54      	ldr	r3, [pc, #336]	@ (8003300 <HAL_RCC_OscConfig+0xf78>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	e027      	b.n	8003204 <HAL_RCC_OscConfig+0xe7c>
 80031b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031b8:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80031bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80031c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031c6:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	fa93 f2a3 	rbit	r2, r3
 80031d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031d4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80031d8:	601a      	str	r2, [r3, #0]
 80031da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031de:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80031e2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80031e6:	601a      	str	r2, [r3, #0]
 80031e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031ec:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	fa93 f2a3 	rbit	r2, r3
 80031f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031fa:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80031fe:	601a      	str	r2, [r3, #0]
 8003200:	4b3f      	ldr	r3, [pc, #252]	@ (8003300 <HAL_RCC_OscConfig+0xf78>)
 8003202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003204:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003208:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800320c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003210:	6011      	str	r1, [r2, #0]
 8003212:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003216:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800321a:	6812      	ldr	r2, [r2, #0]
 800321c:	fa92 f1a2 	rbit	r1, r2
 8003220:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003224:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003228:	6011      	str	r1, [r2, #0]
  return result;
 800322a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800322e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003232:	6812      	ldr	r2, [r2, #0]
 8003234:	fab2 f282 	clz	r2, r2
 8003238:	b2d2      	uxtb	r2, r2
 800323a:	f042 0220 	orr.w	r2, r2, #32
 800323e:	b2d2      	uxtb	r2, r2
 8003240:	f002 021f 	and.w	r2, r2, #31
 8003244:	2101      	movs	r1, #1
 8003246:	fa01 f202 	lsl.w	r2, r1, r2
 800324a:	4013      	ands	r3, r2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d082      	beq.n	8003156 <HAL_RCC_OscConfig+0xdce>
 8003250:	e0cf      	b.n	80033f2 <HAL_RCC_OscConfig+0x106a>
 8003252:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003256:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800325a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800325e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003260:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003264:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	fa93 f2a3 	rbit	r2, r3
 800326e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003272:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003276:	601a      	str	r2, [r3, #0]
  return result;
 8003278:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800327c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003280:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003282:	fab3 f383 	clz	r3, r3
 8003286:	b2db      	uxtb	r3, r3
 8003288:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800328c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	461a      	mov	r2, r3
 8003294:	2300      	movs	r3, #0
 8003296:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003298:	f7fd ff0a 	bl	80010b0 <HAL_GetTick>
 800329c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032a0:	e009      	b.n	80032b6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032a2:	f7fd ff05 	bl	80010b0 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e09e      	b.n	80033f4 <HAL_RCC_OscConfig+0x106c>
 80032b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032ba:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80032be:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80032c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032c8:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	fa93 f2a3 	rbit	r2, r3
 80032d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032d6:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80032da:	601a      	str	r2, [r3, #0]
  return result;
 80032dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032e0:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80032e4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032e6:	fab3 f383 	clz	r3, r3
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	095b      	lsrs	r3, r3, #5
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	f043 0301 	orr.w	r3, r3, #1
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d104      	bne.n	8003304 <HAL_RCC_OscConfig+0xf7c>
 80032fa:	4b01      	ldr	r3, [pc, #4]	@ (8003300 <HAL_RCC_OscConfig+0xf78>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	e029      	b.n	8003354 <HAL_RCC_OscConfig+0xfcc>
 8003300:	40021000 	.word	0x40021000
 8003304:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003308:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800330c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003310:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003312:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003316:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	fa93 f2a3 	rbit	r2, r3
 8003320:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003324:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003328:	601a      	str	r2, [r3, #0]
 800332a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800332e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003332:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003336:	601a      	str	r2, [r3, #0]
 8003338:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800333c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	fa93 f2a3 	rbit	r2, r3
 8003346:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800334a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800334e:	601a      	str	r2, [r3, #0]
 8003350:	4b2b      	ldr	r3, [pc, #172]	@ (8003400 <HAL_RCC_OscConfig+0x1078>)
 8003352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003354:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003358:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800335c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003360:	6011      	str	r1, [r2, #0]
 8003362:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003366:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800336a:	6812      	ldr	r2, [r2, #0]
 800336c:	fa92 f1a2 	rbit	r1, r2
 8003370:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003374:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003378:	6011      	str	r1, [r2, #0]
  return result;
 800337a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800337e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003382:	6812      	ldr	r2, [r2, #0]
 8003384:	fab2 f282 	clz	r2, r2
 8003388:	b2d2      	uxtb	r2, r2
 800338a:	f042 0220 	orr.w	r2, r2, #32
 800338e:	b2d2      	uxtb	r2, r2
 8003390:	f002 021f 	and.w	r2, r2, #31
 8003394:	2101      	movs	r1, #1
 8003396:	fa01 f202 	lsl.w	r2, r1, r2
 800339a:	4013      	ands	r3, r2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d180      	bne.n	80032a2 <HAL_RCC_OscConfig+0xf1a>
 80033a0:	e027      	b.n	80033f2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033a6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	69db      	ldr	r3, [r3, #28]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d101      	bne.n	80033b6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e01e      	b.n	80033f4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033b6:	4b12      	ldr	r3, [pc, #72]	@ (8003400 <HAL_RCC_OscConfig+0x1078>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80033be:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80033c2:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80033c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033ca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6a1b      	ldr	r3, [r3, #32]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d10b      	bne.n	80033ee <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80033d6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80033da:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80033de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d001      	beq.n	80033f2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e000      	b.n	80033f4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	40021000 	.word	0x40021000

08003404 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b09e      	sub	sp, #120	@ 0x78
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800340e:	2300      	movs	r3, #0
 8003410:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d101      	bne.n	800341c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e162      	b.n	80036e2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800341c:	4b90      	ldr	r3, [pc, #576]	@ (8003660 <HAL_RCC_ClockConfig+0x25c>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0307 	and.w	r3, r3, #7
 8003424:	683a      	ldr	r2, [r7, #0]
 8003426:	429a      	cmp	r2, r3
 8003428:	d910      	bls.n	800344c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800342a:	4b8d      	ldr	r3, [pc, #564]	@ (8003660 <HAL_RCC_ClockConfig+0x25c>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f023 0207 	bic.w	r2, r3, #7
 8003432:	498b      	ldr	r1, [pc, #556]	@ (8003660 <HAL_RCC_ClockConfig+0x25c>)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	4313      	orrs	r3, r2
 8003438:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800343a:	4b89      	ldr	r3, [pc, #548]	@ (8003660 <HAL_RCC_ClockConfig+0x25c>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0307 	and.w	r3, r3, #7
 8003442:	683a      	ldr	r2, [r7, #0]
 8003444:	429a      	cmp	r2, r3
 8003446:	d001      	beq.n	800344c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e14a      	b.n	80036e2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0302 	and.w	r3, r3, #2
 8003454:	2b00      	cmp	r3, #0
 8003456:	d008      	beq.n	800346a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003458:	4b82      	ldr	r3, [pc, #520]	@ (8003664 <HAL_RCC_ClockConfig+0x260>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	497f      	ldr	r1, [pc, #508]	@ (8003664 <HAL_RCC_ClockConfig+0x260>)
 8003466:	4313      	orrs	r3, r2
 8003468:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b00      	cmp	r3, #0
 8003474:	f000 80dc 	beq.w	8003630 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d13c      	bne.n	80034fa <HAL_RCC_ClockConfig+0xf6>
 8003480:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003484:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003486:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003488:	fa93 f3a3 	rbit	r3, r3
 800348c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800348e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003490:	fab3 f383 	clz	r3, r3
 8003494:	b2db      	uxtb	r3, r3
 8003496:	095b      	lsrs	r3, r3, #5
 8003498:	b2db      	uxtb	r3, r3
 800349a:	f043 0301 	orr.w	r3, r3, #1
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d102      	bne.n	80034aa <HAL_RCC_ClockConfig+0xa6>
 80034a4:	4b6f      	ldr	r3, [pc, #444]	@ (8003664 <HAL_RCC_ClockConfig+0x260>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	e00f      	b.n	80034ca <HAL_RCC_ClockConfig+0xc6>
 80034aa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80034ae:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80034b2:	fa93 f3a3 	rbit	r3, r3
 80034b6:	667b      	str	r3, [r7, #100]	@ 0x64
 80034b8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80034bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80034be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80034c0:	fa93 f3a3 	rbit	r3, r3
 80034c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80034c6:	4b67      	ldr	r3, [pc, #412]	@ (8003664 <HAL_RCC_ClockConfig+0x260>)
 80034c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ca:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80034ce:	65ba      	str	r2, [r7, #88]	@ 0x58
 80034d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80034d2:	fa92 f2a2 	rbit	r2, r2
 80034d6:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80034d8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80034da:	fab2 f282 	clz	r2, r2
 80034de:	b2d2      	uxtb	r2, r2
 80034e0:	f042 0220 	orr.w	r2, r2, #32
 80034e4:	b2d2      	uxtb	r2, r2
 80034e6:	f002 021f 	and.w	r2, r2, #31
 80034ea:	2101      	movs	r1, #1
 80034ec:	fa01 f202 	lsl.w	r2, r1, r2
 80034f0:	4013      	ands	r3, r2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d17b      	bne.n	80035ee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e0f3      	b.n	80036e2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d13c      	bne.n	800357c <HAL_RCC_ClockConfig+0x178>
 8003502:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003506:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003508:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800350a:	fa93 f3a3 	rbit	r3, r3
 800350e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003510:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003512:	fab3 f383 	clz	r3, r3
 8003516:	b2db      	uxtb	r3, r3
 8003518:	095b      	lsrs	r3, r3, #5
 800351a:	b2db      	uxtb	r3, r3
 800351c:	f043 0301 	orr.w	r3, r3, #1
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b01      	cmp	r3, #1
 8003524:	d102      	bne.n	800352c <HAL_RCC_ClockConfig+0x128>
 8003526:	4b4f      	ldr	r3, [pc, #316]	@ (8003664 <HAL_RCC_ClockConfig+0x260>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	e00f      	b.n	800354c <HAL_RCC_ClockConfig+0x148>
 800352c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003530:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003532:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003534:	fa93 f3a3 	rbit	r3, r3
 8003538:	647b      	str	r3, [r7, #68]	@ 0x44
 800353a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800353e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003540:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003542:	fa93 f3a3 	rbit	r3, r3
 8003546:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003548:	4b46      	ldr	r3, [pc, #280]	@ (8003664 <HAL_RCC_ClockConfig+0x260>)
 800354a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800354c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003550:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003552:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003554:	fa92 f2a2 	rbit	r2, r2
 8003558:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800355a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800355c:	fab2 f282 	clz	r2, r2
 8003560:	b2d2      	uxtb	r2, r2
 8003562:	f042 0220 	orr.w	r2, r2, #32
 8003566:	b2d2      	uxtb	r2, r2
 8003568:	f002 021f 	and.w	r2, r2, #31
 800356c:	2101      	movs	r1, #1
 800356e:	fa01 f202 	lsl.w	r2, r1, r2
 8003572:	4013      	ands	r3, r2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d13a      	bne.n	80035ee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e0b2      	b.n	80036e2 <HAL_RCC_ClockConfig+0x2de>
 800357c:	2302      	movs	r3, #2
 800357e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003582:	fa93 f3a3 	rbit	r3, r3
 8003586:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800358a:	fab3 f383 	clz	r3, r3
 800358e:	b2db      	uxtb	r3, r3
 8003590:	095b      	lsrs	r3, r3, #5
 8003592:	b2db      	uxtb	r3, r3
 8003594:	f043 0301 	orr.w	r3, r3, #1
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b01      	cmp	r3, #1
 800359c:	d102      	bne.n	80035a4 <HAL_RCC_ClockConfig+0x1a0>
 800359e:	4b31      	ldr	r3, [pc, #196]	@ (8003664 <HAL_RCC_ClockConfig+0x260>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	e00d      	b.n	80035c0 <HAL_RCC_ClockConfig+0x1bc>
 80035a4:	2302      	movs	r3, #2
 80035a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035aa:	fa93 f3a3 	rbit	r3, r3
 80035ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80035b0:	2302      	movs	r3, #2
 80035b2:	623b      	str	r3, [r7, #32]
 80035b4:	6a3b      	ldr	r3, [r7, #32]
 80035b6:	fa93 f3a3 	rbit	r3, r3
 80035ba:	61fb      	str	r3, [r7, #28]
 80035bc:	4b29      	ldr	r3, [pc, #164]	@ (8003664 <HAL_RCC_ClockConfig+0x260>)
 80035be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c0:	2202      	movs	r2, #2
 80035c2:	61ba      	str	r2, [r7, #24]
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	fa92 f2a2 	rbit	r2, r2
 80035ca:	617a      	str	r2, [r7, #20]
  return result;
 80035cc:	697a      	ldr	r2, [r7, #20]
 80035ce:	fab2 f282 	clz	r2, r2
 80035d2:	b2d2      	uxtb	r2, r2
 80035d4:	f042 0220 	orr.w	r2, r2, #32
 80035d8:	b2d2      	uxtb	r2, r2
 80035da:	f002 021f 	and.w	r2, r2, #31
 80035de:	2101      	movs	r1, #1
 80035e0:	fa01 f202 	lsl.w	r2, r1, r2
 80035e4:	4013      	ands	r3, r2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e079      	b.n	80036e2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035ee:	4b1d      	ldr	r3, [pc, #116]	@ (8003664 <HAL_RCC_ClockConfig+0x260>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f023 0203 	bic.w	r2, r3, #3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	491a      	ldr	r1, [pc, #104]	@ (8003664 <HAL_RCC_ClockConfig+0x260>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003600:	f7fd fd56 	bl	80010b0 <HAL_GetTick>
 8003604:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003606:	e00a      	b.n	800361e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003608:	f7fd fd52 	bl	80010b0 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003616:	4293      	cmp	r3, r2
 8003618:	d901      	bls.n	800361e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e061      	b.n	80036e2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800361e:	4b11      	ldr	r3, [pc, #68]	@ (8003664 <HAL_RCC_ClockConfig+0x260>)
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f003 020c 	and.w	r2, r3, #12
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	429a      	cmp	r2, r3
 800362e:	d1eb      	bne.n	8003608 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003630:	4b0b      	ldr	r3, [pc, #44]	@ (8003660 <HAL_RCC_ClockConfig+0x25c>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0307 	and.w	r3, r3, #7
 8003638:	683a      	ldr	r2, [r7, #0]
 800363a:	429a      	cmp	r2, r3
 800363c:	d214      	bcs.n	8003668 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800363e:	4b08      	ldr	r3, [pc, #32]	@ (8003660 <HAL_RCC_ClockConfig+0x25c>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f023 0207 	bic.w	r2, r3, #7
 8003646:	4906      	ldr	r1, [pc, #24]	@ (8003660 <HAL_RCC_ClockConfig+0x25c>)
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	4313      	orrs	r3, r2
 800364c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800364e:	4b04      	ldr	r3, [pc, #16]	@ (8003660 <HAL_RCC_ClockConfig+0x25c>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0307 	and.w	r3, r3, #7
 8003656:	683a      	ldr	r2, [r7, #0]
 8003658:	429a      	cmp	r2, r3
 800365a:	d005      	beq.n	8003668 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e040      	b.n	80036e2 <HAL_RCC_ClockConfig+0x2de>
 8003660:	40022000 	.word	0x40022000
 8003664:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0304 	and.w	r3, r3, #4
 8003670:	2b00      	cmp	r3, #0
 8003672:	d008      	beq.n	8003686 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003674:	4b1d      	ldr	r3, [pc, #116]	@ (80036ec <HAL_RCC_ClockConfig+0x2e8>)
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	491a      	ldr	r1, [pc, #104]	@ (80036ec <HAL_RCC_ClockConfig+0x2e8>)
 8003682:	4313      	orrs	r3, r2
 8003684:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0308 	and.w	r3, r3, #8
 800368e:	2b00      	cmp	r3, #0
 8003690:	d009      	beq.n	80036a6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003692:	4b16      	ldr	r3, [pc, #88]	@ (80036ec <HAL_RCC_ClockConfig+0x2e8>)
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	00db      	lsls	r3, r3, #3
 80036a0:	4912      	ldr	r1, [pc, #72]	@ (80036ec <HAL_RCC_ClockConfig+0x2e8>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80036a6:	f000 f829 	bl	80036fc <HAL_RCC_GetSysClockFreq>
 80036aa:	4601      	mov	r1, r0
 80036ac:	4b0f      	ldr	r3, [pc, #60]	@ (80036ec <HAL_RCC_ClockConfig+0x2e8>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80036b4:	22f0      	movs	r2, #240	@ 0xf0
 80036b6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	fa92 f2a2 	rbit	r2, r2
 80036be:	60fa      	str	r2, [r7, #12]
  return result;
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	fab2 f282 	clz	r2, r2
 80036c6:	b2d2      	uxtb	r2, r2
 80036c8:	40d3      	lsrs	r3, r2
 80036ca:	4a09      	ldr	r2, [pc, #36]	@ (80036f0 <HAL_RCC_ClockConfig+0x2ec>)
 80036cc:	5cd3      	ldrb	r3, [r2, r3]
 80036ce:	fa21 f303 	lsr.w	r3, r1, r3
 80036d2:	4a08      	ldr	r2, [pc, #32]	@ (80036f4 <HAL_RCC_ClockConfig+0x2f0>)
 80036d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80036d6:	4b08      	ldr	r3, [pc, #32]	@ (80036f8 <HAL_RCC_ClockConfig+0x2f4>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4618      	mov	r0, r3
 80036dc:	f7fd fca4 	bl	8001028 <HAL_InitTick>
  
  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3778      	adds	r7, #120	@ 0x78
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	40021000 	.word	0x40021000
 80036f0:	08006c88 	.word	0x08006c88
 80036f4:	20000000 	.word	0x20000000
 80036f8:	20000004 	.word	0x20000004

080036fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b087      	sub	sp, #28
 8003700:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003702:	2300      	movs	r3, #0
 8003704:	60fb      	str	r3, [r7, #12]
 8003706:	2300      	movs	r3, #0
 8003708:	60bb      	str	r3, [r7, #8]
 800370a:	2300      	movs	r3, #0
 800370c:	617b      	str	r3, [r7, #20]
 800370e:	2300      	movs	r3, #0
 8003710:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003712:	2300      	movs	r3, #0
 8003714:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003716:	4b1e      	ldr	r3, [pc, #120]	@ (8003790 <HAL_RCC_GetSysClockFreq+0x94>)
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f003 030c 	and.w	r3, r3, #12
 8003722:	2b04      	cmp	r3, #4
 8003724:	d002      	beq.n	800372c <HAL_RCC_GetSysClockFreq+0x30>
 8003726:	2b08      	cmp	r3, #8
 8003728:	d003      	beq.n	8003732 <HAL_RCC_GetSysClockFreq+0x36>
 800372a:	e026      	b.n	800377a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800372c:	4b19      	ldr	r3, [pc, #100]	@ (8003794 <HAL_RCC_GetSysClockFreq+0x98>)
 800372e:	613b      	str	r3, [r7, #16]
      break;
 8003730:	e026      	b.n	8003780 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	0c9b      	lsrs	r3, r3, #18
 8003736:	f003 030f 	and.w	r3, r3, #15
 800373a:	4a17      	ldr	r2, [pc, #92]	@ (8003798 <HAL_RCC_GetSysClockFreq+0x9c>)
 800373c:	5cd3      	ldrb	r3, [r2, r3]
 800373e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003740:	4b13      	ldr	r3, [pc, #76]	@ (8003790 <HAL_RCC_GetSysClockFreq+0x94>)
 8003742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003744:	f003 030f 	and.w	r3, r3, #15
 8003748:	4a14      	ldr	r2, [pc, #80]	@ (800379c <HAL_RCC_GetSysClockFreq+0xa0>)
 800374a:	5cd3      	ldrb	r3, [r2, r3]
 800374c:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d008      	beq.n	800376a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003758:	4a0e      	ldr	r2, [pc, #56]	@ (8003794 <HAL_RCC_GetSysClockFreq+0x98>)
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	fb02 f303 	mul.w	r3, r2, r3
 8003766:	617b      	str	r3, [r7, #20]
 8003768:	e004      	b.n	8003774 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a0c      	ldr	r2, [pc, #48]	@ (80037a0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800376e:	fb02 f303 	mul.w	r3, r2, r3
 8003772:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	613b      	str	r3, [r7, #16]
      break;
 8003778:	e002      	b.n	8003780 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800377a:	4b06      	ldr	r3, [pc, #24]	@ (8003794 <HAL_RCC_GetSysClockFreq+0x98>)
 800377c:	613b      	str	r3, [r7, #16]
      break;
 800377e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003780:	693b      	ldr	r3, [r7, #16]
}
 8003782:	4618      	mov	r0, r3
 8003784:	371c      	adds	r7, #28
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	40021000 	.word	0x40021000
 8003794:	007a1200 	.word	0x007a1200
 8003798:	08006ca0 	.word	0x08006ca0
 800379c:	08006cb0 	.word	0x08006cb0
 80037a0:	003d0900 	.word	0x003d0900

080037a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037a4:	b480      	push	{r7}
 80037a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037a8:	4b03      	ldr	r3, [pc, #12]	@ (80037b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80037aa:	681b      	ldr	r3, [r3, #0]
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	20000000 	.word	0x20000000

080037bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80037c2:	f7ff ffef 	bl	80037a4 <HAL_RCC_GetHCLKFreq>
 80037c6:	4601      	mov	r1, r0
 80037c8:	4b0b      	ldr	r3, [pc, #44]	@ (80037f8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80037d0:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80037d4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	fa92 f2a2 	rbit	r2, r2
 80037dc:	603a      	str	r2, [r7, #0]
  return result;
 80037de:	683a      	ldr	r2, [r7, #0]
 80037e0:	fab2 f282 	clz	r2, r2
 80037e4:	b2d2      	uxtb	r2, r2
 80037e6:	40d3      	lsrs	r3, r2
 80037e8:	4a04      	ldr	r2, [pc, #16]	@ (80037fc <HAL_RCC_GetPCLK1Freq+0x40>)
 80037ea:	5cd3      	ldrb	r3, [r2, r3]
 80037ec:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80037f0:	4618      	mov	r0, r3
 80037f2:	3708      	adds	r7, #8
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	40021000 	.word	0x40021000
 80037fc:	08006c98 	.word	0x08006c98

08003800 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003806:	f7ff ffcd 	bl	80037a4 <HAL_RCC_GetHCLKFreq>
 800380a:	4601      	mov	r1, r0
 800380c:	4b0b      	ldr	r3, [pc, #44]	@ (800383c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003814:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003818:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	fa92 f2a2 	rbit	r2, r2
 8003820:	603a      	str	r2, [r7, #0]
  return result;
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	fab2 f282 	clz	r2, r2
 8003828:	b2d2      	uxtb	r2, r2
 800382a:	40d3      	lsrs	r3, r2
 800382c:	4a04      	ldr	r2, [pc, #16]	@ (8003840 <HAL_RCC_GetPCLK2Freq+0x40>)
 800382e:	5cd3      	ldrb	r3, [r2, r3]
 8003830:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003834:	4618      	mov	r0, r3
 8003836:	3708      	adds	r7, #8
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	40021000 	.word	0x40021000
 8003840:	08006c98 	.word	0x08006c98

08003844 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b092      	sub	sp, #72	@ 0x48
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800384c:	2300      	movs	r3, #0
 800384e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003850:	2300      	movs	r3, #0
 8003852:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003854:	2300      	movs	r3, #0
 8003856:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003862:	2b00      	cmp	r3, #0
 8003864:	f000 80cd 	beq.w	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003868:	4b86      	ldr	r3, [pc, #536]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800386a:	69db      	ldr	r3, [r3, #28]
 800386c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d10e      	bne.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003874:	4b83      	ldr	r3, [pc, #524]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003876:	69db      	ldr	r3, [r3, #28]
 8003878:	4a82      	ldr	r2, [pc, #520]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800387a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800387e:	61d3      	str	r3, [r2, #28]
 8003880:	4b80      	ldr	r3, [pc, #512]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003882:	69db      	ldr	r3, [r3, #28]
 8003884:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003888:	60bb      	str	r3, [r7, #8]
 800388a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800388c:	2301      	movs	r3, #1
 800388e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003892:	4b7d      	ldr	r3, [pc, #500]	@ (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800389a:	2b00      	cmp	r3, #0
 800389c:	d118      	bne.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800389e:	4b7a      	ldr	r3, [pc, #488]	@ (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a79      	ldr	r2, [pc, #484]	@ (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80038a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038a8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038aa:	f7fd fc01 	bl	80010b0 <HAL_GetTick>
 80038ae:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038b0:	e008      	b.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038b2:	f7fd fbfd 	bl	80010b0 <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	2b64      	cmp	r3, #100	@ 0x64
 80038be:	d901      	bls.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e0db      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038c4:	4b70      	ldr	r3, [pc, #448]	@ (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d0f0      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038d0:	4b6c      	ldr	r3, [pc, #432]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038d2:	6a1b      	ldr	r3, [r3, #32]
 80038d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80038da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d07d      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x198>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038e8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d076      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80038ee:	4b65      	ldr	r3, [pc, #404]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80038f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80038fc:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003900:	fa93 f3a3 	rbit	r3, r3
 8003904:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003908:	fab3 f383 	clz	r3, r3
 800390c:	b2db      	uxtb	r3, r3
 800390e:	461a      	mov	r2, r3
 8003910:	4b5e      	ldr	r3, [pc, #376]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003912:	4413      	add	r3, r2
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	461a      	mov	r2, r3
 8003918:	2301      	movs	r3, #1
 800391a:	6013      	str	r3, [r2, #0]
 800391c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003920:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003924:	fa93 f3a3 	rbit	r3, r3
 8003928:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800392a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800392c:	fab3 f383 	clz	r3, r3
 8003930:	b2db      	uxtb	r3, r3
 8003932:	461a      	mov	r2, r3
 8003934:	4b55      	ldr	r3, [pc, #340]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003936:	4413      	add	r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	461a      	mov	r2, r3
 800393c:	2300      	movs	r3, #0
 800393e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003940:	4a50      	ldr	r2, [pc, #320]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003942:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003944:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003946:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003948:	f003 0301 	and.w	r3, r3, #1
 800394c:	2b00      	cmp	r3, #0
 800394e:	d045      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003950:	f7fd fbae 	bl	80010b0 <HAL_GetTick>
 8003954:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003956:	e00a      	b.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003958:	f7fd fbaa 	bl	80010b0 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003966:	4293      	cmp	r3, r2
 8003968:	d901      	bls.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e086      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x238>
 800396e:	2302      	movs	r3, #2
 8003970:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003974:	fa93 f3a3 	rbit	r3, r3
 8003978:	627b      	str	r3, [r7, #36]	@ 0x24
 800397a:	2302      	movs	r3, #2
 800397c:	623b      	str	r3, [r7, #32]
 800397e:	6a3b      	ldr	r3, [r7, #32]
 8003980:	fa93 f3a3 	rbit	r3, r3
 8003984:	61fb      	str	r3, [r7, #28]
  return result;
 8003986:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003988:	fab3 f383 	clz	r3, r3
 800398c:	b2db      	uxtb	r3, r3
 800398e:	095b      	lsrs	r3, r3, #5
 8003990:	b2db      	uxtb	r3, r3
 8003992:	f043 0302 	orr.w	r3, r3, #2
 8003996:	b2db      	uxtb	r3, r3
 8003998:	2b02      	cmp	r3, #2
 800399a:	d102      	bne.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800399c:	4b39      	ldr	r3, [pc, #228]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800399e:	6a1b      	ldr	r3, [r3, #32]
 80039a0:	e007      	b.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80039a2:	2302      	movs	r3, #2
 80039a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	fa93 f3a3 	rbit	r3, r3
 80039ac:	617b      	str	r3, [r7, #20]
 80039ae:	4b35      	ldr	r3, [pc, #212]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80039b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b2:	2202      	movs	r2, #2
 80039b4:	613a      	str	r2, [r7, #16]
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	fa92 f2a2 	rbit	r2, r2
 80039bc:	60fa      	str	r2, [r7, #12]
  return result;
 80039be:	68fa      	ldr	r2, [r7, #12]
 80039c0:	fab2 f282 	clz	r2, r2
 80039c4:	b2d2      	uxtb	r2, r2
 80039c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80039ca:	b2d2      	uxtb	r2, r2
 80039cc:	f002 021f 	and.w	r2, r2, #31
 80039d0:	2101      	movs	r1, #1
 80039d2:	fa01 f202 	lsl.w	r2, r1, r2
 80039d6:	4013      	ands	r3, r2
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d0bd      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80039dc:	4b29      	ldr	r3, [pc, #164]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80039de:	6a1b      	ldr	r3, [r3, #32]
 80039e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	4926      	ldr	r1, [pc, #152]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80039ee:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d105      	bne.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039f6:	4b23      	ldr	r3, [pc, #140]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80039f8:	69db      	ldr	r3, [r3, #28]
 80039fa:	4a22      	ldr	r2, [pc, #136]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80039fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a00:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d008      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a0e:	4b1d      	ldr	r3, [pc, #116]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a12:	f023 0203 	bic.w	r2, r3, #3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	491a      	ldr	r1, [pc, #104]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0320 	and.w	r3, r3, #32
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d008      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a2c:	4b15      	ldr	r3, [pc, #84]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a30:	f023 0210 	bic.w	r2, r3, #16
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	4912      	ldr	r1, [pc, #72]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d008      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003a4a:	4b0e      	ldr	r3, [pc, #56]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a4e:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	490b      	ldr	r1, [pc, #44]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d008      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003a68:	4b06      	ldr	r3, [pc, #24]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a6c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	695b      	ldr	r3, [r3, #20]
 8003a74:	4903      	ldr	r1, [pc, #12]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3748      	adds	r7, #72	@ 0x48
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	40021000 	.word	0x40021000
 8003a88:	40007000 	.word	0x40007000
 8003a8c:	10908100 	.word	0x10908100

08003a90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d101      	bne.n	8003aa2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e049      	b.n	8003b36 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d106      	bne.n	8003abc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f7fd f8b4 	bl	8000c24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2202      	movs	r2, #2
 8003ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	3304      	adds	r3, #4
 8003acc:	4619      	mov	r1, r3
 8003ace:	4610      	mov	r0, r2
 8003ad0:	f000 fb60 	bl	8004194 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3708      	adds	r7, #8
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b082      	sub	sp, #8
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d101      	bne.n	8003b50 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e049      	b.n	8003be4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d106      	bne.n	8003b6a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 f841 	bl	8003bec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2202      	movs	r2, #2
 8003b6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	3304      	adds	r3, #4
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	4610      	mov	r0, r2
 8003b7e:	f000 fb09 	bl	8004194 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2201      	movs	r2, #1
 8003b96:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3708      	adds	r7, #8
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003bf4:	bf00      	nop
 8003bf6:	370c      	adds	r7, #12
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d109      	bne.n	8003c24 <HAL_TIM_PWM_Start+0x24>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	bf14      	ite	ne
 8003c1c:	2301      	movne	r3, #1
 8003c1e:	2300      	moveq	r3, #0
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	e03c      	b.n	8003c9e <HAL_TIM_PWM_Start+0x9e>
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	2b04      	cmp	r3, #4
 8003c28:	d109      	bne.n	8003c3e <HAL_TIM_PWM_Start+0x3e>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	bf14      	ite	ne
 8003c36:	2301      	movne	r3, #1
 8003c38:	2300      	moveq	r3, #0
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	e02f      	b.n	8003c9e <HAL_TIM_PWM_Start+0x9e>
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	2b08      	cmp	r3, #8
 8003c42:	d109      	bne.n	8003c58 <HAL_TIM_PWM_Start+0x58>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	bf14      	ite	ne
 8003c50:	2301      	movne	r3, #1
 8003c52:	2300      	moveq	r3, #0
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	e022      	b.n	8003c9e <HAL_TIM_PWM_Start+0x9e>
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	2b0c      	cmp	r3, #12
 8003c5c:	d109      	bne.n	8003c72 <HAL_TIM_PWM_Start+0x72>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	bf14      	ite	ne
 8003c6a:	2301      	movne	r3, #1
 8003c6c:	2300      	moveq	r3, #0
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	e015      	b.n	8003c9e <HAL_TIM_PWM_Start+0x9e>
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	2b10      	cmp	r3, #16
 8003c76:	d109      	bne.n	8003c8c <HAL_TIM_PWM_Start+0x8c>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	bf14      	ite	ne
 8003c84:	2301      	movne	r3, #1
 8003c86:	2300      	moveq	r3, #0
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	e008      	b.n	8003c9e <HAL_TIM_PWM_Start+0x9e>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	bf14      	ite	ne
 8003c98:	2301      	movne	r3, #1
 8003c9a:	2300      	moveq	r3, #0
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d001      	beq.n	8003ca6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e088      	b.n	8003db8 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d104      	bne.n	8003cb6 <HAL_TIM_PWM_Start+0xb6>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2202      	movs	r2, #2
 8003cb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003cb4:	e023      	b.n	8003cfe <HAL_TIM_PWM_Start+0xfe>
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	2b04      	cmp	r3, #4
 8003cba:	d104      	bne.n	8003cc6 <HAL_TIM_PWM_Start+0xc6>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2202      	movs	r2, #2
 8003cc0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003cc4:	e01b      	b.n	8003cfe <HAL_TIM_PWM_Start+0xfe>
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	2b08      	cmp	r3, #8
 8003cca:	d104      	bne.n	8003cd6 <HAL_TIM_PWM_Start+0xd6>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2202      	movs	r2, #2
 8003cd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003cd4:	e013      	b.n	8003cfe <HAL_TIM_PWM_Start+0xfe>
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	2b0c      	cmp	r3, #12
 8003cda:	d104      	bne.n	8003ce6 <HAL_TIM_PWM_Start+0xe6>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2202      	movs	r2, #2
 8003ce0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003ce4:	e00b      	b.n	8003cfe <HAL_TIM_PWM_Start+0xfe>
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	2b10      	cmp	r3, #16
 8003cea:	d104      	bne.n	8003cf6 <HAL_TIM_PWM_Start+0xf6>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2202      	movs	r2, #2
 8003cf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003cf4:	e003      	b.n	8003cfe <HAL_TIM_PWM_Start+0xfe>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2202      	movs	r2, #2
 8003cfa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2201      	movs	r2, #1
 8003d04:	6839      	ldr	r1, [r7, #0]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f000 fe08 	bl	800491c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a2b      	ldr	r2, [pc, #172]	@ (8003dc0 <HAL_TIM_PWM_Start+0x1c0>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d00e      	beq.n	8003d34 <HAL_TIM_PWM_Start+0x134>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a2a      	ldr	r2, [pc, #168]	@ (8003dc4 <HAL_TIM_PWM_Start+0x1c4>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d009      	beq.n	8003d34 <HAL_TIM_PWM_Start+0x134>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a28      	ldr	r2, [pc, #160]	@ (8003dc8 <HAL_TIM_PWM_Start+0x1c8>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d004      	beq.n	8003d34 <HAL_TIM_PWM_Start+0x134>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a27      	ldr	r2, [pc, #156]	@ (8003dcc <HAL_TIM_PWM_Start+0x1cc>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d101      	bne.n	8003d38 <HAL_TIM_PWM_Start+0x138>
 8003d34:	2301      	movs	r3, #1
 8003d36:	e000      	b.n	8003d3a <HAL_TIM_PWM_Start+0x13a>
 8003d38:	2300      	movs	r3, #0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d007      	beq.n	8003d4e <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d4c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a1b      	ldr	r2, [pc, #108]	@ (8003dc0 <HAL_TIM_PWM_Start+0x1c0>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d00e      	beq.n	8003d76 <HAL_TIM_PWM_Start+0x176>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d60:	d009      	beq.n	8003d76 <HAL_TIM_PWM_Start+0x176>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a1a      	ldr	r2, [pc, #104]	@ (8003dd0 <HAL_TIM_PWM_Start+0x1d0>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d004      	beq.n	8003d76 <HAL_TIM_PWM_Start+0x176>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a14      	ldr	r2, [pc, #80]	@ (8003dc4 <HAL_TIM_PWM_Start+0x1c4>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d115      	bne.n	8003da2 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	689a      	ldr	r2, [r3, #8]
 8003d7c:	4b15      	ldr	r3, [pc, #84]	@ (8003dd4 <HAL_TIM_PWM_Start+0x1d4>)
 8003d7e:	4013      	ands	r3, r2
 8003d80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2b06      	cmp	r3, #6
 8003d86:	d015      	beq.n	8003db4 <HAL_TIM_PWM_Start+0x1b4>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d8e:	d011      	beq.n	8003db4 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f042 0201 	orr.w	r2, r2, #1
 8003d9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003da0:	e008      	b.n	8003db4 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f042 0201 	orr.w	r2, r2, #1
 8003db0:	601a      	str	r2, [r3, #0]
 8003db2:	e000      	b.n	8003db6 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003db4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3710      	adds	r7, #16
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	40012c00 	.word	0x40012c00
 8003dc4:	40014000 	.word	0x40014000
 8003dc8:	40014400 	.word	0x40014400
 8003dcc:	40014800 	.word	0x40014800
 8003dd0:	40000400 	.word	0x40000400
 8003dd4:	00010007 	.word	0x00010007

08003dd8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b086      	sub	sp, #24
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003de4:	2300      	movs	r3, #0
 8003de6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d101      	bne.n	8003df6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003df2:	2302      	movs	r3, #2
 8003df4:	e0ff      	b.n	8003ff6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2b14      	cmp	r3, #20
 8003e02:	f200 80f0 	bhi.w	8003fe6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003e06:	a201      	add	r2, pc, #4	@ (adr r2, 8003e0c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e0c:	08003e61 	.word	0x08003e61
 8003e10:	08003fe7 	.word	0x08003fe7
 8003e14:	08003fe7 	.word	0x08003fe7
 8003e18:	08003fe7 	.word	0x08003fe7
 8003e1c:	08003ea1 	.word	0x08003ea1
 8003e20:	08003fe7 	.word	0x08003fe7
 8003e24:	08003fe7 	.word	0x08003fe7
 8003e28:	08003fe7 	.word	0x08003fe7
 8003e2c:	08003ee3 	.word	0x08003ee3
 8003e30:	08003fe7 	.word	0x08003fe7
 8003e34:	08003fe7 	.word	0x08003fe7
 8003e38:	08003fe7 	.word	0x08003fe7
 8003e3c:	08003f23 	.word	0x08003f23
 8003e40:	08003fe7 	.word	0x08003fe7
 8003e44:	08003fe7 	.word	0x08003fe7
 8003e48:	08003fe7 	.word	0x08003fe7
 8003e4c:	08003f65 	.word	0x08003f65
 8003e50:	08003fe7 	.word	0x08003fe7
 8003e54:	08003fe7 	.word	0x08003fe7
 8003e58:	08003fe7 	.word	0x08003fe7
 8003e5c:	08003fa5 	.word	0x08003fa5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68b9      	ldr	r1, [r7, #8]
 8003e66:	4618      	mov	r0, r3
 8003e68:	f000 fa18 	bl	800429c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	699a      	ldr	r2, [r3, #24]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f042 0208 	orr.w	r2, r2, #8
 8003e7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	699a      	ldr	r2, [r3, #24]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f022 0204 	bic.w	r2, r2, #4
 8003e8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	6999      	ldr	r1, [r3, #24]
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	691a      	ldr	r2, [r3, #16]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	430a      	orrs	r2, r1
 8003e9c:	619a      	str	r2, [r3, #24]
      break;
 8003e9e:	e0a5      	b.n	8003fec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68b9      	ldr	r1, [r7, #8]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f000 fa7e 	bl	80043a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	699a      	ldr	r2, [r3, #24]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003eba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	699a      	ldr	r2, [r3, #24]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003eca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6999      	ldr	r1, [r3, #24]
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	021a      	lsls	r2, r3, #8
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	430a      	orrs	r2, r1
 8003ede:	619a      	str	r2, [r3, #24]
      break;
 8003ee0:	e084      	b.n	8003fec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68b9      	ldr	r1, [r7, #8]
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f000 fadd 	bl	80044a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	69da      	ldr	r2, [r3, #28]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f042 0208 	orr.w	r2, r2, #8
 8003efc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	69da      	ldr	r2, [r3, #28]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f022 0204 	bic.w	r2, r2, #4
 8003f0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	69d9      	ldr	r1, [r3, #28]
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	691a      	ldr	r2, [r3, #16]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	430a      	orrs	r2, r1
 8003f1e:	61da      	str	r2, [r3, #28]
      break;
 8003f20:	e064      	b.n	8003fec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68b9      	ldr	r1, [r7, #8]
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f000 fb3b 	bl	80045a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	69da      	ldr	r2, [r3, #28]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	69da      	ldr	r2, [r3, #28]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	69d9      	ldr	r1, [r3, #28]
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	021a      	lsls	r2, r3, #8
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	61da      	str	r2, [r3, #28]
      break;
 8003f62:	e043      	b.n	8003fec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68b9      	ldr	r1, [r7, #8]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f000 fb7e 	bl	800466c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f042 0208 	orr.w	r2, r2, #8
 8003f7e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f022 0204 	bic.w	r2, r2, #4
 8003f8e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	691a      	ldr	r2, [r3, #16]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003fa2:	e023      	b.n	8003fec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68b9      	ldr	r1, [r7, #8]
 8003faa:	4618      	mov	r0, r3
 8003fac:	f000 fbbc 	bl	8004728 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003fbe:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fce:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	021a      	lsls	r2, r3, #8
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003fe4:	e002      	b.n	8003fec <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	75fb      	strb	r3, [r7, #23]
      break;
 8003fea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003ff4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3718      	adds	r7, #24
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop

08004000 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800400a:	2300      	movs	r3, #0
 800400c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004014:	2b01      	cmp	r3, #1
 8004016:	d101      	bne.n	800401c <HAL_TIM_ConfigClockSource+0x1c>
 8004018:	2302      	movs	r3, #2
 800401a:	e0b6      	b.n	800418a <HAL_TIM_ConfigClockSource+0x18a>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2202      	movs	r2, #2
 8004028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800403a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800403e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004046:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68ba      	ldr	r2, [r7, #8]
 800404e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004058:	d03e      	beq.n	80040d8 <HAL_TIM_ConfigClockSource+0xd8>
 800405a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800405e:	f200 8087 	bhi.w	8004170 <HAL_TIM_ConfigClockSource+0x170>
 8004062:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004066:	f000 8086 	beq.w	8004176 <HAL_TIM_ConfigClockSource+0x176>
 800406a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800406e:	d87f      	bhi.n	8004170 <HAL_TIM_ConfigClockSource+0x170>
 8004070:	2b70      	cmp	r3, #112	@ 0x70
 8004072:	d01a      	beq.n	80040aa <HAL_TIM_ConfigClockSource+0xaa>
 8004074:	2b70      	cmp	r3, #112	@ 0x70
 8004076:	d87b      	bhi.n	8004170 <HAL_TIM_ConfigClockSource+0x170>
 8004078:	2b60      	cmp	r3, #96	@ 0x60
 800407a:	d050      	beq.n	800411e <HAL_TIM_ConfigClockSource+0x11e>
 800407c:	2b60      	cmp	r3, #96	@ 0x60
 800407e:	d877      	bhi.n	8004170 <HAL_TIM_ConfigClockSource+0x170>
 8004080:	2b50      	cmp	r3, #80	@ 0x50
 8004082:	d03c      	beq.n	80040fe <HAL_TIM_ConfigClockSource+0xfe>
 8004084:	2b50      	cmp	r3, #80	@ 0x50
 8004086:	d873      	bhi.n	8004170 <HAL_TIM_ConfigClockSource+0x170>
 8004088:	2b40      	cmp	r3, #64	@ 0x40
 800408a:	d058      	beq.n	800413e <HAL_TIM_ConfigClockSource+0x13e>
 800408c:	2b40      	cmp	r3, #64	@ 0x40
 800408e:	d86f      	bhi.n	8004170 <HAL_TIM_ConfigClockSource+0x170>
 8004090:	2b30      	cmp	r3, #48	@ 0x30
 8004092:	d064      	beq.n	800415e <HAL_TIM_ConfigClockSource+0x15e>
 8004094:	2b30      	cmp	r3, #48	@ 0x30
 8004096:	d86b      	bhi.n	8004170 <HAL_TIM_ConfigClockSource+0x170>
 8004098:	2b20      	cmp	r3, #32
 800409a:	d060      	beq.n	800415e <HAL_TIM_ConfigClockSource+0x15e>
 800409c:	2b20      	cmp	r3, #32
 800409e:	d867      	bhi.n	8004170 <HAL_TIM_ConfigClockSource+0x170>
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d05c      	beq.n	800415e <HAL_TIM_ConfigClockSource+0x15e>
 80040a4:	2b10      	cmp	r3, #16
 80040a6:	d05a      	beq.n	800415e <HAL_TIM_ConfigClockSource+0x15e>
 80040a8:	e062      	b.n	8004170 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80040ba:	f000 fc0f 	bl	80048dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80040cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68ba      	ldr	r2, [r7, #8]
 80040d4:	609a      	str	r2, [r3, #8]
      break;
 80040d6:	e04f      	b.n	8004178 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80040e8:	f000 fbf8 	bl	80048dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	689a      	ldr	r2, [r3, #8]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80040fa:	609a      	str	r2, [r3, #8]
      break;
 80040fc:	e03c      	b.n	8004178 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800410a:	461a      	mov	r2, r3
 800410c:	f000 fb6c 	bl	80047e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2150      	movs	r1, #80	@ 0x50
 8004116:	4618      	mov	r0, r3
 8004118:	f000 fbc5 	bl	80048a6 <TIM_ITRx_SetConfig>
      break;
 800411c:	e02c      	b.n	8004178 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800412a:	461a      	mov	r2, r3
 800412c:	f000 fb8b 	bl	8004846 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2160      	movs	r1, #96	@ 0x60
 8004136:	4618      	mov	r0, r3
 8004138:	f000 fbb5 	bl	80048a6 <TIM_ITRx_SetConfig>
      break;
 800413c:	e01c      	b.n	8004178 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800414a:	461a      	mov	r2, r3
 800414c:	f000 fb4c 	bl	80047e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2140      	movs	r1, #64	@ 0x40
 8004156:	4618      	mov	r0, r3
 8004158:	f000 fba5 	bl	80048a6 <TIM_ITRx_SetConfig>
      break;
 800415c:	e00c      	b.n	8004178 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4619      	mov	r1, r3
 8004168:	4610      	mov	r0, r2
 800416a:	f000 fb9c 	bl	80048a6 <TIM_ITRx_SetConfig>
      break;
 800416e:	e003      	b.n	8004178 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	73fb      	strb	r3, [r7, #15]
      break;
 8004174:	e000      	b.n	8004178 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004176:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004188:	7bfb      	ldrb	r3, [r7, #15]
}
 800418a:	4618      	mov	r0, r3
 800418c:	3710      	adds	r7, #16
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
	...

08004194 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a38      	ldr	r2, [pc, #224]	@ (8004288 <TIM_Base_SetConfig+0xf4>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d007      	beq.n	80041bc <TIM_Base_SetConfig+0x28>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041b2:	d003      	beq.n	80041bc <TIM_Base_SetConfig+0x28>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a35      	ldr	r2, [pc, #212]	@ (800428c <TIM_Base_SetConfig+0xf8>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d108      	bne.n	80041ce <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a2d      	ldr	r2, [pc, #180]	@ (8004288 <TIM_Base_SetConfig+0xf4>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d013      	beq.n	80041fe <TIM_Base_SetConfig+0x6a>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041dc:	d00f      	beq.n	80041fe <TIM_Base_SetConfig+0x6a>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a2a      	ldr	r2, [pc, #168]	@ (800428c <TIM_Base_SetConfig+0xf8>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d00b      	beq.n	80041fe <TIM_Base_SetConfig+0x6a>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a29      	ldr	r2, [pc, #164]	@ (8004290 <TIM_Base_SetConfig+0xfc>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d007      	beq.n	80041fe <TIM_Base_SetConfig+0x6a>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a28      	ldr	r2, [pc, #160]	@ (8004294 <TIM_Base_SetConfig+0x100>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d003      	beq.n	80041fe <TIM_Base_SetConfig+0x6a>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a27      	ldr	r2, [pc, #156]	@ (8004298 <TIM_Base_SetConfig+0x104>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d108      	bne.n	8004210 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004204:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	4313      	orrs	r3, r2
 800420e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	4313      	orrs	r3, r2
 800421c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	689a      	ldr	r2, [r3, #8]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a14      	ldr	r2, [pc, #80]	@ (8004288 <TIM_Base_SetConfig+0xf4>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d00b      	beq.n	8004254 <TIM_Base_SetConfig+0xc0>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a14      	ldr	r2, [pc, #80]	@ (8004290 <TIM_Base_SetConfig+0xfc>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d007      	beq.n	8004254 <TIM_Base_SetConfig+0xc0>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a13      	ldr	r2, [pc, #76]	@ (8004294 <TIM_Base_SetConfig+0x100>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d003      	beq.n	8004254 <TIM_Base_SetConfig+0xc0>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a12      	ldr	r2, [pc, #72]	@ (8004298 <TIM_Base_SetConfig+0x104>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d103      	bne.n	800425c <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	691a      	ldr	r2, [r3, #16]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	2b01      	cmp	r3, #1
 800426c:	d105      	bne.n	800427a <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	f023 0201 	bic.w	r2, r3, #1
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	611a      	str	r2, [r3, #16]
  }
}
 800427a:	bf00      	nop
 800427c:	3714      	adds	r7, #20
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	40012c00 	.word	0x40012c00
 800428c:	40000400 	.word	0x40000400
 8004290:	40014000 	.word	0x40014000
 8004294:	40014400 	.word	0x40014400
 8004298:	40014800 	.word	0x40014800

0800429c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800429c:	b480      	push	{r7}
 800429e:	b087      	sub	sp, #28
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a1b      	ldr	r3, [r3, #32]
 80042aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a1b      	ldr	r3, [r3, #32]
 80042b0:	f023 0201 	bic.w	r2, r3, #1
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f023 0303 	bic.w	r3, r3, #3
 80042d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68fa      	ldr	r2, [r7, #12]
 80042de:	4313      	orrs	r3, r2
 80042e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	f023 0302 	bic.w	r3, r3, #2
 80042e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a28      	ldr	r2, [pc, #160]	@ (8004398 <TIM_OC1_SetConfig+0xfc>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d00b      	beq.n	8004314 <TIM_OC1_SetConfig+0x78>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a27      	ldr	r2, [pc, #156]	@ (800439c <TIM_OC1_SetConfig+0x100>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d007      	beq.n	8004314 <TIM_OC1_SetConfig+0x78>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4a26      	ldr	r2, [pc, #152]	@ (80043a0 <TIM_OC1_SetConfig+0x104>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d003      	beq.n	8004314 <TIM_OC1_SetConfig+0x78>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4a25      	ldr	r2, [pc, #148]	@ (80043a4 <TIM_OC1_SetConfig+0x108>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d10c      	bne.n	800432e <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	f023 0308 	bic.w	r3, r3, #8
 800431a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	697a      	ldr	r2, [r7, #20]
 8004322:	4313      	orrs	r3, r2
 8004324:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	f023 0304 	bic.w	r3, r3, #4
 800432c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a19      	ldr	r2, [pc, #100]	@ (8004398 <TIM_OC1_SetConfig+0xfc>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d00b      	beq.n	800434e <TIM_OC1_SetConfig+0xb2>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a18      	ldr	r2, [pc, #96]	@ (800439c <TIM_OC1_SetConfig+0x100>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d007      	beq.n	800434e <TIM_OC1_SetConfig+0xb2>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a17      	ldr	r2, [pc, #92]	@ (80043a0 <TIM_OC1_SetConfig+0x104>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d003      	beq.n	800434e <TIM_OC1_SetConfig+0xb2>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a16      	ldr	r2, [pc, #88]	@ (80043a4 <TIM_OC1_SetConfig+0x108>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d111      	bne.n	8004372 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004354:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800435c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	693a      	ldr	r2, [r7, #16]
 8004364:	4313      	orrs	r3, r2
 8004366:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	699b      	ldr	r3, [r3, #24]
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	4313      	orrs	r3, r2
 8004370:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	693a      	ldr	r2, [r7, #16]
 8004376:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	68fa      	ldr	r2, [r7, #12]
 800437c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	685a      	ldr	r2, [r3, #4]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	697a      	ldr	r2, [r7, #20]
 800438a:	621a      	str	r2, [r3, #32]
}
 800438c:	bf00      	nop
 800438e:	371c      	adds	r7, #28
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr
 8004398:	40012c00 	.word	0x40012c00
 800439c:	40014000 	.word	0x40014000
 80043a0:	40014400 	.word	0x40014400
 80043a4:	40014800 	.word	0x40014800

080043a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b087      	sub	sp, #28
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a1b      	ldr	r3, [r3, #32]
 80043bc:	f023 0210 	bic.w	r2, r3, #16
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80043d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	021b      	lsls	r3, r3, #8
 80043ea:	68fa      	ldr	r2, [r7, #12]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	f023 0320 	bic.w	r3, r3, #32
 80043f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	011b      	lsls	r3, r3, #4
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	4313      	orrs	r3, r2
 8004402:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4a24      	ldr	r2, [pc, #144]	@ (8004498 <TIM_OC2_SetConfig+0xf0>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d10d      	bne.n	8004428 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004412:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	011b      	lsls	r3, r3, #4
 800441a:	697a      	ldr	r2, [r7, #20]
 800441c:	4313      	orrs	r3, r2
 800441e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004426:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4a1b      	ldr	r2, [pc, #108]	@ (8004498 <TIM_OC2_SetConfig+0xf0>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d00b      	beq.n	8004448 <TIM_OC2_SetConfig+0xa0>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4a1a      	ldr	r2, [pc, #104]	@ (800449c <TIM_OC2_SetConfig+0xf4>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d007      	beq.n	8004448 <TIM_OC2_SetConfig+0xa0>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a19      	ldr	r2, [pc, #100]	@ (80044a0 <TIM_OC2_SetConfig+0xf8>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d003      	beq.n	8004448 <TIM_OC2_SetConfig+0xa0>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4a18      	ldr	r2, [pc, #96]	@ (80044a4 <TIM_OC2_SetConfig+0xfc>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d113      	bne.n	8004470 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800444e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004456:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	695b      	ldr	r3, [r3, #20]
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	693a      	ldr	r2, [r7, #16]
 8004460:	4313      	orrs	r3, r2
 8004462:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	699b      	ldr	r3, [r3, #24]
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	693a      	ldr	r2, [r7, #16]
 800446c:	4313      	orrs	r3, r2
 800446e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	693a      	ldr	r2, [r7, #16]
 8004474:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	685a      	ldr	r2, [r3, #4]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	697a      	ldr	r2, [r7, #20]
 8004488:	621a      	str	r2, [r3, #32]
}
 800448a:	bf00      	nop
 800448c:	371c      	adds	r7, #28
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	40012c00 	.word	0x40012c00
 800449c:	40014000 	.word	0x40014000
 80044a0:	40014400 	.word	0x40014400
 80044a4:	40014800 	.word	0x40014800

080044a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b087      	sub	sp, #28
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a1b      	ldr	r3, [r3, #32]
 80044b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a1b      	ldr	r3, [r3, #32]
 80044bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	69db      	ldr	r3, [r3, #28]
 80044ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f023 0303 	bic.w	r3, r3, #3
 80044e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80044f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	021b      	lsls	r3, r3, #8
 80044fc:	697a      	ldr	r2, [r7, #20]
 80044fe:	4313      	orrs	r3, r2
 8004500:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a23      	ldr	r2, [pc, #140]	@ (8004594 <TIM_OC3_SetConfig+0xec>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d10d      	bne.n	8004526 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004510:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	021b      	lsls	r3, r3, #8
 8004518:	697a      	ldr	r2, [r7, #20]
 800451a:	4313      	orrs	r3, r2
 800451c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004524:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a1a      	ldr	r2, [pc, #104]	@ (8004594 <TIM_OC3_SetConfig+0xec>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d00b      	beq.n	8004546 <TIM_OC3_SetConfig+0x9e>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a19      	ldr	r2, [pc, #100]	@ (8004598 <TIM_OC3_SetConfig+0xf0>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d007      	beq.n	8004546 <TIM_OC3_SetConfig+0x9e>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a18      	ldr	r2, [pc, #96]	@ (800459c <TIM_OC3_SetConfig+0xf4>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d003      	beq.n	8004546 <TIM_OC3_SetConfig+0x9e>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a17      	ldr	r2, [pc, #92]	@ (80045a0 <TIM_OC3_SetConfig+0xf8>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d113      	bne.n	800456e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800454c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004554:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	695b      	ldr	r3, [r3, #20]
 800455a:	011b      	lsls	r3, r3, #4
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	4313      	orrs	r3, r2
 8004560:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	011b      	lsls	r3, r3, #4
 8004568:	693a      	ldr	r2, [r7, #16]
 800456a:	4313      	orrs	r3, r2
 800456c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	693a      	ldr	r2, [r7, #16]
 8004572:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	685a      	ldr	r2, [r3, #4]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	697a      	ldr	r2, [r7, #20]
 8004586:	621a      	str	r2, [r3, #32]
}
 8004588:	bf00      	nop
 800458a:	371c      	adds	r7, #28
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr
 8004594:	40012c00 	.word	0x40012c00
 8004598:	40014000 	.word	0x40014000
 800459c:	40014400 	.word	0x40014400
 80045a0:	40014800 	.word	0x40014800

080045a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b087      	sub	sp, #28
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a1b      	ldr	r3, [r3, #32]
 80045b2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a1b      	ldr	r3, [r3, #32]
 80045b8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	69db      	ldr	r3, [r3, #28]
 80045ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80045d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	021b      	lsls	r3, r3, #8
 80045e6:	68fa      	ldr	r2, [r7, #12]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80045f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	031b      	lsls	r3, r3, #12
 80045fa:	693a      	ldr	r2, [r7, #16]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a16      	ldr	r2, [pc, #88]	@ (800465c <TIM_OC4_SetConfig+0xb8>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d00b      	beq.n	8004620 <TIM_OC4_SetConfig+0x7c>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4a15      	ldr	r2, [pc, #84]	@ (8004660 <TIM_OC4_SetConfig+0xbc>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d007      	beq.n	8004620 <TIM_OC4_SetConfig+0x7c>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4a14      	ldr	r2, [pc, #80]	@ (8004664 <TIM_OC4_SetConfig+0xc0>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d003      	beq.n	8004620 <TIM_OC4_SetConfig+0x7c>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4a13      	ldr	r2, [pc, #76]	@ (8004668 <TIM_OC4_SetConfig+0xc4>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d109      	bne.n	8004634 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004626:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	695b      	ldr	r3, [r3, #20]
 800462c:	019b      	lsls	r3, r3, #6
 800462e:	697a      	ldr	r2, [r7, #20]
 8004630:	4313      	orrs	r3, r2
 8004632:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	697a      	ldr	r2, [r7, #20]
 8004638:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	68fa      	ldr	r2, [r7, #12]
 800463e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	685a      	ldr	r2, [r3, #4]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	693a      	ldr	r2, [r7, #16]
 800464c:	621a      	str	r2, [r3, #32]
}
 800464e:	bf00      	nop
 8004650:	371c      	adds	r7, #28
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	40012c00 	.word	0x40012c00
 8004660:	40014000 	.word	0x40014000
 8004664:	40014400 	.word	0x40014400
 8004668:	40014800 	.word	0x40014800

0800466c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800466c:	b480      	push	{r7}
 800466e:	b087      	sub	sp, #28
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a1b      	ldr	r3, [r3, #32]
 800467a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a1b      	ldr	r3, [r3, #32]
 8004680:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800469a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800469e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68fa      	ldr	r2, [r7, #12]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80046b0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	041b      	lsls	r3, r3, #16
 80046b8:	693a      	ldr	r2, [r7, #16]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a15      	ldr	r2, [pc, #84]	@ (8004718 <TIM_OC5_SetConfig+0xac>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d00b      	beq.n	80046de <TIM_OC5_SetConfig+0x72>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a14      	ldr	r2, [pc, #80]	@ (800471c <TIM_OC5_SetConfig+0xb0>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d007      	beq.n	80046de <TIM_OC5_SetConfig+0x72>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a13      	ldr	r2, [pc, #76]	@ (8004720 <TIM_OC5_SetConfig+0xb4>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d003      	beq.n	80046de <TIM_OC5_SetConfig+0x72>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a12      	ldr	r2, [pc, #72]	@ (8004724 <TIM_OC5_SetConfig+0xb8>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d109      	bne.n	80046f2 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046e4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	695b      	ldr	r3, [r3, #20]
 80046ea:	021b      	lsls	r3, r3, #8
 80046ec:	697a      	ldr	r2, [r7, #20]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	685a      	ldr	r2, [r3, #4]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	693a      	ldr	r2, [r7, #16]
 800470a:	621a      	str	r2, [r3, #32]
}
 800470c:	bf00      	nop
 800470e:	371c      	adds	r7, #28
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr
 8004718:	40012c00 	.word	0x40012c00
 800471c:	40014000 	.word	0x40014000
 8004720:	40014400 	.word	0x40014400
 8004724:	40014800 	.word	0x40014800

08004728 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004728:	b480      	push	{r7}
 800472a:	b087      	sub	sp, #28
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a1b      	ldr	r3, [r3, #32]
 8004736:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a1b      	ldr	r3, [r3, #32]
 800473c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800474e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004756:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800475a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	021b      	lsls	r3, r3, #8
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	4313      	orrs	r3, r2
 8004766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800476e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	051b      	lsls	r3, r3, #20
 8004776:	693a      	ldr	r2, [r7, #16]
 8004778:	4313      	orrs	r3, r2
 800477a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4a16      	ldr	r2, [pc, #88]	@ (80047d8 <TIM_OC6_SetConfig+0xb0>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d00b      	beq.n	800479c <TIM_OC6_SetConfig+0x74>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a15      	ldr	r2, [pc, #84]	@ (80047dc <TIM_OC6_SetConfig+0xb4>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d007      	beq.n	800479c <TIM_OC6_SetConfig+0x74>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a14      	ldr	r2, [pc, #80]	@ (80047e0 <TIM_OC6_SetConfig+0xb8>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d003      	beq.n	800479c <TIM_OC6_SetConfig+0x74>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a13      	ldr	r2, [pc, #76]	@ (80047e4 <TIM_OC6_SetConfig+0xbc>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d109      	bne.n	80047b0 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80047a2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	695b      	ldr	r3, [r3, #20]
 80047a8:	029b      	lsls	r3, r3, #10
 80047aa:	697a      	ldr	r2, [r7, #20]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	697a      	ldr	r2, [r7, #20]
 80047b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	685a      	ldr	r2, [r3, #4]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	693a      	ldr	r2, [r7, #16]
 80047c8:	621a      	str	r2, [r3, #32]
}
 80047ca:	bf00      	nop
 80047cc:	371c      	adds	r7, #28
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
 80047d6:	bf00      	nop
 80047d8:	40012c00 	.word	0x40012c00
 80047dc:	40014000 	.word	0x40014000
 80047e0:	40014400 	.word	0x40014400
 80047e4:	40014800 	.word	0x40014800

080047e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b087      	sub	sp, #28
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6a1b      	ldr	r3, [r3, #32]
 80047f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6a1b      	ldr	r3, [r3, #32]
 80047fe:	f023 0201 	bic.w	r2, r3, #1
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	699b      	ldr	r3, [r3, #24]
 800480a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004812:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	011b      	lsls	r3, r3, #4
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	4313      	orrs	r3, r2
 800481c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	f023 030a 	bic.w	r3, r3, #10
 8004824:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004826:	697a      	ldr	r2, [r7, #20]
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	4313      	orrs	r3, r2
 800482c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	693a      	ldr	r2, [r7, #16]
 8004832:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	697a      	ldr	r2, [r7, #20]
 8004838:	621a      	str	r2, [r3, #32]
}
 800483a:	bf00      	nop
 800483c:	371c      	adds	r7, #28
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr

08004846 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004846:	b480      	push	{r7}
 8004848:	b087      	sub	sp, #28
 800484a:	af00      	add	r7, sp, #0
 800484c:	60f8      	str	r0, [r7, #12]
 800484e:	60b9      	str	r1, [r7, #8]
 8004850:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6a1b      	ldr	r3, [r3, #32]
 8004856:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6a1b      	ldr	r3, [r3, #32]
 800485c:	f023 0210 	bic.w	r2, r3, #16
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	699b      	ldr	r3, [r3, #24]
 8004868:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004870:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	031b      	lsls	r3, r3, #12
 8004876:	693a      	ldr	r2, [r7, #16]
 8004878:	4313      	orrs	r3, r2
 800487a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004882:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	011b      	lsls	r3, r3, #4
 8004888:	697a      	ldr	r2, [r7, #20]
 800488a:	4313      	orrs	r3, r2
 800488c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	693a      	ldr	r2, [r7, #16]
 8004892:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	697a      	ldr	r2, [r7, #20]
 8004898:	621a      	str	r2, [r3, #32]
}
 800489a:	bf00      	nop
 800489c:	371c      	adds	r7, #28
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr

080048a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048a6:	b480      	push	{r7}
 80048a8:	b085      	sub	sp, #20
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
 80048ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048be:	683a      	ldr	r2, [r7, #0]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	f043 0307 	orr.w	r3, r3, #7
 80048c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	609a      	str	r2, [r3, #8]
}
 80048d0:	bf00      	nop
 80048d2:	3714      	adds	r7, #20
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048dc:	b480      	push	{r7}
 80048de:	b087      	sub	sp, #28
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	607a      	str	r2, [r7, #4]
 80048e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80048f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	021a      	lsls	r2, r3, #8
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	431a      	orrs	r2, r3
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	4313      	orrs	r3, r2
 8004904:	697a      	ldr	r2, [r7, #20]
 8004906:	4313      	orrs	r3, r2
 8004908:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	697a      	ldr	r2, [r7, #20]
 800490e:	609a      	str	r2, [r3, #8]
}
 8004910:	bf00      	nop
 8004912:	371c      	adds	r7, #28
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800491c:	b480      	push	{r7}
 800491e:	b087      	sub	sp, #28
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	f003 031f 	and.w	r3, r3, #31
 800492e:	2201      	movs	r2, #1
 8004930:	fa02 f303 	lsl.w	r3, r2, r3
 8004934:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6a1a      	ldr	r2, [r3, #32]
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	43db      	mvns	r3, r3
 800493e:	401a      	ands	r2, r3
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6a1a      	ldr	r2, [r3, #32]
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	f003 031f 	and.w	r3, r3, #31
 800494e:	6879      	ldr	r1, [r7, #4]
 8004950:	fa01 f303 	lsl.w	r3, r1, r3
 8004954:	431a      	orrs	r2, r3
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	621a      	str	r2, [r3, #32]
}
 800495a:	bf00      	nop
 800495c:	371c      	adds	r7, #28
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
	...

08004968 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004968:	b480      	push	{r7}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004978:	2b01      	cmp	r3, #1
 800497a:	d101      	bne.n	8004980 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800497c:	2302      	movs	r3, #2
 800497e:	e054      	b.n	8004a2a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2202      	movs	r2, #2
 800498c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a24      	ldr	r2, [pc, #144]	@ (8004a38 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d108      	bne.n	80049bc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80049b0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a17      	ldr	r2, [pc, #92]	@ (8004a38 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d00e      	beq.n	80049fe <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049e8:	d009      	beq.n	80049fe <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a13      	ldr	r2, [pc, #76]	@ (8004a3c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d004      	beq.n	80049fe <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a11      	ldr	r2, [pc, #68]	@ (8004a40 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d10c      	bne.n	8004a18 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	68ba      	ldr	r2, [r7, #8]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68ba      	ldr	r2, [r7, #8]
 8004a16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004a28:	2300      	movs	r3, #0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3714      	adds	r7, #20
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	40012c00 	.word	0x40012c00
 8004a3c:	40000400 	.word	0x40000400
 8004a40:	40014000 	.word	0x40014000

08004a44 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b085      	sub	sp, #20
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d101      	bne.n	8004a60 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004a5c:	2302      	movs	r3, #2
 8004a5e:	e060      	b.n	8004b22 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	695b      	ldr	r3, [r3, #20]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	699b      	ldr	r3, [r3, #24]
 8004ad4:	041b      	lsls	r3, r3, #16
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a14      	ldr	r2, [pc, #80]	@ (8004b30 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d115      	bne.n	8004b10 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aee:	051b      	lsls	r3, r3, #20
 8004af0:	4313      	orrs	r3, r2
 8004af2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	69db      	ldr	r3, [r3, #28]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	6a1b      	ldr	r3, [r3, #32]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3714      	adds	r7, #20
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	40012c00 	.word	0x40012c00

08004b34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d101      	bne.n	8004b46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e040      	b.n	8004bc8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d106      	bne.n	8004b5c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f7fc f916 	bl	8000d88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2224      	movs	r2, #36	@ 0x24
 8004b60:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f022 0201 	bic.w	r2, r2, #1
 8004b70:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d002      	beq.n	8004b80 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 fe04 	bl	8005788 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 fccb 	bl	800551c <UART_SetConfig>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d101      	bne.n	8004b90 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e01b      	b.n	8004bc8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	685a      	ldr	r2, [r3, #4]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004b9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	689a      	ldr	r2, [r3, #8]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004bae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f042 0201 	orr.w	r2, r2, #1
 8004bbe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f000 fe83 	bl	80058cc <UART_CheckIdleState>
 8004bc6:	4603      	mov	r3, r0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3708      	adds	r7, #8
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b08a      	sub	sp, #40	@ 0x28
 8004bd4:	af02      	add	r7, sp, #8
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	603b      	str	r3, [r7, #0]
 8004bdc:	4613      	mov	r3, r2
 8004bde:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004be4:	2b20      	cmp	r3, #32
 8004be6:	d177      	bne.n	8004cd8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d002      	beq.n	8004bf4 <HAL_UART_Transmit+0x24>
 8004bee:	88fb      	ldrh	r3, [r7, #6]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d101      	bne.n	8004bf8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e070      	b.n	8004cda <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2221      	movs	r2, #33	@ 0x21
 8004c04:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c06:	f7fc fa53 	bl	80010b0 <HAL_GetTick>
 8004c0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	88fa      	ldrh	r2, [r7, #6]
 8004c10:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	88fa      	ldrh	r2, [r7, #6]
 8004c18:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c24:	d108      	bne.n	8004c38 <HAL_UART_Transmit+0x68>
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d104      	bne.n	8004c38 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	61bb      	str	r3, [r7, #24]
 8004c36:	e003      	b.n	8004c40 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c40:	e02f      	b.n	8004ca2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	9300      	str	r3, [sp, #0]
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	2180      	movs	r1, #128	@ 0x80
 8004c4c:	68f8      	ldr	r0, [r7, #12]
 8004c4e:	f000 fee5 	bl	8005a1c <UART_WaitOnFlagUntilTimeout>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d004      	beq.n	8004c62 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2220      	movs	r2, #32
 8004c5c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e03b      	b.n	8004cda <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d10b      	bne.n	8004c80 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	881a      	ldrh	r2, [r3, #0]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c74:	b292      	uxth	r2, r2
 8004c76:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	3302      	adds	r3, #2
 8004c7c:	61bb      	str	r3, [r7, #24]
 8004c7e:	e007      	b.n	8004c90 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	781a      	ldrb	r2, [r3, #0]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	3b01      	subs	r3, #1
 8004c9a:	b29a      	uxth	r2, r3
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d1c9      	bne.n	8004c42 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	9300      	str	r3, [sp, #0]
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	2140      	movs	r1, #64	@ 0x40
 8004cb8:	68f8      	ldr	r0, [r7, #12]
 8004cba:	f000 feaf 	bl	8005a1c <UART_WaitOnFlagUntilTimeout>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d004      	beq.n	8004cce <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2220      	movs	r2, #32
 8004cc8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e005      	b.n	8004cda <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2220      	movs	r2, #32
 8004cd2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	e000      	b.n	8004cda <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004cd8:	2302      	movs	r3, #2
  }
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3720      	adds	r7, #32
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}

08004ce2 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ce2:	b580      	push	{r7, lr}
 8004ce4:	b08a      	sub	sp, #40	@ 0x28
 8004ce6:	af02      	add	r7, sp, #8
 8004ce8:	60f8      	str	r0, [r7, #12]
 8004cea:	60b9      	str	r1, [r7, #8]
 8004cec:	603b      	str	r3, [r7, #0]
 8004cee:	4613      	mov	r3, r2
 8004cf0:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004cf8:	2b20      	cmp	r3, #32
 8004cfa:	f040 80b6 	bne.w	8004e6a <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d002      	beq.n	8004d0a <HAL_UART_Receive+0x28>
 8004d04:	88fb      	ldrh	r3, [r7, #6]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d101      	bne.n	8004d0e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e0ae      	b.n	8004e6c <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2222      	movs	r2, #34	@ 0x22
 8004d1a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2200      	movs	r2, #0
 8004d22:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d24:	f7fc f9c4 	bl	80010b0 <HAL_GetTick>
 8004d28:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	88fa      	ldrh	r2, [r7, #6]
 8004d2e:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	88fa      	ldrh	r2, [r7, #6]
 8004d36:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d42:	d10e      	bne.n	8004d62 <HAL_UART_Receive+0x80>
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	691b      	ldr	r3, [r3, #16]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d105      	bne.n	8004d58 <HAL_UART_Receive+0x76>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004d52:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004d56:	e02d      	b.n	8004db4 <HAL_UART_Receive+0xd2>
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	22ff      	movs	r2, #255	@ 0xff
 8004d5c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004d60:	e028      	b.n	8004db4 <HAL_UART_Receive+0xd2>
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d10d      	bne.n	8004d86 <HAL_UART_Receive+0xa4>
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d104      	bne.n	8004d7c <HAL_UART_Receive+0x9a>
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	22ff      	movs	r2, #255	@ 0xff
 8004d76:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004d7a:	e01b      	b.n	8004db4 <HAL_UART_Receive+0xd2>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	227f      	movs	r2, #127	@ 0x7f
 8004d80:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004d84:	e016      	b.n	8004db4 <HAL_UART_Receive+0xd2>
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d8e:	d10d      	bne.n	8004dac <HAL_UART_Receive+0xca>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d104      	bne.n	8004da2 <HAL_UART_Receive+0xc0>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	227f      	movs	r2, #127	@ 0x7f
 8004d9c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004da0:	e008      	b.n	8004db4 <HAL_UART_Receive+0xd2>
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	223f      	movs	r2, #63	@ 0x3f
 8004da6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004daa:	e003      	b.n	8004db4 <HAL_UART_Receive+0xd2>
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004dba:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dc4:	d108      	bne.n	8004dd8 <HAL_UART_Receive+0xf6>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d104      	bne.n	8004dd8 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	61bb      	str	r3, [r7, #24]
 8004dd6:	e003      	b.n	8004de0 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004de0:	e037      	b.n	8004e52 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	9300      	str	r3, [sp, #0]
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	2200      	movs	r2, #0
 8004dea:	2120      	movs	r1, #32
 8004dec:	68f8      	ldr	r0, [r7, #12]
 8004dee:	f000 fe15 	bl	8005a1c <UART_WaitOnFlagUntilTimeout>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d005      	beq.n	8004e04 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2220      	movs	r2, #32
 8004dfc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8004e00:	2303      	movs	r3, #3
 8004e02:	e033      	b.n	8004e6c <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d10c      	bne.n	8004e24 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	8a7b      	ldrh	r3, [r7, #18]
 8004e14:	4013      	ands	r3, r2
 8004e16:	b29a      	uxth	r2, r3
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	3302      	adds	r3, #2
 8004e20:	61bb      	str	r3, [r7, #24]
 8004e22:	e00d      	b.n	8004e40 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	b2da      	uxtb	r2, r3
 8004e2e:	8a7b      	ldrh	r3, [r7, #18]
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	4013      	ands	r3, r2
 8004e34:	b2da      	uxtb	r2, r3
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	3301      	adds	r3, #1
 8004e3e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	b29a      	uxth	r2, r3
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d1c1      	bne.n	8004de2 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2220      	movs	r2, #32
 8004e62:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8004e66:	2300      	movs	r3, #0
 8004e68:	e000      	b.n	8004e6c <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8004e6a:	2302      	movs	r3, #2
  }
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3720      	adds	r7, #32
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b08a      	sub	sp, #40	@ 0x28
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	60b9      	str	r1, [r7, #8]
 8004e7e:	4613      	mov	r3, r2
 8004e80:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e88:	2b20      	cmp	r3, #32
 8004e8a:	d132      	bne.n	8004ef2 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d002      	beq.n	8004e98 <HAL_UART_Receive_IT+0x24>
 8004e92:	88fb      	ldrh	r3, [r7, #6]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d101      	bne.n	8004e9c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e02b      	b.n	8004ef4 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d018      	beq.n	8004ee2 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	e853 3f00 	ldrex	r3, [r3]
 8004ebc:	613b      	str	r3, [r7, #16]
   return(result);
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004ec4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	461a      	mov	r2, r3
 8004ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ece:	623b      	str	r3, [r7, #32]
 8004ed0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed2:	69f9      	ldr	r1, [r7, #28]
 8004ed4:	6a3a      	ldr	r2, [r7, #32]
 8004ed6:	e841 2300 	strex	r3, r2, [r1]
 8004eda:	61bb      	str	r3, [r7, #24]
   return(result);
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d1e6      	bne.n	8004eb0 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004ee2:	88fb      	ldrh	r3, [r7, #6]
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	68b9      	ldr	r1, [r7, #8]
 8004ee8:	68f8      	ldr	r0, [r7, #12]
 8004eea:	f000 fe05 	bl	8005af8 <UART_Start_Receive_IT>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	e000      	b.n	8004ef4 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8004ef2:	2302      	movs	r3, #2
  }
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3728      	adds	r7, #40	@ 0x28
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b0ba      	sub	sp, #232	@ 0xe8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	69db      	ldr	r3, [r3, #28]
 8004f0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004f22:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004f26:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004f30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d115      	bne.n	8004f64 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004f38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f3c:	f003 0320 	and.w	r3, r3, #32
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d00f      	beq.n	8004f64 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004f44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f48:	f003 0320 	and.w	r3, r3, #32
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d009      	beq.n	8004f64 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f000 82ab 	beq.w	80054b0 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	4798      	blx	r3
      }
      return;
 8004f62:	e2a5      	b.n	80054b0 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004f64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	f000 8117 	beq.w	800519c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004f6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f72:	f003 0301 	and.w	r3, r3, #1
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d106      	bne.n	8004f88 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004f7a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004f7e:	4b85      	ldr	r3, [pc, #532]	@ (8005194 <HAL_UART_IRQHandler+0x298>)
 8004f80:	4013      	ands	r3, r2
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	f000 810a 	beq.w	800519c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004f88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f8c:	f003 0301 	and.w	r3, r3, #1
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d011      	beq.n	8004fb8 <HAL_UART_IRQHandler+0xbc>
 8004f94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d00b      	beq.n	8004fb8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fae:	f043 0201 	orr.w	r2, r3, #1
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004fb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fbc:	f003 0302 	and.w	r3, r3, #2
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d011      	beq.n	8004fe8 <HAL_UART_IRQHandler+0xec>
 8004fc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004fc8:	f003 0301 	and.w	r3, r3, #1
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d00b      	beq.n	8004fe8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2202      	movs	r2, #2
 8004fd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fde:	f043 0204 	orr.w	r2, r3, #4
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004fe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fec:	f003 0304 	and.w	r3, r3, #4
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d011      	beq.n	8005018 <HAL_UART_IRQHandler+0x11c>
 8004ff4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ff8:	f003 0301 	and.w	r3, r3, #1
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d00b      	beq.n	8005018 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2204      	movs	r2, #4
 8005006:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800500e:	f043 0202 	orr.w	r2, r3, #2
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005018:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800501c:	f003 0308 	and.w	r3, r3, #8
 8005020:	2b00      	cmp	r3, #0
 8005022:	d017      	beq.n	8005054 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005028:	f003 0320 	and.w	r3, r3, #32
 800502c:	2b00      	cmp	r3, #0
 800502e:	d105      	bne.n	800503c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005030:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005034:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005038:	2b00      	cmp	r3, #0
 800503a:	d00b      	beq.n	8005054 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2208      	movs	r2, #8
 8005042:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800504a:	f043 0208 	orr.w	r2, r3, #8
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005058:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800505c:	2b00      	cmp	r3, #0
 800505e:	d012      	beq.n	8005086 <HAL_UART_IRQHandler+0x18a>
 8005060:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005064:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d00c      	beq.n	8005086 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005074:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800507c:	f043 0220 	orr.w	r2, r3, #32
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800508c:	2b00      	cmp	r3, #0
 800508e:	f000 8211 	beq.w	80054b4 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005096:	f003 0320 	and.w	r3, r3, #32
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00d      	beq.n	80050ba <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800509e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050a2:	f003 0320 	and.w	r3, r3, #32
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d007      	beq.n	80050ba <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d003      	beq.n	80050ba <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050c0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050ce:	2b40      	cmp	r3, #64	@ 0x40
 80050d0:	d005      	beq.n	80050de <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80050d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050d6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d04f      	beq.n	800517e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 fdd0 	bl	8005c84 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050ee:	2b40      	cmp	r3, #64	@ 0x40
 80050f0:	d141      	bne.n	8005176 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	3308      	adds	r3, #8
 80050f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005100:	e853 3f00 	ldrex	r3, [r3]
 8005104:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005108:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800510c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005110:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	3308      	adds	r3, #8
 800511a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800511e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005122:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005126:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800512a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800512e:	e841 2300 	strex	r3, r2, [r1]
 8005132:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005136:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1d9      	bne.n	80050f2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005142:	2b00      	cmp	r3, #0
 8005144:	d013      	beq.n	800516e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800514a:	4a13      	ldr	r2, [pc, #76]	@ (8005198 <HAL_UART_IRQHandler+0x29c>)
 800514c:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005152:	4618      	mov	r0, r3
 8005154:	f7fc f92b 	bl	80013ae <HAL_DMA_Abort_IT>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d017      	beq.n	800518e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005162:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005168:	4610      	mov	r0, r2
 800516a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800516c:	e00f      	b.n	800518e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f000 f9be 	bl	80054f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005174:	e00b      	b.n	800518e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 f9ba 	bl	80054f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800517c:	e007      	b.n	800518e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 f9b6 	bl	80054f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800518c:	e192      	b.n	80054b4 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800518e:	bf00      	nop
    return;
 8005190:	e190      	b.n	80054b4 <HAL_UART_IRQHandler+0x5b8>
 8005192:	bf00      	nop
 8005194:	04000120 	.word	0x04000120
 8005198:	08005d4d 	.word	0x08005d4d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	f040 814b 	bne.w	800543c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80051a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051aa:	f003 0310 	and.w	r3, r3, #16
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	f000 8144 	beq.w	800543c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80051b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051b8:	f003 0310 	and.w	r3, r3, #16
 80051bc:	2b00      	cmp	r3, #0
 80051be:	f000 813d 	beq.w	800543c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2210      	movs	r2, #16
 80051c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051d4:	2b40      	cmp	r3, #64	@ 0x40
 80051d6:	f040 80b5 	bne.w	8005344 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80051e6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	f000 8164 	beq.w	80054b8 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80051f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80051fa:	429a      	cmp	r2, r3
 80051fc:	f080 815c 	bcs.w	80054b8 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005206:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800520e:	699b      	ldr	r3, [r3, #24]
 8005210:	2b20      	cmp	r3, #32
 8005212:	f000 8086 	beq.w	8005322 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800521e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005222:	e853 3f00 	ldrex	r3, [r3]
 8005226:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800522a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800522e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005232:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	461a      	mov	r2, r3
 800523c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005240:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005244:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005248:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800524c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005250:	e841 2300 	strex	r3, r2, [r1]
 8005254:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005258:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800525c:	2b00      	cmp	r3, #0
 800525e:	d1da      	bne.n	8005216 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	3308      	adds	r3, #8
 8005266:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005268:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800526a:	e853 3f00 	ldrex	r3, [r3]
 800526e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005270:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005272:	f023 0301 	bic.w	r3, r3, #1
 8005276:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	3308      	adds	r3, #8
 8005280:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005284:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005288:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800528a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800528c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005290:	e841 2300 	strex	r3, r2, [r1]
 8005294:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005296:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005298:	2b00      	cmp	r3, #0
 800529a:	d1e1      	bne.n	8005260 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	3308      	adds	r3, #8
 80052a2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80052a6:	e853 3f00 	ldrex	r3, [r3]
 80052aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80052ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80052ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	3308      	adds	r3, #8
 80052bc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80052c0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80052c2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80052c6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80052c8:	e841 2300 	strex	r3, r2, [r1]
 80052cc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80052ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d1e3      	bne.n	800529c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2220      	movs	r2, #32
 80052d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052ea:	e853 3f00 	ldrex	r3, [r3]
 80052ee:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80052f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052f2:	f023 0310 	bic.w	r3, r3, #16
 80052f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	461a      	mov	r2, r3
 8005300:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005304:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005306:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005308:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800530a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800530c:	e841 2300 	strex	r3, r2, [r1]
 8005310:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005312:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005314:	2b00      	cmp	r3, #0
 8005316:	d1e4      	bne.n	80052e2 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800531c:	4618      	mov	r0, r3
 800531e:	f7fc f808 	bl	8001332 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2202      	movs	r2, #2
 8005326:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005334:	b29b      	uxth	r3, r3
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	b29b      	uxth	r3, r3
 800533a:	4619      	mov	r1, r3
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f000 f8e1 	bl	8005504 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005342:	e0b9      	b.n	80054b8 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005350:	b29b      	uxth	r3, r3
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800535e:	b29b      	uxth	r3, r3
 8005360:	2b00      	cmp	r3, #0
 8005362:	f000 80ab 	beq.w	80054bc <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8005366:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800536a:	2b00      	cmp	r3, #0
 800536c:	f000 80a6 	beq.w	80054bc <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005378:	e853 3f00 	ldrex	r3, [r3]
 800537c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800537e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005380:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005384:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	461a      	mov	r2, r3
 800538e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005392:	647b      	str	r3, [r7, #68]	@ 0x44
 8005394:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005396:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005398:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800539a:	e841 2300 	strex	r3, r2, [r1]
 800539e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80053a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d1e4      	bne.n	8005370 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	3308      	adds	r3, #8
 80053ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b0:	e853 3f00 	ldrex	r3, [r3]
 80053b4:	623b      	str	r3, [r7, #32]
   return(result);
 80053b6:	6a3b      	ldr	r3, [r7, #32]
 80053b8:	f023 0301 	bic.w	r3, r3, #1
 80053bc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	3308      	adds	r3, #8
 80053c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80053ca:	633a      	str	r2, [r7, #48]	@ 0x30
 80053cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80053d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053d2:	e841 2300 	strex	r3, r2, [r1]
 80053d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80053d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d1e3      	bne.n	80053a6 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2220      	movs	r2, #32
 80053e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	e853 3f00 	ldrex	r3, [r3]
 80053fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f023 0310 	bic.w	r3, r3, #16
 8005406:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	461a      	mov	r2, r3
 8005410:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005414:	61fb      	str	r3, [r7, #28]
 8005416:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005418:	69b9      	ldr	r1, [r7, #24]
 800541a:	69fa      	ldr	r2, [r7, #28]
 800541c:	e841 2300 	strex	r3, r2, [r1]
 8005420:	617b      	str	r3, [r7, #20]
   return(result);
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d1e4      	bne.n	80053f2 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2202      	movs	r2, #2
 800542c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800542e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005432:	4619      	mov	r1, r3
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 f865 	bl	8005504 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800543a:	e03f      	b.n	80054bc <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800543c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005440:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005444:	2b00      	cmp	r3, #0
 8005446:	d00e      	beq.n	8005466 <HAL_UART_IRQHandler+0x56a>
 8005448:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800544c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005450:	2b00      	cmp	r3, #0
 8005452:	d008      	beq.n	8005466 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800545c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 fe5c 	bl	800611c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005464:	e02d      	b.n	80054c2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800546a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800546e:	2b00      	cmp	r3, #0
 8005470:	d00e      	beq.n	8005490 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005472:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005476:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800547a:	2b00      	cmp	r3, #0
 800547c:	d008      	beq.n	8005490 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005482:	2b00      	cmp	r3, #0
 8005484:	d01c      	beq.n	80054c0 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	4798      	blx	r3
    }
    return;
 800548e:	e017      	b.n	80054c0 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005490:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005494:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005498:	2b00      	cmp	r3, #0
 800549a:	d012      	beq.n	80054c2 <HAL_UART_IRQHandler+0x5c6>
 800549c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d00c      	beq.n	80054c2 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f000 fc65 	bl	8005d78 <UART_EndTransmit_IT>
    return;
 80054ae:	e008      	b.n	80054c2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80054b0:	bf00      	nop
 80054b2:	e006      	b.n	80054c2 <HAL_UART_IRQHandler+0x5c6>
    return;
 80054b4:	bf00      	nop
 80054b6:	e004      	b.n	80054c2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80054b8:	bf00      	nop
 80054ba:	e002      	b.n	80054c2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80054bc:	bf00      	nop
 80054be:	e000      	b.n	80054c2 <HAL_UART_IRQHandler+0x5c6>
    return;
 80054c0:	bf00      	nop
  }

}
 80054c2:	37e8      	adds	r7, #232	@ 0xe8
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b083      	sub	sp, #12
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80054d0:	bf00      	nop
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80054e4:	bf00      	nop
 80054e6:	370c      	adds	r7, #12
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr

080054f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80054f8:	bf00      	nop
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	460b      	mov	r3, r1
 800550e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005510:	bf00      	nop
 8005512:	370c      	adds	r7, #12
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b088      	sub	sp, #32
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005524:	2300      	movs	r3, #0
 8005526:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	689a      	ldr	r2, [r3, #8]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	691b      	ldr	r3, [r3, #16]
 8005530:	431a      	orrs	r2, r3
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	695b      	ldr	r3, [r3, #20]
 8005536:	431a      	orrs	r2, r3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	69db      	ldr	r3, [r3, #28]
 800553c:	4313      	orrs	r3, r2
 800553e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	4b8a      	ldr	r3, [pc, #552]	@ (8005770 <UART_SetConfig+0x254>)
 8005548:	4013      	ands	r3, r2
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	6812      	ldr	r2, [r2, #0]
 800554e:	6979      	ldr	r1, [r7, #20]
 8005550:	430b      	orrs	r3, r1
 8005552:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	68da      	ldr	r2, [r3, #12]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	430a      	orrs	r2, r1
 8005568:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	699b      	ldr	r3, [r3, #24]
 800556e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6a1b      	ldr	r3, [r3, #32]
 8005574:	697a      	ldr	r2, [r7, #20]
 8005576:	4313      	orrs	r3, r2
 8005578:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	697a      	ldr	r2, [r7, #20]
 800558a:	430a      	orrs	r2, r1
 800558c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a78      	ldr	r2, [pc, #480]	@ (8005774 <UART_SetConfig+0x258>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d120      	bne.n	80055da <UART_SetConfig+0xbe>
 8005598:	4b77      	ldr	r3, [pc, #476]	@ (8005778 <UART_SetConfig+0x25c>)
 800559a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800559c:	f003 0303 	and.w	r3, r3, #3
 80055a0:	2b03      	cmp	r3, #3
 80055a2:	d817      	bhi.n	80055d4 <UART_SetConfig+0xb8>
 80055a4:	a201      	add	r2, pc, #4	@ (adr r2, 80055ac <UART_SetConfig+0x90>)
 80055a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055aa:	bf00      	nop
 80055ac:	080055bd 	.word	0x080055bd
 80055b0:	080055c9 	.word	0x080055c9
 80055b4:	080055cf 	.word	0x080055cf
 80055b8:	080055c3 	.word	0x080055c3
 80055bc:	2300      	movs	r3, #0
 80055be:	77fb      	strb	r3, [r7, #31]
 80055c0:	e01d      	b.n	80055fe <UART_SetConfig+0xe2>
 80055c2:	2302      	movs	r3, #2
 80055c4:	77fb      	strb	r3, [r7, #31]
 80055c6:	e01a      	b.n	80055fe <UART_SetConfig+0xe2>
 80055c8:	2304      	movs	r3, #4
 80055ca:	77fb      	strb	r3, [r7, #31]
 80055cc:	e017      	b.n	80055fe <UART_SetConfig+0xe2>
 80055ce:	2308      	movs	r3, #8
 80055d0:	77fb      	strb	r3, [r7, #31]
 80055d2:	e014      	b.n	80055fe <UART_SetConfig+0xe2>
 80055d4:	2310      	movs	r3, #16
 80055d6:	77fb      	strb	r3, [r7, #31]
 80055d8:	e011      	b.n	80055fe <UART_SetConfig+0xe2>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a67      	ldr	r2, [pc, #412]	@ (800577c <UART_SetConfig+0x260>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d102      	bne.n	80055ea <UART_SetConfig+0xce>
 80055e4:	2300      	movs	r3, #0
 80055e6:	77fb      	strb	r3, [r7, #31]
 80055e8:	e009      	b.n	80055fe <UART_SetConfig+0xe2>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a64      	ldr	r2, [pc, #400]	@ (8005780 <UART_SetConfig+0x264>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d102      	bne.n	80055fa <UART_SetConfig+0xde>
 80055f4:	2300      	movs	r3, #0
 80055f6:	77fb      	strb	r3, [r7, #31]
 80055f8:	e001      	b.n	80055fe <UART_SetConfig+0xe2>
 80055fa:	2310      	movs	r3, #16
 80055fc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	69db      	ldr	r3, [r3, #28]
 8005602:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005606:	d15a      	bne.n	80056be <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8005608:	7ffb      	ldrb	r3, [r7, #31]
 800560a:	2b08      	cmp	r3, #8
 800560c:	d827      	bhi.n	800565e <UART_SetConfig+0x142>
 800560e:	a201      	add	r2, pc, #4	@ (adr r2, 8005614 <UART_SetConfig+0xf8>)
 8005610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005614:	08005639 	.word	0x08005639
 8005618:	08005641 	.word	0x08005641
 800561c:	08005649 	.word	0x08005649
 8005620:	0800565f 	.word	0x0800565f
 8005624:	0800564f 	.word	0x0800564f
 8005628:	0800565f 	.word	0x0800565f
 800562c:	0800565f 	.word	0x0800565f
 8005630:	0800565f 	.word	0x0800565f
 8005634:	08005657 	.word	0x08005657
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005638:	f7fe f8c0 	bl	80037bc <HAL_RCC_GetPCLK1Freq>
 800563c:	61b8      	str	r0, [r7, #24]
        break;
 800563e:	e013      	b.n	8005668 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005640:	f7fe f8de 	bl	8003800 <HAL_RCC_GetPCLK2Freq>
 8005644:	61b8      	str	r0, [r7, #24]
        break;
 8005646:	e00f      	b.n	8005668 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005648:	4b4e      	ldr	r3, [pc, #312]	@ (8005784 <UART_SetConfig+0x268>)
 800564a:	61bb      	str	r3, [r7, #24]
        break;
 800564c:	e00c      	b.n	8005668 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800564e:	f7fe f855 	bl	80036fc <HAL_RCC_GetSysClockFreq>
 8005652:	61b8      	str	r0, [r7, #24]
        break;
 8005654:	e008      	b.n	8005668 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005656:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800565a:	61bb      	str	r3, [r7, #24]
        break;
 800565c:	e004      	b.n	8005668 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800565e:	2300      	movs	r3, #0
 8005660:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	77bb      	strb	r3, [r7, #30]
        break;
 8005666:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d074      	beq.n	8005758 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	005a      	lsls	r2, r3, #1
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	085b      	lsrs	r3, r3, #1
 8005678:	441a      	add	r2, r3
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005682:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	2b0f      	cmp	r3, #15
 8005688:	d916      	bls.n	80056b8 <UART_SetConfig+0x19c>
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005690:	d212      	bcs.n	80056b8 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	b29b      	uxth	r3, r3
 8005696:	f023 030f 	bic.w	r3, r3, #15
 800569a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	085b      	lsrs	r3, r3, #1
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	f003 0307 	and.w	r3, r3, #7
 80056a6:	b29a      	uxth	r2, r3
 80056a8:	89fb      	ldrh	r3, [r7, #14]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	89fa      	ldrh	r2, [r7, #14]
 80056b4:	60da      	str	r2, [r3, #12]
 80056b6:	e04f      	b.n	8005758 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	77bb      	strb	r3, [r7, #30]
 80056bc:	e04c      	b.n	8005758 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80056be:	7ffb      	ldrb	r3, [r7, #31]
 80056c0:	2b08      	cmp	r3, #8
 80056c2:	d828      	bhi.n	8005716 <UART_SetConfig+0x1fa>
 80056c4:	a201      	add	r2, pc, #4	@ (adr r2, 80056cc <UART_SetConfig+0x1b0>)
 80056c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ca:	bf00      	nop
 80056cc:	080056f1 	.word	0x080056f1
 80056d0:	080056f9 	.word	0x080056f9
 80056d4:	08005701 	.word	0x08005701
 80056d8:	08005717 	.word	0x08005717
 80056dc:	08005707 	.word	0x08005707
 80056e0:	08005717 	.word	0x08005717
 80056e4:	08005717 	.word	0x08005717
 80056e8:	08005717 	.word	0x08005717
 80056ec:	0800570f 	.word	0x0800570f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056f0:	f7fe f864 	bl	80037bc <HAL_RCC_GetPCLK1Freq>
 80056f4:	61b8      	str	r0, [r7, #24]
        break;
 80056f6:	e013      	b.n	8005720 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056f8:	f7fe f882 	bl	8003800 <HAL_RCC_GetPCLK2Freq>
 80056fc:	61b8      	str	r0, [r7, #24]
        break;
 80056fe:	e00f      	b.n	8005720 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005700:	4b20      	ldr	r3, [pc, #128]	@ (8005784 <UART_SetConfig+0x268>)
 8005702:	61bb      	str	r3, [r7, #24]
        break;
 8005704:	e00c      	b.n	8005720 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005706:	f7fd fff9 	bl	80036fc <HAL_RCC_GetSysClockFreq>
 800570a:	61b8      	str	r0, [r7, #24]
        break;
 800570c:	e008      	b.n	8005720 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800570e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005712:	61bb      	str	r3, [r7, #24]
        break;
 8005714:	e004      	b.n	8005720 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005716:	2300      	movs	r3, #0
 8005718:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	77bb      	strb	r3, [r7, #30]
        break;
 800571e:	bf00      	nop
    }

    if (pclk != 0U)
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d018      	beq.n	8005758 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	085a      	lsrs	r2, r3, #1
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	441a      	add	r2, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	fbb2 f3f3 	udiv	r3, r2, r3
 8005738:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	2b0f      	cmp	r3, #15
 800573e:	d909      	bls.n	8005754 <UART_SetConfig+0x238>
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005746:	d205      	bcs.n	8005754 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	b29a      	uxth	r2, r3
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	60da      	str	r2, [r3, #12]
 8005752:	e001      	b.n	8005758 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005764:	7fbb      	ldrb	r3, [r7, #30]
}
 8005766:	4618      	mov	r0, r3
 8005768:	3720      	adds	r7, #32
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	efff69f3 	.word	0xefff69f3
 8005774:	40013800 	.word	0x40013800
 8005778:	40021000 	.word	0x40021000
 800577c:	40004400 	.word	0x40004400
 8005780:	40004800 	.word	0x40004800
 8005784:	007a1200 	.word	0x007a1200

08005788 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005794:	f003 0308 	and.w	r3, r3, #8
 8005798:	2b00      	cmp	r3, #0
 800579a:	d00a      	beq.n	80057b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	430a      	orrs	r2, r1
 80057b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057b6:	f003 0301 	and.w	r3, r3, #1
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00a      	beq.n	80057d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	430a      	orrs	r2, r1
 80057d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057d8:	f003 0302 	and.w	r3, r3, #2
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d00a      	beq.n	80057f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	430a      	orrs	r2, r1
 80057f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057fa:	f003 0304 	and.w	r3, r3, #4
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d00a      	beq.n	8005818 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	430a      	orrs	r2, r1
 8005816:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800581c:	f003 0310 	and.w	r3, r3, #16
 8005820:	2b00      	cmp	r3, #0
 8005822:	d00a      	beq.n	800583a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	430a      	orrs	r2, r1
 8005838:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800583e:	f003 0320 	and.w	r3, r3, #32
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00a      	beq.n	800585c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	430a      	orrs	r2, r1
 800585a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005860:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005864:	2b00      	cmp	r3, #0
 8005866:	d01a      	beq.n	800589e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	430a      	orrs	r2, r1
 800587c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005882:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005886:	d10a      	bne.n	800589e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	430a      	orrs	r2, r1
 800589c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d00a      	beq.n	80058c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	430a      	orrs	r2, r1
 80058be:	605a      	str	r2, [r3, #4]
  }
}
 80058c0:	bf00      	nop
 80058c2:	370c      	adds	r7, #12
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b098      	sub	sp, #96	@ 0x60
 80058d0:	af02      	add	r7, sp, #8
 80058d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80058dc:	f7fb fbe8 	bl	80010b0 <HAL_GetTick>
 80058e0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0308 	and.w	r3, r3, #8
 80058ec:	2b08      	cmp	r3, #8
 80058ee:	d12e      	bne.n	800594e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80058f4:	9300      	str	r3, [sp, #0]
 80058f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058f8:	2200      	movs	r2, #0
 80058fa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 f88c 	bl	8005a1c <UART_WaitOnFlagUntilTimeout>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d021      	beq.n	800594e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005912:	e853 3f00 	ldrex	r3, [r3]
 8005916:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005918:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800591a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800591e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	461a      	mov	r2, r3
 8005926:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005928:	647b      	str	r3, [r7, #68]	@ 0x44
 800592a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800592c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800592e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005930:	e841 2300 	strex	r3, r2, [r1]
 8005934:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005936:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005938:	2b00      	cmp	r3, #0
 800593a:	d1e6      	bne.n	800590a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2220      	movs	r2, #32
 8005940:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800594a:	2303      	movs	r3, #3
 800594c:	e062      	b.n	8005a14 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 0304 	and.w	r3, r3, #4
 8005958:	2b04      	cmp	r3, #4
 800595a:	d149      	bne.n	80059f0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800595c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005960:	9300      	str	r3, [sp, #0]
 8005962:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005964:	2200      	movs	r2, #0
 8005966:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 f856 	bl	8005a1c <UART_WaitOnFlagUntilTimeout>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d03c      	beq.n	80059f0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800597c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800597e:	e853 3f00 	ldrex	r3, [r3]
 8005982:	623b      	str	r3, [r7, #32]
   return(result);
 8005984:	6a3b      	ldr	r3, [r7, #32]
 8005986:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800598a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	461a      	mov	r2, r3
 8005992:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005994:	633b      	str	r3, [r7, #48]	@ 0x30
 8005996:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005998:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800599a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800599c:	e841 2300 	strex	r3, r2, [r1]
 80059a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80059a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d1e6      	bne.n	8005976 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	3308      	adds	r3, #8
 80059ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	e853 3f00 	ldrex	r3, [r3]
 80059b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f023 0301 	bic.w	r3, r3, #1
 80059be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	3308      	adds	r3, #8
 80059c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80059c8:	61fa      	str	r2, [r7, #28]
 80059ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059cc:	69b9      	ldr	r1, [r7, #24]
 80059ce:	69fa      	ldr	r2, [r7, #28]
 80059d0:	e841 2300 	strex	r3, r2, [r1]
 80059d4:	617b      	str	r3, [r7, #20]
   return(result);
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d1e5      	bne.n	80059a8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2220      	movs	r2, #32
 80059e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059ec:	2303      	movs	r3, #3
 80059ee:	e011      	b.n	8005a14 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2220      	movs	r2, #32
 80059f4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2220      	movs	r2, #32
 80059fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005a12:	2300      	movs	r3, #0
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3758      	adds	r7, #88	@ 0x58
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}

08005a1c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	60f8      	str	r0, [r7, #12]
 8005a24:	60b9      	str	r1, [r7, #8]
 8005a26:	603b      	str	r3, [r7, #0]
 8005a28:	4613      	mov	r3, r2
 8005a2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a2c:	e04f      	b.n	8005ace <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a34:	d04b      	beq.n	8005ace <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a36:	f7fb fb3b 	bl	80010b0 <HAL_GetTick>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	69ba      	ldr	r2, [r7, #24]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d302      	bcc.n	8005a4c <UART_WaitOnFlagUntilTimeout+0x30>
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d101      	bne.n	8005a50 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	e04e      	b.n	8005aee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 0304 	and.w	r3, r3, #4
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d037      	beq.n	8005ace <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	2b80      	cmp	r3, #128	@ 0x80
 8005a62:	d034      	beq.n	8005ace <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	2b40      	cmp	r3, #64	@ 0x40
 8005a68:	d031      	beq.n	8005ace <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	69db      	ldr	r3, [r3, #28]
 8005a70:	f003 0308 	and.w	r3, r3, #8
 8005a74:	2b08      	cmp	r3, #8
 8005a76:	d110      	bne.n	8005a9a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	2208      	movs	r2, #8
 8005a7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a80:	68f8      	ldr	r0, [r7, #12]
 8005a82:	f000 f8ff 	bl	8005c84 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2208      	movs	r2, #8
 8005a8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e029      	b.n	8005aee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	69db      	ldr	r3, [r3, #28]
 8005aa0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005aa4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005aa8:	d111      	bne.n	8005ace <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005ab2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ab4:	68f8      	ldr	r0, [r7, #12]
 8005ab6:	f000 f8e5 	bl	8005c84 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2220      	movs	r2, #32
 8005abe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e00f      	b.n	8005aee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	69da      	ldr	r2, [r3, #28]
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	68ba      	ldr	r2, [r7, #8]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	bf0c      	ite	eq
 8005ade:	2301      	moveq	r3, #1
 8005ae0:	2300      	movne	r3, #0
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	79fb      	ldrb	r3, [r7, #7]
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d0a0      	beq.n	8005a2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3710      	adds	r7, #16
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
	...

08005af8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b097      	sub	sp, #92	@ 0x5c
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	60b9      	str	r1, [r7, #8]
 8005b02:	4613      	mov	r3, r2
 8005b04:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	68ba      	ldr	r2, [r7, #8]
 8005b0a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	88fa      	ldrh	r2, [r7, #6]
 8005b10:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	88fa      	ldrh	r2, [r7, #6]
 8005b18:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b2a:	d10e      	bne.n	8005b4a <UART_Start_Receive_IT+0x52>
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d105      	bne.n	8005b40 <UART_Start_Receive_IT+0x48>
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005b3a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005b3e:	e02d      	b.n	8005b9c <UART_Start_Receive_IT+0xa4>
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	22ff      	movs	r2, #255	@ 0xff
 8005b44:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005b48:	e028      	b.n	8005b9c <UART_Start_Receive_IT+0xa4>
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d10d      	bne.n	8005b6e <UART_Start_Receive_IT+0x76>
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d104      	bne.n	8005b64 <UART_Start_Receive_IT+0x6c>
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	22ff      	movs	r2, #255	@ 0xff
 8005b5e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005b62:	e01b      	b.n	8005b9c <UART_Start_Receive_IT+0xa4>
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	227f      	movs	r2, #127	@ 0x7f
 8005b68:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005b6c:	e016      	b.n	8005b9c <UART_Start_Receive_IT+0xa4>
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b76:	d10d      	bne.n	8005b94 <UART_Start_Receive_IT+0x9c>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	691b      	ldr	r3, [r3, #16]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d104      	bne.n	8005b8a <UART_Start_Receive_IT+0x92>
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	227f      	movs	r2, #127	@ 0x7f
 8005b84:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005b88:	e008      	b.n	8005b9c <UART_Start_Receive_IT+0xa4>
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	223f      	movs	r2, #63	@ 0x3f
 8005b8e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005b92:	e003      	b.n	8005b9c <UART_Start_Receive_IT+0xa4>
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2222      	movs	r2, #34	@ 0x22
 8005ba8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	3308      	adds	r3, #8
 8005bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bb6:	e853 3f00 	ldrex	r3, [r3]
 8005bba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bbe:	f043 0301 	orr.w	r3, r3, #1
 8005bc2:	657b      	str	r3, [r7, #84]	@ 0x54
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	3308      	adds	r3, #8
 8005bca:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005bcc:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005bce:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005bd2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005bd4:	e841 2300 	strex	r3, r2, [r1]
 8005bd8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005bda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d1e5      	bne.n	8005bac <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005be8:	d107      	bne.n	8005bfa <UART_Start_Receive_IT+0x102>
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d103      	bne.n	8005bfa <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	4a21      	ldr	r2, [pc, #132]	@ (8005c7c <UART_Start_Receive_IT+0x184>)
 8005bf6:	669a      	str	r2, [r3, #104]	@ 0x68
 8005bf8:	e002      	b.n	8005c00 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	4a20      	ldr	r2, [pc, #128]	@ (8005c80 <UART_Start_Receive_IT+0x188>)
 8005bfe:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d019      	beq.n	8005c3c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c10:	e853 3f00 	ldrex	r3, [r3]
 8005c14:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c18:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8005c1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	461a      	mov	r2, r3
 8005c24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c26:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c28:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c2a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005c2c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005c2e:	e841 2300 	strex	r3, r2, [r1]
 8005c32:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005c34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d1e6      	bne.n	8005c08 <UART_Start_Receive_IT+0x110>
 8005c3a:	e018      	b.n	8005c6e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	e853 3f00 	ldrex	r3, [r3]
 8005c48:	613b      	str	r3, [r7, #16]
   return(result);
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	f043 0320 	orr.w	r3, r3, #32
 8005c50:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	461a      	mov	r2, r3
 8005c58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c5a:	623b      	str	r3, [r7, #32]
 8005c5c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c5e:	69f9      	ldr	r1, [r7, #28]
 8005c60:	6a3a      	ldr	r2, [r7, #32]
 8005c62:	e841 2300 	strex	r3, r2, [r1]
 8005c66:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d1e6      	bne.n	8005c3c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8005c6e:	2300      	movs	r3, #0
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	375c      	adds	r7, #92	@ 0x5c
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr
 8005c7c:	08005f75 	.word	0x08005f75
 8005c80:	08005dcd 	.word	0x08005dcd

08005c84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b095      	sub	sp, #84	@ 0x54
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c94:	e853 3f00 	ldrex	r3, [r3]
 8005c98:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c9c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ca0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005caa:	643b      	str	r3, [r7, #64]	@ 0x40
 8005cac:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005cb0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005cb2:	e841 2300 	strex	r3, r2, [r1]
 8005cb6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d1e6      	bne.n	8005c8c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	3308      	adds	r3, #8
 8005cc4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc6:	6a3b      	ldr	r3, [r7, #32]
 8005cc8:	e853 3f00 	ldrex	r3, [r3]
 8005ccc:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	f023 0301 	bic.w	r3, r3, #1
 8005cd4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	3308      	adds	r3, #8
 8005cdc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005cde:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ce0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ce4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ce6:	e841 2300 	strex	r3, r2, [r1]
 8005cea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d1e5      	bne.n	8005cbe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d118      	bne.n	8005d2c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	e853 3f00 	ldrex	r3, [r3]
 8005d06:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	f023 0310 	bic.w	r3, r3, #16
 8005d0e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	461a      	mov	r2, r3
 8005d16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d18:	61bb      	str	r3, [r7, #24]
 8005d1a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d1c:	6979      	ldr	r1, [r7, #20]
 8005d1e:	69ba      	ldr	r2, [r7, #24]
 8005d20:	e841 2300 	strex	r3, r2, [r1]
 8005d24:	613b      	str	r3, [r7, #16]
   return(result);
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d1e6      	bne.n	8005cfa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2220      	movs	r2, #32
 8005d30:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005d40:	bf00      	nop
 8005d42:	3754      	adds	r7, #84	@ 0x54
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr

08005d4c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d58:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2200      	movs	r2, #0
 8005d66:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d6a:	68f8      	ldr	r0, [r7, #12]
 8005d6c:	f7ff fbc0 	bl	80054f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d70:	bf00      	nop
 8005d72:	3710      	adds	r7, #16
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b088      	sub	sp, #32
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	e853 3f00 	ldrex	r3, [r3]
 8005d8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d94:	61fb      	str	r3, [r7, #28]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	69fb      	ldr	r3, [r7, #28]
 8005d9e:	61bb      	str	r3, [r7, #24]
 8005da0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da2:	6979      	ldr	r1, [r7, #20]
 8005da4:	69ba      	ldr	r2, [r7, #24]
 8005da6:	e841 2300 	strex	r3, r2, [r1]
 8005daa:	613b      	str	r3, [r7, #16]
   return(result);
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d1e6      	bne.n	8005d80 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2220      	movs	r2, #32
 8005db6:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f7ff fb82 	bl	80054c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005dc4:	bf00      	nop
 8005dc6:	3720      	adds	r7, #32
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b09c      	sub	sp, #112	@ 0x70
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005dda:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005de4:	2b22      	cmp	r3, #34	@ 0x22
 8005de6:	f040 80b9 	bne.w	8005f5c <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005df0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005df4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005df8:	b2d9      	uxtb	r1, r3
 8005dfa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005dfe:	b2da      	uxtb	r2, r3
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e04:	400a      	ands	r2, r1
 8005e06:	b2d2      	uxtb	r2, r2
 8005e08:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e0e:	1c5a      	adds	r2, r3, #1
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	3b01      	subs	r3, #1
 8005e1e:	b29a      	uxth	r2, r3
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	f040 809c 	bne.w	8005f6c <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e3c:	e853 3f00 	ldrex	r3, [r3]
 8005e40:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005e42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e48:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	461a      	mov	r2, r3
 8005e50:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005e52:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005e54:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e56:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005e58:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005e5a:	e841 2300 	strex	r3, r2, [r1]
 8005e5e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005e60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d1e6      	bne.n	8005e34 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	3308      	adds	r3, #8
 8005e6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e70:	e853 3f00 	ldrex	r3, [r3]
 8005e74:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005e76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e78:	f023 0301 	bic.w	r3, r3, #1
 8005e7c:	667b      	str	r3, [r7, #100]	@ 0x64
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	3308      	adds	r3, #8
 8005e84:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005e86:	647a      	str	r2, [r7, #68]	@ 0x44
 8005e88:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e8a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005e8c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e8e:	e841 2300 	strex	r3, r2, [r1]
 8005e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005e94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d1e5      	bne.n	8005e66 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2220      	movs	r2, #32
 8005e9e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d018      	beq.n	8005eee <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec4:	e853 3f00 	ldrex	r3, [r3]
 8005ec8:	623b      	str	r3, [r7, #32]
   return(result);
 8005eca:	6a3b      	ldr	r3, [r7, #32]
 8005ecc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005ed0:	663b      	str	r3, [r7, #96]	@ 0x60
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005eda:	633b      	str	r3, [r7, #48]	@ 0x30
 8005edc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ede:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ee0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ee2:	e841 2300 	strex	r3, r2, [r1]
 8005ee6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d1e6      	bne.n	8005ebc <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d12e      	bne.n	8005f54 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	e853 3f00 	ldrex	r3, [r3]
 8005f08:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f023 0310 	bic.w	r3, r3, #16
 8005f10:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	461a      	mov	r2, r3
 8005f18:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f1a:	61fb      	str	r3, [r7, #28]
 8005f1c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f1e:	69b9      	ldr	r1, [r7, #24]
 8005f20:	69fa      	ldr	r2, [r7, #28]
 8005f22:	e841 2300 	strex	r3, r2, [r1]
 8005f26:	617b      	str	r3, [r7, #20]
   return(result);
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d1e6      	bne.n	8005efc <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	69db      	ldr	r3, [r3, #28]
 8005f34:	f003 0310 	and.w	r3, r3, #16
 8005f38:	2b10      	cmp	r3, #16
 8005f3a:	d103      	bne.n	8005f44 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2210      	movs	r2, #16
 8005f42:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f7ff fad9 	bl	8005504 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005f52:	e00b      	b.n	8005f6c <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f7ff fac1 	bl	80054dc <HAL_UART_RxCpltCallback>
}
 8005f5a:	e007      	b.n	8005f6c <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	699a      	ldr	r2, [r3, #24]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f042 0208 	orr.w	r2, r2, #8
 8005f6a:	619a      	str	r2, [r3, #24]
}
 8005f6c:	bf00      	nop
 8005f6e:	3770      	adds	r7, #112	@ 0x70
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b09c      	sub	sp, #112	@ 0x70
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005f82:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f8c:	2b22      	cmp	r3, #34	@ 0x22
 8005f8e:	f040 80b9 	bne.w	8006104 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005f98:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fa0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005fa2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8005fa6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005faa:	4013      	ands	r3, r2
 8005fac:	b29a      	uxth	r2, r3
 8005fae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005fb0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fb6:	1c9a      	adds	r2, r3, #2
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	3b01      	subs	r3, #1
 8005fc6:	b29a      	uxth	r2, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	f040 809c 	bne.w	8006114 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005fe4:	e853 3f00 	ldrex	r3, [r3]
 8005fe8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005fea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ff0:	667b      	str	r3, [r7, #100]	@ 0x64
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ffa:	657b      	str	r3, [r7, #84]	@ 0x54
 8005ffc:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ffe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006000:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006002:	e841 2300 	strex	r3, r2, [r1]
 8006006:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006008:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800600a:	2b00      	cmp	r3, #0
 800600c:	d1e6      	bne.n	8005fdc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	3308      	adds	r3, #8
 8006014:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006016:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006018:	e853 3f00 	ldrex	r3, [r3]
 800601c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800601e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006020:	f023 0301 	bic.w	r3, r3, #1
 8006024:	663b      	str	r3, [r7, #96]	@ 0x60
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	3308      	adds	r3, #8
 800602c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800602e:	643a      	str	r2, [r7, #64]	@ 0x40
 8006030:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006032:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006034:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006036:	e841 2300 	strex	r3, r2, [r1]
 800603a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800603c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800603e:	2b00      	cmp	r3, #0
 8006040:	d1e5      	bne.n	800600e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2220      	movs	r2, #32
 8006046:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006060:	2b00      	cmp	r3, #0
 8006062:	d018      	beq.n	8006096 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800606a:	6a3b      	ldr	r3, [r7, #32]
 800606c:	e853 3f00 	ldrex	r3, [r3]
 8006070:	61fb      	str	r3, [r7, #28]
   return(result);
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006078:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	461a      	mov	r2, r3
 8006080:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006082:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006084:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006086:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006088:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800608a:	e841 2300 	strex	r3, r2, [r1]
 800608e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006092:	2b00      	cmp	r3, #0
 8006094:	d1e6      	bne.n	8006064 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800609a:	2b01      	cmp	r3, #1
 800609c:	d12e      	bne.n	80060fc <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	e853 3f00 	ldrex	r3, [r3]
 80060b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	f023 0310 	bic.w	r3, r3, #16
 80060b8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	461a      	mov	r2, r3
 80060c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80060c2:	61bb      	str	r3, [r7, #24]
 80060c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c6:	6979      	ldr	r1, [r7, #20]
 80060c8:	69ba      	ldr	r2, [r7, #24]
 80060ca:	e841 2300 	strex	r3, r2, [r1]
 80060ce:	613b      	str	r3, [r7, #16]
   return(result);
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d1e6      	bne.n	80060a4 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	69db      	ldr	r3, [r3, #28]
 80060dc:	f003 0310 	and.w	r3, r3, #16
 80060e0:	2b10      	cmp	r3, #16
 80060e2:	d103      	bne.n	80060ec <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	2210      	movs	r2, #16
 80060ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80060f2:	4619      	mov	r1, r3
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f7ff fa05 	bl	8005504 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80060fa:	e00b      	b.n	8006114 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f7ff f9ed 	bl	80054dc <HAL_UART_RxCpltCallback>
}
 8006102:	e007      	b.n	8006114 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	699a      	ldr	r2, [r3, #24]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f042 0208 	orr.w	r2, r2, #8
 8006112:	619a      	str	r2, [r3, #24]
}
 8006114:	bf00      	nop
 8006116:	3770      	adds	r7, #112	@ 0x70
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006124:	bf00      	nop
 8006126:	370c      	adds	r7, #12
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <atoi>:
 8006130:	220a      	movs	r2, #10
 8006132:	2100      	movs	r1, #0
 8006134:	f000 b87a 	b.w	800622c <strtol>

08006138 <_strtol_l.constprop.0>:
 8006138:	2b24      	cmp	r3, #36	@ 0x24
 800613a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800613e:	4686      	mov	lr, r0
 8006140:	4690      	mov	r8, r2
 8006142:	d801      	bhi.n	8006148 <_strtol_l.constprop.0+0x10>
 8006144:	2b01      	cmp	r3, #1
 8006146:	d106      	bne.n	8006156 <_strtol_l.constprop.0+0x1e>
 8006148:	f000 f8c8 	bl	80062dc <__errno>
 800614c:	2316      	movs	r3, #22
 800614e:	6003      	str	r3, [r0, #0]
 8006150:	2000      	movs	r0, #0
 8006152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006156:	4834      	ldr	r0, [pc, #208]	@ (8006228 <_strtol_l.constprop.0+0xf0>)
 8006158:	460d      	mov	r5, r1
 800615a:	462a      	mov	r2, r5
 800615c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006160:	5d06      	ldrb	r6, [r0, r4]
 8006162:	f016 0608 	ands.w	r6, r6, #8
 8006166:	d1f8      	bne.n	800615a <_strtol_l.constprop.0+0x22>
 8006168:	2c2d      	cmp	r4, #45	@ 0x2d
 800616a:	d12d      	bne.n	80061c8 <_strtol_l.constprop.0+0x90>
 800616c:	782c      	ldrb	r4, [r5, #0]
 800616e:	2601      	movs	r6, #1
 8006170:	1c95      	adds	r5, r2, #2
 8006172:	f033 0210 	bics.w	r2, r3, #16
 8006176:	d109      	bne.n	800618c <_strtol_l.constprop.0+0x54>
 8006178:	2c30      	cmp	r4, #48	@ 0x30
 800617a:	d12a      	bne.n	80061d2 <_strtol_l.constprop.0+0x9a>
 800617c:	782a      	ldrb	r2, [r5, #0]
 800617e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006182:	2a58      	cmp	r2, #88	@ 0x58
 8006184:	d125      	bne.n	80061d2 <_strtol_l.constprop.0+0x9a>
 8006186:	786c      	ldrb	r4, [r5, #1]
 8006188:	2310      	movs	r3, #16
 800618a:	3502      	adds	r5, #2
 800618c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006190:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006194:	2200      	movs	r2, #0
 8006196:	fbbc f9f3 	udiv	r9, ip, r3
 800619a:	4610      	mov	r0, r2
 800619c:	fb03 ca19 	mls	sl, r3, r9, ip
 80061a0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80061a4:	2f09      	cmp	r7, #9
 80061a6:	d81b      	bhi.n	80061e0 <_strtol_l.constprop.0+0xa8>
 80061a8:	463c      	mov	r4, r7
 80061aa:	42a3      	cmp	r3, r4
 80061ac:	dd27      	ble.n	80061fe <_strtol_l.constprop.0+0xc6>
 80061ae:	1c57      	adds	r7, r2, #1
 80061b0:	d007      	beq.n	80061c2 <_strtol_l.constprop.0+0x8a>
 80061b2:	4581      	cmp	r9, r0
 80061b4:	d320      	bcc.n	80061f8 <_strtol_l.constprop.0+0xc0>
 80061b6:	d101      	bne.n	80061bc <_strtol_l.constprop.0+0x84>
 80061b8:	45a2      	cmp	sl, r4
 80061ba:	db1d      	blt.n	80061f8 <_strtol_l.constprop.0+0xc0>
 80061bc:	fb00 4003 	mla	r0, r0, r3, r4
 80061c0:	2201      	movs	r2, #1
 80061c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80061c6:	e7eb      	b.n	80061a0 <_strtol_l.constprop.0+0x68>
 80061c8:	2c2b      	cmp	r4, #43	@ 0x2b
 80061ca:	bf04      	itt	eq
 80061cc:	782c      	ldrbeq	r4, [r5, #0]
 80061ce:	1c95      	addeq	r5, r2, #2
 80061d0:	e7cf      	b.n	8006172 <_strtol_l.constprop.0+0x3a>
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d1da      	bne.n	800618c <_strtol_l.constprop.0+0x54>
 80061d6:	2c30      	cmp	r4, #48	@ 0x30
 80061d8:	bf0c      	ite	eq
 80061da:	2308      	moveq	r3, #8
 80061dc:	230a      	movne	r3, #10
 80061de:	e7d5      	b.n	800618c <_strtol_l.constprop.0+0x54>
 80061e0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80061e4:	2f19      	cmp	r7, #25
 80061e6:	d801      	bhi.n	80061ec <_strtol_l.constprop.0+0xb4>
 80061e8:	3c37      	subs	r4, #55	@ 0x37
 80061ea:	e7de      	b.n	80061aa <_strtol_l.constprop.0+0x72>
 80061ec:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80061f0:	2f19      	cmp	r7, #25
 80061f2:	d804      	bhi.n	80061fe <_strtol_l.constprop.0+0xc6>
 80061f4:	3c57      	subs	r4, #87	@ 0x57
 80061f6:	e7d8      	b.n	80061aa <_strtol_l.constprop.0+0x72>
 80061f8:	f04f 32ff 	mov.w	r2, #4294967295
 80061fc:	e7e1      	b.n	80061c2 <_strtol_l.constprop.0+0x8a>
 80061fe:	1c53      	adds	r3, r2, #1
 8006200:	d108      	bne.n	8006214 <_strtol_l.constprop.0+0xdc>
 8006202:	2322      	movs	r3, #34	@ 0x22
 8006204:	f8ce 3000 	str.w	r3, [lr]
 8006208:	4660      	mov	r0, ip
 800620a:	f1b8 0f00 	cmp.w	r8, #0
 800620e:	d0a0      	beq.n	8006152 <_strtol_l.constprop.0+0x1a>
 8006210:	1e69      	subs	r1, r5, #1
 8006212:	e006      	b.n	8006222 <_strtol_l.constprop.0+0xea>
 8006214:	b106      	cbz	r6, 8006218 <_strtol_l.constprop.0+0xe0>
 8006216:	4240      	negs	r0, r0
 8006218:	f1b8 0f00 	cmp.w	r8, #0
 800621c:	d099      	beq.n	8006152 <_strtol_l.constprop.0+0x1a>
 800621e:	2a00      	cmp	r2, #0
 8006220:	d1f6      	bne.n	8006210 <_strtol_l.constprop.0+0xd8>
 8006222:	f8c8 1000 	str.w	r1, [r8]
 8006226:	e794      	b.n	8006152 <_strtol_l.constprop.0+0x1a>
 8006228:	08006cc1 	.word	0x08006cc1

0800622c <strtol>:
 800622c:	4613      	mov	r3, r2
 800622e:	460a      	mov	r2, r1
 8006230:	4601      	mov	r1, r0
 8006232:	4802      	ldr	r0, [pc, #8]	@ (800623c <strtol+0x10>)
 8006234:	6800      	ldr	r0, [r0, #0]
 8006236:	f7ff bf7f 	b.w	8006138 <_strtol_l.constprop.0>
 800623a:	bf00      	nop
 800623c:	2000000c 	.word	0x2000000c

08006240 <sniprintf>:
 8006240:	b40c      	push	{r2, r3}
 8006242:	b530      	push	{r4, r5, lr}
 8006244:	4b17      	ldr	r3, [pc, #92]	@ (80062a4 <sniprintf+0x64>)
 8006246:	1e0c      	subs	r4, r1, #0
 8006248:	681d      	ldr	r5, [r3, #0]
 800624a:	b09d      	sub	sp, #116	@ 0x74
 800624c:	da08      	bge.n	8006260 <sniprintf+0x20>
 800624e:	238b      	movs	r3, #139	@ 0x8b
 8006250:	602b      	str	r3, [r5, #0]
 8006252:	f04f 30ff 	mov.w	r0, #4294967295
 8006256:	b01d      	add	sp, #116	@ 0x74
 8006258:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800625c:	b002      	add	sp, #8
 800625e:	4770      	bx	lr
 8006260:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006264:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006268:	bf14      	ite	ne
 800626a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800626e:	4623      	moveq	r3, r4
 8006270:	9304      	str	r3, [sp, #16]
 8006272:	9307      	str	r3, [sp, #28]
 8006274:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006278:	9002      	str	r0, [sp, #8]
 800627a:	9006      	str	r0, [sp, #24]
 800627c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006280:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006282:	ab21      	add	r3, sp, #132	@ 0x84
 8006284:	a902      	add	r1, sp, #8
 8006286:	4628      	mov	r0, r5
 8006288:	9301      	str	r3, [sp, #4]
 800628a:	f000 f9a7 	bl	80065dc <_svfiprintf_r>
 800628e:	1c43      	adds	r3, r0, #1
 8006290:	bfbc      	itt	lt
 8006292:	238b      	movlt	r3, #139	@ 0x8b
 8006294:	602b      	strlt	r3, [r5, #0]
 8006296:	2c00      	cmp	r4, #0
 8006298:	d0dd      	beq.n	8006256 <sniprintf+0x16>
 800629a:	9b02      	ldr	r3, [sp, #8]
 800629c:	2200      	movs	r2, #0
 800629e:	701a      	strb	r2, [r3, #0]
 80062a0:	e7d9      	b.n	8006256 <sniprintf+0x16>
 80062a2:	bf00      	nop
 80062a4:	2000000c 	.word	0x2000000c

080062a8 <memset>:
 80062a8:	4402      	add	r2, r0
 80062aa:	4603      	mov	r3, r0
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d100      	bne.n	80062b2 <memset+0xa>
 80062b0:	4770      	bx	lr
 80062b2:	f803 1b01 	strb.w	r1, [r3], #1
 80062b6:	e7f9      	b.n	80062ac <memset+0x4>

080062b8 <strncmp>:
 80062b8:	b510      	push	{r4, lr}
 80062ba:	b16a      	cbz	r2, 80062d8 <strncmp+0x20>
 80062bc:	3901      	subs	r1, #1
 80062be:	1884      	adds	r4, r0, r2
 80062c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80062c4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d103      	bne.n	80062d4 <strncmp+0x1c>
 80062cc:	42a0      	cmp	r0, r4
 80062ce:	d001      	beq.n	80062d4 <strncmp+0x1c>
 80062d0:	2a00      	cmp	r2, #0
 80062d2:	d1f5      	bne.n	80062c0 <strncmp+0x8>
 80062d4:	1ad0      	subs	r0, r2, r3
 80062d6:	bd10      	pop	{r4, pc}
 80062d8:	4610      	mov	r0, r2
 80062da:	e7fc      	b.n	80062d6 <strncmp+0x1e>

080062dc <__errno>:
 80062dc:	4b01      	ldr	r3, [pc, #4]	@ (80062e4 <__errno+0x8>)
 80062de:	6818      	ldr	r0, [r3, #0]
 80062e0:	4770      	bx	lr
 80062e2:	bf00      	nop
 80062e4:	2000000c 	.word	0x2000000c

080062e8 <__libc_init_array>:
 80062e8:	b570      	push	{r4, r5, r6, lr}
 80062ea:	4d0d      	ldr	r5, [pc, #52]	@ (8006320 <__libc_init_array+0x38>)
 80062ec:	4c0d      	ldr	r4, [pc, #52]	@ (8006324 <__libc_init_array+0x3c>)
 80062ee:	1b64      	subs	r4, r4, r5
 80062f0:	10a4      	asrs	r4, r4, #2
 80062f2:	2600      	movs	r6, #0
 80062f4:	42a6      	cmp	r6, r4
 80062f6:	d109      	bne.n	800630c <__libc_init_array+0x24>
 80062f8:	4d0b      	ldr	r5, [pc, #44]	@ (8006328 <__libc_init_array+0x40>)
 80062fa:	4c0c      	ldr	r4, [pc, #48]	@ (800632c <__libc_init_array+0x44>)
 80062fc:	f000 fc66 	bl	8006bcc <_init>
 8006300:	1b64      	subs	r4, r4, r5
 8006302:	10a4      	asrs	r4, r4, #2
 8006304:	2600      	movs	r6, #0
 8006306:	42a6      	cmp	r6, r4
 8006308:	d105      	bne.n	8006316 <__libc_init_array+0x2e>
 800630a:	bd70      	pop	{r4, r5, r6, pc}
 800630c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006310:	4798      	blx	r3
 8006312:	3601      	adds	r6, #1
 8006314:	e7ee      	b.n	80062f4 <__libc_init_array+0xc>
 8006316:	f855 3b04 	ldr.w	r3, [r5], #4
 800631a:	4798      	blx	r3
 800631c:	3601      	adds	r6, #1
 800631e:	e7f2      	b.n	8006306 <__libc_init_array+0x1e>
 8006320:	08006dfc 	.word	0x08006dfc
 8006324:	08006dfc 	.word	0x08006dfc
 8006328:	08006dfc 	.word	0x08006dfc
 800632c:	08006e00 	.word	0x08006e00

08006330 <__retarget_lock_acquire_recursive>:
 8006330:	4770      	bx	lr

08006332 <__retarget_lock_release_recursive>:
 8006332:	4770      	bx	lr

08006334 <_free_r>:
 8006334:	b538      	push	{r3, r4, r5, lr}
 8006336:	4605      	mov	r5, r0
 8006338:	2900      	cmp	r1, #0
 800633a:	d041      	beq.n	80063c0 <_free_r+0x8c>
 800633c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006340:	1f0c      	subs	r4, r1, #4
 8006342:	2b00      	cmp	r3, #0
 8006344:	bfb8      	it	lt
 8006346:	18e4      	addlt	r4, r4, r3
 8006348:	f000 f8e0 	bl	800650c <__malloc_lock>
 800634c:	4a1d      	ldr	r2, [pc, #116]	@ (80063c4 <_free_r+0x90>)
 800634e:	6813      	ldr	r3, [r2, #0]
 8006350:	b933      	cbnz	r3, 8006360 <_free_r+0x2c>
 8006352:	6063      	str	r3, [r4, #4]
 8006354:	6014      	str	r4, [r2, #0]
 8006356:	4628      	mov	r0, r5
 8006358:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800635c:	f000 b8dc 	b.w	8006518 <__malloc_unlock>
 8006360:	42a3      	cmp	r3, r4
 8006362:	d908      	bls.n	8006376 <_free_r+0x42>
 8006364:	6820      	ldr	r0, [r4, #0]
 8006366:	1821      	adds	r1, r4, r0
 8006368:	428b      	cmp	r3, r1
 800636a:	bf01      	itttt	eq
 800636c:	6819      	ldreq	r1, [r3, #0]
 800636e:	685b      	ldreq	r3, [r3, #4]
 8006370:	1809      	addeq	r1, r1, r0
 8006372:	6021      	streq	r1, [r4, #0]
 8006374:	e7ed      	b.n	8006352 <_free_r+0x1e>
 8006376:	461a      	mov	r2, r3
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	b10b      	cbz	r3, 8006380 <_free_r+0x4c>
 800637c:	42a3      	cmp	r3, r4
 800637e:	d9fa      	bls.n	8006376 <_free_r+0x42>
 8006380:	6811      	ldr	r1, [r2, #0]
 8006382:	1850      	adds	r0, r2, r1
 8006384:	42a0      	cmp	r0, r4
 8006386:	d10b      	bne.n	80063a0 <_free_r+0x6c>
 8006388:	6820      	ldr	r0, [r4, #0]
 800638a:	4401      	add	r1, r0
 800638c:	1850      	adds	r0, r2, r1
 800638e:	4283      	cmp	r3, r0
 8006390:	6011      	str	r1, [r2, #0]
 8006392:	d1e0      	bne.n	8006356 <_free_r+0x22>
 8006394:	6818      	ldr	r0, [r3, #0]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	6053      	str	r3, [r2, #4]
 800639a:	4408      	add	r0, r1
 800639c:	6010      	str	r0, [r2, #0]
 800639e:	e7da      	b.n	8006356 <_free_r+0x22>
 80063a0:	d902      	bls.n	80063a8 <_free_r+0x74>
 80063a2:	230c      	movs	r3, #12
 80063a4:	602b      	str	r3, [r5, #0]
 80063a6:	e7d6      	b.n	8006356 <_free_r+0x22>
 80063a8:	6820      	ldr	r0, [r4, #0]
 80063aa:	1821      	adds	r1, r4, r0
 80063ac:	428b      	cmp	r3, r1
 80063ae:	bf04      	itt	eq
 80063b0:	6819      	ldreq	r1, [r3, #0]
 80063b2:	685b      	ldreq	r3, [r3, #4]
 80063b4:	6063      	str	r3, [r4, #4]
 80063b6:	bf04      	itt	eq
 80063b8:	1809      	addeq	r1, r1, r0
 80063ba:	6021      	streq	r1, [r4, #0]
 80063bc:	6054      	str	r4, [r2, #4]
 80063be:	e7ca      	b.n	8006356 <_free_r+0x22>
 80063c0:	bd38      	pop	{r3, r4, r5, pc}
 80063c2:	bf00      	nop
 80063c4:	200003c4 	.word	0x200003c4

080063c8 <sbrk_aligned>:
 80063c8:	b570      	push	{r4, r5, r6, lr}
 80063ca:	4e0f      	ldr	r6, [pc, #60]	@ (8006408 <sbrk_aligned+0x40>)
 80063cc:	460c      	mov	r4, r1
 80063ce:	6831      	ldr	r1, [r6, #0]
 80063d0:	4605      	mov	r5, r0
 80063d2:	b911      	cbnz	r1, 80063da <sbrk_aligned+0x12>
 80063d4:	f000 fba6 	bl	8006b24 <_sbrk_r>
 80063d8:	6030      	str	r0, [r6, #0]
 80063da:	4621      	mov	r1, r4
 80063dc:	4628      	mov	r0, r5
 80063de:	f000 fba1 	bl	8006b24 <_sbrk_r>
 80063e2:	1c43      	adds	r3, r0, #1
 80063e4:	d103      	bne.n	80063ee <sbrk_aligned+0x26>
 80063e6:	f04f 34ff 	mov.w	r4, #4294967295
 80063ea:	4620      	mov	r0, r4
 80063ec:	bd70      	pop	{r4, r5, r6, pc}
 80063ee:	1cc4      	adds	r4, r0, #3
 80063f0:	f024 0403 	bic.w	r4, r4, #3
 80063f4:	42a0      	cmp	r0, r4
 80063f6:	d0f8      	beq.n	80063ea <sbrk_aligned+0x22>
 80063f8:	1a21      	subs	r1, r4, r0
 80063fa:	4628      	mov	r0, r5
 80063fc:	f000 fb92 	bl	8006b24 <_sbrk_r>
 8006400:	3001      	adds	r0, #1
 8006402:	d1f2      	bne.n	80063ea <sbrk_aligned+0x22>
 8006404:	e7ef      	b.n	80063e6 <sbrk_aligned+0x1e>
 8006406:	bf00      	nop
 8006408:	200003c0 	.word	0x200003c0

0800640c <_malloc_r>:
 800640c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006410:	1ccd      	adds	r5, r1, #3
 8006412:	f025 0503 	bic.w	r5, r5, #3
 8006416:	3508      	adds	r5, #8
 8006418:	2d0c      	cmp	r5, #12
 800641a:	bf38      	it	cc
 800641c:	250c      	movcc	r5, #12
 800641e:	2d00      	cmp	r5, #0
 8006420:	4606      	mov	r6, r0
 8006422:	db01      	blt.n	8006428 <_malloc_r+0x1c>
 8006424:	42a9      	cmp	r1, r5
 8006426:	d904      	bls.n	8006432 <_malloc_r+0x26>
 8006428:	230c      	movs	r3, #12
 800642a:	6033      	str	r3, [r6, #0]
 800642c:	2000      	movs	r0, #0
 800642e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006432:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006508 <_malloc_r+0xfc>
 8006436:	f000 f869 	bl	800650c <__malloc_lock>
 800643a:	f8d8 3000 	ldr.w	r3, [r8]
 800643e:	461c      	mov	r4, r3
 8006440:	bb44      	cbnz	r4, 8006494 <_malloc_r+0x88>
 8006442:	4629      	mov	r1, r5
 8006444:	4630      	mov	r0, r6
 8006446:	f7ff ffbf 	bl	80063c8 <sbrk_aligned>
 800644a:	1c43      	adds	r3, r0, #1
 800644c:	4604      	mov	r4, r0
 800644e:	d158      	bne.n	8006502 <_malloc_r+0xf6>
 8006450:	f8d8 4000 	ldr.w	r4, [r8]
 8006454:	4627      	mov	r7, r4
 8006456:	2f00      	cmp	r7, #0
 8006458:	d143      	bne.n	80064e2 <_malloc_r+0xd6>
 800645a:	2c00      	cmp	r4, #0
 800645c:	d04b      	beq.n	80064f6 <_malloc_r+0xea>
 800645e:	6823      	ldr	r3, [r4, #0]
 8006460:	4639      	mov	r1, r7
 8006462:	4630      	mov	r0, r6
 8006464:	eb04 0903 	add.w	r9, r4, r3
 8006468:	f000 fb5c 	bl	8006b24 <_sbrk_r>
 800646c:	4581      	cmp	r9, r0
 800646e:	d142      	bne.n	80064f6 <_malloc_r+0xea>
 8006470:	6821      	ldr	r1, [r4, #0]
 8006472:	1a6d      	subs	r5, r5, r1
 8006474:	4629      	mov	r1, r5
 8006476:	4630      	mov	r0, r6
 8006478:	f7ff ffa6 	bl	80063c8 <sbrk_aligned>
 800647c:	3001      	adds	r0, #1
 800647e:	d03a      	beq.n	80064f6 <_malloc_r+0xea>
 8006480:	6823      	ldr	r3, [r4, #0]
 8006482:	442b      	add	r3, r5
 8006484:	6023      	str	r3, [r4, #0]
 8006486:	f8d8 3000 	ldr.w	r3, [r8]
 800648a:	685a      	ldr	r2, [r3, #4]
 800648c:	bb62      	cbnz	r2, 80064e8 <_malloc_r+0xdc>
 800648e:	f8c8 7000 	str.w	r7, [r8]
 8006492:	e00f      	b.n	80064b4 <_malloc_r+0xa8>
 8006494:	6822      	ldr	r2, [r4, #0]
 8006496:	1b52      	subs	r2, r2, r5
 8006498:	d420      	bmi.n	80064dc <_malloc_r+0xd0>
 800649a:	2a0b      	cmp	r2, #11
 800649c:	d917      	bls.n	80064ce <_malloc_r+0xc2>
 800649e:	1961      	adds	r1, r4, r5
 80064a0:	42a3      	cmp	r3, r4
 80064a2:	6025      	str	r5, [r4, #0]
 80064a4:	bf18      	it	ne
 80064a6:	6059      	strne	r1, [r3, #4]
 80064a8:	6863      	ldr	r3, [r4, #4]
 80064aa:	bf08      	it	eq
 80064ac:	f8c8 1000 	streq.w	r1, [r8]
 80064b0:	5162      	str	r2, [r4, r5]
 80064b2:	604b      	str	r3, [r1, #4]
 80064b4:	4630      	mov	r0, r6
 80064b6:	f000 f82f 	bl	8006518 <__malloc_unlock>
 80064ba:	f104 000b 	add.w	r0, r4, #11
 80064be:	1d23      	adds	r3, r4, #4
 80064c0:	f020 0007 	bic.w	r0, r0, #7
 80064c4:	1ac2      	subs	r2, r0, r3
 80064c6:	bf1c      	itt	ne
 80064c8:	1a1b      	subne	r3, r3, r0
 80064ca:	50a3      	strne	r3, [r4, r2]
 80064cc:	e7af      	b.n	800642e <_malloc_r+0x22>
 80064ce:	6862      	ldr	r2, [r4, #4]
 80064d0:	42a3      	cmp	r3, r4
 80064d2:	bf0c      	ite	eq
 80064d4:	f8c8 2000 	streq.w	r2, [r8]
 80064d8:	605a      	strne	r2, [r3, #4]
 80064da:	e7eb      	b.n	80064b4 <_malloc_r+0xa8>
 80064dc:	4623      	mov	r3, r4
 80064de:	6864      	ldr	r4, [r4, #4]
 80064e0:	e7ae      	b.n	8006440 <_malloc_r+0x34>
 80064e2:	463c      	mov	r4, r7
 80064e4:	687f      	ldr	r7, [r7, #4]
 80064e6:	e7b6      	b.n	8006456 <_malloc_r+0x4a>
 80064e8:	461a      	mov	r2, r3
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	42a3      	cmp	r3, r4
 80064ee:	d1fb      	bne.n	80064e8 <_malloc_r+0xdc>
 80064f0:	2300      	movs	r3, #0
 80064f2:	6053      	str	r3, [r2, #4]
 80064f4:	e7de      	b.n	80064b4 <_malloc_r+0xa8>
 80064f6:	230c      	movs	r3, #12
 80064f8:	6033      	str	r3, [r6, #0]
 80064fa:	4630      	mov	r0, r6
 80064fc:	f000 f80c 	bl	8006518 <__malloc_unlock>
 8006500:	e794      	b.n	800642c <_malloc_r+0x20>
 8006502:	6005      	str	r5, [r0, #0]
 8006504:	e7d6      	b.n	80064b4 <_malloc_r+0xa8>
 8006506:	bf00      	nop
 8006508:	200003c4 	.word	0x200003c4

0800650c <__malloc_lock>:
 800650c:	4801      	ldr	r0, [pc, #4]	@ (8006514 <__malloc_lock+0x8>)
 800650e:	f7ff bf0f 	b.w	8006330 <__retarget_lock_acquire_recursive>
 8006512:	bf00      	nop
 8006514:	200003bc 	.word	0x200003bc

08006518 <__malloc_unlock>:
 8006518:	4801      	ldr	r0, [pc, #4]	@ (8006520 <__malloc_unlock+0x8>)
 800651a:	f7ff bf0a 	b.w	8006332 <__retarget_lock_release_recursive>
 800651e:	bf00      	nop
 8006520:	200003bc 	.word	0x200003bc

08006524 <__ssputs_r>:
 8006524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006528:	688e      	ldr	r6, [r1, #8]
 800652a:	461f      	mov	r7, r3
 800652c:	42be      	cmp	r6, r7
 800652e:	680b      	ldr	r3, [r1, #0]
 8006530:	4682      	mov	sl, r0
 8006532:	460c      	mov	r4, r1
 8006534:	4690      	mov	r8, r2
 8006536:	d82d      	bhi.n	8006594 <__ssputs_r+0x70>
 8006538:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800653c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006540:	d026      	beq.n	8006590 <__ssputs_r+0x6c>
 8006542:	6965      	ldr	r5, [r4, #20]
 8006544:	6909      	ldr	r1, [r1, #16]
 8006546:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800654a:	eba3 0901 	sub.w	r9, r3, r1
 800654e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006552:	1c7b      	adds	r3, r7, #1
 8006554:	444b      	add	r3, r9
 8006556:	106d      	asrs	r5, r5, #1
 8006558:	429d      	cmp	r5, r3
 800655a:	bf38      	it	cc
 800655c:	461d      	movcc	r5, r3
 800655e:	0553      	lsls	r3, r2, #21
 8006560:	d527      	bpl.n	80065b2 <__ssputs_r+0x8e>
 8006562:	4629      	mov	r1, r5
 8006564:	f7ff ff52 	bl	800640c <_malloc_r>
 8006568:	4606      	mov	r6, r0
 800656a:	b360      	cbz	r0, 80065c6 <__ssputs_r+0xa2>
 800656c:	6921      	ldr	r1, [r4, #16]
 800656e:	464a      	mov	r2, r9
 8006570:	f000 fae8 	bl	8006b44 <memcpy>
 8006574:	89a3      	ldrh	r3, [r4, #12]
 8006576:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800657a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800657e:	81a3      	strh	r3, [r4, #12]
 8006580:	6126      	str	r6, [r4, #16]
 8006582:	6165      	str	r5, [r4, #20]
 8006584:	444e      	add	r6, r9
 8006586:	eba5 0509 	sub.w	r5, r5, r9
 800658a:	6026      	str	r6, [r4, #0]
 800658c:	60a5      	str	r5, [r4, #8]
 800658e:	463e      	mov	r6, r7
 8006590:	42be      	cmp	r6, r7
 8006592:	d900      	bls.n	8006596 <__ssputs_r+0x72>
 8006594:	463e      	mov	r6, r7
 8006596:	6820      	ldr	r0, [r4, #0]
 8006598:	4632      	mov	r2, r6
 800659a:	4641      	mov	r1, r8
 800659c:	f000 faa8 	bl	8006af0 <memmove>
 80065a0:	68a3      	ldr	r3, [r4, #8]
 80065a2:	1b9b      	subs	r3, r3, r6
 80065a4:	60a3      	str	r3, [r4, #8]
 80065a6:	6823      	ldr	r3, [r4, #0]
 80065a8:	4433      	add	r3, r6
 80065aa:	6023      	str	r3, [r4, #0]
 80065ac:	2000      	movs	r0, #0
 80065ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065b2:	462a      	mov	r2, r5
 80065b4:	f000 fad4 	bl	8006b60 <_realloc_r>
 80065b8:	4606      	mov	r6, r0
 80065ba:	2800      	cmp	r0, #0
 80065bc:	d1e0      	bne.n	8006580 <__ssputs_r+0x5c>
 80065be:	6921      	ldr	r1, [r4, #16]
 80065c0:	4650      	mov	r0, sl
 80065c2:	f7ff feb7 	bl	8006334 <_free_r>
 80065c6:	230c      	movs	r3, #12
 80065c8:	f8ca 3000 	str.w	r3, [sl]
 80065cc:	89a3      	ldrh	r3, [r4, #12]
 80065ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065d2:	81a3      	strh	r3, [r4, #12]
 80065d4:	f04f 30ff 	mov.w	r0, #4294967295
 80065d8:	e7e9      	b.n	80065ae <__ssputs_r+0x8a>
	...

080065dc <_svfiprintf_r>:
 80065dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065e0:	4698      	mov	r8, r3
 80065e2:	898b      	ldrh	r3, [r1, #12]
 80065e4:	061b      	lsls	r3, r3, #24
 80065e6:	b09d      	sub	sp, #116	@ 0x74
 80065e8:	4607      	mov	r7, r0
 80065ea:	460d      	mov	r5, r1
 80065ec:	4614      	mov	r4, r2
 80065ee:	d510      	bpl.n	8006612 <_svfiprintf_r+0x36>
 80065f0:	690b      	ldr	r3, [r1, #16]
 80065f2:	b973      	cbnz	r3, 8006612 <_svfiprintf_r+0x36>
 80065f4:	2140      	movs	r1, #64	@ 0x40
 80065f6:	f7ff ff09 	bl	800640c <_malloc_r>
 80065fa:	6028      	str	r0, [r5, #0]
 80065fc:	6128      	str	r0, [r5, #16]
 80065fe:	b930      	cbnz	r0, 800660e <_svfiprintf_r+0x32>
 8006600:	230c      	movs	r3, #12
 8006602:	603b      	str	r3, [r7, #0]
 8006604:	f04f 30ff 	mov.w	r0, #4294967295
 8006608:	b01d      	add	sp, #116	@ 0x74
 800660a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800660e:	2340      	movs	r3, #64	@ 0x40
 8006610:	616b      	str	r3, [r5, #20]
 8006612:	2300      	movs	r3, #0
 8006614:	9309      	str	r3, [sp, #36]	@ 0x24
 8006616:	2320      	movs	r3, #32
 8006618:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800661c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006620:	2330      	movs	r3, #48	@ 0x30
 8006622:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80067c0 <_svfiprintf_r+0x1e4>
 8006626:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800662a:	f04f 0901 	mov.w	r9, #1
 800662e:	4623      	mov	r3, r4
 8006630:	469a      	mov	sl, r3
 8006632:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006636:	b10a      	cbz	r2, 800663c <_svfiprintf_r+0x60>
 8006638:	2a25      	cmp	r2, #37	@ 0x25
 800663a:	d1f9      	bne.n	8006630 <_svfiprintf_r+0x54>
 800663c:	ebba 0b04 	subs.w	fp, sl, r4
 8006640:	d00b      	beq.n	800665a <_svfiprintf_r+0x7e>
 8006642:	465b      	mov	r3, fp
 8006644:	4622      	mov	r2, r4
 8006646:	4629      	mov	r1, r5
 8006648:	4638      	mov	r0, r7
 800664a:	f7ff ff6b 	bl	8006524 <__ssputs_r>
 800664e:	3001      	adds	r0, #1
 8006650:	f000 80a7 	beq.w	80067a2 <_svfiprintf_r+0x1c6>
 8006654:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006656:	445a      	add	r2, fp
 8006658:	9209      	str	r2, [sp, #36]	@ 0x24
 800665a:	f89a 3000 	ldrb.w	r3, [sl]
 800665e:	2b00      	cmp	r3, #0
 8006660:	f000 809f 	beq.w	80067a2 <_svfiprintf_r+0x1c6>
 8006664:	2300      	movs	r3, #0
 8006666:	f04f 32ff 	mov.w	r2, #4294967295
 800666a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800666e:	f10a 0a01 	add.w	sl, sl, #1
 8006672:	9304      	str	r3, [sp, #16]
 8006674:	9307      	str	r3, [sp, #28]
 8006676:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800667a:	931a      	str	r3, [sp, #104]	@ 0x68
 800667c:	4654      	mov	r4, sl
 800667e:	2205      	movs	r2, #5
 8006680:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006684:	484e      	ldr	r0, [pc, #312]	@ (80067c0 <_svfiprintf_r+0x1e4>)
 8006686:	f7f9 fdab 	bl	80001e0 <memchr>
 800668a:	9a04      	ldr	r2, [sp, #16]
 800668c:	b9d8      	cbnz	r0, 80066c6 <_svfiprintf_r+0xea>
 800668e:	06d0      	lsls	r0, r2, #27
 8006690:	bf44      	itt	mi
 8006692:	2320      	movmi	r3, #32
 8006694:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006698:	0711      	lsls	r1, r2, #28
 800669a:	bf44      	itt	mi
 800669c:	232b      	movmi	r3, #43	@ 0x2b
 800669e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80066a2:	f89a 3000 	ldrb.w	r3, [sl]
 80066a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80066a8:	d015      	beq.n	80066d6 <_svfiprintf_r+0xfa>
 80066aa:	9a07      	ldr	r2, [sp, #28]
 80066ac:	4654      	mov	r4, sl
 80066ae:	2000      	movs	r0, #0
 80066b0:	f04f 0c0a 	mov.w	ip, #10
 80066b4:	4621      	mov	r1, r4
 80066b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066ba:	3b30      	subs	r3, #48	@ 0x30
 80066bc:	2b09      	cmp	r3, #9
 80066be:	d94b      	bls.n	8006758 <_svfiprintf_r+0x17c>
 80066c0:	b1b0      	cbz	r0, 80066f0 <_svfiprintf_r+0x114>
 80066c2:	9207      	str	r2, [sp, #28]
 80066c4:	e014      	b.n	80066f0 <_svfiprintf_r+0x114>
 80066c6:	eba0 0308 	sub.w	r3, r0, r8
 80066ca:	fa09 f303 	lsl.w	r3, r9, r3
 80066ce:	4313      	orrs	r3, r2
 80066d0:	9304      	str	r3, [sp, #16]
 80066d2:	46a2      	mov	sl, r4
 80066d4:	e7d2      	b.n	800667c <_svfiprintf_r+0xa0>
 80066d6:	9b03      	ldr	r3, [sp, #12]
 80066d8:	1d19      	adds	r1, r3, #4
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	9103      	str	r1, [sp, #12]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	bfbb      	ittet	lt
 80066e2:	425b      	neglt	r3, r3
 80066e4:	f042 0202 	orrlt.w	r2, r2, #2
 80066e8:	9307      	strge	r3, [sp, #28]
 80066ea:	9307      	strlt	r3, [sp, #28]
 80066ec:	bfb8      	it	lt
 80066ee:	9204      	strlt	r2, [sp, #16]
 80066f0:	7823      	ldrb	r3, [r4, #0]
 80066f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80066f4:	d10a      	bne.n	800670c <_svfiprintf_r+0x130>
 80066f6:	7863      	ldrb	r3, [r4, #1]
 80066f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80066fa:	d132      	bne.n	8006762 <_svfiprintf_r+0x186>
 80066fc:	9b03      	ldr	r3, [sp, #12]
 80066fe:	1d1a      	adds	r2, r3, #4
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	9203      	str	r2, [sp, #12]
 8006704:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006708:	3402      	adds	r4, #2
 800670a:	9305      	str	r3, [sp, #20]
 800670c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80067d0 <_svfiprintf_r+0x1f4>
 8006710:	7821      	ldrb	r1, [r4, #0]
 8006712:	2203      	movs	r2, #3
 8006714:	4650      	mov	r0, sl
 8006716:	f7f9 fd63 	bl	80001e0 <memchr>
 800671a:	b138      	cbz	r0, 800672c <_svfiprintf_r+0x150>
 800671c:	9b04      	ldr	r3, [sp, #16]
 800671e:	eba0 000a 	sub.w	r0, r0, sl
 8006722:	2240      	movs	r2, #64	@ 0x40
 8006724:	4082      	lsls	r2, r0
 8006726:	4313      	orrs	r3, r2
 8006728:	3401      	adds	r4, #1
 800672a:	9304      	str	r3, [sp, #16]
 800672c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006730:	4824      	ldr	r0, [pc, #144]	@ (80067c4 <_svfiprintf_r+0x1e8>)
 8006732:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006736:	2206      	movs	r2, #6
 8006738:	f7f9 fd52 	bl	80001e0 <memchr>
 800673c:	2800      	cmp	r0, #0
 800673e:	d036      	beq.n	80067ae <_svfiprintf_r+0x1d2>
 8006740:	4b21      	ldr	r3, [pc, #132]	@ (80067c8 <_svfiprintf_r+0x1ec>)
 8006742:	bb1b      	cbnz	r3, 800678c <_svfiprintf_r+0x1b0>
 8006744:	9b03      	ldr	r3, [sp, #12]
 8006746:	3307      	adds	r3, #7
 8006748:	f023 0307 	bic.w	r3, r3, #7
 800674c:	3308      	adds	r3, #8
 800674e:	9303      	str	r3, [sp, #12]
 8006750:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006752:	4433      	add	r3, r6
 8006754:	9309      	str	r3, [sp, #36]	@ 0x24
 8006756:	e76a      	b.n	800662e <_svfiprintf_r+0x52>
 8006758:	fb0c 3202 	mla	r2, ip, r2, r3
 800675c:	460c      	mov	r4, r1
 800675e:	2001      	movs	r0, #1
 8006760:	e7a8      	b.n	80066b4 <_svfiprintf_r+0xd8>
 8006762:	2300      	movs	r3, #0
 8006764:	3401      	adds	r4, #1
 8006766:	9305      	str	r3, [sp, #20]
 8006768:	4619      	mov	r1, r3
 800676a:	f04f 0c0a 	mov.w	ip, #10
 800676e:	4620      	mov	r0, r4
 8006770:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006774:	3a30      	subs	r2, #48	@ 0x30
 8006776:	2a09      	cmp	r2, #9
 8006778:	d903      	bls.n	8006782 <_svfiprintf_r+0x1a6>
 800677a:	2b00      	cmp	r3, #0
 800677c:	d0c6      	beq.n	800670c <_svfiprintf_r+0x130>
 800677e:	9105      	str	r1, [sp, #20]
 8006780:	e7c4      	b.n	800670c <_svfiprintf_r+0x130>
 8006782:	fb0c 2101 	mla	r1, ip, r1, r2
 8006786:	4604      	mov	r4, r0
 8006788:	2301      	movs	r3, #1
 800678a:	e7f0      	b.n	800676e <_svfiprintf_r+0x192>
 800678c:	ab03      	add	r3, sp, #12
 800678e:	9300      	str	r3, [sp, #0]
 8006790:	462a      	mov	r2, r5
 8006792:	4b0e      	ldr	r3, [pc, #56]	@ (80067cc <_svfiprintf_r+0x1f0>)
 8006794:	a904      	add	r1, sp, #16
 8006796:	4638      	mov	r0, r7
 8006798:	f3af 8000 	nop.w
 800679c:	1c42      	adds	r2, r0, #1
 800679e:	4606      	mov	r6, r0
 80067a0:	d1d6      	bne.n	8006750 <_svfiprintf_r+0x174>
 80067a2:	89ab      	ldrh	r3, [r5, #12]
 80067a4:	065b      	lsls	r3, r3, #25
 80067a6:	f53f af2d 	bmi.w	8006604 <_svfiprintf_r+0x28>
 80067aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80067ac:	e72c      	b.n	8006608 <_svfiprintf_r+0x2c>
 80067ae:	ab03      	add	r3, sp, #12
 80067b0:	9300      	str	r3, [sp, #0]
 80067b2:	462a      	mov	r2, r5
 80067b4:	4b05      	ldr	r3, [pc, #20]	@ (80067cc <_svfiprintf_r+0x1f0>)
 80067b6:	a904      	add	r1, sp, #16
 80067b8:	4638      	mov	r0, r7
 80067ba:	f000 f879 	bl	80068b0 <_printf_i>
 80067be:	e7ed      	b.n	800679c <_svfiprintf_r+0x1c0>
 80067c0:	08006dc1 	.word	0x08006dc1
 80067c4:	08006dcb 	.word	0x08006dcb
 80067c8:	00000000 	.word	0x00000000
 80067cc:	08006525 	.word	0x08006525
 80067d0:	08006dc7 	.word	0x08006dc7

080067d4 <_printf_common>:
 80067d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067d8:	4616      	mov	r6, r2
 80067da:	4698      	mov	r8, r3
 80067dc:	688a      	ldr	r2, [r1, #8]
 80067de:	690b      	ldr	r3, [r1, #16]
 80067e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80067e4:	4293      	cmp	r3, r2
 80067e6:	bfb8      	it	lt
 80067e8:	4613      	movlt	r3, r2
 80067ea:	6033      	str	r3, [r6, #0]
 80067ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80067f0:	4607      	mov	r7, r0
 80067f2:	460c      	mov	r4, r1
 80067f4:	b10a      	cbz	r2, 80067fa <_printf_common+0x26>
 80067f6:	3301      	adds	r3, #1
 80067f8:	6033      	str	r3, [r6, #0]
 80067fa:	6823      	ldr	r3, [r4, #0]
 80067fc:	0699      	lsls	r1, r3, #26
 80067fe:	bf42      	ittt	mi
 8006800:	6833      	ldrmi	r3, [r6, #0]
 8006802:	3302      	addmi	r3, #2
 8006804:	6033      	strmi	r3, [r6, #0]
 8006806:	6825      	ldr	r5, [r4, #0]
 8006808:	f015 0506 	ands.w	r5, r5, #6
 800680c:	d106      	bne.n	800681c <_printf_common+0x48>
 800680e:	f104 0a19 	add.w	sl, r4, #25
 8006812:	68e3      	ldr	r3, [r4, #12]
 8006814:	6832      	ldr	r2, [r6, #0]
 8006816:	1a9b      	subs	r3, r3, r2
 8006818:	42ab      	cmp	r3, r5
 800681a:	dc26      	bgt.n	800686a <_printf_common+0x96>
 800681c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006820:	6822      	ldr	r2, [r4, #0]
 8006822:	3b00      	subs	r3, #0
 8006824:	bf18      	it	ne
 8006826:	2301      	movne	r3, #1
 8006828:	0692      	lsls	r2, r2, #26
 800682a:	d42b      	bmi.n	8006884 <_printf_common+0xb0>
 800682c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006830:	4641      	mov	r1, r8
 8006832:	4638      	mov	r0, r7
 8006834:	47c8      	blx	r9
 8006836:	3001      	adds	r0, #1
 8006838:	d01e      	beq.n	8006878 <_printf_common+0xa4>
 800683a:	6823      	ldr	r3, [r4, #0]
 800683c:	6922      	ldr	r2, [r4, #16]
 800683e:	f003 0306 	and.w	r3, r3, #6
 8006842:	2b04      	cmp	r3, #4
 8006844:	bf02      	ittt	eq
 8006846:	68e5      	ldreq	r5, [r4, #12]
 8006848:	6833      	ldreq	r3, [r6, #0]
 800684a:	1aed      	subeq	r5, r5, r3
 800684c:	68a3      	ldr	r3, [r4, #8]
 800684e:	bf0c      	ite	eq
 8006850:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006854:	2500      	movne	r5, #0
 8006856:	4293      	cmp	r3, r2
 8006858:	bfc4      	itt	gt
 800685a:	1a9b      	subgt	r3, r3, r2
 800685c:	18ed      	addgt	r5, r5, r3
 800685e:	2600      	movs	r6, #0
 8006860:	341a      	adds	r4, #26
 8006862:	42b5      	cmp	r5, r6
 8006864:	d11a      	bne.n	800689c <_printf_common+0xc8>
 8006866:	2000      	movs	r0, #0
 8006868:	e008      	b.n	800687c <_printf_common+0xa8>
 800686a:	2301      	movs	r3, #1
 800686c:	4652      	mov	r2, sl
 800686e:	4641      	mov	r1, r8
 8006870:	4638      	mov	r0, r7
 8006872:	47c8      	blx	r9
 8006874:	3001      	adds	r0, #1
 8006876:	d103      	bne.n	8006880 <_printf_common+0xac>
 8006878:	f04f 30ff 	mov.w	r0, #4294967295
 800687c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006880:	3501      	adds	r5, #1
 8006882:	e7c6      	b.n	8006812 <_printf_common+0x3e>
 8006884:	18e1      	adds	r1, r4, r3
 8006886:	1c5a      	adds	r2, r3, #1
 8006888:	2030      	movs	r0, #48	@ 0x30
 800688a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800688e:	4422      	add	r2, r4
 8006890:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006894:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006898:	3302      	adds	r3, #2
 800689a:	e7c7      	b.n	800682c <_printf_common+0x58>
 800689c:	2301      	movs	r3, #1
 800689e:	4622      	mov	r2, r4
 80068a0:	4641      	mov	r1, r8
 80068a2:	4638      	mov	r0, r7
 80068a4:	47c8      	blx	r9
 80068a6:	3001      	adds	r0, #1
 80068a8:	d0e6      	beq.n	8006878 <_printf_common+0xa4>
 80068aa:	3601      	adds	r6, #1
 80068ac:	e7d9      	b.n	8006862 <_printf_common+0x8e>
	...

080068b0 <_printf_i>:
 80068b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068b4:	7e0f      	ldrb	r7, [r1, #24]
 80068b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80068b8:	2f78      	cmp	r7, #120	@ 0x78
 80068ba:	4691      	mov	r9, r2
 80068bc:	4680      	mov	r8, r0
 80068be:	460c      	mov	r4, r1
 80068c0:	469a      	mov	sl, r3
 80068c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80068c6:	d807      	bhi.n	80068d8 <_printf_i+0x28>
 80068c8:	2f62      	cmp	r7, #98	@ 0x62
 80068ca:	d80a      	bhi.n	80068e2 <_printf_i+0x32>
 80068cc:	2f00      	cmp	r7, #0
 80068ce:	f000 80d2 	beq.w	8006a76 <_printf_i+0x1c6>
 80068d2:	2f58      	cmp	r7, #88	@ 0x58
 80068d4:	f000 80b9 	beq.w	8006a4a <_printf_i+0x19a>
 80068d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80068dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80068e0:	e03a      	b.n	8006958 <_printf_i+0xa8>
 80068e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80068e6:	2b15      	cmp	r3, #21
 80068e8:	d8f6      	bhi.n	80068d8 <_printf_i+0x28>
 80068ea:	a101      	add	r1, pc, #4	@ (adr r1, 80068f0 <_printf_i+0x40>)
 80068ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80068f0:	08006949 	.word	0x08006949
 80068f4:	0800695d 	.word	0x0800695d
 80068f8:	080068d9 	.word	0x080068d9
 80068fc:	080068d9 	.word	0x080068d9
 8006900:	080068d9 	.word	0x080068d9
 8006904:	080068d9 	.word	0x080068d9
 8006908:	0800695d 	.word	0x0800695d
 800690c:	080068d9 	.word	0x080068d9
 8006910:	080068d9 	.word	0x080068d9
 8006914:	080068d9 	.word	0x080068d9
 8006918:	080068d9 	.word	0x080068d9
 800691c:	08006a5d 	.word	0x08006a5d
 8006920:	08006987 	.word	0x08006987
 8006924:	08006a17 	.word	0x08006a17
 8006928:	080068d9 	.word	0x080068d9
 800692c:	080068d9 	.word	0x080068d9
 8006930:	08006a7f 	.word	0x08006a7f
 8006934:	080068d9 	.word	0x080068d9
 8006938:	08006987 	.word	0x08006987
 800693c:	080068d9 	.word	0x080068d9
 8006940:	080068d9 	.word	0x080068d9
 8006944:	08006a1f 	.word	0x08006a1f
 8006948:	6833      	ldr	r3, [r6, #0]
 800694a:	1d1a      	adds	r2, r3, #4
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	6032      	str	r2, [r6, #0]
 8006950:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006954:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006958:	2301      	movs	r3, #1
 800695a:	e09d      	b.n	8006a98 <_printf_i+0x1e8>
 800695c:	6833      	ldr	r3, [r6, #0]
 800695e:	6820      	ldr	r0, [r4, #0]
 8006960:	1d19      	adds	r1, r3, #4
 8006962:	6031      	str	r1, [r6, #0]
 8006964:	0606      	lsls	r6, r0, #24
 8006966:	d501      	bpl.n	800696c <_printf_i+0xbc>
 8006968:	681d      	ldr	r5, [r3, #0]
 800696a:	e003      	b.n	8006974 <_printf_i+0xc4>
 800696c:	0645      	lsls	r5, r0, #25
 800696e:	d5fb      	bpl.n	8006968 <_printf_i+0xb8>
 8006970:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006974:	2d00      	cmp	r5, #0
 8006976:	da03      	bge.n	8006980 <_printf_i+0xd0>
 8006978:	232d      	movs	r3, #45	@ 0x2d
 800697a:	426d      	negs	r5, r5
 800697c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006980:	4859      	ldr	r0, [pc, #356]	@ (8006ae8 <_printf_i+0x238>)
 8006982:	230a      	movs	r3, #10
 8006984:	e011      	b.n	80069aa <_printf_i+0xfa>
 8006986:	6821      	ldr	r1, [r4, #0]
 8006988:	6833      	ldr	r3, [r6, #0]
 800698a:	0608      	lsls	r0, r1, #24
 800698c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006990:	d402      	bmi.n	8006998 <_printf_i+0xe8>
 8006992:	0649      	lsls	r1, r1, #25
 8006994:	bf48      	it	mi
 8006996:	b2ad      	uxthmi	r5, r5
 8006998:	2f6f      	cmp	r7, #111	@ 0x6f
 800699a:	4853      	ldr	r0, [pc, #332]	@ (8006ae8 <_printf_i+0x238>)
 800699c:	6033      	str	r3, [r6, #0]
 800699e:	bf14      	ite	ne
 80069a0:	230a      	movne	r3, #10
 80069a2:	2308      	moveq	r3, #8
 80069a4:	2100      	movs	r1, #0
 80069a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80069aa:	6866      	ldr	r6, [r4, #4]
 80069ac:	60a6      	str	r6, [r4, #8]
 80069ae:	2e00      	cmp	r6, #0
 80069b0:	bfa2      	ittt	ge
 80069b2:	6821      	ldrge	r1, [r4, #0]
 80069b4:	f021 0104 	bicge.w	r1, r1, #4
 80069b8:	6021      	strge	r1, [r4, #0]
 80069ba:	b90d      	cbnz	r5, 80069c0 <_printf_i+0x110>
 80069bc:	2e00      	cmp	r6, #0
 80069be:	d04b      	beq.n	8006a58 <_printf_i+0x1a8>
 80069c0:	4616      	mov	r6, r2
 80069c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80069c6:	fb03 5711 	mls	r7, r3, r1, r5
 80069ca:	5dc7      	ldrb	r7, [r0, r7]
 80069cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80069d0:	462f      	mov	r7, r5
 80069d2:	42bb      	cmp	r3, r7
 80069d4:	460d      	mov	r5, r1
 80069d6:	d9f4      	bls.n	80069c2 <_printf_i+0x112>
 80069d8:	2b08      	cmp	r3, #8
 80069da:	d10b      	bne.n	80069f4 <_printf_i+0x144>
 80069dc:	6823      	ldr	r3, [r4, #0]
 80069de:	07df      	lsls	r7, r3, #31
 80069e0:	d508      	bpl.n	80069f4 <_printf_i+0x144>
 80069e2:	6923      	ldr	r3, [r4, #16]
 80069e4:	6861      	ldr	r1, [r4, #4]
 80069e6:	4299      	cmp	r1, r3
 80069e8:	bfde      	ittt	le
 80069ea:	2330      	movle	r3, #48	@ 0x30
 80069ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80069f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80069f4:	1b92      	subs	r2, r2, r6
 80069f6:	6122      	str	r2, [r4, #16]
 80069f8:	f8cd a000 	str.w	sl, [sp]
 80069fc:	464b      	mov	r3, r9
 80069fe:	aa03      	add	r2, sp, #12
 8006a00:	4621      	mov	r1, r4
 8006a02:	4640      	mov	r0, r8
 8006a04:	f7ff fee6 	bl	80067d4 <_printf_common>
 8006a08:	3001      	adds	r0, #1
 8006a0a:	d14a      	bne.n	8006aa2 <_printf_i+0x1f2>
 8006a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a10:	b004      	add	sp, #16
 8006a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a16:	6823      	ldr	r3, [r4, #0]
 8006a18:	f043 0320 	orr.w	r3, r3, #32
 8006a1c:	6023      	str	r3, [r4, #0]
 8006a1e:	4833      	ldr	r0, [pc, #204]	@ (8006aec <_printf_i+0x23c>)
 8006a20:	2778      	movs	r7, #120	@ 0x78
 8006a22:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006a26:	6823      	ldr	r3, [r4, #0]
 8006a28:	6831      	ldr	r1, [r6, #0]
 8006a2a:	061f      	lsls	r7, r3, #24
 8006a2c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006a30:	d402      	bmi.n	8006a38 <_printf_i+0x188>
 8006a32:	065f      	lsls	r7, r3, #25
 8006a34:	bf48      	it	mi
 8006a36:	b2ad      	uxthmi	r5, r5
 8006a38:	6031      	str	r1, [r6, #0]
 8006a3a:	07d9      	lsls	r1, r3, #31
 8006a3c:	bf44      	itt	mi
 8006a3e:	f043 0320 	orrmi.w	r3, r3, #32
 8006a42:	6023      	strmi	r3, [r4, #0]
 8006a44:	b11d      	cbz	r5, 8006a4e <_printf_i+0x19e>
 8006a46:	2310      	movs	r3, #16
 8006a48:	e7ac      	b.n	80069a4 <_printf_i+0xf4>
 8006a4a:	4827      	ldr	r0, [pc, #156]	@ (8006ae8 <_printf_i+0x238>)
 8006a4c:	e7e9      	b.n	8006a22 <_printf_i+0x172>
 8006a4e:	6823      	ldr	r3, [r4, #0]
 8006a50:	f023 0320 	bic.w	r3, r3, #32
 8006a54:	6023      	str	r3, [r4, #0]
 8006a56:	e7f6      	b.n	8006a46 <_printf_i+0x196>
 8006a58:	4616      	mov	r6, r2
 8006a5a:	e7bd      	b.n	80069d8 <_printf_i+0x128>
 8006a5c:	6833      	ldr	r3, [r6, #0]
 8006a5e:	6825      	ldr	r5, [r4, #0]
 8006a60:	6961      	ldr	r1, [r4, #20]
 8006a62:	1d18      	adds	r0, r3, #4
 8006a64:	6030      	str	r0, [r6, #0]
 8006a66:	062e      	lsls	r6, r5, #24
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	d501      	bpl.n	8006a70 <_printf_i+0x1c0>
 8006a6c:	6019      	str	r1, [r3, #0]
 8006a6e:	e002      	b.n	8006a76 <_printf_i+0x1c6>
 8006a70:	0668      	lsls	r0, r5, #25
 8006a72:	d5fb      	bpl.n	8006a6c <_printf_i+0x1bc>
 8006a74:	8019      	strh	r1, [r3, #0]
 8006a76:	2300      	movs	r3, #0
 8006a78:	6123      	str	r3, [r4, #16]
 8006a7a:	4616      	mov	r6, r2
 8006a7c:	e7bc      	b.n	80069f8 <_printf_i+0x148>
 8006a7e:	6833      	ldr	r3, [r6, #0]
 8006a80:	1d1a      	adds	r2, r3, #4
 8006a82:	6032      	str	r2, [r6, #0]
 8006a84:	681e      	ldr	r6, [r3, #0]
 8006a86:	6862      	ldr	r2, [r4, #4]
 8006a88:	2100      	movs	r1, #0
 8006a8a:	4630      	mov	r0, r6
 8006a8c:	f7f9 fba8 	bl	80001e0 <memchr>
 8006a90:	b108      	cbz	r0, 8006a96 <_printf_i+0x1e6>
 8006a92:	1b80      	subs	r0, r0, r6
 8006a94:	6060      	str	r0, [r4, #4]
 8006a96:	6863      	ldr	r3, [r4, #4]
 8006a98:	6123      	str	r3, [r4, #16]
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006aa0:	e7aa      	b.n	80069f8 <_printf_i+0x148>
 8006aa2:	6923      	ldr	r3, [r4, #16]
 8006aa4:	4632      	mov	r2, r6
 8006aa6:	4649      	mov	r1, r9
 8006aa8:	4640      	mov	r0, r8
 8006aaa:	47d0      	blx	sl
 8006aac:	3001      	adds	r0, #1
 8006aae:	d0ad      	beq.n	8006a0c <_printf_i+0x15c>
 8006ab0:	6823      	ldr	r3, [r4, #0]
 8006ab2:	079b      	lsls	r3, r3, #30
 8006ab4:	d413      	bmi.n	8006ade <_printf_i+0x22e>
 8006ab6:	68e0      	ldr	r0, [r4, #12]
 8006ab8:	9b03      	ldr	r3, [sp, #12]
 8006aba:	4298      	cmp	r0, r3
 8006abc:	bfb8      	it	lt
 8006abe:	4618      	movlt	r0, r3
 8006ac0:	e7a6      	b.n	8006a10 <_printf_i+0x160>
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	4632      	mov	r2, r6
 8006ac6:	4649      	mov	r1, r9
 8006ac8:	4640      	mov	r0, r8
 8006aca:	47d0      	blx	sl
 8006acc:	3001      	adds	r0, #1
 8006ace:	d09d      	beq.n	8006a0c <_printf_i+0x15c>
 8006ad0:	3501      	adds	r5, #1
 8006ad2:	68e3      	ldr	r3, [r4, #12]
 8006ad4:	9903      	ldr	r1, [sp, #12]
 8006ad6:	1a5b      	subs	r3, r3, r1
 8006ad8:	42ab      	cmp	r3, r5
 8006ada:	dcf2      	bgt.n	8006ac2 <_printf_i+0x212>
 8006adc:	e7eb      	b.n	8006ab6 <_printf_i+0x206>
 8006ade:	2500      	movs	r5, #0
 8006ae0:	f104 0619 	add.w	r6, r4, #25
 8006ae4:	e7f5      	b.n	8006ad2 <_printf_i+0x222>
 8006ae6:	bf00      	nop
 8006ae8:	08006dd2 	.word	0x08006dd2
 8006aec:	08006de3 	.word	0x08006de3

08006af0 <memmove>:
 8006af0:	4288      	cmp	r0, r1
 8006af2:	b510      	push	{r4, lr}
 8006af4:	eb01 0402 	add.w	r4, r1, r2
 8006af8:	d902      	bls.n	8006b00 <memmove+0x10>
 8006afa:	4284      	cmp	r4, r0
 8006afc:	4623      	mov	r3, r4
 8006afe:	d807      	bhi.n	8006b10 <memmove+0x20>
 8006b00:	1e43      	subs	r3, r0, #1
 8006b02:	42a1      	cmp	r1, r4
 8006b04:	d008      	beq.n	8006b18 <memmove+0x28>
 8006b06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006b0e:	e7f8      	b.n	8006b02 <memmove+0x12>
 8006b10:	4402      	add	r2, r0
 8006b12:	4601      	mov	r1, r0
 8006b14:	428a      	cmp	r2, r1
 8006b16:	d100      	bne.n	8006b1a <memmove+0x2a>
 8006b18:	bd10      	pop	{r4, pc}
 8006b1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006b22:	e7f7      	b.n	8006b14 <memmove+0x24>

08006b24 <_sbrk_r>:
 8006b24:	b538      	push	{r3, r4, r5, lr}
 8006b26:	4d06      	ldr	r5, [pc, #24]	@ (8006b40 <_sbrk_r+0x1c>)
 8006b28:	2300      	movs	r3, #0
 8006b2a:	4604      	mov	r4, r0
 8006b2c:	4608      	mov	r0, r1
 8006b2e:	602b      	str	r3, [r5, #0]
 8006b30:	f7fa f9f2 	bl	8000f18 <_sbrk>
 8006b34:	1c43      	adds	r3, r0, #1
 8006b36:	d102      	bne.n	8006b3e <_sbrk_r+0x1a>
 8006b38:	682b      	ldr	r3, [r5, #0]
 8006b3a:	b103      	cbz	r3, 8006b3e <_sbrk_r+0x1a>
 8006b3c:	6023      	str	r3, [r4, #0]
 8006b3e:	bd38      	pop	{r3, r4, r5, pc}
 8006b40:	200003b8 	.word	0x200003b8

08006b44 <memcpy>:
 8006b44:	440a      	add	r2, r1
 8006b46:	4291      	cmp	r1, r2
 8006b48:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b4c:	d100      	bne.n	8006b50 <memcpy+0xc>
 8006b4e:	4770      	bx	lr
 8006b50:	b510      	push	{r4, lr}
 8006b52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b5a:	4291      	cmp	r1, r2
 8006b5c:	d1f9      	bne.n	8006b52 <memcpy+0xe>
 8006b5e:	bd10      	pop	{r4, pc}

08006b60 <_realloc_r>:
 8006b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b64:	4680      	mov	r8, r0
 8006b66:	4615      	mov	r5, r2
 8006b68:	460c      	mov	r4, r1
 8006b6a:	b921      	cbnz	r1, 8006b76 <_realloc_r+0x16>
 8006b6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b70:	4611      	mov	r1, r2
 8006b72:	f7ff bc4b 	b.w	800640c <_malloc_r>
 8006b76:	b92a      	cbnz	r2, 8006b84 <_realloc_r+0x24>
 8006b78:	f7ff fbdc 	bl	8006334 <_free_r>
 8006b7c:	2400      	movs	r4, #0
 8006b7e:	4620      	mov	r0, r4
 8006b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b84:	f000 f81a 	bl	8006bbc <_malloc_usable_size_r>
 8006b88:	4285      	cmp	r5, r0
 8006b8a:	4606      	mov	r6, r0
 8006b8c:	d802      	bhi.n	8006b94 <_realloc_r+0x34>
 8006b8e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006b92:	d8f4      	bhi.n	8006b7e <_realloc_r+0x1e>
 8006b94:	4629      	mov	r1, r5
 8006b96:	4640      	mov	r0, r8
 8006b98:	f7ff fc38 	bl	800640c <_malloc_r>
 8006b9c:	4607      	mov	r7, r0
 8006b9e:	2800      	cmp	r0, #0
 8006ba0:	d0ec      	beq.n	8006b7c <_realloc_r+0x1c>
 8006ba2:	42b5      	cmp	r5, r6
 8006ba4:	462a      	mov	r2, r5
 8006ba6:	4621      	mov	r1, r4
 8006ba8:	bf28      	it	cs
 8006baa:	4632      	movcs	r2, r6
 8006bac:	f7ff ffca 	bl	8006b44 <memcpy>
 8006bb0:	4621      	mov	r1, r4
 8006bb2:	4640      	mov	r0, r8
 8006bb4:	f7ff fbbe 	bl	8006334 <_free_r>
 8006bb8:	463c      	mov	r4, r7
 8006bba:	e7e0      	b.n	8006b7e <_realloc_r+0x1e>

08006bbc <_malloc_usable_size_r>:
 8006bbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bc0:	1f18      	subs	r0, r3, #4
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	bfbc      	itt	lt
 8006bc6:	580b      	ldrlt	r3, [r1, r0]
 8006bc8:	18c0      	addlt	r0, r0, r3
 8006bca:	4770      	bx	lr

08006bcc <_init>:
 8006bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bce:	bf00      	nop
 8006bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bd2:	bc08      	pop	{r3}
 8006bd4:	469e      	mov	lr, r3
 8006bd6:	4770      	bx	lr

08006bd8 <_fini>:
 8006bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bda:	bf00      	nop
 8006bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bde:	bc08      	pop	{r3}
 8006be0:	469e      	mov	lr, r3
 8006be2:	4770      	bx	lr
