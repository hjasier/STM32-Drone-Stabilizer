
FlightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006540  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000294  080066d0  080066d0  000076d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006964  08006964  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  08006964  08006964  00007964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800696c  0800696c  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800696c  0800696c  0000796c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006970  08006970  00007970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006974  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008068  2**0
                  CONTENTS
 10 .bss          00000440  20000068  20000068  00008068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004a8  200004a8  00008068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013732  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002bec  00000000  00000000  0001b7ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001150  00000000  00000000  0001e3b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d95  00000000  00000000  0001f508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d17a  00000000  00000000  0002029d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016ef8  00000000  00000000  0003d417  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a8486  00000000  00000000  0005430f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fc795  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000050d8  00000000  00000000  000fc7d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  001018b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080066b8 	.word	0x080066b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080066b8 	.word	0x080066b8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <receiveControlCommand>:
    snprintf(cmd_msg, sizeof(cmd_msg), "%s\r\n", command);  // Agregar salto de línea al final del comando
    HAL_UART_Transmit(&huart1, (uint8_t*)cmd_msg, strlen(cmd_msg), HAL_MAX_DELAY);
}

// Función para recibir comandos del ESP8266
void receiveControlCommand(uint8_t *rx_buffer, uint16_t length) {
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
 8000288:	460b      	mov	r3, r1
 800028a:	807b      	strh	r3, [r7, #2]

	if (strncmp((char *)rx_buffer, "Dat", 3) == 0 || strncmp((char *)rx_buffer, "Men", 3) == 0) {
 800028c:	2203      	movs	r2, #3
 800028e:	4933      	ldr	r1, [pc, #204]	@ (800035c <receiveControlCommand+0xdc>)
 8000290:	6878      	ldr	r0, [r7, #4]
 8000292:	f005 fbee 	bl	8005a72 <strncmp>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d007      	beq.n	80002ac <receiveControlCommand+0x2c>
 800029c:	2203      	movs	r2, #3
 800029e:	4930      	ldr	r1, [pc, #192]	@ (8000360 <receiveControlCommand+0xe0>)
 80002a0:	6878      	ldr	r0, [r7, #4]
 80002a2:	f005 fbe6 	bl	8005a72 <strncmp>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d106      	bne.n	80002ba <receiveControlCommand+0x3a>
	    memset(rx_buffer, 0, length);  // Limpiar el buffer
 80002ac:	887b      	ldrh	r3, [r7, #2]
 80002ae:	461a      	mov	r2, r3
 80002b0:	2100      	movs	r1, #0
 80002b2:	6878      	ldr	r0, [r7, #4]
 80002b4:	f005 fbd5 	bl	8005a62 <memset>
	    return;
 80002b8:	e04d      	b.n	8000356 <receiveControlCommand+0xd6>
	}

    printData("Comando recibido\n");
 80002ba:	482a      	ldr	r0, [pc, #168]	@ (8000364 <receiveControlCommand+0xe4>)
 80002bc:	f000 fc24 	bl	8000b08 <printData>

    if (strncmp((char *)rx_buffer, "LED_ON", 6) == 0) {
 80002c0:	2206      	movs	r2, #6
 80002c2:	4929      	ldr	r1, [pc, #164]	@ (8000368 <receiveControlCommand+0xe8>)
 80002c4:	6878      	ldr	r0, [r7, #4]
 80002c6:	f005 fbd4 	bl	8005a72 <strncmp>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d105      	bne.n	80002dc <receiveControlCommand+0x5c>
        // Encender el LED (PB3)
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 80002d0:	2201      	movs	r2, #1
 80002d2:	2108      	movs	r1, #8
 80002d4:	4825      	ldr	r0, [pc, #148]	@ (800036c <receiveControlCommand+0xec>)
 80002d6:	f001 fad9 	bl	800188c <HAL_GPIO_WritePin>
 80002da:	e036      	b.n	800034a <receiveControlCommand+0xca>
    } else if (strncmp((char *)rx_buffer, "LED_OFF", 7) == 0) {
 80002dc:	2207      	movs	r2, #7
 80002de:	4924      	ldr	r1, [pc, #144]	@ (8000370 <receiveControlCommand+0xf0>)
 80002e0:	6878      	ldr	r0, [r7, #4]
 80002e2:	f005 fbc6 	bl	8005a72 <strncmp>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d105      	bne.n	80002f8 <receiveControlCommand+0x78>
        // Apagar el LED (PB3)
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80002ec:	2200      	movs	r2, #0
 80002ee:	2108      	movs	r1, #8
 80002f0:	481e      	ldr	r0, [pc, #120]	@ (800036c <receiveControlCommand+0xec>)
 80002f2:	f001 facb 	bl	800188c <HAL_GPIO_WritePin>
 80002f6:	e028      	b.n	800034a <receiveControlCommand+0xca>
    }

    else if (strncmp((char*) rx_buffer, "ARM", 3) == 0) {
 80002f8:	2203      	movs	r2, #3
 80002fa:	491e      	ldr	r1, [pc, #120]	@ (8000374 <receiveControlCommand+0xf4>)
 80002fc:	6878      	ldr	r0, [r7, #4]
 80002fe:	f005 fbb8 	bl	8005a72 <strncmp>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d102      	bne.n	800030e <receiveControlCommand+0x8e>
		Control_ArmMotors();
 8000308:	f000 f880 	bl	800040c <Control_ArmMotors>
 800030c:	e01d      	b.n	800034a <receiveControlCommand+0xca>
	} else if (strncmp((char*) rx_buffer, "STOP", 4) == 0) {
 800030e:	2204      	movs	r2, #4
 8000310:	4919      	ldr	r1, [pc, #100]	@ (8000378 <receiveControlCommand+0xf8>)
 8000312:	6878      	ldr	r0, [r7, #4]
 8000314:	f005 fbad 	bl	8005a72 <strncmp>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d102      	bne.n	8000324 <receiveControlCommand+0xa4>
		Control_Stop();
 800031e:	f000 f925 	bl	800056c <Control_Stop>
 8000322:	e012      	b.n	800034a <receiveControlCommand+0xca>
	} else if (strncmp((char*) rx_buffer, "PWR", 3) == 0) {
 8000324:	2203      	movs	r2, #3
 8000326:	4915      	ldr	r1, [pc, #84]	@ (800037c <receiveControlCommand+0xfc>)
 8000328:	6878      	ldr	r0, [r7, #4]
 800032a:	f005 fba2 	bl	8005a72 <strncmp>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d10a      	bne.n	800034a <receiveControlCommand+0xca>
		uint8_t speed = atoi((char*) &rx_buffer[3]);
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	3303      	adds	r3, #3
 8000338:	4618      	mov	r0, r3
 800033a:	f005 f9f3 	bl	8005724 <atoi>
 800033e:	4603      	mov	r3, r0
 8000340:	73fb      	strb	r3, [r7, #15]
		Control_SetMotorsPower(speed);
 8000342:	7bfb      	ldrb	r3, [r7, #15]
 8000344:	4618      	mov	r0, r3
 8000346:	f000 f8e3 	bl	8000510 <Control_SetMotorsPower>
	}


    // Limpiar el buffer después de procesar
    memset(rx_buffer, 0, length);
 800034a:	887b      	ldrh	r3, [r7, #2]
 800034c:	461a      	mov	r2, r3
 800034e:	2100      	movs	r1, #0
 8000350:	6878      	ldr	r0, [r7, #4]
 8000352:	f005 fb86 	bl	8005a62 <memset>
}
 8000356:	3710      	adds	r7, #16
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}
 800035c:	08006720 	.word	0x08006720
 8000360:	08006724 	.word	0x08006724
 8000364:	08006728 	.word	0x08006728
 8000368:	0800673c 	.word	0x0800673c
 800036c:	48000400 	.word	0x48000400
 8000370:	08006744 	.word	0x08006744
 8000374:	0800674c 	.word	0x0800674c
 8000378:	08006750 	.word	0x08006750
 800037c:	08006758 	.word	0x08006758

08000380 <Control_Init>:
extern int16_t ax, ay, az;
extern int16_t gx, gy, gz;
extern int16_t mx, my, mz;


void Control_Init(void) {
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
    Control.pid_roll.Kp = 1.0;
 8000384:	4b20      	ldr	r3, [pc, #128]	@ (8000408 <Control_Init+0x88>)
 8000386:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800038a:	601a      	str	r2, [r3, #0]
    Control.pid_roll.Ki = 0.0;
 800038c:	4b1e      	ldr	r3, [pc, #120]	@ (8000408 <Control_Init+0x88>)
 800038e:	f04f 0200 	mov.w	r2, #0
 8000392:	605a      	str	r2, [r3, #4]
    Control.pid_roll.Kd = 0.0;
 8000394:	4b1c      	ldr	r3, [pc, #112]	@ (8000408 <Control_Init+0x88>)
 8000396:	f04f 0200 	mov.w	r2, #0
 800039a:	609a      	str	r2, [r3, #8]
    Control.pid_roll.prev_error = 0.0;
 800039c:	4b1a      	ldr	r3, [pc, #104]	@ (8000408 <Control_Init+0x88>)
 800039e:	f04f 0200 	mov.w	r2, #0
 80003a2:	60da      	str	r2, [r3, #12]
    Control.pid_roll.integral = 0.0;
 80003a4:	4b18      	ldr	r3, [pc, #96]	@ (8000408 <Control_Init+0x88>)
 80003a6:	f04f 0200 	mov.w	r2, #0
 80003aa:	611a      	str	r2, [r3, #16]

    Control.pid_pitch.Kp = 1.0;
 80003ac:	4b16      	ldr	r3, [pc, #88]	@ (8000408 <Control_Init+0x88>)
 80003ae:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80003b2:	615a      	str	r2, [r3, #20]
    Control.pid_pitch.Ki = 0.0;
 80003b4:	4b14      	ldr	r3, [pc, #80]	@ (8000408 <Control_Init+0x88>)
 80003b6:	f04f 0200 	mov.w	r2, #0
 80003ba:	619a      	str	r2, [r3, #24]
    Control.pid_pitch.Kd = 0.0;
 80003bc:	4b12      	ldr	r3, [pc, #72]	@ (8000408 <Control_Init+0x88>)
 80003be:	f04f 0200 	mov.w	r2, #0
 80003c2:	61da      	str	r2, [r3, #28]
    Control.pid_pitch.prev_error = 0.0;
 80003c4:	4b10      	ldr	r3, [pc, #64]	@ (8000408 <Control_Init+0x88>)
 80003c6:	f04f 0200 	mov.w	r2, #0
 80003ca:	621a      	str	r2, [r3, #32]
    Control.pid_pitch.integral = 0.0;
 80003cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000408 <Control_Init+0x88>)
 80003ce:	f04f 0200 	mov.w	r2, #0
 80003d2:	625a      	str	r2, [r3, #36]	@ 0x24

    Control.pid_yaw.Kp = 1.0;
 80003d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000408 <Control_Init+0x88>)
 80003d6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80003da:	629a      	str	r2, [r3, #40]	@ 0x28
    Control.pid_yaw.Ki = 0.0;
 80003dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000408 <Control_Init+0x88>)
 80003de:	f04f 0200 	mov.w	r2, #0
 80003e2:	62da      	str	r2, [r3, #44]	@ 0x2c
    Control.pid_yaw.Kd = 0.0;
 80003e4:	4b08      	ldr	r3, [pc, #32]	@ (8000408 <Control_Init+0x88>)
 80003e6:	f04f 0200 	mov.w	r2, #0
 80003ea:	631a      	str	r2, [r3, #48]	@ 0x30
    Control.pid_yaw.prev_error = 0.0;
 80003ec:	4b06      	ldr	r3, [pc, #24]	@ (8000408 <Control_Init+0x88>)
 80003ee:	f04f 0200 	mov.w	r2, #0
 80003f2:	635a      	str	r2, [r3, #52]	@ 0x34
    Control.pid_yaw.integral = 0.0;
 80003f4:	4b04      	ldr	r3, [pc, #16]	@ (8000408 <Control_Init+0x88>)
 80003f6:	f04f 0200 	mov.w	r2, #0
 80003fa:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80003fc:	bf00      	nop
 80003fe:	46bd      	mov	sp, r7
 8000400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000404:	4770      	bx	lr
 8000406:	bf00      	nop
 8000408:	20000084 	.word	0x20000084

0800040c <Control_ArmMotors>:


void Control_ArmMotors(){
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
	Control.motor_control.motor1_speed = MOTOR_MAX_SPEED;
 8000410:	4b14      	ldr	r3, [pc, #80]	@ (8000464 <Control_ArmMotors+0x58>)
 8000412:	22c8      	movs	r2, #200	@ 0xc8
 8000414:	63da      	str	r2, [r3, #60]	@ 0x3c
	Control.motor_control.motor2_speed = MOTOR_MAX_SPEED;
 8000416:	4b13      	ldr	r3, [pc, #76]	@ (8000464 <Control_ArmMotors+0x58>)
 8000418:	22c8      	movs	r2, #200	@ 0xc8
 800041a:	641a      	str	r2, [r3, #64]	@ 0x40
	Control.motor_control.motor3_speed = MOTOR_MAX_SPEED;
 800041c:	4b11      	ldr	r3, [pc, #68]	@ (8000464 <Control_ArmMotors+0x58>)
 800041e:	22c8      	movs	r2, #200	@ 0xc8
 8000420:	645a      	str	r2, [r3, #68]	@ 0x44
	Control.motor_control.motor4_speed = MOTOR_MAX_SPEED;
 8000422:	4b10      	ldr	r3, [pc, #64]	@ (8000464 <Control_ArmMotors+0x58>)
 8000424:	22c8      	movs	r2, #200	@ 0xc8
 8000426:	649a      	str	r2, [r3, #72]	@ 0x48
	Control_Update();
 8000428:	f000 f820 	bl	800046c <Control_Update>
	HAL_Delay(3000);
 800042c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000430:	f000 ff08 	bl	8001244 <HAL_Delay>
	Control.motor_control.motor1_speed = 100;
 8000434:	4b0b      	ldr	r3, [pc, #44]	@ (8000464 <Control_ArmMotors+0x58>)
 8000436:	2264      	movs	r2, #100	@ 0x64
 8000438:	63da      	str	r2, [r3, #60]	@ 0x3c
	Control.motor_control.motor2_speed = 100;
 800043a:	4b0a      	ldr	r3, [pc, #40]	@ (8000464 <Control_ArmMotors+0x58>)
 800043c:	2264      	movs	r2, #100	@ 0x64
 800043e:	641a      	str	r2, [r3, #64]	@ 0x40
	Control.motor_control.motor3_speed = 100;
 8000440:	4b08      	ldr	r3, [pc, #32]	@ (8000464 <Control_ArmMotors+0x58>)
 8000442:	2264      	movs	r2, #100	@ 0x64
 8000444:	645a      	str	r2, [r3, #68]	@ 0x44
	Control.motor_control.motor4_speed = 100;
 8000446:	4b07      	ldr	r3, [pc, #28]	@ (8000464 <Control_ArmMotors+0x58>)
 8000448:	2264      	movs	r2, #100	@ 0x64
 800044a:	649a      	str	r2, [r3, #72]	@ 0x48
	Control_Update();
 800044c:	f000 f80e 	bl	800046c <Control_Update>
	HAL_Delay(3000);
 8000450:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000454:	f000 fef6 	bl	8001244 <HAL_Delay>

	printData("Motors armed\n");
 8000458:	4803      	ldr	r0, [pc, #12]	@ (8000468 <Control_ArmMotors+0x5c>)
 800045a:	f000 fb55 	bl	8000b08 <printData>
}
 800045e:	bf00      	nop
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	20000084 	.word	0x20000084
 8000468:	0800675c 	.word	0x0800675c

0800046c <Control_Update>:

void Control_Update(void) {
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
    //Control_Compute(ax, ay, az, gx, gy, gz, mx, my, mz);

    Control_SetMotorSpeeds();
 8000470:	f000 f802 	bl	8000478 <Control_SetMotorSpeeds>

    //Control_SendMotorCommands();
}
 8000474:	bf00      	nop
 8000476:	bd80      	pop	{r7, pc}

08000478 <Control_SetMotorSpeeds>:

    return output;
}

// Asignar las velocidades de los motores basados en el PID
void Control_SetMotorSpeeds(void) {
 8000478:	b480      	push	{r7}
 800047a:	b085      	sub	sp, #20
 800047c:	af00      	add	r7, sp, #0
    int motor1_speed = (Control.motor_control.motor1_speed < 0) ? 0 : (Control.motor_control.motor1_speed > MOTOR_MAX_SPEED ? MOTOR_MAX_SPEED : Control.motor_control.motor1_speed);
 800047e:	4b22      	ldr	r3, [pc, #136]	@ (8000508 <Control_SetMotorSpeeds+0x90>)
 8000480:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000482:	2b00      	cmp	r3, #0
 8000484:	db05      	blt.n	8000492 <Control_SetMotorSpeeds+0x1a>
 8000486:	4b20      	ldr	r3, [pc, #128]	@ (8000508 <Control_SetMotorSpeeds+0x90>)
 8000488:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800048a:	2bc8      	cmp	r3, #200	@ 0xc8
 800048c:	bfa8      	it	ge
 800048e:	23c8      	movge	r3, #200	@ 0xc8
 8000490:	e000      	b.n	8000494 <Control_SetMotorSpeeds+0x1c>
 8000492:	2300      	movs	r3, #0
 8000494:	60fb      	str	r3, [r7, #12]
    int motor2_speed = (Control.motor_control.motor2_speed < 0) ? 0 : (Control.motor_control.motor2_speed > MOTOR_MAX_SPEED ? MOTOR_MAX_SPEED : Control.motor_control.motor2_speed);
 8000496:	4b1c      	ldr	r3, [pc, #112]	@ (8000508 <Control_SetMotorSpeeds+0x90>)
 8000498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800049a:	2b00      	cmp	r3, #0
 800049c:	db05      	blt.n	80004aa <Control_SetMotorSpeeds+0x32>
 800049e:	4b1a      	ldr	r3, [pc, #104]	@ (8000508 <Control_SetMotorSpeeds+0x90>)
 80004a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80004a2:	2bc8      	cmp	r3, #200	@ 0xc8
 80004a4:	bfa8      	it	ge
 80004a6:	23c8      	movge	r3, #200	@ 0xc8
 80004a8:	e000      	b.n	80004ac <Control_SetMotorSpeeds+0x34>
 80004aa:	2300      	movs	r3, #0
 80004ac:	60bb      	str	r3, [r7, #8]
    int motor3_speed = (Control.motor_control.motor3_speed < 0) ? 0 : (Control.motor_control.motor3_speed > MOTOR_MAX_SPEED ? MOTOR_MAX_SPEED : Control.motor_control.motor3_speed);
 80004ae:	4b16      	ldr	r3, [pc, #88]	@ (8000508 <Control_SetMotorSpeeds+0x90>)
 80004b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	db05      	blt.n	80004c2 <Control_SetMotorSpeeds+0x4a>
 80004b6:	4b14      	ldr	r3, [pc, #80]	@ (8000508 <Control_SetMotorSpeeds+0x90>)
 80004b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80004ba:	2bc8      	cmp	r3, #200	@ 0xc8
 80004bc:	bfa8      	it	ge
 80004be:	23c8      	movge	r3, #200	@ 0xc8
 80004c0:	e000      	b.n	80004c4 <Control_SetMotorSpeeds+0x4c>
 80004c2:	2300      	movs	r3, #0
 80004c4:	607b      	str	r3, [r7, #4]
    int motor4_speed = (Control.motor_control.motor4_speed < 0) ? 0 : (Control.motor_control.motor4_speed > MOTOR_MAX_SPEED ? MOTOR_MAX_SPEED : Control.motor_control.motor4_speed);
 80004c6:	4b10      	ldr	r3, [pc, #64]	@ (8000508 <Control_SetMotorSpeeds+0x90>)
 80004c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	db05      	blt.n	80004da <Control_SetMotorSpeeds+0x62>
 80004ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000508 <Control_SetMotorSpeeds+0x90>)
 80004d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80004d2:	2bc8      	cmp	r3, #200	@ 0xc8
 80004d4:	bfa8      	it	ge
 80004d6:	23c8      	movge	r3, #200	@ 0xc8
 80004d8:	e000      	b.n	80004dc <Control_SetMotorSpeeds+0x64>
 80004da:	2300      	movs	r3, #0
 80004dc:	603b      	str	r3, [r7, #0]

    TIM1->CCR1 = motor1_speed;  // Motor 1 (TIM1 Channel 1)
 80004de:	4a0b      	ldr	r2, [pc, #44]	@ (800050c <Control_SetMotorSpeeds+0x94>)
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	6353      	str	r3, [r2, #52]	@ 0x34
    TIM1->CCR4 = motor2_speed;  // Motor 2 (TIM1 Channel 4)
 80004e4:	4a09      	ldr	r2, [pc, #36]	@ (800050c <Control_SetMotorSpeeds+0x94>)
 80004e6:	68bb      	ldr	r3, [r7, #8]
 80004e8:	6413      	str	r3, [r2, #64]	@ 0x40
    TIM2->CCR1 = motor3_speed;  // Motor 3 (TIM2 Channel 1)
 80004ea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	6353      	str	r3, [r2, #52]	@ 0x34
    TIM2->CCR2 = motor4_speed;  // Motor 4 (TIM2 Channel 2)
 80004f2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004f6:	683b      	ldr	r3, [r7, #0]
 80004f8:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80004fa:	bf00      	nop
 80004fc:	3714      	adds	r7, #20
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	20000084 	.word	0x20000084
 800050c:	40012c00 	.word	0x40012c00

08000510 <Control_SetMotorsPower>:


void Control_SetMotorsPower(uint8_t base_power_percentage) {
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0
 8000516:	4603      	mov	r3, r0
 8000518:	71fb      	strb	r3, [r7, #7]
    if (base_power_percentage < 0) base_power_percentage = 0;
    if (base_power_percentage > 100) base_power_percentage = 100;
 800051a:	79fb      	ldrb	r3, [r7, #7]
 800051c:	2b64      	cmp	r3, #100	@ 0x64
 800051e:	d901      	bls.n	8000524 <Control_SetMotorsPower+0x14>
 8000520:	2364      	movs	r3, #100	@ 0x64
 8000522:	71fb      	strb	r3, [r7, #7]

    printf("Base power percentage: %d\n", base_power_percentage);
 8000524:	79fb      	ldrb	r3, [r7, #7]
 8000526:	4619      	mov	r1, r3
 8000528:	480d      	ldr	r0, [pc, #52]	@ (8000560 <Control_SetMotorsPower+0x50>)
 800052a:	f005 fa45 	bl	80059b8 <iprintf>

    int base_power = MOTOR_MIN_SPEED + ((MOTOR_MAX_SPEED - MOTOR_MIN_SPEED) * base_power_percentage) / 100;
 800052e:	79fb      	ldrb	r3, [r7, #7]
 8000530:	3364      	adds	r3, #100	@ 0x64
 8000532:	60fb      	str	r3, [r7, #12]


    printf("Base power: %d\n", base_power);
 8000534:	68f9      	ldr	r1, [r7, #12]
 8000536:	480b      	ldr	r0, [pc, #44]	@ (8000564 <Control_SetMotorsPower+0x54>)
 8000538:	f005 fa3e 	bl	80059b8 <iprintf>
    Control.motor_control.motor1_speed = base_power;
 800053c:	4a0a      	ldr	r2, [pc, #40]	@ (8000568 <Control_SetMotorsPower+0x58>)
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	63d3      	str	r3, [r2, #60]	@ 0x3c
    Control.motor_control.motor2_speed = base_power;
 8000542:	4a09      	ldr	r2, [pc, #36]	@ (8000568 <Control_SetMotorsPower+0x58>)
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	6413      	str	r3, [r2, #64]	@ 0x40
    Control.motor_control.motor3_speed = base_power;
 8000548:	4a07      	ldr	r2, [pc, #28]	@ (8000568 <Control_SetMotorsPower+0x58>)
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	6453      	str	r3, [r2, #68]	@ 0x44
    Control.motor_control.motor4_speed = base_power;
 800054e:	4a06      	ldr	r2, [pc, #24]	@ (8000568 <Control_SetMotorsPower+0x58>)
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	6493      	str	r3, [r2, #72]	@ 0x48

    Control_Update(); //igual mejor no empezar ajustando por si acaso pero ya se quitara si no
 8000554:	f7ff ff8a 	bl	800046c <Control_Update>
}
 8000558:	bf00      	nop
 800055a:	3710      	adds	r7, #16
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	0800676c 	.word	0x0800676c
 8000564:	08006788 	.word	0x08006788
 8000568:	20000084 	.word	0x20000084

0800056c <Control_Stop>:
    printf("Motor 3 speed: %d\n", Control.motor_control.motor3_speed);
    printf("Motor 4 speed: %d\n", Control.motor_control.motor4_speed);
}


void Control_Stop(void) {
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
	Control.motor_control.motor1_speed = 0;
 8000570:	4b09      	ldr	r3, [pc, #36]	@ (8000598 <Control_Stop+0x2c>)
 8000572:	2200      	movs	r2, #0
 8000574:	63da      	str	r2, [r3, #60]	@ 0x3c
	Control.motor_control.motor2_speed = 0;
 8000576:	4b08      	ldr	r3, [pc, #32]	@ (8000598 <Control_Stop+0x2c>)
 8000578:	2200      	movs	r2, #0
 800057a:	641a      	str	r2, [r3, #64]	@ 0x40
	Control.motor_control.motor3_speed = 0;
 800057c:	4b06      	ldr	r3, [pc, #24]	@ (8000598 <Control_Stop+0x2c>)
 800057e:	2200      	movs	r2, #0
 8000580:	645a      	str	r2, [r3, #68]	@ 0x44
	Control.motor_control.motor4_speed = 0;
 8000582:	4b05      	ldr	r3, [pc, #20]	@ (8000598 <Control_Stop+0x2c>)
 8000584:	2200      	movs	r2, #0
 8000586:	649a      	str	r2, [r3, #72]	@ 0x48

	Control_Update();
 8000588:	f7ff ff70 	bl	800046c <Control_Update>
	printData("Motors stopped\n");
 800058c:	4803      	ldr	r0, [pc, #12]	@ (800059c <Control_Stop+0x30>)
 800058e:	f000 fabb 	bl	8000b08 <printData>
}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	20000084 	.word	0x20000084
 800059c:	080067e8 	.word	0x080067e8

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a4:	f000 fde8 	bl	8001178 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a8:	f000 f830 	bl	800060c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ac:	f000 fa62 	bl	8000a74 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005b0:	f000 fa30 	bl	8000a14 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80005b4:	f000 f9fe 	bl	80009b4 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80005b8:	f000 f882 	bl	80006c0 <MX_I2C1_Init>
  MX_TIM1_Init();
 80005bc:	f000 f8c0 	bl	8000740 <MX_TIM1_Init>
  MX_TIM2_Init();
 80005c0:	f000 f976 	bl	80008b0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  // Inicializar el sensor GY-85
  //GY85_Init();

  Control_Init();
 80005c4:	f7ff fedc 	bl	8000380 <Control_Init>

  HAL_UART_Receive_IT(&huart1, rx_buffer, sizeof(rx_buffer));
 80005c8:	2280      	movs	r2, #128	@ 0x80
 80005ca:	490c      	ldr	r1, [pc, #48]	@ (80005fc <main+0x5c>)
 80005cc:	480c      	ldr	r0, [pc, #48]	@ (8000600 <main+0x60>)
 80005ce:	f003 ff54 	bl	800447a <HAL_UART_Receive_IT>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80005d2:	2100      	movs	r1, #0
 80005d4:	480b      	ldr	r0, [pc, #44]	@ (8000604 <main+0x64>)
 80005d6:	f002 fedf 	bl	8003398 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80005da:	210c      	movs	r1, #12
 80005dc:	4809      	ldr	r0, [pc, #36]	@ (8000604 <main+0x64>)
 80005de:	f002 fedb 	bl	8003398 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80005e2:	2100      	movs	r1, #0
 80005e4:	4808      	ldr	r0, [pc, #32]	@ (8000608 <main+0x68>)
 80005e6:	f002 fed7 	bl	8003398 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80005ea:	2104      	movs	r1, #4
 80005ec:	4806      	ldr	r0, [pc, #24]	@ (8000608 <main+0x68>)
 80005ee:	f002 fed3 	bl	8003398 <HAL_TIM_PWM_Start>

#if Calibrate
  Control_ArmMotors();
 80005f2:	f7ff ff0b 	bl	800040c <Control_ArmMotors>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f6:	bf00      	nop
 80005f8:	e7fd      	b.n	80005f6 <main+0x56>
 80005fa:	bf00      	nop
 80005fc:	200002cc 	.word	0x200002cc
 8000600:	200001bc 	.word	0x200001bc
 8000604:	20000124 	.word	0x20000124
 8000608:	20000170 	.word	0x20000170

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b096      	sub	sp, #88	@ 0x58
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000616:	2228      	movs	r2, #40	@ 0x28
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f005 fa21 	bl	8005a62 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	f107 031c 	add.w	r3, r7, #28
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000630:	1d3b      	adds	r3, r7, #4
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	605a      	str	r2, [r3, #4]
 8000638:	609a      	str	r2, [r3, #8]
 800063a:	60da      	str	r2, [r3, #12]
 800063c:	611a      	str	r2, [r3, #16]
 800063e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000640:	2302      	movs	r3, #2
 8000642:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000644:	2301      	movs	r3, #1
 8000646:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000648:	2310      	movs	r3, #16
 800064a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800064c:	2300      	movs	r3, #0
 800064e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000650:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000654:	4618      	mov	r0, r3
 8000656:	f001 fa63 	bl	8001b20 <HAL_RCC_OscConfig>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000660:	f000 fade 	bl	8000c20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000664:	230f      	movs	r3, #15
 8000666:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000668:	2300      	movs	r3, #0
 800066a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000670:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000674:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000676:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800067a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f002 fa8a 	bl	8002b9c <HAL_RCC_ClockConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0x86>
  {
    Error_Handler();
 800068e:	f000 fac7 	bl	8000c20 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8000692:	f241 0321 	movw	r3, #4129	@ 0x1021
 8000696:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000698:	2300      	movs	r3, #0
 800069a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800069c:	2300      	movs	r3, #0
 800069e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80006a0:	2300      	movs	r3, #0
 80006a2:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006a4:	1d3b      	adds	r3, r7, #4
 80006a6:	4618      	mov	r0, r3
 80006a8:	f002 fc98 	bl	8002fdc <HAL_RCCEx_PeriphCLKConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006b2:	f000 fab5 	bl	8000c20 <Error_Handler>
  }
}
 80006b6:	bf00      	nop
 80006b8:	3758      	adds	r7, #88	@ 0x58
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
	...

080006c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000734 <MX_I2C1_Init+0x74>)
 80006c6:	4a1c      	ldr	r2, [pc, #112]	@ (8000738 <MX_I2C1_Init+0x78>)
 80006c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 80006ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000734 <MX_I2C1_Init+0x74>)
 80006cc:	4a1b      	ldr	r2, [pc, #108]	@ (800073c <MX_I2C1_Init+0x7c>)
 80006ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006d0:	4b18      	ldr	r3, [pc, #96]	@ (8000734 <MX_I2C1_Init+0x74>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006d6:	4b17      	ldr	r3, [pc, #92]	@ (8000734 <MX_I2C1_Init+0x74>)
 80006d8:	2201      	movs	r2, #1
 80006da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006dc:	4b15      	ldr	r3, [pc, #84]	@ (8000734 <MX_I2C1_Init+0x74>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006e2:	4b14      	ldr	r3, [pc, #80]	@ (8000734 <MX_I2C1_Init+0x74>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006e8:	4b12      	ldr	r3, [pc, #72]	@ (8000734 <MX_I2C1_Init+0x74>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ee:	4b11      	ldr	r3, [pc, #68]	@ (8000734 <MX_I2C1_Init+0x74>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000734 <MX_I2C1_Init+0x74>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006fa:	480e      	ldr	r0, [pc, #56]	@ (8000734 <MX_I2C1_Init+0x74>)
 80006fc:	f001 f8de 	bl	80018bc <HAL_I2C_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000706:	f000 fa8b 	bl	8000c20 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800070a:	2100      	movs	r1, #0
 800070c:	4809      	ldr	r0, [pc, #36]	@ (8000734 <MX_I2C1_Init+0x74>)
 800070e:	f001 f970 	bl	80019f2 <HAL_I2CEx_ConfigAnalogFilter>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000718:	f000 fa82 	bl	8000c20 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800071c:	2100      	movs	r1, #0
 800071e:	4805      	ldr	r0, [pc, #20]	@ (8000734 <MX_I2C1_Init+0x74>)
 8000720:	f001 f9b2 	bl	8001a88 <HAL_I2CEx_ConfigDigitalFilter>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800072a:	f000 fa79 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	200000d0 	.word	0x200000d0
 8000738:	40005400 	.word	0x40005400
 800073c:	00201d2b 	.word	0x00201d2b

08000740 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b09a      	sub	sp, #104	@ 0x68
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000746:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
 8000752:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000754:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000760:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
 800076e:	611a      	str	r2, [r3, #16]
 8000770:	615a      	str	r2, [r3, #20]
 8000772:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000774:	1d3b      	adds	r3, r7, #4
 8000776:	222c      	movs	r2, #44	@ 0x2c
 8000778:	2100      	movs	r1, #0
 800077a:	4618      	mov	r0, r3
 800077c:	f005 f971 	bl	8005a62 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000780:	4b49      	ldr	r3, [pc, #292]	@ (80008a8 <MX_TIM1_Init+0x168>)
 8000782:	4a4a      	ldr	r2, [pc, #296]	@ (80008ac <MX_TIM1_Init+0x16c>)
 8000784:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 8000786:	4b48      	ldr	r3, [pc, #288]	@ (80008a8 <MX_TIM1_Init+0x168>)
 8000788:	224f      	movs	r2, #79	@ 0x4f
 800078a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800078c:	4b46      	ldr	r3, [pc, #280]	@ (80008a8 <MX_TIM1_Init+0x168>)
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000-1;
 8000792:	4b45      	ldr	r3, [pc, #276]	@ (80008a8 <MX_TIM1_Init+0x168>)
 8000794:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000798:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800079a:	4b43      	ldr	r3, [pc, #268]	@ (80008a8 <MX_TIM1_Init+0x168>)
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007a0:	4b41      	ldr	r3, [pc, #260]	@ (80008a8 <MX_TIM1_Init+0x168>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007a6:	4b40      	ldr	r3, [pc, #256]	@ (80008a8 <MX_TIM1_Init+0x168>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007ac:	483e      	ldr	r0, [pc, #248]	@ (80008a8 <MX_TIM1_Init+0x168>)
 80007ae:	f002 fd3b 	bl	8003228 <HAL_TIM_Base_Init>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80007b8:	f000 fa32 	bl	8000c20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007c0:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007c2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80007c6:	4619      	mov	r1, r3
 80007c8:	4837      	ldr	r0, [pc, #220]	@ (80008a8 <MX_TIM1_Init+0x168>)
 80007ca:	f002 ffe5 	bl	8003798 <HAL_TIM_ConfigClockSource>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80007d4:	f000 fa24 	bl	8000c20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007d8:	4833      	ldr	r0, [pc, #204]	@ (80008a8 <MX_TIM1_Init+0x168>)
 80007da:	f002 fd7c 	bl	80032d6 <HAL_TIM_PWM_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80007e4:	f000 fa1c 	bl	8000c20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007e8:	2300      	movs	r3, #0
 80007ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80007ec:	2300      	movs	r3, #0
 80007ee:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007f0:	2300      	movs	r3, #0
 80007f2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007f4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80007f8:	4619      	mov	r1, r3
 80007fa:	482b      	ldr	r0, [pc, #172]	@ (80008a8 <MX_TIM1_Init+0x168>)
 80007fc:	f003 fc80 	bl	8004100 <HAL_TIMEx_MasterConfigSynchronization>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000806:	f000 fa0b 	bl	8000c20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800080a:	2360      	movs	r3, #96	@ 0x60
 800080c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800080e:	2300      	movs	r3, #0
 8000810:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000812:	2300      	movs	r3, #0
 8000814:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000816:	2300      	movs	r3, #0
 8000818:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800081a:	2300      	movs	r3, #0
 800081c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800081e:	2300      	movs	r3, #0
 8000820:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000822:	2300      	movs	r3, #0
 8000824:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000826:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800082a:	2200      	movs	r2, #0
 800082c:	4619      	mov	r1, r3
 800082e:	481e      	ldr	r0, [pc, #120]	@ (80008a8 <MX_TIM1_Init+0x168>)
 8000830:	f002 fe9e 	bl	8003570 <HAL_TIM_PWM_ConfigChannel>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800083a:	f000 f9f1 	bl	8000c20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800083e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000842:	220c      	movs	r2, #12
 8000844:	4619      	mov	r1, r3
 8000846:	4818      	ldr	r0, [pc, #96]	@ (80008a8 <MX_TIM1_Init+0x168>)
 8000848:	f002 fe92 	bl	8003570 <HAL_TIM_PWM_ConfigChannel>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000852:	f000 f9e5 	bl	8000c20 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000856:	2300      	movs	r3, #0
 8000858:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800085a:	2300      	movs	r3, #0
 800085c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800085e:	2300      	movs	r3, #0
 8000860:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000862:	2300      	movs	r3, #0
 8000864:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000866:	2300      	movs	r3, #0
 8000868:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800086a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800086e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000870:	2300      	movs	r3, #0
 8000872:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000874:	2300      	movs	r3, #0
 8000876:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000878:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800087c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800087e:	2300      	movs	r3, #0
 8000880:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000882:	2300      	movs	r3, #0
 8000884:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000886:	1d3b      	adds	r3, r7, #4
 8000888:	4619      	mov	r1, r3
 800088a:	4807      	ldr	r0, [pc, #28]	@ (80008a8 <MX_TIM1_Init+0x168>)
 800088c:	f003 fca6 	bl	80041dc <HAL_TIMEx_ConfigBreakDeadTime>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8000896:	f000 f9c3 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800089a:	4803      	ldr	r0, [pc, #12]	@ (80008a8 <MX_TIM1_Init+0x168>)
 800089c:	f000 fa74 	bl	8000d88 <HAL_TIM_MspPostInit>

}
 80008a0:	bf00      	nop
 80008a2:	3768      	adds	r7, #104	@ 0x68
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20000124 	.word	0x20000124
 80008ac:	40012c00 	.word	0x40012c00

080008b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08e      	sub	sp, #56	@ 0x38
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008c4:	f107 031c 	add.w	r3, r7, #28
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008d0:	463b      	mov	r3, r7
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
 80008da:	60da      	str	r2, [r3, #12]
 80008dc:	611a      	str	r2, [r3, #16]
 80008de:	615a      	str	r2, [r3, #20]
 80008e0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008e2:	4b33      	ldr	r3, [pc, #204]	@ (80009b0 <MX_TIM2_Init+0x100>)
 80008e4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008e8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 80008ea:	4b31      	ldr	r3, [pc, #196]	@ (80009b0 <MX_TIM2_Init+0x100>)
 80008ec:	224f      	movs	r2, #79	@ 0x4f
 80008ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f0:	4b2f      	ldr	r3, [pc, #188]	@ (80009b0 <MX_TIM2_Init+0x100>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 80008f6:	4b2e      	ldr	r3, [pc, #184]	@ (80009b0 <MX_TIM2_Init+0x100>)
 80008f8:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80008fc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008fe:	4b2c      	ldr	r3, [pc, #176]	@ (80009b0 <MX_TIM2_Init+0x100>)
 8000900:	2200      	movs	r2, #0
 8000902:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000904:	4b2a      	ldr	r3, [pc, #168]	@ (80009b0 <MX_TIM2_Init+0x100>)
 8000906:	2200      	movs	r2, #0
 8000908:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800090a:	4829      	ldr	r0, [pc, #164]	@ (80009b0 <MX_TIM2_Init+0x100>)
 800090c:	f002 fc8c 	bl	8003228 <HAL_TIM_Base_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000916:	f000 f983 	bl	8000c20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800091a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800091e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000920:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000924:	4619      	mov	r1, r3
 8000926:	4822      	ldr	r0, [pc, #136]	@ (80009b0 <MX_TIM2_Init+0x100>)
 8000928:	f002 ff36 	bl	8003798 <HAL_TIM_ConfigClockSource>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000932:	f000 f975 	bl	8000c20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000936:	481e      	ldr	r0, [pc, #120]	@ (80009b0 <MX_TIM2_Init+0x100>)
 8000938:	f002 fccd 	bl	80032d6 <HAL_TIM_PWM_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000942:	f000 f96d 	bl	8000c20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000946:	2300      	movs	r3, #0
 8000948:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	4619      	mov	r1, r3
 8000954:	4816      	ldr	r0, [pc, #88]	@ (80009b0 <MX_TIM2_Init+0x100>)
 8000956:	f003 fbd3 	bl	8004100 <HAL_TIMEx_MasterConfigSynchronization>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000960:	f000 f95e 	bl	8000c20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000964:	2360      	movs	r3, #96	@ 0x60
 8000966:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000968:	2300      	movs	r3, #0
 800096a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800096c:	2300      	movs	r3, #0
 800096e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000970:	2300      	movs	r3, #0
 8000972:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000974:	463b      	mov	r3, r7
 8000976:	2200      	movs	r2, #0
 8000978:	4619      	mov	r1, r3
 800097a:	480d      	ldr	r0, [pc, #52]	@ (80009b0 <MX_TIM2_Init+0x100>)
 800097c:	f002 fdf8 	bl	8003570 <HAL_TIM_PWM_ConfigChannel>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000986:	f000 f94b 	bl	8000c20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800098a:	463b      	mov	r3, r7
 800098c:	2204      	movs	r2, #4
 800098e:	4619      	mov	r1, r3
 8000990:	4807      	ldr	r0, [pc, #28]	@ (80009b0 <MX_TIM2_Init+0x100>)
 8000992:	f002 fded 	bl	8003570 <HAL_TIM_PWM_ConfigChannel>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 800099c:	f000 f940 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80009a0:	4803      	ldr	r0, [pc, #12]	@ (80009b0 <MX_TIM2_Init+0x100>)
 80009a2:	f000 f9f1 	bl	8000d88 <HAL_TIM_MspPostInit>

}
 80009a6:	bf00      	nop
 80009a8:	3738      	adds	r7, #56	@ 0x38
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20000170 	.word	0x20000170

080009b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009b8:	4b14      	ldr	r3, [pc, #80]	@ (8000a0c <MX_USART1_UART_Init+0x58>)
 80009ba:	4a15      	ldr	r2, [pc, #84]	@ (8000a10 <MX_USART1_UART_Init+0x5c>)
 80009bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80009be:	4b13      	ldr	r3, [pc, #76]	@ (8000a0c <MX_USART1_UART_Init+0x58>)
 80009c0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80009c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009c6:	4b11      	ldr	r3, [pc, #68]	@ (8000a0c <MX_USART1_UART_Init+0x58>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009cc:	4b0f      	ldr	r3, [pc, #60]	@ (8000a0c <MX_USART1_UART_Init+0x58>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009d2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a0c <MX_USART1_UART_Init+0x58>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009d8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a0c <MX_USART1_UART_Init+0x58>)
 80009da:	220c      	movs	r2, #12
 80009dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009de:	4b0b      	ldr	r3, [pc, #44]	@ (8000a0c <MX_USART1_UART_Init+0x58>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e4:	4b09      	ldr	r3, [pc, #36]	@ (8000a0c <MX_USART1_UART_Init+0x58>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ea:	4b08      	ldr	r3, [pc, #32]	@ (8000a0c <MX_USART1_UART_Init+0x58>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009f0:	4b06      	ldr	r3, [pc, #24]	@ (8000a0c <MX_USART1_UART_Init+0x58>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009f6:	4805      	ldr	r0, [pc, #20]	@ (8000a0c <MX_USART1_UART_Init+0x58>)
 80009f8:	f003 fc68 	bl	80042cc <HAL_UART_Init>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000a02:	f000 f90d 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	200001bc 	.word	0x200001bc
 8000a10:	40013800 	.word	0x40013800

08000a14 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a18:	4b14      	ldr	r3, [pc, #80]	@ (8000a6c <MX_USART2_UART_Init+0x58>)
 8000a1a:	4a15      	ldr	r2, [pc, #84]	@ (8000a70 <MX_USART2_UART_Init+0x5c>)
 8000a1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a1e:	4b13      	ldr	r3, [pc, #76]	@ (8000a6c <MX_USART2_UART_Init+0x58>)
 8000a20:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a26:	4b11      	ldr	r3, [pc, #68]	@ (8000a6c <MX_USART2_UART_Init+0x58>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a6c <MX_USART2_UART_Init+0x58>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a32:	4b0e      	ldr	r3, [pc, #56]	@ (8000a6c <MX_USART2_UART_Init+0x58>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a38:	4b0c      	ldr	r3, [pc, #48]	@ (8000a6c <MX_USART2_UART_Init+0x58>)
 8000a3a:	220c      	movs	r2, #12
 8000a3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a6c <MX_USART2_UART_Init+0x58>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a44:	4b09      	ldr	r3, [pc, #36]	@ (8000a6c <MX_USART2_UART_Init+0x58>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a4a:	4b08      	ldr	r3, [pc, #32]	@ (8000a6c <MX_USART2_UART_Init+0x58>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a50:	4b06      	ldr	r3, [pc, #24]	@ (8000a6c <MX_USART2_UART_Init+0x58>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a56:	4805      	ldr	r0, [pc, #20]	@ (8000a6c <MX_USART2_UART_Init+0x58>)
 8000a58:	f003 fc38 	bl	80042cc <HAL_UART_Init>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a62:	f000 f8dd 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000244 	.word	0x20000244
 8000a70:	40004400 	.word	0x40004400

08000a74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b088      	sub	sp, #32
 8000a78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7a:	f107 030c 	add.w	r3, r7, #12
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	605a      	str	r2, [r3, #4]
 8000a84:	609a      	str	r2, [r3, #8]
 8000a86:	60da      	str	r2, [r3, #12]
 8000a88:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a8a:	4b1d      	ldr	r3, [pc, #116]	@ (8000b00 <MX_GPIO_Init+0x8c>)
 8000a8c:	695b      	ldr	r3, [r3, #20]
 8000a8e:	4a1c      	ldr	r2, [pc, #112]	@ (8000b00 <MX_GPIO_Init+0x8c>)
 8000a90:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a94:	6153      	str	r3, [r2, #20]
 8000a96:	4b1a      	ldr	r3, [pc, #104]	@ (8000b00 <MX_GPIO_Init+0x8c>)
 8000a98:	695b      	ldr	r3, [r3, #20]
 8000a9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a9e:	60bb      	str	r3, [r7, #8]
 8000aa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa2:	4b17      	ldr	r3, [pc, #92]	@ (8000b00 <MX_GPIO_Init+0x8c>)
 8000aa4:	695b      	ldr	r3, [r3, #20]
 8000aa6:	4a16      	ldr	r2, [pc, #88]	@ (8000b00 <MX_GPIO_Init+0x8c>)
 8000aa8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000aac:	6153      	str	r3, [r2, #20]
 8000aae:	4b14      	ldr	r3, [pc, #80]	@ (8000b00 <MX_GPIO_Init+0x8c>)
 8000ab0:	695b      	ldr	r3, [r3, #20]
 8000ab2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aba:	4b11      	ldr	r3, [pc, #68]	@ (8000b00 <MX_GPIO_Init+0x8c>)
 8000abc:	695b      	ldr	r3, [r3, #20]
 8000abe:	4a10      	ldr	r2, [pc, #64]	@ (8000b00 <MX_GPIO_Init+0x8c>)
 8000ac0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ac4:	6153      	str	r3, [r2, #20]
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b00 <MX_GPIO_Init+0x8c>)
 8000ac8:	695b      	ldr	r3, [r3, #20]
 8000aca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ace:	603b      	str	r3, [r7, #0]
 8000ad0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2108      	movs	r1, #8
 8000ad6:	480b      	ldr	r0, [pc, #44]	@ (8000b04 <MX_GPIO_Init+0x90>)
 8000ad8:	f000 fed8 	bl	800188c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000adc:	2308      	movs	r3, #8
 8000ade:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aec:	f107 030c 	add.w	r3, r7, #12
 8000af0:	4619      	mov	r1, r3
 8000af2:	4804      	ldr	r0, [pc, #16]	@ (8000b04 <MX_GPIO_Init+0x90>)
 8000af4:	f000 fd58 	bl	80015a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000af8:	bf00      	nop
 8000afa:	3720      	adds	r7, #32
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40021000 	.word	0x40021000
 8000b04:	48000400 	.word	0x48000400

08000b08 <printData>:
/* USER CODE BEGIN 4 */




void printData(char* data) {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)data, strlen(data), 100);
 8000b10:	6878      	ldr	r0, [r7, #4]
 8000b12:	f7ff fb5d 	bl	80001d0 <strlen>
 8000b16:	4603      	mov	r3, r0
 8000b18:	b29a      	uxth	r2, r3
 8000b1a:	2364      	movs	r3, #100	@ 0x64
 8000b1c:	6879      	ldr	r1, [r7, #4]
 8000b1e:	4803      	ldr	r0, [pc, #12]	@ (8000b2c <printData+0x24>)
 8000b20:	f003 fc22 	bl	8004368 <HAL_UART_Transmit>
}
 8000b24:	bf00      	nop
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20000244 	.word	0x20000244

08000b30 <_write>:

void sendData(char* data) {
  HAL_UART_Transmit(&huart1, (uint8_t*)data, strlen(data), 100);
}

int _write(int file, char *data, int len) {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)data, len, HAL_MAX_DELAY);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	b29a      	uxth	r2, r3
 8000b40:	f04f 33ff 	mov.w	r3, #4294967295
 8000b44:	68b9      	ldr	r1, [r7, #8]
 8000b46:	4804      	ldr	r0, [pc, #16]	@ (8000b58 <_write+0x28>)
 8000b48:	f003 fc0e 	bl	8004368 <HAL_UART_Transmit>
    return len;
 8000b4c:	687b      	ldr	r3, [r7, #4]
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3710      	adds	r7, #16
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000244 	.word	0x20000244

08000b5c <HAL_UART_RxCpltCallback>:



// Función que se llama cuando un byte es recibido
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a27      	ldr	r2, [pc, #156]	@ (8000c08 <HAL_UART_RxCpltCallback+0xac>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d148      	bne.n	8000c00 <HAL_UART_RxCpltCallback+0xa4>
        // Almacenar el byte recibido en el buffer circular
        rx_buffer[write_index++] = temp_byte;
 8000b6e:	4b27      	ldr	r3, [pc, #156]	@ (8000c0c <HAL_UART_RxCpltCallback+0xb0>)
 8000b70:	881b      	ldrh	r3, [r3, #0]
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	1c5a      	adds	r2, r3, #1
 8000b76:	b291      	uxth	r1, r2
 8000b78:	4a24      	ldr	r2, [pc, #144]	@ (8000c0c <HAL_UART_RxCpltCallback+0xb0>)
 8000b7a:	8011      	strh	r1, [r2, #0]
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	4b24      	ldr	r3, [pc, #144]	@ (8000c10 <HAL_UART_RxCpltCallback+0xb4>)
 8000b80:	7819      	ldrb	r1, [r3, #0]
 8000b82:	4b24      	ldr	r3, [pc, #144]	@ (8000c14 <HAL_UART_RxCpltCallback+0xb8>)
 8000b84:	5499      	strb	r1, [r3, r2]

        // Asegurar que el índice no se desborde
        if (write_index >= RX_BUFFER_SIZE) {
 8000b86:	4b21      	ldr	r3, [pc, #132]	@ (8000c0c <HAL_UART_RxCpltCallback+0xb0>)
 8000b88:	881b      	ldrh	r3, [r3, #0]
 8000b8a:	b29b      	uxth	r3, r3
 8000b8c:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b8e:	d902      	bls.n	8000b96 <HAL_UART_RxCpltCallback+0x3a>
            write_index = 0;
 8000b90:	4b1e      	ldr	r3, [pc, #120]	@ (8000c0c <HAL_UART_RxCpltCallback+0xb0>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	801a      	strh	r2, [r3, #0]
        }

        // Si el byte recibido es un delimitador (por ejemplo, '\n'), procesamos el mensaje
        if (temp_byte == '\n') {
 8000b96:	4b1e      	ldr	r3, [pc, #120]	@ (8000c10 <HAL_UART_RxCpltCallback+0xb4>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	2b0a      	cmp	r3, #10
 8000b9c:	d12b      	bne.n	8000bf6 <HAL_UART_RxCpltCallback+0x9a>
            // Procesar el buffer hasta la posición de lectura
            uint16_t length = (write_index > read_index) ? (write_index - read_index) : (RX_BUFFER_SIZE - read_index + write_index);
 8000b9e:	4b1b      	ldr	r3, [pc, #108]	@ (8000c0c <HAL_UART_RxCpltCallback+0xb0>)
 8000ba0:	881b      	ldrh	r3, [r3, #0]
 8000ba2:	b29a      	uxth	r2, r3
 8000ba4:	4b1c      	ldr	r3, [pc, #112]	@ (8000c18 <HAL_UART_RxCpltCallback+0xbc>)
 8000ba6:	881b      	ldrh	r3, [r3, #0]
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	429a      	cmp	r2, r3
 8000bac:	d908      	bls.n	8000bc0 <HAL_UART_RxCpltCallback+0x64>
 8000bae:	4b17      	ldr	r3, [pc, #92]	@ (8000c0c <HAL_UART_RxCpltCallback+0xb0>)
 8000bb0:	881b      	ldrh	r3, [r3, #0]
 8000bb2:	b29a      	uxth	r2, r3
 8000bb4:	4b18      	ldr	r3, [pc, #96]	@ (8000c18 <HAL_UART_RxCpltCallback+0xbc>)
 8000bb6:	881b      	ldrh	r3, [r3, #0]
 8000bb8:	b29b      	uxth	r3, r3
 8000bba:	1ad3      	subs	r3, r2, r3
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	e009      	b.n	8000bd4 <HAL_UART_RxCpltCallback+0x78>
 8000bc0:	4b12      	ldr	r3, [pc, #72]	@ (8000c0c <HAL_UART_RxCpltCallback+0xb0>)
 8000bc2:	881b      	ldrh	r3, [r3, #0]
 8000bc4:	b29a      	uxth	r2, r3
 8000bc6:	4b14      	ldr	r3, [pc, #80]	@ (8000c18 <HAL_UART_RxCpltCallback+0xbc>)
 8000bc8:	881b      	ldrh	r3, [r3, #0]
 8000bca:	b29b      	uxth	r3, r3
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	b29b      	uxth	r3, r3
 8000bd0:	3380      	adds	r3, #128	@ 0x80
 8000bd2:	b29b      	uxth	r3, r3
 8000bd4:	81fb      	strh	r3, [r7, #14]
            receiveControlCommand(&rx_buffer[read_index], length);
 8000bd6:	4b10      	ldr	r3, [pc, #64]	@ (8000c18 <HAL_UART_RxCpltCallback+0xbc>)
 8000bd8:	881b      	ldrh	r3, [r3, #0]
 8000bda:	b29b      	uxth	r3, r3
 8000bdc:	461a      	mov	r2, r3
 8000bde:	4b0d      	ldr	r3, [pc, #52]	@ (8000c14 <HAL_UART_RxCpltCallback+0xb8>)
 8000be0:	4413      	add	r3, r2
 8000be2:	89fa      	ldrh	r2, [r7, #14]
 8000be4:	4611      	mov	r1, r2
 8000be6:	4618      	mov	r0, r3
 8000be8:	f7ff fb4a 	bl	8000280 <receiveControlCommand>

            // Avanzar el índice de lectura
            read_index = write_index;
 8000bec:	4b07      	ldr	r3, [pc, #28]	@ (8000c0c <HAL_UART_RxCpltCallback+0xb0>)
 8000bee:	881b      	ldrh	r3, [r3, #0]
 8000bf0:	b29a      	uxth	r2, r3
 8000bf2:	4b09      	ldr	r3, [pc, #36]	@ (8000c18 <HAL_UART_RxCpltCallback+0xbc>)
 8000bf4:	801a      	strh	r2, [r3, #0]
        }

        // Continuar recibiendo el siguiente byte
        HAL_UART_Receive_IT(&huart1, &temp_byte, 1);
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	4905      	ldr	r1, [pc, #20]	@ (8000c10 <HAL_UART_RxCpltCallback+0xb4>)
 8000bfa:	4808      	ldr	r0, [pc, #32]	@ (8000c1c <HAL_UART_RxCpltCallback+0xc0>)
 8000bfc:	f003 fc3d 	bl	800447a <HAL_UART_Receive_IT>
    }
}
 8000c00:	bf00      	nop
 8000c02:	3710      	adds	r7, #16
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40013800 	.word	0x40013800
 8000c0c:	2000034e 	.word	0x2000034e
 8000c10:	2000034c 	.word	0x2000034c
 8000c14:	200002cc 	.word	0x200002cc
 8000c18:	20000350 	.word	0x20000350
 8000c1c:	200001bc 	.word	0x200001bc

08000c20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c24:	b672      	cpsid	i
}
 8000c26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <Error_Handler+0x8>

08000c2c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c32:	4b0f      	ldr	r3, [pc, #60]	@ (8000c70 <HAL_MspInit+0x44>)
 8000c34:	699b      	ldr	r3, [r3, #24]
 8000c36:	4a0e      	ldr	r2, [pc, #56]	@ (8000c70 <HAL_MspInit+0x44>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	6193      	str	r3, [r2, #24]
 8000c3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c70 <HAL_MspInit+0x44>)
 8000c40:	699b      	ldr	r3, [r3, #24]
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	607b      	str	r3, [r7, #4]
 8000c48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c4a:	4b09      	ldr	r3, [pc, #36]	@ (8000c70 <HAL_MspInit+0x44>)
 8000c4c:	69db      	ldr	r3, [r3, #28]
 8000c4e:	4a08      	ldr	r2, [pc, #32]	@ (8000c70 <HAL_MspInit+0x44>)
 8000c50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c54:	61d3      	str	r3, [r2, #28]
 8000c56:	4b06      	ldr	r3, [pc, #24]	@ (8000c70 <HAL_MspInit+0x44>)
 8000c58:	69db      	ldr	r3, [r3, #28]
 8000c5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c5e:	603b      	str	r3, [r7, #0]
 8000c60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c62:	bf00      	nop
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	40021000 	.word	0x40021000

08000c74 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08a      	sub	sp, #40	@ 0x28
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a17      	ldr	r2, [pc, #92]	@ (8000cf0 <HAL_I2C_MspInit+0x7c>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d127      	bne.n	8000ce6 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c96:	4b17      	ldr	r3, [pc, #92]	@ (8000cf4 <HAL_I2C_MspInit+0x80>)
 8000c98:	695b      	ldr	r3, [r3, #20]
 8000c9a:	4a16      	ldr	r2, [pc, #88]	@ (8000cf4 <HAL_I2C_MspInit+0x80>)
 8000c9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ca0:	6153      	str	r3, [r2, #20]
 8000ca2:	4b14      	ldr	r3, [pc, #80]	@ (8000cf4 <HAL_I2C_MspInit+0x80>)
 8000ca4:	695b      	ldr	r3, [r3, #20]
 8000ca6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000caa:	613b      	str	r3, [r7, #16]
 8000cac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cae:	23c0      	movs	r3, #192	@ 0xc0
 8000cb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cb2:	2312      	movs	r3, #18
 8000cb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cbe:	2304      	movs	r3, #4
 8000cc0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc2:	f107 0314 	add.w	r3, r7, #20
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	480b      	ldr	r0, [pc, #44]	@ (8000cf8 <HAL_I2C_MspInit+0x84>)
 8000cca:	f000 fc6d 	bl	80015a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cce:	4b09      	ldr	r3, [pc, #36]	@ (8000cf4 <HAL_I2C_MspInit+0x80>)
 8000cd0:	69db      	ldr	r3, [r3, #28]
 8000cd2:	4a08      	ldr	r2, [pc, #32]	@ (8000cf4 <HAL_I2C_MspInit+0x80>)
 8000cd4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000cd8:	61d3      	str	r3, [r2, #28]
 8000cda:	4b06      	ldr	r3, [pc, #24]	@ (8000cf4 <HAL_I2C_MspInit+0x80>)
 8000cdc:	69db      	ldr	r3, [r3, #28]
 8000cde:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000ce6:	bf00      	nop
 8000ce8:	3728      	adds	r7, #40	@ 0x28
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40005400 	.word	0x40005400
 8000cf4:	40021000 	.word	0x40021000
 8000cf8:	48000400 	.word	0x48000400

08000cfc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b087      	sub	sp, #28
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a1c      	ldr	r2, [pc, #112]	@ (8000d7c <HAL_TIM_Base_MspInit+0x80>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d10c      	bne.n	8000d28 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000d80 <HAL_TIM_Base_MspInit+0x84>)
 8000d10:	699b      	ldr	r3, [r3, #24]
 8000d12:	4a1b      	ldr	r2, [pc, #108]	@ (8000d80 <HAL_TIM_Base_MspInit+0x84>)
 8000d14:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000d18:	6193      	str	r3, [r2, #24]
 8000d1a:	4b19      	ldr	r3, [pc, #100]	@ (8000d80 <HAL_TIM_Base_MspInit+0x84>)
 8000d1c:	699b      	ldr	r3, [r3, #24]
 8000d1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000d22:	617b      	str	r3, [r7, #20]
 8000d24:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d26:	e022      	b.n	8000d6e <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM2)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d30:	d10c      	bne.n	8000d4c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d32:	4b13      	ldr	r3, [pc, #76]	@ (8000d80 <HAL_TIM_Base_MspInit+0x84>)
 8000d34:	69db      	ldr	r3, [r3, #28]
 8000d36:	4a12      	ldr	r2, [pc, #72]	@ (8000d80 <HAL_TIM_Base_MspInit+0x84>)
 8000d38:	f043 0301 	orr.w	r3, r3, #1
 8000d3c:	61d3      	str	r3, [r2, #28]
 8000d3e:	4b10      	ldr	r3, [pc, #64]	@ (8000d80 <HAL_TIM_Base_MspInit+0x84>)
 8000d40:	69db      	ldr	r3, [r3, #28]
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	613b      	str	r3, [r7, #16]
 8000d48:	693b      	ldr	r3, [r7, #16]
}
 8000d4a:	e010      	b.n	8000d6e <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a0c      	ldr	r2, [pc, #48]	@ (8000d84 <HAL_TIM_Base_MspInit+0x88>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d10b      	bne.n	8000d6e <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d56:	4b0a      	ldr	r3, [pc, #40]	@ (8000d80 <HAL_TIM_Base_MspInit+0x84>)
 8000d58:	69db      	ldr	r3, [r3, #28]
 8000d5a:	4a09      	ldr	r2, [pc, #36]	@ (8000d80 <HAL_TIM_Base_MspInit+0x84>)
 8000d5c:	f043 0302 	orr.w	r3, r3, #2
 8000d60:	61d3      	str	r3, [r2, #28]
 8000d62:	4b07      	ldr	r3, [pc, #28]	@ (8000d80 <HAL_TIM_Base_MspInit+0x84>)
 8000d64:	69db      	ldr	r3, [r3, #28]
 8000d66:	f003 0302 	and.w	r3, r3, #2
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
}
 8000d6e:	bf00      	nop
 8000d70:	371c      	adds	r7, #28
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	40012c00 	.word	0x40012c00
 8000d80:	40021000 	.word	0x40021000
 8000d84:	40000400 	.word	0x40000400

08000d88 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08a      	sub	sp, #40	@ 0x28
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d90:	f107 0314 	add.w	r3, r7, #20
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a2c      	ldr	r2, [pc, #176]	@ (8000e58 <HAL_TIM_MspPostInit+0xd0>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d130      	bne.n	8000e0c <HAL_TIM_MspPostInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000daa:	4b2c      	ldr	r3, [pc, #176]	@ (8000e5c <HAL_TIM_MspPostInit+0xd4>)
 8000dac:	695b      	ldr	r3, [r3, #20]
 8000dae:	4a2b      	ldr	r2, [pc, #172]	@ (8000e5c <HAL_TIM_MspPostInit+0xd4>)
 8000db0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000db4:	6153      	str	r3, [r2, #20]
 8000db6:	4b29      	ldr	r3, [pc, #164]	@ (8000e5c <HAL_TIM_MspPostInit+0xd4>)
 8000db8:	695b      	ldr	r3, [r3, #20]
 8000dba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dbe:	613b      	str	r3, [r7, #16]
 8000dc0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000dc2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000dc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000dd4:	2306      	movs	r3, #6
 8000dd6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	4619      	mov	r1, r3
 8000dde:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000de2:	f000 fbe1 	bl	80015a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000de6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000dea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dec:	2302      	movs	r3, #2
 8000dee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df4:	2300      	movs	r3, #0
 8000df6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 8000df8:	230b      	movs	r3, #11
 8000dfa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfc:	f107 0314 	add.w	r3, r7, #20
 8000e00:	4619      	mov	r1, r3
 8000e02:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e06:	f000 fbcf 	bl	80015a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000e0a:	e021      	b.n	8000e50 <HAL_TIM_MspPostInit+0xc8>
  else if(htim->Instance==TIM2)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e14:	d11c      	bne.n	8000e50 <HAL_TIM_MspPostInit+0xc8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e16:	4b11      	ldr	r3, [pc, #68]	@ (8000e5c <HAL_TIM_MspPostInit+0xd4>)
 8000e18:	695b      	ldr	r3, [r3, #20]
 8000e1a:	4a10      	ldr	r2, [pc, #64]	@ (8000e5c <HAL_TIM_MspPostInit+0xd4>)
 8000e1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e20:	6153      	str	r3, [r2, #20]
 8000e22:	4b0e      	ldr	r3, [pc, #56]	@ (8000e5c <HAL_TIM_MspPostInit+0xd4>)
 8000e24:	695b      	ldr	r3, [r3, #20]
 8000e26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e32:	2302      	movs	r3, #2
 8000e34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e42:	f107 0314 	add.w	r3, r7, #20
 8000e46:	4619      	mov	r1, r3
 8000e48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e4c:	f000 fbac 	bl	80015a8 <HAL_GPIO_Init>
}
 8000e50:	bf00      	nop
 8000e52:	3728      	adds	r7, #40	@ 0x28
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40012c00 	.word	0x40012c00
 8000e5c:	40021000 	.word	0x40021000

08000e60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b08c      	sub	sp, #48	@ 0x30
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e68:	f107 031c 	add.w	r3, r7, #28
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
 8000e76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a37      	ldr	r2, [pc, #220]	@ (8000f5c <HAL_UART_MspInit+0xfc>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d132      	bne.n	8000ee8 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e82:	4b37      	ldr	r3, [pc, #220]	@ (8000f60 <HAL_UART_MspInit+0x100>)
 8000e84:	699b      	ldr	r3, [r3, #24]
 8000e86:	4a36      	ldr	r2, [pc, #216]	@ (8000f60 <HAL_UART_MspInit+0x100>)
 8000e88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e8c:	6193      	str	r3, [r2, #24]
 8000e8e:	4b34      	ldr	r3, [pc, #208]	@ (8000f60 <HAL_UART_MspInit+0x100>)
 8000e90:	699b      	ldr	r3, [r3, #24]
 8000e92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e96:	61bb      	str	r3, [r7, #24]
 8000e98:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9a:	4b31      	ldr	r3, [pc, #196]	@ (8000f60 <HAL_UART_MspInit+0x100>)
 8000e9c:	695b      	ldr	r3, [r3, #20]
 8000e9e:	4a30      	ldr	r2, [pc, #192]	@ (8000f60 <HAL_UART_MspInit+0x100>)
 8000ea0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ea4:	6153      	str	r3, [r2, #20]
 8000ea6:	4b2e      	ldr	r3, [pc, #184]	@ (8000f60 <HAL_UART_MspInit+0x100>)
 8000ea8:	695b      	ldr	r3, [r3, #20]
 8000eaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eae:	617b      	str	r3, [r7, #20]
 8000eb0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000eb2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000eb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ec4:	2307      	movs	r3, #7
 8000ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec8:	f107 031c 	add.w	r3, r7, #28
 8000ecc:	4619      	mov	r1, r3
 8000ece:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ed2:	f000 fb69 	bl	80015a8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2100      	movs	r1, #0
 8000eda:	2025      	movs	r0, #37	@ 0x25
 8000edc:	f000 fab1 	bl	8001442 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ee0:	2025      	movs	r0, #37	@ 0x25
 8000ee2:	f000 faca 	bl	800147a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ee6:	e035      	b.n	8000f54 <HAL_UART_MspInit+0xf4>
  else if(huart->Instance==USART2)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a1d      	ldr	r2, [pc, #116]	@ (8000f64 <HAL_UART_MspInit+0x104>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d130      	bne.n	8000f54 <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ef2:	4b1b      	ldr	r3, [pc, #108]	@ (8000f60 <HAL_UART_MspInit+0x100>)
 8000ef4:	69db      	ldr	r3, [r3, #28]
 8000ef6:	4a1a      	ldr	r2, [pc, #104]	@ (8000f60 <HAL_UART_MspInit+0x100>)
 8000ef8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000efc:	61d3      	str	r3, [r2, #28]
 8000efe:	4b18      	ldr	r3, [pc, #96]	@ (8000f60 <HAL_UART_MspInit+0x100>)
 8000f00:	69db      	ldr	r3, [r3, #28]
 8000f02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f06:	613b      	str	r3, [r7, #16]
 8000f08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0a:	4b15      	ldr	r3, [pc, #84]	@ (8000f60 <HAL_UART_MspInit+0x100>)
 8000f0c:	695b      	ldr	r3, [r3, #20]
 8000f0e:	4a14      	ldr	r2, [pc, #80]	@ (8000f60 <HAL_UART_MspInit+0x100>)
 8000f10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f14:	6153      	str	r3, [r2, #20]
 8000f16:	4b12      	ldr	r3, [pc, #72]	@ (8000f60 <HAL_UART_MspInit+0x100>)
 8000f18:	695b      	ldr	r3, [r3, #20]
 8000f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000f22:	230c      	movs	r3, #12
 8000f24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f26:	2302      	movs	r3, #2
 8000f28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f32:	2307      	movs	r3, #7
 8000f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f36:	f107 031c 	add.w	r3, r7, #28
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f40:	f000 fb32 	bl	80015a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f44:	2200      	movs	r2, #0
 8000f46:	2100      	movs	r1, #0
 8000f48:	2026      	movs	r0, #38	@ 0x26
 8000f4a:	f000 fa7a 	bl	8001442 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f4e:	2026      	movs	r0, #38	@ 0x26
 8000f50:	f000 fa93 	bl	800147a <HAL_NVIC_EnableIRQ>
}
 8000f54:	bf00      	nop
 8000f56:	3730      	adds	r7, #48	@ 0x30
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40013800 	.word	0x40013800
 8000f60:	40021000 	.word	0x40021000
 8000f64:	40004400 	.word	0x40004400

08000f68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f6c:	bf00      	nop
 8000f6e:	e7fd      	b.n	8000f6c <NMI_Handler+0x4>

08000f70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f74:	bf00      	nop
 8000f76:	e7fd      	b.n	8000f74 <HardFault_Handler+0x4>

08000f78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f7c:	bf00      	nop
 8000f7e:	e7fd      	b.n	8000f7c <MemManage_Handler+0x4>

08000f80 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f84:	bf00      	nop
 8000f86:	e7fd      	b.n	8000f84 <BusFault_Handler+0x4>

08000f88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f8c:	bf00      	nop
 8000f8e:	e7fd      	b.n	8000f8c <UsageFault_Handler+0x4>

08000f90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr

08000f9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fb0:	bf00      	nop
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fbe:	f000 f921 	bl	8001204 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
	...

08000fc8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000fcc:	4802      	ldr	r0, [pc, #8]	@ (8000fd8 <USART1_IRQHandler+0x10>)
 8000fce:	f003 fa99 	bl	8004504 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	200001bc 	.word	0x200001bc

08000fdc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000fe0:	4802      	ldr	r0, [pc, #8]	@ (8000fec <USART2_IRQHandler+0x10>)
 8000fe2:	f003 fa8f 	bl	8004504 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000244 	.word	0x20000244

08000ff0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]
 8001000:	e00a      	b.n	8001018 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001002:	f3af 8000 	nop.w
 8001006:	4601      	mov	r1, r0
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	1c5a      	adds	r2, r3, #1
 800100c:	60ba      	str	r2, [r7, #8]
 800100e:	b2ca      	uxtb	r2, r1
 8001010:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	3301      	adds	r3, #1
 8001016:	617b      	str	r3, [r7, #20]
 8001018:	697a      	ldr	r2, [r7, #20]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	429a      	cmp	r2, r3
 800101e:	dbf0      	blt.n	8001002 <_read+0x12>
  }

  return len;
 8001020:	687b      	ldr	r3, [r7, #4]
}
 8001022:	4618      	mov	r0, r3
 8001024:	3718      	adds	r7, #24
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <_close>:
  }
  return len;
}

int _close(int file)
{
 800102a:	b480      	push	{r7}
 800102c:	b083      	sub	sp, #12
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001032:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001036:	4618      	mov	r0, r3
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001042:	b480      	push	{r7}
 8001044:	b083      	sub	sp, #12
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
 800104a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001052:	605a      	str	r2, [r3, #4]
  return 0;
 8001054:	2300      	movs	r3, #0
}
 8001056:	4618      	mov	r0, r3
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr

08001062 <_isatty>:

int _isatty(int file)
{
 8001062:	b480      	push	{r7}
 8001064:	b083      	sub	sp, #12
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800106a:	2301      	movs	r3, #1
}
 800106c:	4618      	mov	r0, r3
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3714      	adds	r7, #20
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
	...

08001094 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800109c:	4a14      	ldr	r2, [pc, #80]	@ (80010f0 <_sbrk+0x5c>)
 800109e:	4b15      	ldr	r3, [pc, #84]	@ (80010f4 <_sbrk+0x60>)
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010a8:	4b13      	ldr	r3, [pc, #76]	@ (80010f8 <_sbrk+0x64>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d102      	bne.n	80010b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010b0:	4b11      	ldr	r3, [pc, #68]	@ (80010f8 <_sbrk+0x64>)
 80010b2:	4a12      	ldr	r2, [pc, #72]	@ (80010fc <_sbrk+0x68>)
 80010b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010b6:	4b10      	ldr	r3, [pc, #64]	@ (80010f8 <_sbrk+0x64>)
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4413      	add	r3, r2
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d207      	bcs.n	80010d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010c4:	f004 fd2e 	bl	8005b24 <__errno>
 80010c8:	4603      	mov	r3, r0
 80010ca:	220c      	movs	r2, #12
 80010cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ce:	f04f 33ff 	mov.w	r3, #4294967295
 80010d2:	e009      	b.n	80010e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010d4:	4b08      	ldr	r3, [pc, #32]	@ (80010f8 <_sbrk+0x64>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010da:	4b07      	ldr	r3, [pc, #28]	@ (80010f8 <_sbrk+0x64>)
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4413      	add	r3, r2
 80010e2:	4a05      	ldr	r2, [pc, #20]	@ (80010f8 <_sbrk+0x64>)
 80010e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010e6:	68fb      	ldr	r3, [r7, #12]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3718      	adds	r7, #24
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20003000 	.word	0x20003000
 80010f4:	00000400 	.word	0x00000400
 80010f8:	20000354 	.word	0x20000354
 80010fc:	200004a8 	.word	0x200004a8

08001100 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001104:	4b06      	ldr	r3, [pc, #24]	@ (8001120 <SystemInit+0x20>)
 8001106:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800110a:	4a05      	ldr	r2, [pc, #20]	@ (8001120 <SystemInit+0x20>)
 800110c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001110:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001124:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800115c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001128:	f7ff ffea 	bl	8001100 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800112c:	480c      	ldr	r0, [pc, #48]	@ (8001160 <LoopForever+0x6>)
  ldr r1, =_edata
 800112e:	490d      	ldr	r1, [pc, #52]	@ (8001164 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001130:	4a0d      	ldr	r2, [pc, #52]	@ (8001168 <LoopForever+0xe>)
  movs r3, #0
 8001132:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001134:	e002      	b.n	800113c <LoopCopyDataInit>

08001136 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001136:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001138:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800113a:	3304      	adds	r3, #4

0800113c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800113c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800113e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001140:	d3f9      	bcc.n	8001136 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001142:	4a0a      	ldr	r2, [pc, #40]	@ (800116c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001144:	4c0a      	ldr	r4, [pc, #40]	@ (8001170 <LoopForever+0x16>)
  movs r3, #0
 8001146:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001148:	e001      	b.n	800114e <LoopFillZerobss>

0800114a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800114a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800114c:	3204      	adds	r2, #4

0800114e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800114e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001150:	d3fb      	bcc.n	800114a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001152:	f004 fced 	bl	8005b30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001156:	f7ff fa23 	bl	80005a0 <main>

0800115a <LoopForever>:

LoopForever:
    b LoopForever
 800115a:	e7fe      	b.n	800115a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800115c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001160:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001164:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001168:	08006974 	.word	0x08006974
  ldr r2, =_sbss
 800116c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001170:	200004a8 	.word	0x200004a8

08001174 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001174:	e7fe      	b.n	8001174 <ADC1_2_IRQHandler>
	...

08001178 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800117c:	4b08      	ldr	r3, [pc, #32]	@ (80011a0 <HAL_Init+0x28>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a07      	ldr	r2, [pc, #28]	@ (80011a0 <HAL_Init+0x28>)
 8001182:	f043 0310 	orr.w	r3, r3, #16
 8001186:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001188:	2003      	movs	r0, #3
 800118a:	f000 f94f 	bl	800142c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800118e:	2000      	movs	r0, #0
 8001190:	f000 f808 	bl	80011a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001194:	f7ff fd4a 	bl	8000c2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40022000 	.word	0x40022000

080011a4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011ac:	4b12      	ldr	r3, [pc, #72]	@ (80011f8 <HAL_InitTick+0x54>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	4b12      	ldr	r3, [pc, #72]	@ (80011fc <HAL_InitTick+0x58>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	4619      	mov	r1, r3
 80011b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80011be:	fbb2 f3f3 	udiv	r3, r2, r3
 80011c2:	4618      	mov	r0, r3
 80011c4:	f000 f967 	bl	8001496 <HAL_SYSTICK_Config>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e00e      	b.n	80011f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2b0f      	cmp	r3, #15
 80011d6:	d80a      	bhi.n	80011ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011d8:	2200      	movs	r2, #0
 80011da:	6879      	ldr	r1, [r7, #4]
 80011dc:	f04f 30ff 	mov.w	r0, #4294967295
 80011e0:	f000 f92f 	bl	8001442 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011e4:	4a06      	ldr	r2, [pc, #24]	@ (8001200 <HAL_InitTick+0x5c>)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80011ea:	2300      	movs	r3, #0
 80011ec:	e000      	b.n	80011f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000000 	.word	0x20000000
 80011fc:	20000008 	.word	0x20000008
 8001200:	20000004 	.word	0x20000004

08001204 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001208:	4b06      	ldr	r3, [pc, #24]	@ (8001224 <HAL_IncTick+0x20>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	461a      	mov	r2, r3
 800120e:	4b06      	ldr	r3, [pc, #24]	@ (8001228 <HAL_IncTick+0x24>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4413      	add	r3, r2
 8001214:	4a04      	ldr	r2, [pc, #16]	@ (8001228 <HAL_IncTick+0x24>)
 8001216:	6013      	str	r3, [r2, #0]
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	20000008 	.word	0x20000008
 8001228:	20000358 	.word	0x20000358

0800122c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001230:	4b03      	ldr	r3, [pc, #12]	@ (8001240 <HAL_GetTick+0x14>)
 8001232:	681b      	ldr	r3, [r3, #0]
}
 8001234:	4618      	mov	r0, r3
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	20000358 	.word	0x20000358

08001244 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800124c:	f7ff ffee 	bl	800122c <HAL_GetTick>
 8001250:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800125c:	d005      	beq.n	800126a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800125e:	4b0a      	ldr	r3, [pc, #40]	@ (8001288 <HAL_Delay+0x44>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	461a      	mov	r2, r3
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	4413      	add	r3, r2
 8001268:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800126a:	bf00      	nop
 800126c:	f7ff ffde 	bl	800122c <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	68fa      	ldr	r2, [r7, #12]
 8001278:	429a      	cmp	r2, r3
 800127a:	d8f7      	bhi.n	800126c <HAL_Delay+0x28>
  {
  }
}
 800127c:	bf00      	nop
 800127e:	bf00      	nop
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000008 	.word	0x20000008

0800128c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800129c:	4b0c      	ldr	r3, [pc, #48]	@ (80012d0 <__NVIC_SetPriorityGrouping+0x44>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012a2:	68ba      	ldr	r2, [r7, #8]
 80012a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012a8:	4013      	ands	r3, r2
 80012aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012be:	4a04      	ldr	r2, [pc, #16]	@ (80012d0 <__NVIC_SetPriorityGrouping+0x44>)
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	60d3      	str	r3, [r2, #12]
}
 80012c4:	bf00      	nop
 80012c6:	3714      	adds	r7, #20
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	e000ed00 	.word	0xe000ed00

080012d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012d8:	4b04      	ldr	r3, [pc, #16]	@ (80012ec <__NVIC_GetPriorityGrouping+0x18>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	0a1b      	lsrs	r3, r3, #8
 80012de:	f003 0307 	and.w	r3, r3, #7
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	db0b      	blt.n	800131a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	f003 021f 	and.w	r2, r3, #31
 8001308:	4907      	ldr	r1, [pc, #28]	@ (8001328 <__NVIC_EnableIRQ+0x38>)
 800130a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130e:	095b      	lsrs	r3, r3, #5
 8001310:	2001      	movs	r0, #1
 8001312:	fa00 f202 	lsl.w	r2, r0, r2
 8001316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	e000e100 	.word	0xe000e100

0800132c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	6039      	str	r1, [r7, #0]
 8001336:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133c:	2b00      	cmp	r3, #0
 800133e:	db0a      	blt.n	8001356 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	b2da      	uxtb	r2, r3
 8001344:	490c      	ldr	r1, [pc, #48]	@ (8001378 <__NVIC_SetPriority+0x4c>)
 8001346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134a:	0112      	lsls	r2, r2, #4
 800134c:	b2d2      	uxtb	r2, r2
 800134e:	440b      	add	r3, r1
 8001350:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001354:	e00a      	b.n	800136c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	b2da      	uxtb	r2, r3
 800135a:	4908      	ldr	r1, [pc, #32]	@ (800137c <__NVIC_SetPriority+0x50>)
 800135c:	79fb      	ldrb	r3, [r7, #7]
 800135e:	f003 030f 	and.w	r3, r3, #15
 8001362:	3b04      	subs	r3, #4
 8001364:	0112      	lsls	r2, r2, #4
 8001366:	b2d2      	uxtb	r2, r2
 8001368:	440b      	add	r3, r1
 800136a:	761a      	strb	r2, [r3, #24]
}
 800136c:	bf00      	nop
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	e000e100 	.word	0xe000e100
 800137c:	e000ed00 	.word	0xe000ed00

08001380 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001380:	b480      	push	{r7}
 8001382:	b089      	sub	sp, #36	@ 0x24
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	f003 0307 	and.w	r3, r3, #7
 8001392:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	f1c3 0307 	rsb	r3, r3, #7
 800139a:	2b04      	cmp	r3, #4
 800139c:	bf28      	it	cs
 800139e:	2304      	movcs	r3, #4
 80013a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	3304      	adds	r3, #4
 80013a6:	2b06      	cmp	r3, #6
 80013a8:	d902      	bls.n	80013b0 <NVIC_EncodePriority+0x30>
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	3b03      	subs	r3, #3
 80013ae:	e000      	b.n	80013b2 <NVIC_EncodePriority+0x32>
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b4:	f04f 32ff 	mov.w	r2, #4294967295
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	43da      	mvns	r2, r3
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	401a      	ands	r2, r3
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013c8:	f04f 31ff 	mov.w	r1, #4294967295
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	fa01 f303 	lsl.w	r3, r1, r3
 80013d2:	43d9      	mvns	r1, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d8:	4313      	orrs	r3, r2
         );
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3724      	adds	r7, #36	@ 0x24
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
	...

080013e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3b01      	subs	r3, #1
 80013f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013f8:	d301      	bcc.n	80013fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013fa:	2301      	movs	r3, #1
 80013fc:	e00f      	b.n	800141e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001428 <SysTick_Config+0x40>)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3b01      	subs	r3, #1
 8001404:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001406:	210f      	movs	r1, #15
 8001408:	f04f 30ff 	mov.w	r0, #4294967295
 800140c:	f7ff ff8e 	bl	800132c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001410:	4b05      	ldr	r3, [pc, #20]	@ (8001428 <SysTick_Config+0x40>)
 8001412:	2200      	movs	r2, #0
 8001414:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001416:	4b04      	ldr	r3, [pc, #16]	@ (8001428 <SysTick_Config+0x40>)
 8001418:	2207      	movs	r2, #7
 800141a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	e000e010 	.word	0xe000e010

0800142c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f7ff ff29 	bl	800128c <__NVIC_SetPriorityGrouping>
}
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b086      	sub	sp, #24
 8001446:	af00      	add	r7, sp, #0
 8001448:	4603      	mov	r3, r0
 800144a:	60b9      	str	r1, [r7, #8]
 800144c:	607a      	str	r2, [r7, #4]
 800144e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001450:	2300      	movs	r3, #0
 8001452:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001454:	f7ff ff3e 	bl	80012d4 <__NVIC_GetPriorityGrouping>
 8001458:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	68b9      	ldr	r1, [r7, #8]
 800145e:	6978      	ldr	r0, [r7, #20]
 8001460:	f7ff ff8e 	bl	8001380 <NVIC_EncodePriority>
 8001464:	4602      	mov	r2, r0
 8001466:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800146a:	4611      	mov	r1, r2
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff ff5d 	bl	800132c <__NVIC_SetPriority>
}
 8001472:	bf00      	nop
 8001474:	3718      	adds	r7, #24
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b082      	sub	sp, #8
 800147e:	af00      	add	r7, sp, #0
 8001480:	4603      	mov	r3, r0
 8001482:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff ff31 	bl	80012f0 <__NVIC_EnableIRQ>
}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	b082      	sub	sp, #8
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f7ff ffa2 	bl	80013e8 <SysTick_Config>
 80014a4:	4603      	mov	r3, r0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014ae:	b480      	push	{r7}
 80014b0:	b083      	sub	sp, #12
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d101      	bne.n	80014c0 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e02e      	b.n	800151e <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d008      	beq.n	80014dc <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2204      	movs	r2, #4
 80014ce:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2200      	movs	r2, #0
 80014d4:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e020      	b.n	800151e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f022 020e 	bic.w	r2, r2, #14
 80014ea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f022 0201 	bic.w	r2, r2, #1
 80014fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001504:	2101      	movs	r1, #1
 8001506:	fa01 f202 	lsl.w	r2, r1, r2
 800150a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2201      	movs	r2, #1
 8001510:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2200      	movs	r2, #0
 8001518:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr

0800152a <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b084      	sub	sp, #16
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001532:	2300      	movs	r3, #0
 8001534:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800153c:	2b02      	cmp	r3, #2
 800153e:	d005      	beq.n	800154c <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2204      	movs	r2, #4
 8001544:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	73fb      	strb	r3, [r7, #15]
 800154a:	e027      	b.n	800159c <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f022 020e 	bic.w	r2, r2, #14
 800155a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f022 0201 	bic.w	r2, r2, #1
 800156a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001574:	2101      	movs	r1, #1
 8001576:	fa01 f202 	lsl.w	r2, r1, r2
 800157a:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2201      	movs	r2, #1
 8001580:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2200      	movs	r2, #0
 8001588:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001590:	2b00      	cmp	r3, #0
 8001592:	d003      	beq.n	800159c <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	4798      	blx	r3
    }
  }
  return status;
 800159c:	7bfb      	ldrb	r3, [r7, #15]
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
	...

080015a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b087      	sub	sp, #28
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015b2:	2300      	movs	r3, #0
 80015b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015b6:	e14e      	b.n	8001856 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	2101      	movs	r1, #1
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	fa01 f303 	lsl.w	r3, r1, r3
 80015c4:	4013      	ands	r3, r2
 80015c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	f000 8140 	beq.w	8001850 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f003 0303 	and.w	r3, r3, #3
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d005      	beq.n	80015e8 <HAL_GPIO_Init+0x40>
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f003 0303 	and.w	r3, r3, #3
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d130      	bne.n	800164a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	2203      	movs	r2, #3
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	43db      	mvns	r3, r3
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	4013      	ands	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	68da      	ldr	r2, [r3, #12]
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	4313      	orrs	r3, r2
 8001610:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	693a      	ldr	r2, [r7, #16]
 8001616:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800161e:	2201      	movs	r2, #1
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	43db      	mvns	r3, r3
 8001628:	693a      	ldr	r2, [r7, #16]
 800162a:	4013      	ands	r3, r2
 800162c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	091b      	lsrs	r3, r3, #4
 8001634:	f003 0201 	and.w	r2, r3, #1
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	fa02 f303 	lsl.w	r3, r2, r3
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	4313      	orrs	r3, r2
 8001642:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f003 0303 	and.w	r3, r3, #3
 8001652:	2b03      	cmp	r3, #3
 8001654:	d017      	beq.n	8001686 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	2203      	movs	r2, #3
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	43db      	mvns	r3, r3
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	4013      	ands	r3, r2
 800166c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	689a      	ldr	r2, [r3, #8]
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	4313      	orrs	r3, r2
 800167e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f003 0303 	and.w	r3, r3, #3
 800168e:	2b02      	cmp	r3, #2
 8001690:	d123      	bne.n	80016da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	08da      	lsrs	r2, r3, #3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	3208      	adds	r2, #8
 800169a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800169e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	220f      	movs	r2, #15
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	43db      	mvns	r3, r3
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	4013      	ands	r3, r2
 80016b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	691a      	ldr	r2, [r3, #16]
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	f003 0307 	and.w	r3, r3, #7
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	08da      	lsrs	r2, r3, #3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	3208      	adds	r2, #8
 80016d4:	6939      	ldr	r1, [r7, #16]
 80016d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	2203      	movs	r2, #3
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	43db      	mvns	r3, r3
 80016ec:	693a      	ldr	r2, [r7, #16]
 80016ee:	4013      	ands	r3, r2
 80016f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f003 0203 	and.w	r2, r3, #3
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	4313      	orrs	r3, r2
 8001706:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001716:	2b00      	cmp	r3, #0
 8001718:	f000 809a 	beq.w	8001850 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800171c:	4b55      	ldr	r3, [pc, #340]	@ (8001874 <HAL_GPIO_Init+0x2cc>)
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	4a54      	ldr	r2, [pc, #336]	@ (8001874 <HAL_GPIO_Init+0x2cc>)
 8001722:	f043 0301 	orr.w	r3, r3, #1
 8001726:	6193      	str	r3, [r2, #24]
 8001728:	4b52      	ldr	r3, [pc, #328]	@ (8001874 <HAL_GPIO_Init+0x2cc>)
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	f003 0301 	and.w	r3, r3, #1
 8001730:	60bb      	str	r3, [r7, #8]
 8001732:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001734:	4a50      	ldr	r2, [pc, #320]	@ (8001878 <HAL_GPIO_Init+0x2d0>)
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	089b      	lsrs	r3, r3, #2
 800173a:	3302      	adds	r3, #2
 800173c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001740:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	f003 0303 	and.w	r3, r3, #3
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	220f      	movs	r2, #15
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	43db      	mvns	r3, r3
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	4013      	ands	r3, r2
 8001756:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800175e:	d013      	beq.n	8001788 <HAL_GPIO_Init+0x1e0>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4a46      	ldr	r2, [pc, #280]	@ (800187c <HAL_GPIO_Init+0x2d4>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d00d      	beq.n	8001784 <HAL_GPIO_Init+0x1dc>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	4a45      	ldr	r2, [pc, #276]	@ (8001880 <HAL_GPIO_Init+0x2d8>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d007      	beq.n	8001780 <HAL_GPIO_Init+0x1d8>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4a44      	ldr	r2, [pc, #272]	@ (8001884 <HAL_GPIO_Init+0x2dc>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d101      	bne.n	800177c <HAL_GPIO_Init+0x1d4>
 8001778:	2303      	movs	r3, #3
 800177a:	e006      	b.n	800178a <HAL_GPIO_Init+0x1e2>
 800177c:	2305      	movs	r3, #5
 800177e:	e004      	b.n	800178a <HAL_GPIO_Init+0x1e2>
 8001780:	2302      	movs	r3, #2
 8001782:	e002      	b.n	800178a <HAL_GPIO_Init+0x1e2>
 8001784:	2301      	movs	r3, #1
 8001786:	e000      	b.n	800178a <HAL_GPIO_Init+0x1e2>
 8001788:	2300      	movs	r3, #0
 800178a:	697a      	ldr	r2, [r7, #20]
 800178c:	f002 0203 	and.w	r2, r2, #3
 8001790:	0092      	lsls	r2, r2, #2
 8001792:	4093      	lsls	r3, r2
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	4313      	orrs	r3, r2
 8001798:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800179a:	4937      	ldr	r1, [pc, #220]	@ (8001878 <HAL_GPIO_Init+0x2d0>)
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	089b      	lsrs	r3, r3, #2
 80017a0:	3302      	adds	r3, #2
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017a8:	4b37      	ldr	r3, [pc, #220]	@ (8001888 <HAL_GPIO_Init+0x2e0>)
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	43db      	mvns	r3, r3
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	4013      	ands	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d003      	beq.n	80017cc <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80017c4:	693a      	ldr	r2, [r7, #16]
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80017cc:	4a2e      	ldr	r2, [pc, #184]	@ (8001888 <HAL_GPIO_Init+0x2e0>)
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017d2:	4b2d      	ldr	r3, [pc, #180]	@ (8001888 <HAL_GPIO_Init+0x2e0>)
 80017d4:	68db      	ldr	r3, [r3, #12]
 80017d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	43db      	mvns	r3, r3
 80017dc:	693a      	ldr	r2, [r7, #16]
 80017de:	4013      	ands	r3, r2
 80017e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d003      	beq.n	80017f6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80017f6:	4a24      	ldr	r2, [pc, #144]	@ (8001888 <HAL_GPIO_Init+0x2e0>)
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017fc:	4b22      	ldr	r3, [pc, #136]	@ (8001888 <HAL_GPIO_Init+0x2e0>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	43db      	mvns	r3, r3
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	4013      	ands	r3, r2
 800180a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001814:	2b00      	cmp	r3, #0
 8001816:	d003      	beq.n	8001820 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	4313      	orrs	r3, r2
 800181e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001820:	4a19      	ldr	r2, [pc, #100]	@ (8001888 <HAL_GPIO_Init+0x2e0>)
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001826:	4b18      	ldr	r3, [pc, #96]	@ (8001888 <HAL_GPIO_Init+0x2e0>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	43db      	mvns	r3, r3
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	4013      	ands	r3, r2
 8001834:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d003      	beq.n	800184a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	4313      	orrs	r3, r2
 8001848:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800184a:	4a0f      	ldr	r2, [pc, #60]	@ (8001888 <HAL_GPIO_Init+0x2e0>)
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	3301      	adds	r3, #1
 8001854:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	fa22 f303 	lsr.w	r3, r2, r3
 8001860:	2b00      	cmp	r3, #0
 8001862:	f47f aea9 	bne.w	80015b8 <HAL_GPIO_Init+0x10>
  }
}
 8001866:	bf00      	nop
 8001868:	bf00      	nop
 800186a:	371c      	adds	r7, #28
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	40021000 	.word	0x40021000
 8001878:	40010000 	.word	0x40010000
 800187c:	48000400 	.word	0x48000400
 8001880:	48000800 	.word	0x48000800
 8001884:	48000c00 	.word	0x48000c00
 8001888:	40010400 	.word	0x40010400

0800188c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	460b      	mov	r3, r1
 8001896:	807b      	strh	r3, [r7, #2]
 8001898:	4613      	mov	r3, r2
 800189a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800189c:	787b      	ldrb	r3, [r7, #1]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d003      	beq.n	80018aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018a2:	887a      	ldrh	r2, [r7, #2]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018a8:	e002      	b.n	80018b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018aa:	887a      	ldrh	r2, [r7, #2]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80018b0:	bf00      	nop
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d101      	bne.n	80018ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e08d      	b.n	80019ea <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d106      	bne.n	80018e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f7ff f9c6 	bl	8000c74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2224      	movs	r2, #36	@ 0x24
 80018ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f022 0201 	bic.w	r2, r2, #1
 80018fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685a      	ldr	r2, [r3, #4]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800190c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	689a      	ldr	r2, [r3, #8]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800191c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d107      	bne.n	8001936 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	689a      	ldr	r2, [r3, #8]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	e006      	b.n	8001944 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	689a      	ldr	r2, [r3, #8]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001942:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	2b02      	cmp	r3, #2
 800194a:	d108      	bne.n	800195e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	685a      	ldr	r2, [r3, #4]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800195a:	605a      	str	r2, [r3, #4]
 800195c:	e007      	b.n	800196e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	685a      	ldr	r2, [r3, #4]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800196c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	6812      	ldr	r2, [r2, #0]
 8001978:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800197c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001980:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	68da      	ldr	r2, [r3, #12]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001990:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	691a      	ldr	r2, [r3, #16]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	695b      	ldr	r3, [r3, #20]
 800199a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	699b      	ldr	r3, [r3, #24]
 80019a2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	430a      	orrs	r2, r1
 80019aa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	69d9      	ldr	r1, [r3, #28]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a1a      	ldr	r2, [r3, #32]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	430a      	orrs	r2, r1
 80019ba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f042 0201 	orr.w	r2, r2, #1
 80019ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2200      	movs	r2, #0
 80019d0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2220      	movs	r2, #32
 80019d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80019f2:	b480      	push	{r7}
 80019f4:	b083      	sub	sp, #12
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
 80019fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	2b20      	cmp	r3, #32
 8001a06:	d138      	bne.n	8001a7a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d101      	bne.n	8001a16 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001a12:	2302      	movs	r3, #2
 8001a14:	e032      	b.n	8001a7c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2224      	movs	r2, #36	@ 0x24
 8001a22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f022 0201 	bic.w	r2, r2, #1
 8001a34:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001a44:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	6819      	ldr	r1, [r3, #0]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	683a      	ldr	r2, [r7, #0]
 8001a52:	430a      	orrs	r2, r1
 8001a54:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f042 0201 	orr.w	r2, r2, #1
 8001a64:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2220      	movs	r2, #32
 8001a6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001a76:	2300      	movs	r3, #0
 8001a78:	e000      	b.n	8001a7c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001a7a:	2302      	movs	r3, #2
  }
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	2b20      	cmp	r3, #32
 8001a9c:	d139      	bne.n	8001b12 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d101      	bne.n	8001aac <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	e033      	b.n	8001b14 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2224      	movs	r2, #36	@ 0x24
 8001ab8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f022 0201 	bic.w	r2, r2, #1
 8001aca:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001ada:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	021b      	lsls	r3, r3, #8
 8001ae0:	68fa      	ldr	r2, [r7, #12]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	68fa      	ldr	r2, [r7, #12]
 8001aec:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f042 0201 	orr.w	r2, r2, #1
 8001afc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2220      	movs	r2, #32
 8001b02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	e000      	b.n	8001b14 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001b12:	2302      	movs	r3, #2
  }
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3714      	adds	r7, #20
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b2c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b30:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b36:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d102      	bne.n	8001b46 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	f001 b823 	b.w	8002b8c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b4a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f000 817d 	beq.w	8001e56 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001b5c:	4bbc      	ldr	r3, [pc, #752]	@ (8001e50 <HAL_RCC_OscConfig+0x330>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f003 030c 	and.w	r3, r3, #12
 8001b64:	2b04      	cmp	r3, #4
 8001b66:	d00c      	beq.n	8001b82 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b68:	4bb9      	ldr	r3, [pc, #740]	@ (8001e50 <HAL_RCC_OscConfig+0x330>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f003 030c 	and.w	r3, r3, #12
 8001b70:	2b08      	cmp	r3, #8
 8001b72:	d15c      	bne.n	8001c2e <HAL_RCC_OscConfig+0x10e>
 8001b74:	4bb6      	ldr	r3, [pc, #728]	@ (8001e50 <HAL_RCC_OscConfig+0x330>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b80:	d155      	bne.n	8001c2e <HAL_RCC_OscConfig+0x10e>
 8001b82:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b86:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b8a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001b8e:	fa93 f3a3 	rbit	r3, r3
 8001b92:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b96:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b9a:	fab3 f383 	clz	r3, r3
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	095b      	lsrs	r3, r3, #5
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	f043 0301 	orr.w	r3, r3, #1
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d102      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x94>
 8001bae:	4ba8      	ldr	r3, [pc, #672]	@ (8001e50 <HAL_RCC_OscConfig+0x330>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	e015      	b.n	8001be0 <HAL_RCC_OscConfig+0xc0>
 8001bb4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001bb8:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bbc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001bc0:	fa93 f3a3 	rbit	r3, r3
 8001bc4:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001bc8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001bcc:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001bd0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001bd4:	fa93 f3a3 	rbit	r3, r3
 8001bd8:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001bdc:	4b9c      	ldr	r3, [pc, #624]	@ (8001e50 <HAL_RCC_OscConfig+0x330>)
 8001bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001be0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001be4:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001be8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001bec:	fa92 f2a2 	rbit	r2, r2
 8001bf0:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001bf4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001bf8:	fab2 f282 	clz	r2, r2
 8001bfc:	b2d2      	uxtb	r2, r2
 8001bfe:	f042 0220 	orr.w	r2, r2, #32
 8001c02:	b2d2      	uxtb	r2, r2
 8001c04:	f002 021f 	and.w	r2, r2, #31
 8001c08:	2101      	movs	r1, #1
 8001c0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c0e:	4013      	ands	r3, r2
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f000 811f 	beq.w	8001e54 <HAL_RCC_OscConfig+0x334>
 8001c16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c1a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f040 8116 	bne.w	8001e54 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	f000 bfaf 	b.w	8002b8c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c32:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c3e:	d106      	bne.n	8001c4e <HAL_RCC_OscConfig+0x12e>
 8001c40:	4b83      	ldr	r3, [pc, #524]	@ (8001e50 <HAL_RCC_OscConfig+0x330>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a82      	ldr	r2, [pc, #520]	@ (8001e50 <HAL_RCC_OscConfig+0x330>)
 8001c46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c4a:	6013      	str	r3, [r2, #0]
 8001c4c:	e036      	b.n	8001cbc <HAL_RCC_OscConfig+0x19c>
 8001c4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c52:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d10c      	bne.n	8001c78 <HAL_RCC_OscConfig+0x158>
 8001c5e:	4b7c      	ldr	r3, [pc, #496]	@ (8001e50 <HAL_RCC_OscConfig+0x330>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a7b      	ldr	r2, [pc, #492]	@ (8001e50 <HAL_RCC_OscConfig+0x330>)
 8001c64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c68:	6013      	str	r3, [r2, #0]
 8001c6a:	4b79      	ldr	r3, [pc, #484]	@ (8001e50 <HAL_RCC_OscConfig+0x330>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a78      	ldr	r2, [pc, #480]	@ (8001e50 <HAL_RCC_OscConfig+0x330>)
 8001c70:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c74:	6013      	str	r3, [r2, #0]
 8001c76:	e021      	b.n	8001cbc <HAL_RCC_OscConfig+0x19c>
 8001c78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c7c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c88:	d10c      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x184>
 8001c8a:	4b71      	ldr	r3, [pc, #452]	@ (8001e50 <HAL_RCC_OscConfig+0x330>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a70      	ldr	r2, [pc, #448]	@ (8001e50 <HAL_RCC_OscConfig+0x330>)
 8001c90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c94:	6013      	str	r3, [r2, #0]
 8001c96:	4b6e      	ldr	r3, [pc, #440]	@ (8001e50 <HAL_RCC_OscConfig+0x330>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a6d      	ldr	r2, [pc, #436]	@ (8001e50 <HAL_RCC_OscConfig+0x330>)
 8001c9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ca0:	6013      	str	r3, [r2, #0]
 8001ca2:	e00b      	b.n	8001cbc <HAL_RCC_OscConfig+0x19c>
 8001ca4:	4b6a      	ldr	r3, [pc, #424]	@ (8001e50 <HAL_RCC_OscConfig+0x330>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a69      	ldr	r2, [pc, #420]	@ (8001e50 <HAL_RCC_OscConfig+0x330>)
 8001caa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cae:	6013      	str	r3, [r2, #0]
 8001cb0:	4b67      	ldr	r3, [pc, #412]	@ (8001e50 <HAL_RCC_OscConfig+0x330>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a66      	ldr	r2, [pc, #408]	@ (8001e50 <HAL_RCC_OscConfig+0x330>)
 8001cb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cba:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001cbc:	4b64      	ldr	r3, [pc, #400]	@ (8001e50 <HAL_RCC_OscConfig+0x330>)
 8001cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cc0:	f023 020f 	bic.w	r2, r3, #15
 8001cc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cc8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	495f      	ldr	r1, [pc, #380]	@ (8001e50 <HAL_RCC_OscConfig+0x330>)
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cda:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d059      	beq.n	8001d9a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce6:	f7ff faa1 	bl	800122c <HAL_GetTick>
 8001cea:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cee:	e00a      	b.n	8001d06 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cf0:	f7ff fa9c 	bl	800122c <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	2b64      	cmp	r3, #100	@ 0x64
 8001cfe:	d902      	bls.n	8001d06 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	f000 bf43 	b.w	8002b8c <HAL_RCC_OscConfig+0x106c>
 8001d06:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d0a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001d12:	fa93 f3a3 	rbit	r3, r3
 8001d16:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001d1a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d1e:	fab3 f383 	clz	r3, r3
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	095b      	lsrs	r3, r3, #5
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	f043 0301 	orr.w	r3, r3, #1
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d102      	bne.n	8001d38 <HAL_RCC_OscConfig+0x218>
 8001d32:	4b47      	ldr	r3, [pc, #284]	@ (8001e50 <HAL_RCC_OscConfig+0x330>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	e015      	b.n	8001d64 <HAL_RCC_OscConfig+0x244>
 8001d38:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d3c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d40:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001d44:	fa93 f3a3 	rbit	r3, r3
 8001d48:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001d4c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d50:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001d54:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001d58:	fa93 f3a3 	rbit	r3, r3
 8001d5c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001d60:	4b3b      	ldr	r3, [pc, #236]	@ (8001e50 <HAL_RCC_OscConfig+0x330>)
 8001d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d64:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001d68:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001d6c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001d70:	fa92 f2a2 	rbit	r2, r2
 8001d74:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001d78:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001d7c:	fab2 f282 	clz	r2, r2
 8001d80:	b2d2      	uxtb	r2, r2
 8001d82:	f042 0220 	orr.w	r2, r2, #32
 8001d86:	b2d2      	uxtb	r2, r2
 8001d88:	f002 021f 	and.w	r2, r2, #31
 8001d8c:	2101      	movs	r1, #1
 8001d8e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d92:	4013      	ands	r3, r2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d0ab      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x1d0>
 8001d98:	e05d      	b.n	8001e56 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9a:	f7ff fa47 	bl	800122c <HAL_GetTick>
 8001d9e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001da2:	e00a      	b.n	8001dba <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001da4:	f7ff fa42 	bl	800122c <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b64      	cmp	r3, #100	@ 0x64
 8001db2:	d902      	bls.n	8001dba <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	f000 bee9 	b.w	8002b8c <HAL_RCC_OscConfig+0x106c>
 8001dba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001dbe:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001dc6:	fa93 f3a3 	rbit	r3, r3
 8001dca:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001dce:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dd2:	fab3 f383 	clz	r3, r3
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	095b      	lsrs	r3, r3, #5
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	f043 0301 	orr.w	r3, r3, #1
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d102      	bne.n	8001dec <HAL_RCC_OscConfig+0x2cc>
 8001de6:	4b1a      	ldr	r3, [pc, #104]	@ (8001e50 <HAL_RCC_OscConfig+0x330>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	e015      	b.n	8001e18 <HAL_RCC_OscConfig+0x2f8>
 8001dec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001df0:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001df8:	fa93 f3a3 	rbit	r3, r3
 8001dfc:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001e00:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e04:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001e08:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001e0c:	fa93 f3a3 	rbit	r3, r3
 8001e10:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001e14:	4b0e      	ldr	r3, [pc, #56]	@ (8001e50 <HAL_RCC_OscConfig+0x330>)
 8001e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e18:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001e1c:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001e20:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001e24:	fa92 f2a2 	rbit	r2, r2
 8001e28:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001e2c:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001e30:	fab2 f282 	clz	r2, r2
 8001e34:	b2d2      	uxtb	r2, r2
 8001e36:	f042 0220 	orr.w	r2, r2, #32
 8001e3a:	b2d2      	uxtb	r2, r2
 8001e3c:	f002 021f 	and.w	r2, r2, #31
 8001e40:	2101      	movs	r1, #1
 8001e42:	fa01 f202 	lsl.w	r2, r1, r2
 8001e46:	4013      	ands	r3, r2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1ab      	bne.n	8001da4 <HAL_RCC_OscConfig+0x284>
 8001e4c:	e003      	b.n	8001e56 <HAL_RCC_OscConfig+0x336>
 8001e4e:	bf00      	nop
 8001e50:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e5a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f000 817d 	beq.w	8002166 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001e6c:	4ba6      	ldr	r3, [pc, #664]	@ (8002108 <HAL_RCC_OscConfig+0x5e8>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f003 030c 	and.w	r3, r3, #12
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d00b      	beq.n	8001e90 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001e78:	4ba3      	ldr	r3, [pc, #652]	@ (8002108 <HAL_RCC_OscConfig+0x5e8>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f003 030c 	and.w	r3, r3, #12
 8001e80:	2b08      	cmp	r3, #8
 8001e82:	d172      	bne.n	8001f6a <HAL_RCC_OscConfig+0x44a>
 8001e84:	4ba0      	ldr	r3, [pc, #640]	@ (8002108 <HAL_RCC_OscConfig+0x5e8>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d16c      	bne.n	8001f6a <HAL_RCC_OscConfig+0x44a>
 8001e90:	2302      	movs	r3, #2
 8001e92:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e96:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001e9a:	fa93 f3a3 	rbit	r3, r3
 8001e9e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001ea2:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ea6:	fab3 f383 	clz	r3, r3
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	095b      	lsrs	r3, r3, #5
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	f043 0301 	orr.w	r3, r3, #1
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d102      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x3a0>
 8001eba:	4b93      	ldr	r3, [pc, #588]	@ (8002108 <HAL_RCC_OscConfig+0x5e8>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	e013      	b.n	8001ee8 <HAL_RCC_OscConfig+0x3c8>
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec6:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001eca:	fa93 f3a3 	rbit	r3, r3
 8001ece:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001ed8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001edc:	fa93 f3a3 	rbit	r3, r3
 8001ee0:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001ee4:	4b88      	ldr	r3, [pc, #544]	@ (8002108 <HAL_RCC_OscConfig+0x5e8>)
 8001ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee8:	2202      	movs	r2, #2
 8001eea:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001eee:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001ef2:	fa92 f2a2 	rbit	r2, r2
 8001ef6:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001efa:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001efe:	fab2 f282 	clz	r2, r2
 8001f02:	b2d2      	uxtb	r2, r2
 8001f04:	f042 0220 	orr.w	r2, r2, #32
 8001f08:	b2d2      	uxtb	r2, r2
 8001f0a:	f002 021f 	and.w	r2, r2, #31
 8001f0e:	2101      	movs	r1, #1
 8001f10:	fa01 f202 	lsl.w	r2, r1, r2
 8001f14:	4013      	ands	r3, r2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d00a      	beq.n	8001f30 <HAL_RCC_OscConfig+0x410>
 8001f1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f1e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d002      	beq.n	8001f30 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	f000 be2e 	b.w	8002b8c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f30:	4b75      	ldr	r3, [pc, #468]	@ (8002108 <HAL_RCC_OscConfig+0x5e8>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f3c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	695b      	ldr	r3, [r3, #20]
 8001f44:	21f8      	movs	r1, #248	@ 0xf8
 8001f46:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4a:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001f4e:	fa91 f1a1 	rbit	r1, r1
 8001f52:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001f56:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001f5a:	fab1 f181 	clz	r1, r1
 8001f5e:	b2c9      	uxtb	r1, r1
 8001f60:	408b      	lsls	r3, r1
 8001f62:	4969      	ldr	r1, [pc, #420]	@ (8002108 <HAL_RCC_OscConfig+0x5e8>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f68:	e0fd      	b.n	8002166 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f6e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f000 8088 	beq.w	800208c <HAL_RCC_OscConfig+0x56c>
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f82:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001f86:	fa93 f3a3 	rbit	r3, r3
 8001f8a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001f8e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f92:	fab3 f383 	clz	r3, r3
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001f9c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa8:	f7ff f940 	bl	800122c <HAL_GetTick>
 8001fac:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb0:	e00a      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fb2:	f7ff f93b 	bl	800122c <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d902      	bls.n	8001fc8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	f000 bde2 	b.w	8002b8c <HAL_RCC_OscConfig+0x106c>
 8001fc8:	2302      	movs	r3, #2
 8001fca:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fce:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001fd2:	fa93 f3a3 	rbit	r3, r3
 8001fd6:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001fda:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fde:	fab3 f383 	clz	r3, r3
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	095b      	lsrs	r3, r3, #5
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	f043 0301 	orr.w	r3, r3, #1
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d102      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x4d8>
 8001ff2:	4b45      	ldr	r3, [pc, #276]	@ (8002108 <HAL_RCC_OscConfig+0x5e8>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	e013      	b.n	8002020 <HAL_RCC_OscConfig+0x500>
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffe:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002002:	fa93 f3a3 	rbit	r3, r3
 8002006:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800200a:	2302      	movs	r3, #2
 800200c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002010:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002014:	fa93 f3a3 	rbit	r3, r3
 8002018:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 800201c:	4b3a      	ldr	r3, [pc, #232]	@ (8002108 <HAL_RCC_OscConfig+0x5e8>)
 800201e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002020:	2202      	movs	r2, #2
 8002022:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002026:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800202a:	fa92 f2a2 	rbit	r2, r2
 800202e:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002032:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002036:	fab2 f282 	clz	r2, r2
 800203a:	b2d2      	uxtb	r2, r2
 800203c:	f042 0220 	orr.w	r2, r2, #32
 8002040:	b2d2      	uxtb	r2, r2
 8002042:	f002 021f 	and.w	r2, r2, #31
 8002046:	2101      	movs	r1, #1
 8002048:	fa01 f202 	lsl.w	r2, r1, r2
 800204c:	4013      	ands	r3, r2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d0af      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002052:	4b2d      	ldr	r3, [pc, #180]	@ (8002108 <HAL_RCC_OscConfig+0x5e8>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800205a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800205e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	21f8      	movs	r1, #248	@ 0xf8
 8002068:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002070:	fa91 f1a1 	rbit	r1, r1
 8002074:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002078:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 800207c:	fab1 f181 	clz	r1, r1
 8002080:	b2c9      	uxtb	r1, r1
 8002082:	408b      	lsls	r3, r1
 8002084:	4920      	ldr	r1, [pc, #128]	@ (8002108 <HAL_RCC_OscConfig+0x5e8>)
 8002086:	4313      	orrs	r3, r2
 8002088:	600b      	str	r3, [r1, #0]
 800208a:	e06c      	b.n	8002166 <HAL_RCC_OscConfig+0x646>
 800208c:	2301      	movs	r3, #1
 800208e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002092:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002096:	fa93 f3a3 	rbit	r3, r3
 800209a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800209e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020a2:	fab3 f383 	clz	r3, r3
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80020ac:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	461a      	mov	r2, r3
 80020b4:	2300      	movs	r3, #0
 80020b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b8:	f7ff f8b8 	bl	800122c <HAL_GetTick>
 80020bc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020c0:	e00a      	b.n	80020d8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020c2:	f7ff f8b3 	bl	800122c <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d902      	bls.n	80020d8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	f000 bd5a 	b.w	8002b8c <HAL_RCC_OscConfig+0x106c>
 80020d8:	2302      	movs	r3, #2
 80020da:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020de:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80020e2:	fa93 f3a3 	rbit	r3, r3
 80020e6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80020ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ee:	fab3 f383 	clz	r3, r3
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	095b      	lsrs	r3, r3, #5
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	f043 0301 	orr.w	r3, r3, #1
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d104      	bne.n	800210c <HAL_RCC_OscConfig+0x5ec>
 8002102:	4b01      	ldr	r3, [pc, #4]	@ (8002108 <HAL_RCC_OscConfig+0x5e8>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	e015      	b.n	8002134 <HAL_RCC_OscConfig+0x614>
 8002108:	40021000 	.word	0x40021000
 800210c:	2302      	movs	r3, #2
 800210e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002112:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002116:	fa93 f3a3 	rbit	r3, r3
 800211a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800211e:	2302      	movs	r3, #2
 8002120:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002124:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002128:	fa93 f3a3 	rbit	r3, r3
 800212c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002130:	4bc8      	ldr	r3, [pc, #800]	@ (8002454 <HAL_RCC_OscConfig+0x934>)
 8002132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002134:	2202      	movs	r2, #2
 8002136:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 800213a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800213e:	fa92 f2a2 	rbit	r2, r2
 8002142:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002146:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800214a:	fab2 f282 	clz	r2, r2
 800214e:	b2d2      	uxtb	r2, r2
 8002150:	f042 0220 	orr.w	r2, r2, #32
 8002154:	b2d2      	uxtb	r2, r2
 8002156:	f002 021f 	and.w	r2, r2, #31
 800215a:	2101      	movs	r1, #1
 800215c:	fa01 f202 	lsl.w	r2, r1, r2
 8002160:	4013      	ands	r3, r2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1ad      	bne.n	80020c2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002166:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800216a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0308 	and.w	r3, r3, #8
 8002176:	2b00      	cmp	r3, #0
 8002178:	f000 8110 	beq.w	800239c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800217c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002180:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d079      	beq.n	8002280 <HAL_RCC_OscConfig+0x760>
 800218c:	2301      	movs	r3, #1
 800218e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002192:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002196:	fa93 f3a3 	rbit	r3, r3
 800219a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800219e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021a2:	fab3 f383 	clz	r3, r3
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	461a      	mov	r2, r3
 80021aa:	4bab      	ldr	r3, [pc, #684]	@ (8002458 <HAL_RCC_OscConfig+0x938>)
 80021ac:	4413      	add	r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	461a      	mov	r2, r3
 80021b2:	2301      	movs	r3, #1
 80021b4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021b6:	f7ff f839 	bl	800122c <HAL_GetTick>
 80021ba:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021be:	e00a      	b.n	80021d6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021c0:	f7ff f834 	bl	800122c <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d902      	bls.n	80021d6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	f000 bcdb 	b.w	8002b8c <HAL_RCC_OscConfig+0x106c>
 80021d6:	2302      	movs	r3, #2
 80021d8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80021e0:	fa93 f3a3 	rbit	r3, r3
 80021e4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80021e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021ec:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80021f0:	2202      	movs	r2, #2
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021f8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	fa93 f2a3 	rbit	r2, r3
 8002202:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002206:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002210:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002214:	2202      	movs	r2, #2
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800221c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	fa93 f2a3 	rbit	r2, r3
 8002226:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800222a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800222e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002230:	4b88      	ldr	r3, [pc, #544]	@ (8002454 <HAL_RCC_OscConfig+0x934>)
 8002232:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002234:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002238:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800223c:	2102      	movs	r1, #2
 800223e:	6019      	str	r1, [r3, #0]
 8002240:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002244:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	fa93 f1a3 	rbit	r1, r3
 800224e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002252:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002256:	6019      	str	r1, [r3, #0]
  return result;
 8002258:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800225c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	fab3 f383 	clz	r3, r3
 8002266:	b2db      	uxtb	r3, r3
 8002268:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800226c:	b2db      	uxtb	r3, r3
 800226e:	f003 031f 	and.w	r3, r3, #31
 8002272:	2101      	movs	r1, #1
 8002274:	fa01 f303 	lsl.w	r3, r1, r3
 8002278:	4013      	ands	r3, r2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d0a0      	beq.n	80021c0 <HAL_RCC_OscConfig+0x6a0>
 800227e:	e08d      	b.n	800239c <HAL_RCC_OscConfig+0x87c>
 8002280:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002284:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002288:	2201      	movs	r2, #1
 800228a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002290:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	fa93 f2a3 	rbit	r2, r3
 800229a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800229e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80022a2:	601a      	str	r2, [r3, #0]
  return result;
 80022a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022a8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80022ac:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022ae:	fab3 f383 	clz	r3, r3
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	461a      	mov	r2, r3
 80022b6:	4b68      	ldr	r3, [pc, #416]	@ (8002458 <HAL_RCC_OscConfig+0x938>)
 80022b8:	4413      	add	r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	461a      	mov	r2, r3
 80022be:	2300      	movs	r3, #0
 80022c0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022c2:	f7fe ffb3 	bl	800122c <HAL_GetTick>
 80022c6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022ca:	e00a      	b.n	80022e2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022cc:	f7fe ffae 	bl	800122c <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d902      	bls.n	80022e2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	f000 bc55 	b.w	8002b8c <HAL_RCC_OscConfig+0x106c>
 80022e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022e6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80022ea:	2202      	movs	r2, #2
 80022ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022f2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	fa93 f2a3 	rbit	r2, r3
 80022fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002300:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002304:	601a      	str	r2, [r3, #0]
 8002306:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800230a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800230e:	2202      	movs	r2, #2
 8002310:	601a      	str	r2, [r3, #0]
 8002312:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002316:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	fa93 f2a3 	rbit	r2, r3
 8002320:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002324:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800232e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002332:	2202      	movs	r2, #2
 8002334:	601a      	str	r2, [r3, #0]
 8002336:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800233a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	fa93 f2a3 	rbit	r2, r3
 8002344:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002348:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800234c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800234e:	4b41      	ldr	r3, [pc, #260]	@ (8002454 <HAL_RCC_OscConfig+0x934>)
 8002350:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002352:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002356:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800235a:	2102      	movs	r1, #2
 800235c:	6019      	str	r1, [r3, #0]
 800235e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002362:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	fa93 f1a3 	rbit	r1, r3
 800236c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002370:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002374:	6019      	str	r1, [r3, #0]
  return result;
 8002376:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800237a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	fab3 f383 	clz	r3, r3
 8002384:	b2db      	uxtb	r3, r3
 8002386:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800238a:	b2db      	uxtb	r3, r3
 800238c:	f003 031f 	and.w	r3, r3, #31
 8002390:	2101      	movs	r1, #1
 8002392:	fa01 f303 	lsl.w	r3, r1, r3
 8002396:	4013      	ands	r3, r2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d197      	bne.n	80022cc <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800239c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023a0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0304 	and.w	r3, r3, #4
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f000 81a1 	beq.w	80026f4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023b2:	2300      	movs	r3, #0
 80023b4:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023b8:	4b26      	ldr	r3, [pc, #152]	@ (8002454 <HAL_RCC_OscConfig+0x934>)
 80023ba:	69db      	ldr	r3, [r3, #28]
 80023bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d116      	bne.n	80023f2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023c4:	4b23      	ldr	r3, [pc, #140]	@ (8002454 <HAL_RCC_OscConfig+0x934>)
 80023c6:	69db      	ldr	r3, [r3, #28]
 80023c8:	4a22      	ldr	r2, [pc, #136]	@ (8002454 <HAL_RCC_OscConfig+0x934>)
 80023ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023ce:	61d3      	str	r3, [r2, #28]
 80023d0:	4b20      	ldr	r3, [pc, #128]	@ (8002454 <HAL_RCC_OscConfig+0x934>)
 80023d2:	69db      	ldr	r3, [r3, #28]
 80023d4:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80023d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023dc:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80023e0:	601a      	str	r2, [r3, #0]
 80023e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023e6:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80023ea:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80023ec:	2301      	movs	r3, #1
 80023ee:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f2:	4b1a      	ldr	r3, [pc, #104]	@ (800245c <HAL_RCC_OscConfig+0x93c>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d11a      	bne.n	8002434 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023fe:	4b17      	ldr	r3, [pc, #92]	@ (800245c <HAL_RCC_OscConfig+0x93c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a16      	ldr	r2, [pc, #88]	@ (800245c <HAL_RCC_OscConfig+0x93c>)
 8002404:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002408:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800240a:	f7fe ff0f 	bl	800122c <HAL_GetTick>
 800240e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002412:	e009      	b.n	8002428 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002414:	f7fe ff0a 	bl	800122c <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b64      	cmp	r3, #100	@ 0x64
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e3b1      	b.n	8002b8c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002428:	4b0c      	ldr	r3, [pc, #48]	@ (800245c <HAL_RCC_OscConfig+0x93c>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002430:	2b00      	cmp	r3, #0
 8002432:	d0ef      	beq.n	8002414 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002434:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002438:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	2b01      	cmp	r3, #1
 8002442:	d10d      	bne.n	8002460 <HAL_RCC_OscConfig+0x940>
 8002444:	4b03      	ldr	r3, [pc, #12]	@ (8002454 <HAL_RCC_OscConfig+0x934>)
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	4a02      	ldr	r2, [pc, #8]	@ (8002454 <HAL_RCC_OscConfig+0x934>)
 800244a:	f043 0301 	orr.w	r3, r3, #1
 800244e:	6213      	str	r3, [r2, #32]
 8002450:	e03c      	b.n	80024cc <HAL_RCC_OscConfig+0x9ac>
 8002452:	bf00      	nop
 8002454:	40021000 	.word	0x40021000
 8002458:	10908120 	.word	0x10908120
 800245c:	40007000 	.word	0x40007000
 8002460:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002464:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d10c      	bne.n	800248a <HAL_RCC_OscConfig+0x96a>
 8002470:	4bc1      	ldr	r3, [pc, #772]	@ (8002778 <HAL_RCC_OscConfig+0xc58>)
 8002472:	6a1b      	ldr	r3, [r3, #32]
 8002474:	4ac0      	ldr	r2, [pc, #768]	@ (8002778 <HAL_RCC_OscConfig+0xc58>)
 8002476:	f023 0301 	bic.w	r3, r3, #1
 800247a:	6213      	str	r3, [r2, #32]
 800247c:	4bbe      	ldr	r3, [pc, #760]	@ (8002778 <HAL_RCC_OscConfig+0xc58>)
 800247e:	6a1b      	ldr	r3, [r3, #32]
 8002480:	4abd      	ldr	r2, [pc, #756]	@ (8002778 <HAL_RCC_OscConfig+0xc58>)
 8002482:	f023 0304 	bic.w	r3, r3, #4
 8002486:	6213      	str	r3, [r2, #32]
 8002488:	e020      	b.n	80024cc <HAL_RCC_OscConfig+0x9ac>
 800248a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800248e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	2b05      	cmp	r3, #5
 8002498:	d10c      	bne.n	80024b4 <HAL_RCC_OscConfig+0x994>
 800249a:	4bb7      	ldr	r3, [pc, #732]	@ (8002778 <HAL_RCC_OscConfig+0xc58>)
 800249c:	6a1b      	ldr	r3, [r3, #32]
 800249e:	4ab6      	ldr	r2, [pc, #728]	@ (8002778 <HAL_RCC_OscConfig+0xc58>)
 80024a0:	f043 0304 	orr.w	r3, r3, #4
 80024a4:	6213      	str	r3, [r2, #32]
 80024a6:	4bb4      	ldr	r3, [pc, #720]	@ (8002778 <HAL_RCC_OscConfig+0xc58>)
 80024a8:	6a1b      	ldr	r3, [r3, #32]
 80024aa:	4ab3      	ldr	r2, [pc, #716]	@ (8002778 <HAL_RCC_OscConfig+0xc58>)
 80024ac:	f043 0301 	orr.w	r3, r3, #1
 80024b0:	6213      	str	r3, [r2, #32]
 80024b2:	e00b      	b.n	80024cc <HAL_RCC_OscConfig+0x9ac>
 80024b4:	4bb0      	ldr	r3, [pc, #704]	@ (8002778 <HAL_RCC_OscConfig+0xc58>)
 80024b6:	6a1b      	ldr	r3, [r3, #32]
 80024b8:	4aaf      	ldr	r2, [pc, #700]	@ (8002778 <HAL_RCC_OscConfig+0xc58>)
 80024ba:	f023 0301 	bic.w	r3, r3, #1
 80024be:	6213      	str	r3, [r2, #32]
 80024c0:	4bad      	ldr	r3, [pc, #692]	@ (8002778 <HAL_RCC_OscConfig+0xc58>)
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	4aac      	ldr	r2, [pc, #688]	@ (8002778 <HAL_RCC_OscConfig+0xc58>)
 80024c6:	f023 0304 	bic.w	r3, r3, #4
 80024ca:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024d0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f000 8081 	beq.w	80025e0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024de:	f7fe fea5 	bl	800122c <HAL_GetTick>
 80024e2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024e6:	e00b      	b.n	8002500 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024e8:	f7fe fea0 	bl	800122c <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d901      	bls.n	8002500 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e345      	b.n	8002b8c <HAL_RCC_OscConfig+0x106c>
 8002500:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002504:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002508:	2202      	movs	r2, #2
 800250a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002510:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	fa93 f2a3 	rbit	r2, r3
 800251a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800251e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002528:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800252c:	2202      	movs	r2, #2
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002534:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	fa93 f2a3 	rbit	r2, r3
 800253e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002542:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002546:	601a      	str	r2, [r3, #0]
  return result;
 8002548:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800254c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002550:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002552:	fab3 f383 	clz	r3, r3
 8002556:	b2db      	uxtb	r3, r3
 8002558:	095b      	lsrs	r3, r3, #5
 800255a:	b2db      	uxtb	r3, r3
 800255c:	f043 0302 	orr.w	r3, r3, #2
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d102      	bne.n	800256c <HAL_RCC_OscConfig+0xa4c>
 8002566:	4b84      	ldr	r3, [pc, #528]	@ (8002778 <HAL_RCC_OscConfig+0xc58>)
 8002568:	6a1b      	ldr	r3, [r3, #32]
 800256a:	e013      	b.n	8002594 <HAL_RCC_OscConfig+0xa74>
 800256c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002570:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002574:	2202      	movs	r2, #2
 8002576:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002578:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800257c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	fa93 f2a3 	rbit	r2, r3
 8002586:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800258a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800258e:	601a      	str	r2, [r3, #0]
 8002590:	4b79      	ldr	r3, [pc, #484]	@ (8002778 <HAL_RCC_OscConfig+0xc58>)
 8002592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002594:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002598:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800259c:	2102      	movs	r1, #2
 800259e:	6011      	str	r1, [r2, #0]
 80025a0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025a4:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80025a8:	6812      	ldr	r2, [r2, #0]
 80025aa:	fa92 f1a2 	rbit	r1, r2
 80025ae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025b2:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80025b6:	6011      	str	r1, [r2, #0]
  return result;
 80025b8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025bc:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80025c0:	6812      	ldr	r2, [r2, #0]
 80025c2:	fab2 f282 	clz	r2, r2
 80025c6:	b2d2      	uxtb	r2, r2
 80025c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80025cc:	b2d2      	uxtb	r2, r2
 80025ce:	f002 021f 	and.w	r2, r2, #31
 80025d2:	2101      	movs	r1, #1
 80025d4:	fa01 f202 	lsl.w	r2, r1, r2
 80025d8:	4013      	ands	r3, r2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d084      	beq.n	80024e8 <HAL_RCC_OscConfig+0x9c8>
 80025de:	e07f      	b.n	80026e0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025e0:	f7fe fe24 	bl	800122c <HAL_GetTick>
 80025e4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025e8:	e00b      	b.n	8002602 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025ea:	f7fe fe1f 	bl	800122c <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e2c4      	b.n	8002b8c <HAL_RCC_OscConfig+0x106c>
 8002602:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002606:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800260a:	2202      	movs	r2, #2
 800260c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002612:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	fa93 f2a3 	rbit	r2, r3
 800261c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002620:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002624:	601a      	str	r2, [r3, #0]
 8002626:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800262a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800262e:	2202      	movs	r2, #2
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002636:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	fa93 f2a3 	rbit	r2, r3
 8002640:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002644:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002648:	601a      	str	r2, [r3, #0]
  return result;
 800264a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800264e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002652:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002654:	fab3 f383 	clz	r3, r3
 8002658:	b2db      	uxtb	r3, r3
 800265a:	095b      	lsrs	r3, r3, #5
 800265c:	b2db      	uxtb	r3, r3
 800265e:	f043 0302 	orr.w	r3, r3, #2
 8002662:	b2db      	uxtb	r3, r3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d102      	bne.n	800266e <HAL_RCC_OscConfig+0xb4e>
 8002668:	4b43      	ldr	r3, [pc, #268]	@ (8002778 <HAL_RCC_OscConfig+0xc58>)
 800266a:	6a1b      	ldr	r3, [r3, #32]
 800266c:	e013      	b.n	8002696 <HAL_RCC_OscConfig+0xb76>
 800266e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002672:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002676:	2202      	movs	r2, #2
 8002678:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800267e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	fa93 f2a3 	rbit	r2, r3
 8002688:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800268c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002690:	601a      	str	r2, [r3, #0]
 8002692:	4b39      	ldr	r3, [pc, #228]	@ (8002778 <HAL_RCC_OscConfig+0xc58>)
 8002694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002696:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800269a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800269e:	2102      	movs	r1, #2
 80026a0:	6011      	str	r1, [r2, #0]
 80026a2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026a6:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80026aa:	6812      	ldr	r2, [r2, #0]
 80026ac:	fa92 f1a2 	rbit	r1, r2
 80026b0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026b4:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80026b8:	6011      	str	r1, [r2, #0]
  return result;
 80026ba:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026be:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80026c2:	6812      	ldr	r2, [r2, #0]
 80026c4:	fab2 f282 	clz	r2, r2
 80026c8:	b2d2      	uxtb	r2, r2
 80026ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80026ce:	b2d2      	uxtb	r2, r2
 80026d0:	f002 021f 	and.w	r2, r2, #31
 80026d4:	2101      	movs	r1, #1
 80026d6:	fa01 f202 	lsl.w	r2, r1, r2
 80026da:	4013      	ands	r3, r2
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d184      	bne.n	80025ea <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80026e0:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d105      	bne.n	80026f4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026e8:	4b23      	ldr	r3, [pc, #140]	@ (8002778 <HAL_RCC_OscConfig+0xc58>)
 80026ea:	69db      	ldr	r3, [r3, #28]
 80026ec:	4a22      	ldr	r2, [pc, #136]	@ (8002778 <HAL_RCC_OscConfig+0xc58>)
 80026ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026f2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026f8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	69db      	ldr	r3, [r3, #28]
 8002700:	2b00      	cmp	r3, #0
 8002702:	f000 8242 	beq.w	8002b8a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002706:	4b1c      	ldr	r3, [pc, #112]	@ (8002778 <HAL_RCC_OscConfig+0xc58>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f003 030c 	and.w	r3, r3, #12
 800270e:	2b08      	cmp	r3, #8
 8002710:	f000 8213 	beq.w	8002b3a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002714:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002718:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	69db      	ldr	r3, [r3, #28]
 8002720:	2b02      	cmp	r3, #2
 8002722:	f040 8162 	bne.w	80029ea <HAL_RCC_OscConfig+0xeca>
 8002726:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800272a:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800272e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002732:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002734:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002738:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	fa93 f2a3 	rbit	r2, r3
 8002742:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002746:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800274a:	601a      	str	r2, [r3, #0]
  return result;
 800274c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002750:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002754:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002756:	fab3 f383 	clz	r3, r3
 800275a:	b2db      	uxtb	r3, r3
 800275c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002760:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	461a      	mov	r2, r3
 8002768:	2300      	movs	r3, #0
 800276a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800276c:	f7fe fd5e 	bl	800122c <HAL_GetTick>
 8002770:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002774:	e00c      	b.n	8002790 <HAL_RCC_OscConfig+0xc70>
 8002776:	bf00      	nop
 8002778:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800277c:	f7fe fd56 	bl	800122c <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e1fd      	b.n	8002b8c <HAL_RCC_OscConfig+0x106c>
 8002790:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002794:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002798:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800279c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027a2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	fa93 f2a3 	rbit	r2, r3
 80027ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027b0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80027b4:	601a      	str	r2, [r3, #0]
  return result;
 80027b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ba:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80027be:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027c0:	fab3 f383 	clz	r3, r3
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	095b      	lsrs	r3, r3, #5
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	f043 0301 	orr.w	r3, r3, #1
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d102      	bne.n	80027da <HAL_RCC_OscConfig+0xcba>
 80027d4:	4bb0      	ldr	r3, [pc, #704]	@ (8002a98 <HAL_RCC_OscConfig+0xf78>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	e027      	b.n	800282a <HAL_RCC_OscConfig+0xd0a>
 80027da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027de:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80027e2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ec:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	fa93 f2a3 	rbit	r2, r3
 80027f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027fa:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002804:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002808:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002812:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	fa93 f2a3 	rbit	r2, r3
 800281c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002820:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002824:	601a      	str	r2, [r3, #0]
 8002826:	4b9c      	ldr	r3, [pc, #624]	@ (8002a98 <HAL_RCC_OscConfig+0xf78>)
 8002828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800282a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800282e:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002832:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002836:	6011      	str	r1, [r2, #0]
 8002838:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800283c:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002840:	6812      	ldr	r2, [r2, #0]
 8002842:	fa92 f1a2 	rbit	r1, r2
 8002846:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800284a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800284e:	6011      	str	r1, [r2, #0]
  return result;
 8002850:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002854:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002858:	6812      	ldr	r2, [r2, #0]
 800285a:	fab2 f282 	clz	r2, r2
 800285e:	b2d2      	uxtb	r2, r2
 8002860:	f042 0220 	orr.w	r2, r2, #32
 8002864:	b2d2      	uxtb	r2, r2
 8002866:	f002 021f 	and.w	r2, r2, #31
 800286a:	2101      	movs	r1, #1
 800286c:	fa01 f202 	lsl.w	r2, r1, r2
 8002870:	4013      	ands	r3, r2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d182      	bne.n	800277c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002876:	4b88      	ldr	r3, [pc, #544]	@ (8002a98 <HAL_RCC_OscConfig+0xf78>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800287e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002882:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800288a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800288e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	6a1b      	ldr	r3, [r3, #32]
 8002896:	430b      	orrs	r3, r1
 8002898:	497f      	ldr	r1, [pc, #508]	@ (8002a98 <HAL_RCC_OscConfig+0xf78>)
 800289a:	4313      	orrs	r3, r2
 800289c:	604b      	str	r3, [r1, #4]
 800289e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028a2:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80028a6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80028aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028b0:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	fa93 f2a3 	rbit	r2, r3
 80028ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028be:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80028c2:	601a      	str	r2, [r3, #0]
  return result;
 80028c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028c8:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80028cc:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028ce:	fab3 f383 	clz	r3, r3
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80028d8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	461a      	mov	r2, r3
 80028e0:	2301      	movs	r3, #1
 80028e2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e4:	f7fe fca2 	bl	800122c <HAL_GetTick>
 80028e8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028ec:	e009      	b.n	8002902 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ee:	f7fe fc9d 	bl	800122c <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e144      	b.n	8002b8c <HAL_RCC_OscConfig+0x106c>
 8002902:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002906:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800290a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800290e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002910:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002914:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	fa93 f2a3 	rbit	r2, r3
 800291e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002922:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002926:	601a      	str	r2, [r3, #0]
  return result;
 8002928:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800292c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002930:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002932:	fab3 f383 	clz	r3, r3
 8002936:	b2db      	uxtb	r3, r3
 8002938:	095b      	lsrs	r3, r3, #5
 800293a:	b2db      	uxtb	r3, r3
 800293c:	f043 0301 	orr.w	r3, r3, #1
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b01      	cmp	r3, #1
 8002944:	d102      	bne.n	800294c <HAL_RCC_OscConfig+0xe2c>
 8002946:	4b54      	ldr	r3, [pc, #336]	@ (8002a98 <HAL_RCC_OscConfig+0xf78>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	e027      	b.n	800299c <HAL_RCC_OscConfig+0xe7c>
 800294c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002950:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002954:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002958:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800295e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	fa93 f2a3 	rbit	r2, r3
 8002968:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800296c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002970:	601a      	str	r2, [r3, #0]
 8002972:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002976:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800297a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002984:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	fa93 f2a3 	rbit	r2, r3
 800298e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002992:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002996:	601a      	str	r2, [r3, #0]
 8002998:	4b3f      	ldr	r3, [pc, #252]	@ (8002a98 <HAL_RCC_OscConfig+0xf78>)
 800299a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800299c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029a0:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80029a4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80029a8:	6011      	str	r1, [r2, #0]
 80029aa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029ae:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80029b2:	6812      	ldr	r2, [r2, #0]
 80029b4:	fa92 f1a2 	rbit	r1, r2
 80029b8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029bc:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80029c0:	6011      	str	r1, [r2, #0]
  return result;
 80029c2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029c6:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80029ca:	6812      	ldr	r2, [r2, #0]
 80029cc:	fab2 f282 	clz	r2, r2
 80029d0:	b2d2      	uxtb	r2, r2
 80029d2:	f042 0220 	orr.w	r2, r2, #32
 80029d6:	b2d2      	uxtb	r2, r2
 80029d8:	f002 021f 	and.w	r2, r2, #31
 80029dc:	2101      	movs	r1, #1
 80029de:	fa01 f202 	lsl.w	r2, r1, r2
 80029e2:	4013      	ands	r3, r2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d082      	beq.n	80028ee <HAL_RCC_OscConfig+0xdce>
 80029e8:	e0cf      	b.n	8002b8a <HAL_RCC_OscConfig+0x106a>
 80029ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ee:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80029f2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80029f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029fc:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	fa93 f2a3 	rbit	r2, r3
 8002a06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a0a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002a0e:	601a      	str	r2, [r3, #0]
  return result;
 8002a10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a14:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002a18:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a1a:	fab3 f383 	clz	r3, r3
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002a24:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a30:	f7fe fbfc 	bl	800122c <HAL_GetTick>
 8002a34:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a38:	e009      	b.n	8002a4e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a3a:	f7fe fbf7 	bl	800122c <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e09e      	b.n	8002b8c <HAL_RCC_OscConfig+0x106c>
 8002a4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a52:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002a56:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a60:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	fa93 f2a3 	rbit	r2, r3
 8002a6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a6e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002a72:	601a      	str	r2, [r3, #0]
  return result;
 8002a74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a78:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002a7c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a7e:	fab3 f383 	clz	r3, r3
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	095b      	lsrs	r3, r3, #5
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	f043 0301 	orr.w	r3, r3, #1
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d104      	bne.n	8002a9c <HAL_RCC_OscConfig+0xf7c>
 8002a92:	4b01      	ldr	r3, [pc, #4]	@ (8002a98 <HAL_RCC_OscConfig+0xf78>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	e029      	b.n	8002aec <HAL_RCC_OscConfig+0xfcc>
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aa0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002aa4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002aa8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aaa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aae:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	fa93 f2a3 	rbit	r2, r3
 8002ab8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002abc:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002ac0:	601a      	str	r2, [r3, #0]
 8002ac2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ac6:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002aca:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ace:	601a      	str	r2, [r3, #0]
 8002ad0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ad4:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	fa93 f2a3 	rbit	r2, r3
 8002ade:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ae2:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002ae6:	601a      	str	r2, [r3, #0]
 8002ae8:	4b2b      	ldr	r3, [pc, #172]	@ (8002b98 <HAL_RCC_OscConfig+0x1078>)
 8002aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002af0:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002af4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002af8:	6011      	str	r1, [r2, #0]
 8002afa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002afe:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002b02:	6812      	ldr	r2, [r2, #0]
 8002b04:	fa92 f1a2 	rbit	r1, r2
 8002b08:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b0c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002b10:	6011      	str	r1, [r2, #0]
  return result;
 8002b12:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b16:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002b1a:	6812      	ldr	r2, [r2, #0]
 8002b1c:	fab2 f282 	clz	r2, r2
 8002b20:	b2d2      	uxtb	r2, r2
 8002b22:	f042 0220 	orr.w	r2, r2, #32
 8002b26:	b2d2      	uxtb	r2, r2
 8002b28:	f002 021f 	and.w	r2, r2, #31
 8002b2c:	2101      	movs	r1, #1
 8002b2e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b32:	4013      	ands	r3, r2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d180      	bne.n	8002a3a <HAL_RCC_OscConfig+0xf1a>
 8002b38:	e027      	b.n	8002b8a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b3e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	69db      	ldr	r3, [r3, #28]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d101      	bne.n	8002b4e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e01e      	b.n	8002b8c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b4e:	4b12      	ldr	r3, [pc, #72]	@ (8002b98 <HAL_RCC_OscConfig+0x1078>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b56:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002b5a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002b5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b62:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6a1b      	ldr	r3, [r3, #32]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d10b      	bne.n	8002b86 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002b6e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002b72:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002b76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b7a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d001      	beq.n	8002b8a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e000      	b.n	8002b8c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	40021000 	.word	0x40021000

08002b9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b09e      	sub	sp, #120	@ 0x78
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d101      	bne.n	8002bb4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e162      	b.n	8002e7a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bb4:	4b90      	ldr	r3, [pc, #576]	@ (8002df8 <HAL_RCC_ClockConfig+0x25c>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0307 	and.w	r3, r3, #7
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d910      	bls.n	8002be4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bc2:	4b8d      	ldr	r3, [pc, #564]	@ (8002df8 <HAL_RCC_ClockConfig+0x25c>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f023 0207 	bic.w	r2, r3, #7
 8002bca:	498b      	ldr	r1, [pc, #556]	@ (8002df8 <HAL_RCC_ClockConfig+0x25c>)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bd2:	4b89      	ldr	r3, [pc, #548]	@ (8002df8 <HAL_RCC_ClockConfig+0x25c>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0307 	and.w	r3, r3, #7
 8002bda:	683a      	ldr	r2, [r7, #0]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d001      	beq.n	8002be4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e14a      	b.n	8002e7a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0302 	and.w	r3, r3, #2
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d008      	beq.n	8002c02 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bf0:	4b82      	ldr	r3, [pc, #520]	@ (8002dfc <HAL_RCC_ClockConfig+0x260>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	497f      	ldr	r1, [pc, #508]	@ (8002dfc <HAL_RCC_ClockConfig+0x260>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	f000 80dc 	beq.w	8002dc8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d13c      	bne.n	8002c92 <HAL_RCC_ClockConfig+0xf6>
 8002c18:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c1c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c20:	fa93 f3a3 	rbit	r3, r3
 8002c24:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002c26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c28:	fab3 f383 	clz	r3, r3
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	095b      	lsrs	r3, r3, #5
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	f043 0301 	orr.w	r3, r3, #1
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d102      	bne.n	8002c42 <HAL_RCC_ClockConfig+0xa6>
 8002c3c:	4b6f      	ldr	r3, [pc, #444]	@ (8002dfc <HAL_RCC_ClockConfig+0x260>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	e00f      	b.n	8002c62 <HAL_RCC_ClockConfig+0xc6>
 8002c42:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c46:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c48:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c4a:	fa93 f3a3 	rbit	r3, r3
 8002c4e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002c50:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c54:	663b      	str	r3, [r7, #96]	@ 0x60
 8002c56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c58:	fa93 f3a3 	rbit	r3, r3
 8002c5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002c5e:	4b67      	ldr	r3, [pc, #412]	@ (8002dfc <HAL_RCC_ClockConfig+0x260>)
 8002c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c62:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002c66:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002c68:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002c6a:	fa92 f2a2 	rbit	r2, r2
 8002c6e:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002c70:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002c72:	fab2 f282 	clz	r2, r2
 8002c76:	b2d2      	uxtb	r2, r2
 8002c78:	f042 0220 	orr.w	r2, r2, #32
 8002c7c:	b2d2      	uxtb	r2, r2
 8002c7e:	f002 021f 	and.w	r2, r2, #31
 8002c82:	2101      	movs	r1, #1
 8002c84:	fa01 f202 	lsl.w	r2, r1, r2
 8002c88:	4013      	ands	r3, r2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d17b      	bne.n	8002d86 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e0f3      	b.n	8002e7a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d13c      	bne.n	8002d14 <HAL_RCC_ClockConfig+0x178>
 8002c9a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c9e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ca2:	fa93 f3a3 	rbit	r3, r3
 8002ca6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002ca8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002caa:	fab3 f383 	clz	r3, r3
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	095b      	lsrs	r3, r3, #5
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	f043 0301 	orr.w	r3, r3, #1
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d102      	bne.n	8002cc4 <HAL_RCC_ClockConfig+0x128>
 8002cbe:	4b4f      	ldr	r3, [pc, #316]	@ (8002dfc <HAL_RCC_ClockConfig+0x260>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	e00f      	b.n	8002ce4 <HAL_RCC_ClockConfig+0x148>
 8002cc4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002cc8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ccc:	fa93 f3a3 	rbit	r3, r3
 8002cd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002cd2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002cd6:	643b      	str	r3, [r7, #64]	@ 0x40
 8002cd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cda:	fa93 f3a3 	rbit	r3, r3
 8002cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ce0:	4b46      	ldr	r3, [pc, #280]	@ (8002dfc <HAL_RCC_ClockConfig+0x260>)
 8002ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ce8:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002cea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002cec:	fa92 f2a2 	rbit	r2, r2
 8002cf0:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002cf2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002cf4:	fab2 f282 	clz	r2, r2
 8002cf8:	b2d2      	uxtb	r2, r2
 8002cfa:	f042 0220 	orr.w	r2, r2, #32
 8002cfe:	b2d2      	uxtb	r2, r2
 8002d00:	f002 021f 	and.w	r2, r2, #31
 8002d04:	2101      	movs	r1, #1
 8002d06:	fa01 f202 	lsl.w	r2, r1, r2
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d13a      	bne.n	8002d86 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e0b2      	b.n	8002e7a <HAL_RCC_ClockConfig+0x2de>
 8002d14:	2302      	movs	r3, #2
 8002d16:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d1a:	fa93 f3a3 	rbit	r3, r3
 8002d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002d20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d22:	fab3 f383 	clz	r3, r3
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	095b      	lsrs	r3, r3, #5
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	f043 0301 	orr.w	r3, r3, #1
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d102      	bne.n	8002d3c <HAL_RCC_ClockConfig+0x1a0>
 8002d36:	4b31      	ldr	r3, [pc, #196]	@ (8002dfc <HAL_RCC_ClockConfig+0x260>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	e00d      	b.n	8002d58 <HAL_RCC_ClockConfig+0x1bc>
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d42:	fa93 f3a3 	rbit	r3, r3
 8002d46:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d48:	2302      	movs	r3, #2
 8002d4a:	623b      	str	r3, [r7, #32]
 8002d4c:	6a3b      	ldr	r3, [r7, #32]
 8002d4e:	fa93 f3a3 	rbit	r3, r3
 8002d52:	61fb      	str	r3, [r7, #28]
 8002d54:	4b29      	ldr	r3, [pc, #164]	@ (8002dfc <HAL_RCC_ClockConfig+0x260>)
 8002d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d58:	2202      	movs	r2, #2
 8002d5a:	61ba      	str	r2, [r7, #24]
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	fa92 f2a2 	rbit	r2, r2
 8002d62:	617a      	str	r2, [r7, #20]
  return result;
 8002d64:	697a      	ldr	r2, [r7, #20]
 8002d66:	fab2 f282 	clz	r2, r2
 8002d6a:	b2d2      	uxtb	r2, r2
 8002d6c:	f042 0220 	orr.w	r2, r2, #32
 8002d70:	b2d2      	uxtb	r2, r2
 8002d72:	f002 021f 	and.w	r2, r2, #31
 8002d76:	2101      	movs	r1, #1
 8002d78:	fa01 f202 	lsl.w	r2, r1, r2
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d101      	bne.n	8002d86 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e079      	b.n	8002e7a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d86:	4b1d      	ldr	r3, [pc, #116]	@ (8002dfc <HAL_RCC_ClockConfig+0x260>)
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f023 0203 	bic.w	r2, r3, #3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	491a      	ldr	r1, [pc, #104]	@ (8002dfc <HAL_RCC_ClockConfig+0x260>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d98:	f7fe fa48 	bl	800122c <HAL_GetTick>
 8002d9c:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d9e:	e00a      	b.n	8002db6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002da0:	f7fe fa44 	bl	800122c <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e061      	b.n	8002e7a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002db6:	4b11      	ldr	r3, [pc, #68]	@ (8002dfc <HAL_RCC_ClockConfig+0x260>)
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f003 020c 	and.w	r2, r3, #12
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d1eb      	bne.n	8002da0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dc8:	4b0b      	ldr	r3, [pc, #44]	@ (8002df8 <HAL_RCC_ClockConfig+0x25c>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0307 	and.w	r3, r3, #7
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d214      	bcs.n	8002e00 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dd6:	4b08      	ldr	r3, [pc, #32]	@ (8002df8 <HAL_RCC_ClockConfig+0x25c>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f023 0207 	bic.w	r2, r3, #7
 8002dde:	4906      	ldr	r1, [pc, #24]	@ (8002df8 <HAL_RCC_ClockConfig+0x25c>)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002de6:	4b04      	ldr	r3, [pc, #16]	@ (8002df8 <HAL_RCC_ClockConfig+0x25c>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0307 	and.w	r3, r3, #7
 8002dee:	683a      	ldr	r2, [r7, #0]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d005      	beq.n	8002e00 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e040      	b.n	8002e7a <HAL_RCC_ClockConfig+0x2de>
 8002df8:	40022000 	.word	0x40022000
 8002dfc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0304 	and.w	r3, r3, #4
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d008      	beq.n	8002e1e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e0c:	4b1d      	ldr	r3, [pc, #116]	@ (8002e84 <HAL_RCC_ClockConfig+0x2e8>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	491a      	ldr	r1, [pc, #104]	@ (8002e84 <HAL_RCC_ClockConfig+0x2e8>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0308 	and.w	r3, r3, #8
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d009      	beq.n	8002e3e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e2a:	4b16      	ldr	r3, [pc, #88]	@ (8002e84 <HAL_RCC_ClockConfig+0x2e8>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	00db      	lsls	r3, r3, #3
 8002e38:	4912      	ldr	r1, [pc, #72]	@ (8002e84 <HAL_RCC_ClockConfig+0x2e8>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002e3e:	f000 f829 	bl	8002e94 <HAL_RCC_GetSysClockFreq>
 8002e42:	4601      	mov	r1, r0
 8002e44:	4b0f      	ldr	r3, [pc, #60]	@ (8002e84 <HAL_RCC_ClockConfig+0x2e8>)
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e4c:	22f0      	movs	r2, #240	@ 0xf0
 8002e4e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e50:	693a      	ldr	r2, [r7, #16]
 8002e52:	fa92 f2a2 	rbit	r2, r2
 8002e56:	60fa      	str	r2, [r7, #12]
  return result;
 8002e58:	68fa      	ldr	r2, [r7, #12]
 8002e5a:	fab2 f282 	clz	r2, r2
 8002e5e:	b2d2      	uxtb	r2, r2
 8002e60:	40d3      	lsrs	r3, r2
 8002e62:	4a09      	ldr	r2, [pc, #36]	@ (8002e88 <HAL_RCC_ClockConfig+0x2ec>)
 8002e64:	5cd3      	ldrb	r3, [r2, r3]
 8002e66:	fa21 f303 	lsr.w	r3, r1, r3
 8002e6a:	4a08      	ldr	r2, [pc, #32]	@ (8002e8c <HAL_RCC_ClockConfig+0x2f0>)
 8002e6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002e6e:	4b08      	ldr	r3, [pc, #32]	@ (8002e90 <HAL_RCC_ClockConfig+0x2f4>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7fe f996 	bl	80011a4 <HAL_InitTick>
  
  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3778      	adds	r7, #120	@ 0x78
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	40021000 	.word	0x40021000
 8002e88:	080067f8 	.word	0x080067f8
 8002e8c:	20000000 	.word	0x20000000
 8002e90:	20000004 	.word	0x20000004

08002e94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b087      	sub	sp, #28
 8002e98:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	60fb      	str	r3, [r7, #12]
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	60bb      	str	r3, [r7, #8]
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	617b      	str	r3, [r7, #20]
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002eae:	4b1e      	ldr	r3, [pc, #120]	@ (8002f28 <HAL_RCC_GetSysClockFreq+0x94>)
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f003 030c 	and.w	r3, r3, #12
 8002eba:	2b04      	cmp	r3, #4
 8002ebc:	d002      	beq.n	8002ec4 <HAL_RCC_GetSysClockFreq+0x30>
 8002ebe:	2b08      	cmp	r3, #8
 8002ec0:	d003      	beq.n	8002eca <HAL_RCC_GetSysClockFreq+0x36>
 8002ec2:	e026      	b.n	8002f12 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ec4:	4b19      	ldr	r3, [pc, #100]	@ (8002f2c <HAL_RCC_GetSysClockFreq+0x98>)
 8002ec6:	613b      	str	r3, [r7, #16]
      break;
 8002ec8:	e026      	b.n	8002f18 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	0c9b      	lsrs	r3, r3, #18
 8002ece:	f003 030f 	and.w	r3, r3, #15
 8002ed2:	4a17      	ldr	r2, [pc, #92]	@ (8002f30 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ed4:	5cd3      	ldrb	r3, [r2, r3]
 8002ed6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002ed8:	4b13      	ldr	r3, [pc, #76]	@ (8002f28 <HAL_RCC_GetSysClockFreq+0x94>)
 8002eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002edc:	f003 030f 	and.w	r3, r3, #15
 8002ee0:	4a14      	ldr	r2, [pc, #80]	@ (8002f34 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002ee2:	5cd3      	ldrb	r3, [r2, r3]
 8002ee4:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d008      	beq.n	8002f02 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ef0:	4a0e      	ldr	r2, [pc, #56]	@ (8002f2c <HAL_RCC_GetSysClockFreq+0x98>)
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	fb02 f303 	mul.w	r3, r2, r3
 8002efe:	617b      	str	r3, [r7, #20]
 8002f00:	e004      	b.n	8002f0c <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a0c      	ldr	r2, [pc, #48]	@ (8002f38 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002f06:	fb02 f303 	mul.w	r3, r2, r3
 8002f0a:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	613b      	str	r3, [r7, #16]
      break;
 8002f10:	e002      	b.n	8002f18 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f12:	4b06      	ldr	r3, [pc, #24]	@ (8002f2c <HAL_RCC_GetSysClockFreq+0x98>)
 8002f14:	613b      	str	r3, [r7, #16]
      break;
 8002f16:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f18:	693b      	ldr	r3, [r7, #16]
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	371c      	adds	r7, #28
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	007a1200 	.word	0x007a1200
 8002f30:	08006810 	.word	0x08006810
 8002f34:	08006820 	.word	0x08006820
 8002f38:	003d0900 	.word	0x003d0900

08002f3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f40:	4b03      	ldr	r3, [pc, #12]	@ (8002f50 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f42:	681b      	ldr	r3, [r3, #0]
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	20000000 	.word	0x20000000

08002f54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002f5a:	f7ff ffef 	bl	8002f3c <HAL_RCC_GetHCLKFreq>
 8002f5e:	4601      	mov	r1, r0
 8002f60:	4b0b      	ldr	r3, [pc, #44]	@ (8002f90 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002f68:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002f6c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	fa92 f2a2 	rbit	r2, r2
 8002f74:	603a      	str	r2, [r7, #0]
  return result;
 8002f76:	683a      	ldr	r2, [r7, #0]
 8002f78:	fab2 f282 	clz	r2, r2
 8002f7c:	b2d2      	uxtb	r2, r2
 8002f7e:	40d3      	lsrs	r3, r2
 8002f80:	4a04      	ldr	r2, [pc, #16]	@ (8002f94 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002f82:	5cd3      	ldrb	r3, [r2, r3]
 8002f84:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3708      	adds	r7, #8
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	40021000 	.word	0x40021000
 8002f94:	08006808 	.word	0x08006808

08002f98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002f9e:	f7ff ffcd 	bl	8002f3c <HAL_RCC_GetHCLKFreq>
 8002fa2:	4601      	mov	r1, r0
 8002fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8002fd4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002fac:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002fb0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	fa92 f2a2 	rbit	r2, r2
 8002fb8:	603a      	str	r2, [r7, #0]
  return result;
 8002fba:	683a      	ldr	r2, [r7, #0]
 8002fbc:	fab2 f282 	clz	r2, r2
 8002fc0:	b2d2      	uxtb	r2, r2
 8002fc2:	40d3      	lsrs	r3, r2
 8002fc4:	4a04      	ldr	r2, [pc, #16]	@ (8002fd8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002fc6:	5cd3      	ldrb	r3, [r2, r3]
 8002fc8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3708      	adds	r7, #8
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	08006808 	.word	0x08006808

08002fdc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b092      	sub	sp, #72	@ 0x48
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002fec:	2300      	movs	r3, #0
 8002fee:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f000 80cd 	beq.w	800319a <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003000:	4b86      	ldr	r3, [pc, #536]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003002:	69db      	ldr	r3, [r3, #28]
 8003004:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d10e      	bne.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800300c:	4b83      	ldr	r3, [pc, #524]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800300e:	69db      	ldr	r3, [r3, #28]
 8003010:	4a82      	ldr	r2, [pc, #520]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003012:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003016:	61d3      	str	r3, [r2, #28]
 8003018:	4b80      	ldr	r3, [pc, #512]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800301a:	69db      	ldr	r3, [r3, #28]
 800301c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003020:	60bb      	str	r3, [r7, #8]
 8003022:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003024:	2301      	movs	r3, #1
 8003026:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800302a:	4b7d      	ldr	r3, [pc, #500]	@ (8003220 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003032:	2b00      	cmp	r3, #0
 8003034:	d118      	bne.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003036:	4b7a      	ldr	r3, [pc, #488]	@ (8003220 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a79      	ldr	r2, [pc, #484]	@ (8003220 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800303c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003040:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003042:	f7fe f8f3 	bl	800122c <HAL_GetTick>
 8003046:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003048:	e008      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800304a:	f7fe f8ef 	bl	800122c <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	2b64      	cmp	r3, #100	@ 0x64
 8003056:	d901      	bls.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e0db      	b.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800305c:	4b70      	ldr	r3, [pc, #448]	@ (8003220 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003064:	2b00      	cmp	r3, #0
 8003066:	d0f0      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003068:	4b6c      	ldr	r3, [pc, #432]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800306a:	6a1b      	ldr	r3, [r3, #32]
 800306c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003070:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003072:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003074:	2b00      	cmp	r3, #0
 8003076:	d07d      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003080:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003082:	429a      	cmp	r2, r3
 8003084:	d076      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003086:	4b65      	ldr	r3, [pc, #404]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800308e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003090:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003094:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003098:	fa93 f3a3 	rbit	r3, r3
 800309c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800309e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80030a0:	fab3 f383 	clz	r3, r3
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	461a      	mov	r2, r3
 80030a8:	4b5e      	ldr	r3, [pc, #376]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80030aa:	4413      	add	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	461a      	mov	r2, r3
 80030b0:	2301      	movs	r3, #1
 80030b2:	6013      	str	r3, [r2, #0]
 80030b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80030b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030bc:	fa93 f3a3 	rbit	r3, r3
 80030c0:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80030c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80030c4:	fab3 f383 	clz	r3, r3
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	461a      	mov	r2, r3
 80030cc:	4b55      	ldr	r3, [pc, #340]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80030ce:	4413      	add	r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	461a      	mov	r2, r3
 80030d4:	2300      	movs	r3, #0
 80030d6:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80030d8:	4a50      	ldr	r2, [pc, #320]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030dc:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80030de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030e0:	f003 0301 	and.w	r3, r3, #1
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d045      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e8:	f7fe f8a0 	bl	800122c <HAL_GetTick>
 80030ec:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ee:	e00a      	b.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030f0:	f7fe f89c 	bl	800122c <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030fe:	4293      	cmp	r3, r2
 8003100:	d901      	bls.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e086      	b.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003106:	2302      	movs	r3, #2
 8003108:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800310c:	fa93 f3a3 	rbit	r3, r3
 8003110:	627b      	str	r3, [r7, #36]	@ 0x24
 8003112:	2302      	movs	r3, #2
 8003114:	623b      	str	r3, [r7, #32]
 8003116:	6a3b      	ldr	r3, [r7, #32]
 8003118:	fa93 f3a3 	rbit	r3, r3
 800311c:	61fb      	str	r3, [r7, #28]
  return result;
 800311e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003120:	fab3 f383 	clz	r3, r3
 8003124:	b2db      	uxtb	r3, r3
 8003126:	095b      	lsrs	r3, r3, #5
 8003128:	b2db      	uxtb	r3, r3
 800312a:	f043 0302 	orr.w	r3, r3, #2
 800312e:	b2db      	uxtb	r3, r3
 8003130:	2b02      	cmp	r3, #2
 8003132:	d102      	bne.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003134:	4b39      	ldr	r3, [pc, #228]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003136:	6a1b      	ldr	r3, [r3, #32]
 8003138:	e007      	b.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800313a:	2302      	movs	r3, #2
 800313c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	fa93 f3a3 	rbit	r3, r3
 8003144:	617b      	str	r3, [r7, #20]
 8003146:	4b35      	ldr	r3, [pc, #212]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800314a:	2202      	movs	r2, #2
 800314c:	613a      	str	r2, [r7, #16]
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	fa92 f2a2 	rbit	r2, r2
 8003154:	60fa      	str	r2, [r7, #12]
  return result;
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	fab2 f282 	clz	r2, r2
 800315c:	b2d2      	uxtb	r2, r2
 800315e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003162:	b2d2      	uxtb	r2, r2
 8003164:	f002 021f 	and.w	r2, r2, #31
 8003168:	2101      	movs	r1, #1
 800316a:	fa01 f202 	lsl.w	r2, r1, r2
 800316e:	4013      	ands	r3, r2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d0bd      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003174:	4b29      	ldr	r3, [pc, #164]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003176:	6a1b      	ldr	r3, [r3, #32]
 8003178:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	4926      	ldr	r1, [pc, #152]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003182:	4313      	orrs	r3, r2
 8003184:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003186:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800318a:	2b01      	cmp	r3, #1
 800318c:	d105      	bne.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800318e:	4b23      	ldr	r3, [pc, #140]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003190:	69db      	ldr	r3, [r3, #28]
 8003192:	4a22      	ldr	r2, [pc, #136]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003194:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003198:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d008      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031a6:	4b1d      	ldr	r3, [pc, #116]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031aa:	f023 0203 	bic.w	r2, r3, #3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	491a      	ldr	r1, [pc, #104]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0320 	and.w	r3, r3, #32
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d008      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031c4:	4b15      	ldr	r3, [pc, #84]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c8:	f023 0210 	bic.w	r2, r3, #16
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	4912      	ldr	r1, [pc, #72]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d008      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80031e2:	4b0e      	ldr	r3, [pc, #56]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031e6:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	490b      	ldr	r1, [pc, #44]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d008      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003200:	4b06      	ldr	r3, [pc, #24]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003204:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	695b      	ldr	r3, [r3, #20]
 800320c:	4903      	ldr	r1, [pc, #12]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800320e:	4313      	orrs	r3, r2
 8003210:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	3748      	adds	r7, #72	@ 0x48
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	40021000 	.word	0x40021000
 8003220:	40007000 	.word	0x40007000
 8003224:	10908100 	.word	0x10908100

08003228 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d101      	bne.n	800323a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e049      	b.n	80032ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b00      	cmp	r3, #0
 8003244:	d106      	bne.n	8003254 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f7fd fd54 	bl	8000cfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2202      	movs	r2, #2
 8003258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	3304      	adds	r3, #4
 8003264:	4619      	mov	r1, r3
 8003266:	4610      	mov	r0, r2
 8003268:	f000 fb60 	bl	800392c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3708      	adds	r7, #8
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b082      	sub	sp, #8
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d101      	bne.n	80032e8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e049      	b.n	800337c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d106      	bne.n	8003302 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f000 f841 	bl	8003384 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2202      	movs	r2, #2
 8003306:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	3304      	adds	r3, #4
 8003312:	4619      	mov	r1, r3
 8003314:	4610      	mov	r0, r2
 8003316:	f000 fb09 	bl	800392c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2201      	movs	r2, #1
 800331e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2201      	movs	r2, #1
 8003326:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2201      	movs	r2, #1
 800332e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2201      	movs	r2, #1
 8003336:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2201      	movs	r2, #1
 800333e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2201      	movs	r2, #1
 8003346:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2201      	movs	r2, #1
 800334e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2201      	movs	r2, #1
 8003356:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2201      	movs	r2, #1
 800335e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2201      	movs	r2, #1
 8003366:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2201      	movs	r2, #1
 800336e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2201      	movs	r2, #1
 8003376:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	3708      	adds	r7, #8
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d109      	bne.n	80033bc <HAL_TIM_PWM_Start+0x24>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	bf14      	ite	ne
 80033b4:	2301      	movne	r3, #1
 80033b6:	2300      	moveq	r3, #0
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	e03c      	b.n	8003436 <HAL_TIM_PWM_Start+0x9e>
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	2b04      	cmp	r3, #4
 80033c0:	d109      	bne.n	80033d6 <HAL_TIM_PWM_Start+0x3e>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	bf14      	ite	ne
 80033ce:	2301      	movne	r3, #1
 80033d0:	2300      	moveq	r3, #0
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	e02f      	b.n	8003436 <HAL_TIM_PWM_Start+0x9e>
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	2b08      	cmp	r3, #8
 80033da:	d109      	bne.n	80033f0 <HAL_TIM_PWM_Start+0x58>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	bf14      	ite	ne
 80033e8:	2301      	movne	r3, #1
 80033ea:	2300      	moveq	r3, #0
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	e022      	b.n	8003436 <HAL_TIM_PWM_Start+0x9e>
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	2b0c      	cmp	r3, #12
 80033f4:	d109      	bne.n	800340a <HAL_TIM_PWM_Start+0x72>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b01      	cmp	r3, #1
 8003400:	bf14      	ite	ne
 8003402:	2301      	movne	r3, #1
 8003404:	2300      	moveq	r3, #0
 8003406:	b2db      	uxtb	r3, r3
 8003408:	e015      	b.n	8003436 <HAL_TIM_PWM_Start+0x9e>
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	2b10      	cmp	r3, #16
 800340e:	d109      	bne.n	8003424 <HAL_TIM_PWM_Start+0x8c>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003416:	b2db      	uxtb	r3, r3
 8003418:	2b01      	cmp	r3, #1
 800341a:	bf14      	ite	ne
 800341c:	2301      	movne	r3, #1
 800341e:	2300      	moveq	r3, #0
 8003420:	b2db      	uxtb	r3, r3
 8003422:	e008      	b.n	8003436 <HAL_TIM_PWM_Start+0x9e>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800342a:	b2db      	uxtb	r3, r3
 800342c:	2b01      	cmp	r3, #1
 800342e:	bf14      	ite	ne
 8003430:	2301      	movne	r3, #1
 8003432:	2300      	moveq	r3, #0
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b00      	cmp	r3, #0
 8003438:	d001      	beq.n	800343e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e088      	b.n	8003550 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d104      	bne.n	800344e <HAL_TIM_PWM_Start+0xb6>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2202      	movs	r2, #2
 8003448:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800344c:	e023      	b.n	8003496 <HAL_TIM_PWM_Start+0xfe>
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	2b04      	cmp	r3, #4
 8003452:	d104      	bne.n	800345e <HAL_TIM_PWM_Start+0xc6>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2202      	movs	r2, #2
 8003458:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800345c:	e01b      	b.n	8003496 <HAL_TIM_PWM_Start+0xfe>
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	2b08      	cmp	r3, #8
 8003462:	d104      	bne.n	800346e <HAL_TIM_PWM_Start+0xd6>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2202      	movs	r2, #2
 8003468:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800346c:	e013      	b.n	8003496 <HAL_TIM_PWM_Start+0xfe>
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	2b0c      	cmp	r3, #12
 8003472:	d104      	bne.n	800347e <HAL_TIM_PWM_Start+0xe6>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2202      	movs	r2, #2
 8003478:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800347c:	e00b      	b.n	8003496 <HAL_TIM_PWM_Start+0xfe>
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	2b10      	cmp	r3, #16
 8003482:	d104      	bne.n	800348e <HAL_TIM_PWM_Start+0xf6>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2202      	movs	r2, #2
 8003488:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800348c:	e003      	b.n	8003496 <HAL_TIM_PWM_Start+0xfe>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2202      	movs	r2, #2
 8003492:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2201      	movs	r2, #1
 800349c:	6839      	ldr	r1, [r7, #0]
 800349e:	4618      	mov	r0, r3
 80034a0:	f000 fe08 	bl	80040b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a2b      	ldr	r2, [pc, #172]	@ (8003558 <HAL_TIM_PWM_Start+0x1c0>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d00e      	beq.n	80034cc <HAL_TIM_PWM_Start+0x134>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a2a      	ldr	r2, [pc, #168]	@ (800355c <HAL_TIM_PWM_Start+0x1c4>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d009      	beq.n	80034cc <HAL_TIM_PWM_Start+0x134>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a28      	ldr	r2, [pc, #160]	@ (8003560 <HAL_TIM_PWM_Start+0x1c8>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d004      	beq.n	80034cc <HAL_TIM_PWM_Start+0x134>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a27      	ldr	r2, [pc, #156]	@ (8003564 <HAL_TIM_PWM_Start+0x1cc>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d101      	bne.n	80034d0 <HAL_TIM_PWM_Start+0x138>
 80034cc:	2301      	movs	r3, #1
 80034ce:	e000      	b.n	80034d2 <HAL_TIM_PWM_Start+0x13a>
 80034d0:	2300      	movs	r3, #0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d007      	beq.n	80034e6 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80034e4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a1b      	ldr	r2, [pc, #108]	@ (8003558 <HAL_TIM_PWM_Start+0x1c0>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d00e      	beq.n	800350e <HAL_TIM_PWM_Start+0x176>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034f8:	d009      	beq.n	800350e <HAL_TIM_PWM_Start+0x176>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a1a      	ldr	r2, [pc, #104]	@ (8003568 <HAL_TIM_PWM_Start+0x1d0>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d004      	beq.n	800350e <HAL_TIM_PWM_Start+0x176>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a14      	ldr	r2, [pc, #80]	@ (800355c <HAL_TIM_PWM_Start+0x1c4>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d115      	bne.n	800353a <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	689a      	ldr	r2, [r3, #8]
 8003514:	4b15      	ldr	r3, [pc, #84]	@ (800356c <HAL_TIM_PWM_Start+0x1d4>)
 8003516:	4013      	ands	r3, r2
 8003518:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2b06      	cmp	r3, #6
 800351e:	d015      	beq.n	800354c <HAL_TIM_PWM_Start+0x1b4>
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003526:	d011      	beq.n	800354c <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f042 0201 	orr.w	r2, r2, #1
 8003536:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003538:	e008      	b.n	800354c <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f042 0201 	orr.w	r2, r2, #1
 8003548:	601a      	str	r2, [r3, #0]
 800354a:	e000      	b.n	800354e <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800354c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800354e:	2300      	movs	r3, #0
}
 8003550:	4618      	mov	r0, r3
 8003552:	3710      	adds	r7, #16
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	40012c00 	.word	0x40012c00
 800355c:	40014000 	.word	0x40014000
 8003560:	40014400 	.word	0x40014400
 8003564:	40014800 	.word	0x40014800
 8003568:	40000400 	.word	0x40000400
 800356c:	00010007 	.word	0x00010007

08003570 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b086      	sub	sp, #24
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800357c:	2300      	movs	r3, #0
 800357e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003586:	2b01      	cmp	r3, #1
 8003588:	d101      	bne.n	800358e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800358a:	2302      	movs	r3, #2
 800358c:	e0ff      	b.n	800378e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2201      	movs	r2, #1
 8003592:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2b14      	cmp	r3, #20
 800359a:	f200 80f0 	bhi.w	800377e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800359e:	a201      	add	r2, pc, #4	@ (adr r2, 80035a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80035a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035a4:	080035f9 	.word	0x080035f9
 80035a8:	0800377f 	.word	0x0800377f
 80035ac:	0800377f 	.word	0x0800377f
 80035b0:	0800377f 	.word	0x0800377f
 80035b4:	08003639 	.word	0x08003639
 80035b8:	0800377f 	.word	0x0800377f
 80035bc:	0800377f 	.word	0x0800377f
 80035c0:	0800377f 	.word	0x0800377f
 80035c4:	0800367b 	.word	0x0800367b
 80035c8:	0800377f 	.word	0x0800377f
 80035cc:	0800377f 	.word	0x0800377f
 80035d0:	0800377f 	.word	0x0800377f
 80035d4:	080036bb 	.word	0x080036bb
 80035d8:	0800377f 	.word	0x0800377f
 80035dc:	0800377f 	.word	0x0800377f
 80035e0:	0800377f 	.word	0x0800377f
 80035e4:	080036fd 	.word	0x080036fd
 80035e8:	0800377f 	.word	0x0800377f
 80035ec:	0800377f 	.word	0x0800377f
 80035f0:	0800377f 	.word	0x0800377f
 80035f4:	0800373d 	.word	0x0800373d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68b9      	ldr	r1, [r7, #8]
 80035fe:	4618      	mov	r0, r3
 8003600:	f000 fa18 	bl	8003a34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	699a      	ldr	r2, [r3, #24]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f042 0208 	orr.w	r2, r2, #8
 8003612:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	699a      	ldr	r2, [r3, #24]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f022 0204 	bic.w	r2, r2, #4
 8003622:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	6999      	ldr	r1, [r3, #24]
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	691a      	ldr	r2, [r3, #16]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	430a      	orrs	r2, r1
 8003634:	619a      	str	r2, [r3, #24]
      break;
 8003636:	e0a5      	b.n	8003784 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68b9      	ldr	r1, [r7, #8]
 800363e:	4618      	mov	r0, r3
 8003640:	f000 fa7e 	bl	8003b40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	699a      	ldr	r2, [r3, #24]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003652:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	699a      	ldr	r2, [r3, #24]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003662:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6999      	ldr	r1, [r3, #24]
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	021a      	lsls	r2, r3, #8
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	430a      	orrs	r2, r1
 8003676:	619a      	str	r2, [r3, #24]
      break;
 8003678:	e084      	b.n	8003784 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68b9      	ldr	r1, [r7, #8]
 8003680:	4618      	mov	r0, r3
 8003682:	f000 fadd 	bl	8003c40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	69da      	ldr	r2, [r3, #28]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f042 0208 	orr.w	r2, r2, #8
 8003694:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	69da      	ldr	r2, [r3, #28]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f022 0204 	bic.w	r2, r2, #4
 80036a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	69d9      	ldr	r1, [r3, #28]
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	691a      	ldr	r2, [r3, #16]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	430a      	orrs	r2, r1
 80036b6:	61da      	str	r2, [r3, #28]
      break;
 80036b8:	e064      	b.n	8003784 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68b9      	ldr	r1, [r7, #8]
 80036c0:	4618      	mov	r0, r3
 80036c2:	f000 fb3b 	bl	8003d3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	69da      	ldr	r2, [r3, #28]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	69da      	ldr	r2, [r3, #28]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	69d9      	ldr	r1, [r3, #28]
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	021a      	lsls	r2, r3, #8
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	430a      	orrs	r2, r1
 80036f8:	61da      	str	r2, [r3, #28]
      break;
 80036fa:	e043      	b.n	8003784 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	68b9      	ldr	r1, [r7, #8]
 8003702:	4618      	mov	r0, r3
 8003704:	f000 fb7e 	bl	8003e04 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f042 0208 	orr.w	r2, r2, #8
 8003716:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f022 0204 	bic.w	r2, r2, #4
 8003726:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	691a      	ldr	r2, [r3, #16]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	430a      	orrs	r2, r1
 8003738:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800373a:	e023      	b.n	8003784 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68b9      	ldr	r1, [r7, #8]
 8003742:	4618      	mov	r0, r3
 8003744:	f000 fbbc 	bl	8003ec0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003756:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003766:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	021a      	lsls	r2, r3, #8
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	430a      	orrs	r2, r1
 800377a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800377c:	e002      	b.n	8003784 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	75fb      	strb	r3, [r7, #23]
      break;
 8003782:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800378c:	7dfb      	ldrb	r3, [r7, #23]
}
 800378e:	4618      	mov	r0, r3
 8003790:	3718      	adds	r7, #24
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop

08003798 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037a2:	2300      	movs	r3, #0
 80037a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d101      	bne.n	80037b4 <HAL_TIM_ConfigClockSource+0x1c>
 80037b0:	2302      	movs	r3, #2
 80037b2:	e0b6      	b.n	8003922 <HAL_TIM_ConfigClockSource+0x18a>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2202      	movs	r2, #2
 80037c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037d2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80037d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80037de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68ba      	ldr	r2, [r7, #8]
 80037e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037f0:	d03e      	beq.n	8003870 <HAL_TIM_ConfigClockSource+0xd8>
 80037f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037f6:	f200 8087 	bhi.w	8003908 <HAL_TIM_ConfigClockSource+0x170>
 80037fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037fe:	f000 8086 	beq.w	800390e <HAL_TIM_ConfigClockSource+0x176>
 8003802:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003806:	d87f      	bhi.n	8003908 <HAL_TIM_ConfigClockSource+0x170>
 8003808:	2b70      	cmp	r3, #112	@ 0x70
 800380a:	d01a      	beq.n	8003842 <HAL_TIM_ConfigClockSource+0xaa>
 800380c:	2b70      	cmp	r3, #112	@ 0x70
 800380e:	d87b      	bhi.n	8003908 <HAL_TIM_ConfigClockSource+0x170>
 8003810:	2b60      	cmp	r3, #96	@ 0x60
 8003812:	d050      	beq.n	80038b6 <HAL_TIM_ConfigClockSource+0x11e>
 8003814:	2b60      	cmp	r3, #96	@ 0x60
 8003816:	d877      	bhi.n	8003908 <HAL_TIM_ConfigClockSource+0x170>
 8003818:	2b50      	cmp	r3, #80	@ 0x50
 800381a:	d03c      	beq.n	8003896 <HAL_TIM_ConfigClockSource+0xfe>
 800381c:	2b50      	cmp	r3, #80	@ 0x50
 800381e:	d873      	bhi.n	8003908 <HAL_TIM_ConfigClockSource+0x170>
 8003820:	2b40      	cmp	r3, #64	@ 0x40
 8003822:	d058      	beq.n	80038d6 <HAL_TIM_ConfigClockSource+0x13e>
 8003824:	2b40      	cmp	r3, #64	@ 0x40
 8003826:	d86f      	bhi.n	8003908 <HAL_TIM_ConfigClockSource+0x170>
 8003828:	2b30      	cmp	r3, #48	@ 0x30
 800382a:	d064      	beq.n	80038f6 <HAL_TIM_ConfigClockSource+0x15e>
 800382c:	2b30      	cmp	r3, #48	@ 0x30
 800382e:	d86b      	bhi.n	8003908 <HAL_TIM_ConfigClockSource+0x170>
 8003830:	2b20      	cmp	r3, #32
 8003832:	d060      	beq.n	80038f6 <HAL_TIM_ConfigClockSource+0x15e>
 8003834:	2b20      	cmp	r3, #32
 8003836:	d867      	bhi.n	8003908 <HAL_TIM_ConfigClockSource+0x170>
 8003838:	2b00      	cmp	r3, #0
 800383a:	d05c      	beq.n	80038f6 <HAL_TIM_ConfigClockSource+0x15e>
 800383c:	2b10      	cmp	r3, #16
 800383e:	d05a      	beq.n	80038f6 <HAL_TIM_ConfigClockSource+0x15e>
 8003840:	e062      	b.n	8003908 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003852:	f000 fc0f 	bl	8004074 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003864:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68ba      	ldr	r2, [r7, #8]
 800386c:	609a      	str	r2, [r3, #8]
      break;
 800386e:	e04f      	b.n	8003910 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003880:	f000 fbf8 	bl	8004074 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	689a      	ldr	r2, [r3, #8]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003892:	609a      	str	r2, [r3, #8]
      break;
 8003894:	e03c      	b.n	8003910 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038a2:	461a      	mov	r2, r3
 80038a4:	f000 fb6c 	bl	8003f80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2150      	movs	r1, #80	@ 0x50
 80038ae:	4618      	mov	r0, r3
 80038b0:	f000 fbc5 	bl	800403e <TIM_ITRx_SetConfig>
      break;
 80038b4:	e02c      	b.n	8003910 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80038c2:	461a      	mov	r2, r3
 80038c4:	f000 fb8b 	bl	8003fde <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2160      	movs	r1, #96	@ 0x60
 80038ce:	4618      	mov	r0, r3
 80038d0:	f000 fbb5 	bl	800403e <TIM_ITRx_SetConfig>
      break;
 80038d4:	e01c      	b.n	8003910 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038e2:	461a      	mov	r2, r3
 80038e4:	f000 fb4c 	bl	8003f80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2140      	movs	r1, #64	@ 0x40
 80038ee:	4618      	mov	r0, r3
 80038f0:	f000 fba5 	bl	800403e <TIM_ITRx_SetConfig>
      break;
 80038f4:	e00c      	b.n	8003910 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4619      	mov	r1, r3
 8003900:	4610      	mov	r0, r2
 8003902:	f000 fb9c 	bl	800403e <TIM_ITRx_SetConfig>
      break;
 8003906:	e003      	b.n	8003910 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	73fb      	strb	r3, [r7, #15]
      break;
 800390c:	e000      	b.n	8003910 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800390e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003920:	7bfb      	ldrb	r3, [r7, #15]
}
 8003922:	4618      	mov	r0, r3
 8003924:	3710      	adds	r7, #16
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
	...

0800392c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800392c:	b480      	push	{r7}
 800392e:	b085      	sub	sp, #20
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	4a38      	ldr	r2, [pc, #224]	@ (8003a20 <TIM_Base_SetConfig+0xf4>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d007      	beq.n	8003954 <TIM_Base_SetConfig+0x28>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800394a:	d003      	beq.n	8003954 <TIM_Base_SetConfig+0x28>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a35      	ldr	r2, [pc, #212]	@ (8003a24 <TIM_Base_SetConfig+0xf8>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d108      	bne.n	8003966 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800395a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	68fa      	ldr	r2, [r7, #12]
 8003962:	4313      	orrs	r3, r2
 8003964:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a2d      	ldr	r2, [pc, #180]	@ (8003a20 <TIM_Base_SetConfig+0xf4>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d013      	beq.n	8003996 <TIM_Base_SetConfig+0x6a>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003974:	d00f      	beq.n	8003996 <TIM_Base_SetConfig+0x6a>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a2a      	ldr	r2, [pc, #168]	@ (8003a24 <TIM_Base_SetConfig+0xf8>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d00b      	beq.n	8003996 <TIM_Base_SetConfig+0x6a>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a29      	ldr	r2, [pc, #164]	@ (8003a28 <TIM_Base_SetConfig+0xfc>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d007      	beq.n	8003996 <TIM_Base_SetConfig+0x6a>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a28      	ldr	r2, [pc, #160]	@ (8003a2c <TIM_Base_SetConfig+0x100>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d003      	beq.n	8003996 <TIM_Base_SetConfig+0x6a>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a27      	ldr	r2, [pc, #156]	@ (8003a30 <TIM_Base_SetConfig+0x104>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d108      	bne.n	80039a8 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800399c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	68fa      	ldr	r2, [r7, #12]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	695b      	ldr	r3, [r3, #20]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	68fa      	ldr	r2, [r7, #12]
 80039ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	689a      	ldr	r2, [r3, #8]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a14      	ldr	r2, [pc, #80]	@ (8003a20 <TIM_Base_SetConfig+0xf4>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d00b      	beq.n	80039ec <TIM_Base_SetConfig+0xc0>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a14      	ldr	r2, [pc, #80]	@ (8003a28 <TIM_Base_SetConfig+0xfc>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d007      	beq.n	80039ec <TIM_Base_SetConfig+0xc0>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a13      	ldr	r2, [pc, #76]	@ (8003a2c <TIM_Base_SetConfig+0x100>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d003      	beq.n	80039ec <TIM_Base_SetConfig+0xc0>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a12      	ldr	r2, [pc, #72]	@ (8003a30 <TIM_Base_SetConfig+0x104>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d103      	bne.n	80039f4 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	691a      	ldr	r2, [r3, #16]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d105      	bne.n	8003a12 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	f023 0201 	bic.w	r2, r3, #1
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	611a      	str	r2, [r3, #16]
  }
}
 8003a12:	bf00      	nop
 8003a14:	3714      	adds	r7, #20
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	40012c00 	.word	0x40012c00
 8003a24:	40000400 	.word	0x40000400
 8003a28:	40014000 	.word	0x40014000
 8003a2c:	40014400 	.word	0x40014400
 8003a30:	40014800 	.word	0x40014800

08003a34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b087      	sub	sp, #28
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a1b      	ldr	r3, [r3, #32]
 8003a48:	f023 0201 	bic.w	r2, r3, #1
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f023 0303 	bic.w	r3, r3, #3
 8003a6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	f023 0302 	bic.w	r3, r3, #2
 8003a80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	697a      	ldr	r2, [r7, #20]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a28      	ldr	r2, [pc, #160]	@ (8003b30 <TIM_OC1_SetConfig+0xfc>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d00b      	beq.n	8003aac <TIM_OC1_SetConfig+0x78>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a27      	ldr	r2, [pc, #156]	@ (8003b34 <TIM_OC1_SetConfig+0x100>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d007      	beq.n	8003aac <TIM_OC1_SetConfig+0x78>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a26      	ldr	r2, [pc, #152]	@ (8003b38 <TIM_OC1_SetConfig+0x104>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d003      	beq.n	8003aac <TIM_OC1_SetConfig+0x78>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a25      	ldr	r2, [pc, #148]	@ (8003b3c <TIM_OC1_SetConfig+0x108>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d10c      	bne.n	8003ac6 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	f023 0308 	bic.w	r3, r3, #8
 8003ab2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	697a      	ldr	r2, [r7, #20]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	f023 0304 	bic.w	r3, r3, #4
 8003ac4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a19      	ldr	r2, [pc, #100]	@ (8003b30 <TIM_OC1_SetConfig+0xfc>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d00b      	beq.n	8003ae6 <TIM_OC1_SetConfig+0xb2>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a18      	ldr	r2, [pc, #96]	@ (8003b34 <TIM_OC1_SetConfig+0x100>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d007      	beq.n	8003ae6 <TIM_OC1_SetConfig+0xb2>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a17      	ldr	r2, [pc, #92]	@ (8003b38 <TIM_OC1_SetConfig+0x104>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d003      	beq.n	8003ae6 <TIM_OC1_SetConfig+0xb2>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a16      	ldr	r2, [pc, #88]	@ (8003b3c <TIM_OC1_SetConfig+0x108>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d111      	bne.n	8003b0a <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003aec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003af4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	693a      	ldr	r2, [r7, #16]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	693a      	ldr	r2, [r7, #16]
 8003b0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	685a      	ldr	r2, [r3, #4]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	697a      	ldr	r2, [r7, #20]
 8003b22:	621a      	str	r2, [r3, #32]
}
 8003b24:	bf00      	nop
 8003b26:	371c      	adds	r7, #28
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr
 8003b30:	40012c00 	.word	0x40012c00
 8003b34:	40014000 	.word	0x40014000
 8003b38:	40014400 	.word	0x40014400
 8003b3c:	40014800 	.word	0x40014800

08003b40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b087      	sub	sp, #28
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a1b      	ldr	r3, [r3, #32]
 8003b4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a1b      	ldr	r3, [r3, #32]
 8003b54:	f023 0210 	bic.w	r2, r3, #16
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	021b      	lsls	r3, r3, #8
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	f023 0320 	bic.w	r3, r3, #32
 8003b8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	011b      	lsls	r3, r3, #4
 8003b96:	697a      	ldr	r2, [r7, #20]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a24      	ldr	r2, [pc, #144]	@ (8003c30 <TIM_OC2_SetConfig+0xf0>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d10d      	bne.n	8003bc0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003baa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	011b      	lsls	r3, r3, #4
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003bbe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a1b      	ldr	r2, [pc, #108]	@ (8003c30 <TIM_OC2_SetConfig+0xf0>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d00b      	beq.n	8003be0 <TIM_OC2_SetConfig+0xa0>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a1a      	ldr	r2, [pc, #104]	@ (8003c34 <TIM_OC2_SetConfig+0xf4>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d007      	beq.n	8003be0 <TIM_OC2_SetConfig+0xa0>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a19      	ldr	r2, [pc, #100]	@ (8003c38 <TIM_OC2_SetConfig+0xf8>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d003      	beq.n	8003be0 <TIM_OC2_SetConfig+0xa0>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a18      	ldr	r2, [pc, #96]	@ (8003c3c <TIM_OC2_SetConfig+0xfc>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d113      	bne.n	8003c08 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003be6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003bee:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	695b      	ldr	r3, [r3, #20]
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	693a      	ldr	r2, [r7, #16]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	699b      	ldr	r3, [r3, #24]
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	685a      	ldr	r2, [r3, #4]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	621a      	str	r2, [r3, #32]
}
 8003c22:	bf00      	nop
 8003c24:	371c      	adds	r7, #28
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	40012c00 	.word	0x40012c00
 8003c34:	40014000 	.word	0x40014000
 8003c38:	40014400 	.word	0x40014400
 8003c3c:	40014800 	.word	0x40014800

08003c40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b087      	sub	sp, #28
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a1b      	ldr	r3, [r3, #32]
 8003c54:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	69db      	ldr	r3, [r3, #28]
 8003c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f023 0303 	bic.w	r3, r3, #3
 8003c7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68fa      	ldr	r2, [r7, #12]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003c8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	021b      	lsls	r3, r3, #8
 8003c94:	697a      	ldr	r2, [r7, #20]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a23      	ldr	r2, [pc, #140]	@ (8003d2c <TIM_OC3_SetConfig+0xec>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d10d      	bne.n	8003cbe <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003ca8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	021b      	lsls	r3, r3, #8
 8003cb0:	697a      	ldr	r2, [r7, #20]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003cbc:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a1a      	ldr	r2, [pc, #104]	@ (8003d2c <TIM_OC3_SetConfig+0xec>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d00b      	beq.n	8003cde <TIM_OC3_SetConfig+0x9e>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a19      	ldr	r2, [pc, #100]	@ (8003d30 <TIM_OC3_SetConfig+0xf0>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d007      	beq.n	8003cde <TIM_OC3_SetConfig+0x9e>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a18      	ldr	r2, [pc, #96]	@ (8003d34 <TIM_OC3_SetConfig+0xf4>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d003      	beq.n	8003cde <TIM_OC3_SetConfig+0x9e>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a17      	ldr	r2, [pc, #92]	@ (8003d38 <TIM_OC3_SetConfig+0xf8>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d113      	bne.n	8003d06 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003ce4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003cec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	011b      	lsls	r3, r3, #4
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	699b      	ldr	r3, [r3, #24]
 8003cfe:	011b      	lsls	r3, r3, #4
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	685a      	ldr	r2, [r3, #4]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	697a      	ldr	r2, [r7, #20]
 8003d1e:	621a      	str	r2, [r3, #32]
}
 8003d20:	bf00      	nop
 8003d22:	371c      	adds	r7, #28
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr
 8003d2c:	40012c00 	.word	0x40012c00
 8003d30:	40014000 	.word	0x40014000
 8003d34:	40014400 	.word	0x40014400
 8003d38:	40014800 	.word	0x40014800

08003d3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b087      	sub	sp, #28
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a1b      	ldr	r3, [r3, #32]
 8003d50:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	69db      	ldr	r3, [r3, #28]
 8003d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	021b      	lsls	r3, r3, #8
 8003d7e:	68fa      	ldr	r2, [r7, #12]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003d8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	031b      	lsls	r3, r3, #12
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a16      	ldr	r2, [pc, #88]	@ (8003df4 <TIM_OC4_SetConfig+0xb8>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d00b      	beq.n	8003db8 <TIM_OC4_SetConfig+0x7c>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a15      	ldr	r2, [pc, #84]	@ (8003df8 <TIM_OC4_SetConfig+0xbc>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d007      	beq.n	8003db8 <TIM_OC4_SetConfig+0x7c>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a14      	ldr	r2, [pc, #80]	@ (8003dfc <TIM_OC4_SetConfig+0xc0>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d003      	beq.n	8003db8 <TIM_OC4_SetConfig+0x7c>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a13      	ldr	r2, [pc, #76]	@ (8003e00 <TIM_OC4_SetConfig+0xc4>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d109      	bne.n	8003dcc <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003dbe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	695b      	ldr	r3, [r3, #20]
 8003dc4:	019b      	lsls	r3, r3, #6
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	697a      	ldr	r2, [r7, #20]
 8003dd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	685a      	ldr	r2, [r3, #4]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	693a      	ldr	r2, [r7, #16]
 8003de4:	621a      	str	r2, [r3, #32]
}
 8003de6:	bf00      	nop
 8003de8:	371c      	adds	r7, #28
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	40012c00 	.word	0x40012c00
 8003df8:	40014000 	.word	0x40014000
 8003dfc:	40014400 	.word	0x40014400
 8003e00:	40014800 	.word	0x40014800

08003e04 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b087      	sub	sp, #28
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a1b      	ldr	r3, [r3, #32]
 8003e12:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a1b      	ldr	r3, [r3, #32]
 8003e18:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003e48:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	041b      	lsls	r3, r3, #16
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a15      	ldr	r2, [pc, #84]	@ (8003eb0 <TIM_OC5_SetConfig+0xac>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d00b      	beq.n	8003e76 <TIM_OC5_SetConfig+0x72>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a14      	ldr	r2, [pc, #80]	@ (8003eb4 <TIM_OC5_SetConfig+0xb0>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d007      	beq.n	8003e76 <TIM_OC5_SetConfig+0x72>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a13      	ldr	r2, [pc, #76]	@ (8003eb8 <TIM_OC5_SetConfig+0xb4>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d003      	beq.n	8003e76 <TIM_OC5_SetConfig+0x72>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a12      	ldr	r2, [pc, #72]	@ (8003ebc <TIM_OC5_SetConfig+0xb8>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d109      	bne.n	8003e8a <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e7c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	021b      	lsls	r3, r3, #8
 8003e84:	697a      	ldr	r2, [r7, #20]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	697a      	ldr	r2, [r7, #20]
 8003e8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	685a      	ldr	r2, [r3, #4]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	621a      	str	r2, [r3, #32]
}
 8003ea4:	bf00      	nop
 8003ea6:	371c      	adds	r7, #28
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr
 8003eb0:	40012c00 	.word	0x40012c00
 8003eb4:	40014000 	.word	0x40014000
 8003eb8:	40014400 	.word	0x40014400
 8003ebc:	40014800 	.word	0x40014800

08003ec0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b087      	sub	sp, #28
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a1b      	ldr	r3, [r3, #32]
 8003ece:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a1b      	ldr	r3, [r3, #32]
 8003ed4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003eee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ef2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	021b      	lsls	r3, r3, #8
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003f06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	051b      	lsls	r3, r3, #20
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a16      	ldr	r2, [pc, #88]	@ (8003f70 <TIM_OC6_SetConfig+0xb0>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d00b      	beq.n	8003f34 <TIM_OC6_SetConfig+0x74>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a15      	ldr	r2, [pc, #84]	@ (8003f74 <TIM_OC6_SetConfig+0xb4>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d007      	beq.n	8003f34 <TIM_OC6_SetConfig+0x74>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a14      	ldr	r2, [pc, #80]	@ (8003f78 <TIM_OC6_SetConfig+0xb8>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d003      	beq.n	8003f34 <TIM_OC6_SetConfig+0x74>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a13      	ldr	r2, [pc, #76]	@ (8003f7c <TIM_OC6_SetConfig+0xbc>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d109      	bne.n	8003f48 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f3a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	695b      	ldr	r3, [r3, #20]
 8003f40:	029b      	lsls	r3, r3, #10
 8003f42:	697a      	ldr	r2, [r7, #20]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	685a      	ldr	r2, [r3, #4]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	693a      	ldr	r2, [r7, #16]
 8003f60:	621a      	str	r2, [r3, #32]
}
 8003f62:	bf00      	nop
 8003f64:	371c      	adds	r7, #28
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	40012c00 	.word	0x40012c00
 8003f74:	40014000 	.word	0x40014000
 8003f78:	40014400 	.word	0x40014400
 8003f7c:	40014800 	.word	0x40014800

08003f80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b087      	sub	sp, #28
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6a1b      	ldr	r3, [r3, #32]
 8003f90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6a1b      	ldr	r3, [r3, #32]
 8003f96:	f023 0201 	bic.w	r2, r3, #1
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003faa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	011b      	lsls	r3, r3, #4
 8003fb0:	693a      	ldr	r2, [r7, #16]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	f023 030a 	bic.w	r3, r3, #10
 8003fbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fbe:	697a      	ldr	r2, [r7, #20]
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	693a      	ldr	r2, [r7, #16]
 8003fca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	697a      	ldr	r2, [r7, #20]
 8003fd0:	621a      	str	r2, [r3, #32]
}
 8003fd2:	bf00      	nop
 8003fd4:	371c      	adds	r7, #28
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr

08003fde <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fde:	b480      	push	{r7}
 8003fe0:	b087      	sub	sp, #28
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	60f8      	str	r0, [r7, #12]
 8003fe6:	60b9      	str	r1, [r7, #8]
 8003fe8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6a1b      	ldr	r3, [r3, #32]
 8003fee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6a1b      	ldr	r3, [r3, #32]
 8003ff4:	f023 0210 	bic.w	r2, r3, #16
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004008:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	031b      	lsls	r3, r3, #12
 800400e:	693a      	ldr	r2, [r7, #16]
 8004010:	4313      	orrs	r3, r2
 8004012:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800401a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	011b      	lsls	r3, r3, #4
 8004020:	697a      	ldr	r2, [r7, #20]
 8004022:	4313      	orrs	r3, r2
 8004024:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	697a      	ldr	r2, [r7, #20]
 8004030:	621a      	str	r2, [r3, #32]
}
 8004032:	bf00      	nop
 8004034:	371c      	adds	r7, #28
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr

0800403e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800403e:	b480      	push	{r7}
 8004040:	b085      	sub	sp, #20
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
 8004046:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004054:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004056:	683a      	ldr	r2, [r7, #0]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	4313      	orrs	r3, r2
 800405c:	f043 0307 	orr.w	r3, r3, #7
 8004060:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	609a      	str	r2, [r3, #8]
}
 8004068:	bf00      	nop
 800406a:	3714      	adds	r7, #20
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004074:	b480      	push	{r7}
 8004076:	b087      	sub	sp, #28
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	607a      	str	r2, [r7, #4]
 8004080:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800408e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	021a      	lsls	r2, r3, #8
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	431a      	orrs	r2, r3
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	4313      	orrs	r3, r2
 800409c:	697a      	ldr	r2, [r7, #20]
 800409e:	4313      	orrs	r3, r2
 80040a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	697a      	ldr	r2, [r7, #20]
 80040a6:	609a      	str	r2, [r3, #8]
}
 80040a8:	bf00      	nop
 80040aa:	371c      	adds	r7, #28
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b087      	sub	sp, #28
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	f003 031f 	and.w	r3, r3, #31
 80040c6:	2201      	movs	r2, #1
 80040c8:	fa02 f303 	lsl.w	r3, r2, r3
 80040cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6a1a      	ldr	r2, [r3, #32]
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	43db      	mvns	r3, r3
 80040d6:	401a      	ands	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6a1a      	ldr	r2, [r3, #32]
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	f003 031f 	and.w	r3, r3, #31
 80040e6:	6879      	ldr	r1, [r7, #4]
 80040e8:	fa01 f303 	lsl.w	r3, r1, r3
 80040ec:	431a      	orrs	r2, r3
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	621a      	str	r2, [r3, #32]
}
 80040f2:	bf00      	nop
 80040f4:	371c      	adds	r7, #28
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
	...

08004100 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004100:	b480      	push	{r7}
 8004102:	b085      	sub	sp, #20
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004110:	2b01      	cmp	r3, #1
 8004112:	d101      	bne.n	8004118 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004114:	2302      	movs	r3, #2
 8004116:	e054      	b.n	80041c2 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2202      	movs	r2, #2
 8004124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a24      	ldr	r2, [pc, #144]	@ (80041d0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d108      	bne.n	8004154 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004148:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	68fa      	ldr	r2, [r7, #12]
 8004150:	4313      	orrs	r3, r2
 8004152:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800415a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	4313      	orrs	r3, r2
 8004164:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a17      	ldr	r2, [pc, #92]	@ (80041d0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d00e      	beq.n	8004196 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004180:	d009      	beq.n	8004196 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a13      	ldr	r2, [pc, #76]	@ (80041d4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d004      	beq.n	8004196 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a11      	ldr	r2, [pc, #68]	@ (80041d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d10c      	bne.n	80041b0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800419c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	68ba      	ldr	r2, [r7, #8]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68ba      	ldr	r2, [r7, #8]
 80041ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3714      	adds	r7, #20
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	40012c00 	.word	0x40012c00
 80041d4:	40000400 	.word	0x40000400
 80041d8:	40014000 	.word	0x40014000

080041dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80041dc:	b480      	push	{r7}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80041e6:	2300      	movs	r3, #0
 80041e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d101      	bne.n	80041f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80041f4:	2302      	movs	r3, #2
 80041f6:	e060      	b.n	80042ba <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	4313      	orrs	r3, r2
 800420c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	4313      	orrs	r3, r2
 800421a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	4313      	orrs	r3, r2
 8004228:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4313      	orrs	r3, r2
 8004236:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	4313      	orrs	r3, r2
 8004244:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	695b      	ldr	r3, [r3, #20]
 8004250:	4313      	orrs	r3, r2
 8004252:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800425e:	4313      	orrs	r3, r2
 8004260:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	041b      	lsls	r3, r3, #16
 800426e:	4313      	orrs	r3, r2
 8004270:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a14      	ldr	r2, [pc, #80]	@ (80042c8 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d115      	bne.n	80042a8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004286:	051b      	lsls	r3, r3, #20
 8004288:	4313      	orrs	r3, r2
 800428a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	69db      	ldr	r3, [r3, #28]
 8004296:	4313      	orrs	r3, r2
 8004298:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	6a1b      	ldr	r3, [r3, #32]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	68fa      	ldr	r2, [r7, #12]
 80042ae:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3714      	adds	r7, #20
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	40012c00 	.word	0x40012c00

080042cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d101      	bne.n	80042de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e040      	b.n	8004360 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d106      	bne.n	80042f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f7fc fdb6 	bl	8000e60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2224      	movs	r2, #36	@ 0x24
 80042f8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f022 0201 	bic.w	r2, r2, #1
 8004308:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800430e:	2b00      	cmp	r3, #0
 8004310:	d002      	beq.n	8004318 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 fd32 	bl	8004d7c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f000 fbf9 	bl	8004b10 <UART_SetConfig>
 800431e:	4603      	mov	r3, r0
 8004320:	2b01      	cmp	r3, #1
 8004322:	d101      	bne.n	8004328 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e01b      	b.n	8004360 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	685a      	ldr	r2, [r3, #4]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004336:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	689a      	ldr	r2, [r3, #8]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004346:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f042 0201 	orr.w	r2, r2, #1
 8004356:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f000 fdb1 	bl	8004ec0 <UART_CheckIdleState>
 800435e:	4603      	mov	r3, r0
}
 8004360:	4618      	mov	r0, r3
 8004362:	3708      	adds	r7, #8
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b08a      	sub	sp, #40	@ 0x28
 800436c:	af02      	add	r7, sp, #8
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	603b      	str	r3, [r7, #0]
 8004374:	4613      	mov	r3, r2
 8004376:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800437c:	2b20      	cmp	r3, #32
 800437e:	d177      	bne.n	8004470 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d002      	beq.n	800438c <HAL_UART_Transmit+0x24>
 8004386:	88fb      	ldrh	r3, [r7, #6]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d101      	bne.n	8004390 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e070      	b.n	8004472 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2221      	movs	r2, #33	@ 0x21
 800439c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800439e:	f7fc ff45 	bl	800122c <HAL_GetTick>
 80043a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	88fa      	ldrh	r2, [r7, #6]
 80043a8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	88fa      	ldrh	r2, [r7, #6]
 80043b0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043bc:	d108      	bne.n	80043d0 <HAL_UART_Transmit+0x68>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d104      	bne.n	80043d0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80043c6:	2300      	movs	r3, #0
 80043c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	61bb      	str	r3, [r7, #24]
 80043ce:	e003      	b.n	80043d8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043d4:	2300      	movs	r3, #0
 80043d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80043d8:	e02f      	b.n	800443a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	9300      	str	r3, [sp, #0]
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	2200      	movs	r2, #0
 80043e2:	2180      	movs	r1, #128	@ 0x80
 80043e4:	68f8      	ldr	r0, [r7, #12]
 80043e6:	f000 fe13 	bl	8005010 <UART_WaitOnFlagUntilTimeout>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d004      	beq.n	80043fa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2220      	movs	r2, #32
 80043f4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e03b      	b.n	8004472 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d10b      	bne.n	8004418 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	881a      	ldrh	r2, [r3, #0]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800440c:	b292      	uxth	r2, r2
 800440e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	3302      	adds	r3, #2
 8004414:	61bb      	str	r3, [r7, #24]
 8004416:	e007      	b.n	8004428 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	781a      	ldrb	r2, [r3, #0]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	3301      	adds	r3, #1
 8004426:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800442e:	b29b      	uxth	r3, r3
 8004430:	3b01      	subs	r3, #1
 8004432:	b29a      	uxth	r2, r3
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004440:	b29b      	uxth	r3, r3
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1c9      	bne.n	80043da <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	9300      	str	r3, [sp, #0]
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	2200      	movs	r2, #0
 800444e:	2140      	movs	r1, #64	@ 0x40
 8004450:	68f8      	ldr	r0, [r7, #12]
 8004452:	f000 fddd 	bl	8005010 <UART_WaitOnFlagUntilTimeout>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d004      	beq.n	8004466 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2220      	movs	r2, #32
 8004460:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e005      	b.n	8004472 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2220      	movs	r2, #32
 800446a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800446c:	2300      	movs	r3, #0
 800446e:	e000      	b.n	8004472 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004470:	2302      	movs	r3, #2
  }
}
 8004472:	4618      	mov	r0, r3
 8004474:	3720      	adds	r7, #32
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}

0800447a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800447a:	b580      	push	{r7, lr}
 800447c:	b08a      	sub	sp, #40	@ 0x28
 800447e:	af00      	add	r7, sp, #0
 8004480:	60f8      	str	r0, [r7, #12]
 8004482:	60b9      	str	r1, [r7, #8]
 8004484:	4613      	mov	r3, r2
 8004486:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800448e:	2b20      	cmp	r3, #32
 8004490:	d132      	bne.n	80044f8 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d002      	beq.n	800449e <HAL_UART_Receive_IT+0x24>
 8004498:	88fb      	ldrh	r3, [r7, #6]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d101      	bne.n	80044a2 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e02b      	b.n	80044fa <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2200      	movs	r2, #0
 80044a6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d018      	beq.n	80044e8 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	e853 3f00 	ldrex	r3, [r3]
 80044c2:	613b      	str	r3, [r7, #16]
   return(result);
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80044ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	461a      	mov	r2, r3
 80044d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d4:	623b      	str	r3, [r7, #32]
 80044d6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d8:	69f9      	ldr	r1, [r7, #28]
 80044da:	6a3a      	ldr	r2, [r7, #32]
 80044dc:	e841 2300 	strex	r3, r2, [r1]
 80044e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d1e6      	bne.n	80044b6 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80044e8:	88fb      	ldrh	r3, [r7, #6]
 80044ea:	461a      	mov	r2, r3
 80044ec:	68b9      	ldr	r1, [r7, #8]
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	f000 fdfc 	bl	80050ec <UART_Start_Receive_IT>
 80044f4:	4603      	mov	r3, r0
 80044f6:	e000      	b.n	80044fa <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80044f8:	2302      	movs	r3, #2
  }
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3728      	adds	r7, #40	@ 0x28
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
	...

08004504 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b0ba      	sub	sp, #232	@ 0xe8
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	69db      	ldr	r3, [r3, #28]
 8004512:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800452a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800452e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004532:	4013      	ands	r3, r2
 8004534:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004538:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800453c:	2b00      	cmp	r3, #0
 800453e:	d115      	bne.n	800456c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004544:	f003 0320 	and.w	r3, r3, #32
 8004548:	2b00      	cmp	r3, #0
 800454a:	d00f      	beq.n	800456c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800454c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004550:	f003 0320 	and.w	r3, r3, #32
 8004554:	2b00      	cmp	r3, #0
 8004556:	d009      	beq.n	800456c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800455c:	2b00      	cmp	r3, #0
 800455e:	f000 82ab 	beq.w	8004ab8 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	4798      	blx	r3
      }
      return;
 800456a:	e2a5      	b.n	8004ab8 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800456c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004570:	2b00      	cmp	r3, #0
 8004572:	f000 8117 	beq.w	80047a4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004576:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800457a:	f003 0301 	and.w	r3, r3, #1
 800457e:	2b00      	cmp	r3, #0
 8004580:	d106      	bne.n	8004590 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004582:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004586:	4b85      	ldr	r3, [pc, #532]	@ (800479c <HAL_UART_IRQHandler+0x298>)
 8004588:	4013      	ands	r3, r2
 800458a:	2b00      	cmp	r3, #0
 800458c:	f000 810a 	beq.w	80047a4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004590:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004594:	f003 0301 	and.w	r3, r3, #1
 8004598:	2b00      	cmp	r3, #0
 800459a:	d011      	beq.n	80045c0 <HAL_UART_IRQHandler+0xbc>
 800459c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d00b      	beq.n	80045c0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2201      	movs	r2, #1
 80045ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045b6:	f043 0201 	orr.w	r2, r3, #1
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80045c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045c4:	f003 0302 	and.w	r3, r3, #2
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d011      	beq.n	80045f0 <HAL_UART_IRQHandler+0xec>
 80045cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045d0:	f003 0301 	and.w	r3, r3, #1
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00b      	beq.n	80045f0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2202      	movs	r2, #2
 80045de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045e6:	f043 0204 	orr.w	r2, r3, #4
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80045f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045f4:	f003 0304 	and.w	r3, r3, #4
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d011      	beq.n	8004620 <HAL_UART_IRQHandler+0x11c>
 80045fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004600:	f003 0301 	and.w	r3, r3, #1
 8004604:	2b00      	cmp	r3, #0
 8004606:	d00b      	beq.n	8004620 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2204      	movs	r2, #4
 800460e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004616:	f043 0202 	orr.w	r2, r3, #2
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004624:	f003 0308 	and.w	r3, r3, #8
 8004628:	2b00      	cmp	r3, #0
 800462a:	d017      	beq.n	800465c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800462c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004630:	f003 0320 	and.w	r3, r3, #32
 8004634:	2b00      	cmp	r3, #0
 8004636:	d105      	bne.n	8004644 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004638:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800463c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004640:	2b00      	cmp	r3, #0
 8004642:	d00b      	beq.n	800465c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2208      	movs	r2, #8
 800464a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004652:	f043 0208 	orr.w	r2, r3, #8
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800465c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004660:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004664:	2b00      	cmp	r3, #0
 8004666:	d012      	beq.n	800468e <HAL_UART_IRQHandler+0x18a>
 8004668:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800466c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00c      	beq.n	800468e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800467c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004684:	f043 0220 	orr.w	r2, r3, #32
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004694:	2b00      	cmp	r3, #0
 8004696:	f000 8211 	beq.w	8004abc <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800469a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800469e:	f003 0320 	and.w	r3, r3, #32
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00d      	beq.n	80046c2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80046a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046aa:	f003 0320 	and.w	r3, r3, #32
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d007      	beq.n	80046c2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d003      	beq.n	80046c2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046c8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046d6:	2b40      	cmp	r3, #64	@ 0x40
 80046d8:	d005      	beq.n	80046e6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80046da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80046de:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d04f      	beq.n	8004786 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 fdc6 	bl	8005278 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046f6:	2b40      	cmp	r3, #64	@ 0x40
 80046f8:	d141      	bne.n	800477e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	3308      	adds	r3, #8
 8004700:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004704:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004708:	e853 3f00 	ldrex	r3, [r3]
 800470c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004710:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004714:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004718:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	3308      	adds	r3, #8
 8004722:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004726:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800472a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800472e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004732:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004736:	e841 2300 	strex	r3, r2, [r1]
 800473a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800473e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d1d9      	bne.n	80046fa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800474a:	2b00      	cmp	r3, #0
 800474c:	d013      	beq.n	8004776 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004752:	4a13      	ldr	r2, [pc, #76]	@ (80047a0 <HAL_UART_IRQHandler+0x29c>)
 8004754:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800475a:	4618      	mov	r0, r3
 800475c:	f7fc fee5 	bl	800152a <HAL_DMA_Abort_IT>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d017      	beq.n	8004796 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800476a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004770:	4610      	mov	r0, r2
 8004772:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004774:	e00f      	b.n	8004796 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 f9b4 	bl	8004ae4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800477c:	e00b      	b.n	8004796 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 f9b0 	bl	8004ae4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004784:	e007      	b.n	8004796 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 f9ac 	bl	8004ae4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004794:	e192      	b.n	8004abc <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004796:	bf00      	nop
    return;
 8004798:	e190      	b.n	8004abc <HAL_UART_IRQHandler+0x5b8>
 800479a:	bf00      	nop
 800479c:	04000120 	.word	0x04000120
 80047a0:	08005341 	.word	0x08005341

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	f040 814b 	bne.w	8004a44 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80047ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047b2:	f003 0310 	and.w	r3, r3, #16
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	f000 8144 	beq.w	8004a44 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80047bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047c0:	f003 0310 	and.w	r3, r3, #16
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f000 813d 	beq.w	8004a44 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2210      	movs	r2, #16
 80047d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047dc:	2b40      	cmp	r3, #64	@ 0x40
 80047de:	f040 80b5 	bne.w	800494c <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80047ee:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	f000 8164 	beq.w	8004ac0 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80047fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004802:	429a      	cmp	r2, r3
 8004804:	f080 815c 	bcs.w	8004ac0 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800480e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004816:	699b      	ldr	r3, [r3, #24]
 8004818:	2b20      	cmp	r3, #32
 800481a:	f000 8086 	beq.w	800492a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004826:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800482a:	e853 3f00 	ldrex	r3, [r3]
 800482e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004832:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004836:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800483a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	461a      	mov	r2, r3
 8004844:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004848:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800484c:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004850:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004854:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004858:	e841 2300 	strex	r3, r2, [r1]
 800485c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004860:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004864:	2b00      	cmp	r3, #0
 8004866:	d1da      	bne.n	800481e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	3308      	adds	r3, #8
 800486e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004870:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004872:	e853 3f00 	ldrex	r3, [r3]
 8004876:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004878:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800487a:	f023 0301 	bic.w	r3, r3, #1
 800487e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	3308      	adds	r3, #8
 8004888:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800488c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004890:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004892:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004894:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004898:	e841 2300 	strex	r3, r2, [r1]
 800489c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800489e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d1e1      	bne.n	8004868 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	3308      	adds	r3, #8
 80048aa:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80048ae:	e853 3f00 	ldrex	r3, [r3]
 80048b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80048b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80048b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	3308      	adds	r3, #8
 80048c4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80048c8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80048ca:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048cc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80048ce:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80048d0:	e841 2300 	strex	r3, r2, [r1]
 80048d4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80048d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d1e3      	bne.n	80048a4 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2220      	movs	r2, #32
 80048e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048f2:	e853 3f00 	ldrex	r3, [r3]
 80048f6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80048f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048fa:	f023 0310 	bic.w	r3, r3, #16
 80048fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	461a      	mov	r2, r3
 8004908:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800490c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800490e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004910:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004912:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004914:	e841 2300 	strex	r3, r2, [r1]
 8004918:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800491a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800491c:	2b00      	cmp	r3, #0
 800491e:	d1e4      	bne.n	80048ea <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004924:	4618      	mov	r0, r3
 8004926:	f7fc fdc2 	bl	80014ae <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2202      	movs	r2, #2
 800492e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800493c:	b29b      	uxth	r3, r3
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	b29b      	uxth	r3, r3
 8004942:	4619      	mov	r1, r3
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f000 f8d7 	bl	8004af8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800494a:	e0b9      	b.n	8004ac0 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004958:	b29b      	uxth	r3, r3
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004966:	b29b      	uxth	r3, r3
 8004968:	2b00      	cmp	r3, #0
 800496a:	f000 80ab 	beq.w	8004ac4 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800496e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004972:	2b00      	cmp	r3, #0
 8004974:	f000 80a6 	beq.w	8004ac4 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800497e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004980:	e853 3f00 	ldrex	r3, [r3]
 8004984:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004986:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004988:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800498c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	461a      	mov	r2, r3
 8004996:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800499a:	647b      	str	r3, [r7, #68]	@ 0x44
 800499c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800499e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80049a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80049a2:	e841 2300 	strex	r3, r2, [r1]
 80049a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80049a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1e4      	bne.n	8004978 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	3308      	adds	r3, #8
 80049b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b8:	e853 3f00 	ldrex	r3, [r3]
 80049bc:	623b      	str	r3, [r7, #32]
   return(result);
 80049be:	6a3b      	ldr	r3, [r7, #32]
 80049c0:	f023 0301 	bic.w	r3, r3, #1
 80049c4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	3308      	adds	r3, #8
 80049ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80049d2:	633a      	str	r2, [r7, #48]	@ 0x30
 80049d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80049d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049da:	e841 2300 	strex	r3, r2, [r1]
 80049de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80049e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d1e3      	bne.n	80049ae <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2220      	movs	r2, #32
 80049ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	e853 3f00 	ldrex	r3, [r3]
 8004a06:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f023 0310 	bic.w	r3, r3, #16
 8004a0e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	461a      	mov	r2, r3
 8004a18:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004a1c:	61fb      	str	r3, [r7, #28]
 8004a1e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a20:	69b9      	ldr	r1, [r7, #24]
 8004a22:	69fa      	ldr	r2, [r7, #28]
 8004a24:	e841 2300 	strex	r3, r2, [r1]
 8004a28:	617b      	str	r3, [r7, #20]
   return(result);
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d1e4      	bne.n	80049fa <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2202      	movs	r2, #2
 8004a34:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a36:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 f85b 	bl	8004af8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004a42:	e03f      	b.n	8004ac4 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004a44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a48:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d00e      	beq.n	8004a6e <HAL_UART_IRQHandler+0x56a>
 8004a50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d008      	beq.n	8004a6e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004a64:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 fe52 	bl	8005710 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004a6c:	e02d      	b.n	8004aca <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00e      	beq.n	8004a98 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004a7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d008      	beq.n	8004a98 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d01c      	beq.n	8004ac8 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	4798      	blx	r3
    }
    return;
 8004a96:	e017      	b.n	8004ac8 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004a98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d012      	beq.n	8004aca <HAL_UART_IRQHandler+0x5c6>
 8004aa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004aa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d00c      	beq.n	8004aca <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f000 fc5b 	bl	800536c <UART_EndTransmit_IT>
    return;
 8004ab6:	e008      	b.n	8004aca <HAL_UART_IRQHandler+0x5c6>
      return;
 8004ab8:	bf00      	nop
 8004aba:	e006      	b.n	8004aca <HAL_UART_IRQHandler+0x5c6>
    return;
 8004abc:	bf00      	nop
 8004abe:	e004      	b.n	8004aca <HAL_UART_IRQHandler+0x5c6>
      return;
 8004ac0:	bf00      	nop
 8004ac2:	e002      	b.n	8004aca <HAL_UART_IRQHandler+0x5c6>
      return;
 8004ac4:	bf00      	nop
 8004ac6:	e000      	b.n	8004aca <HAL_UART_IRQHandler+0x5c6>
    return;
 8004ac8:	bf00      	nop
  }

}
 8004aca:	37e8      	adds	r7, #232	@ 0xe8
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004ad8:	bf00      	nop
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004aec:	bf00      	nop
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	460b      	mov	r3, r1
 8004b02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b04:	bf00      	nop
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b088      	sub	sp, #32
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	689a      	ldr	r2, [r3, #8]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	691b      	ldr	r3, [r3, #16]
 8004b24:	431a      	orrs	r2, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	431a      	orrs	r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	69db      	ldr	r3, [r3, #28]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	4b8a      	ldr	r3, [pc, #552]	@ (8004d64 <UART_SetConfig+0x254>)
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	6812      	ldr	r2, [r2, #0]
 8004b42:	6979      	ldr	r1, [r7, #20]
 8004b44:	430b      	orrs	r3, r1
 8004b46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	68da      	ldr	r2, [r3, #12]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	430a      	orrs	r2, r1
 8004b5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	699b      	ldr	r3, [r3, #24]
 8004b62:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6a1b      	ldr	r3, [r3, #32]
 8004b68:	697a      	ldr	r2, [r7, #20]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	697a      	ldr	r2, [r7, #20]
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a78      	ldr	r2, [pc, #480]	@ (8004d68 <UART_SetConfig+0x258>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d120      	bne.n	8004bce <UART_SetConfig+0xbe>
 8004b8c:	4b77      	ldr	r3, [pc, #476]	@ (8004d6c <UART_SetConfig+0x25c>)
 8004b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b90:	f003 0303 	and.w	r3, r3, #3
 8004b94:	2b03      	cmp	r3, #3
 8004b96:	d817      	bhi.n	8004bc8 <UART_SetConfig+0xb8>
 8004b98:	a201      	add	r2, pc, #4	@ (adr r2, 8004ba0 <UART_SetConfig+0x90>)
 8004b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b9e:	bf00      	nop
 8004ba0:	08004bb1 	.word	0x08004bb1
 8004ba4:	08004bbd 	.word	0x08004bbd
 8004ba8:	08004bc3 	.word	0x08004bc3
 8004bac:	08004bb7 	.word	0x08004bb7
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	77fb      	strb	r3, [r7, #31]
 8004bb4:	e01d      	b.n	8004bf2 <UART_SetConfig+0xe2>
 8004bb6:	2302      	movs	r3, #2
 8004bb8:	77fb      	strb	r3, [r7, #31]
 8004bba:	e01a      	b.n	8004bf2 <UART_SetConfig+0xe2>
 8004bbc:	2304      	movs	r3, #4
 8004bbe:	77fb      	strb	r3, [r7, #31]
 8004bc0:	e017      	b.n	8004bf2 <UART_SetConfig+0xe2>
 8004bc2:	2308      	movs	r3, #8
 8004bc4:	77fb      	strb	r3, [r7, #31]
 8004bc6:	e014      	b.n	8004bf2 <UART_SetConfig+0xe2>
 8004bc8:	2310      	movs	r3, #16
 8004bca:	77fb      	strb	r3, [r7, #31]
 8004bcc:	e011      	b.n	8004bf2 <UART_SetConfig+0xe2>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a67      	ldr	r2, [pc, #412]	@ (8004d70 <UART_SetConfig+0x260>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d102      	bne.n	8004bde <UART_SetConfig+0xce>
 8004bd8:	2300      	movs	r3, #0
 8004bda:	77fb      	strb	r3, [r7, #31]
 8004bdc:	e009      	b.n	8004bf2 <UART_SetConfig+0xe2>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a64      	ldr	r2, [pc, #400]	@ (8004d74 <UART_SetConfig+0x264>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d102      	bne.n	8004bee <UART_SetConfig+0xde>
 8004be8:	2300      	movs	r3, #0
 8004bea:	77fb      	strb	r3, [r7, #31]
 8004bec:	e001      	b.n	8004bf2 <UART_SetConfig+0xe2>
 8004bee:	2310      	movs	r3, #16
 8004bf0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	69db      	ldr	r3, [r3, #28]
 8004bf6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bfa:	d15a      	bne.n	8004cb2 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004bfc:	7ffb      	ldrb	r3, [r7, #31]
 8004bfe:	2b08      	cmp	r3, #8
 8004c00:	d827      	bhi.n	8004c52 <UART_SetConfig+0x142>
 8004c02:	a201      	add	r2, pc, #4	@ (adr r2, 8004c08 <UART_SetConfig+0xf8>)
 8004c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c08:	08004c2d 	.word	0x08004c2d
 8004c0c:	08004c35 	.word	0x08004c35
 8004c10:	08004c3d 	.word	0x08004c3d
 8004c14:	08004c53 	.word	0x08004c53
 8004c18:	08004c43 	.word	0x08004c43
 8004c1c:	08004c53 	.word	0x08004c53
 8004c20:	08004c53 	.word	0x08004c53
 8004c24:	08004c53 	.word	0x08004c53
 8004c28:	08004c4b 	.word	0x08004c4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c2c:	f7fe f992 	bl	8002f54 <HAL_RCC_GetPCLK1Freq>
 8004c30:	61b8      	str	r0, [r7, #24]
        break;
 8004c32:	e013      	b.n	8004c5c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c34:	f7fe f9b0 	bl	8002f98 <HAL_RCC_GetPCLK2Freq>
 8004c38:	61b8      	str	r0, [r7, #24]
        break;
 8004c3a:	e00f      	b.n	8004c5c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c3c:	4b4e      	ldr	r3, [pc, #312]	@ (8004d78 <UART_SetConfig+0x268>)
 8004c3e:	61bb      	str	r3, [r7, #24]
        break;
 8004c40:	e00c      	b.n	8004c5c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c42:	f7fe f927 	bl	8002e94 <HAL_RCC_GetSysClockFreq>
 8004c46:	61b8      	str	r0, [r7, #24]
        break;
 8004c48:	e008      	b.n	8004c5c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c4e:	61bb      	str	r3, [r7, #24]
        break;
 8004c50:	e004      	b.n	8004c5c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004c52:	2300      	movs	r3, #0
 8004c54:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	77bb      	strb	r3, [r7, #30]
        break;
 8004c5a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d074      	beq.n	8004d4c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c62:	69bb      	ldr	r3, [r7, #24]
 8004c64:	005a      	lsls	r2, r3, #1
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	085b      	lsrs	r3, r3, #1
 8004c6c:	441a      	add	r2, r3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c76:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	2b0f      	cmp	r3, #15
 8004c7c:	d916      	bls.n	8004cac <UART_SetConfig+0x19c>
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c84:	d212      	bcs.n	8004cac <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	f023 030f 	bic.w	r3, r3, #15
 8004c8e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	085b      	lsrs	r3, r3, #1
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	f003 0307 	and.w	r3, r3, #7
 8004c9a:	b29a      	uxth	r2, r3
 8004c9c:	89fb      	ldrh	r3, [r7, #14]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	89fa      	ldrh	r2, [r7, #14]
 8004ca8:	60da      	str	r2, [r3, #12]
 8004caa:	e04f      	b.n	8004d4c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	77bb      	strb	r3, [r7, #30]
 8004cb0:	e04c      	b.n	8004d4c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004cb2:	7ffb      	ldrb	r3, [r7, #31]
 8004cb4:	2b08      	cmp	r3, #8
 8004cb6:	d828      	bhi.n	8004d0a <UART_SetConfig+0x1fa>
 8004cb8:	a201      	add	r2, pc, #4	@ (adr r2, 8004cc0 <UART_SetConfig+0x1b0>)
 8004cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cbe:	bf00      	nop
 8004cc0:	08004ce5 	.word	0x08004ce5
 8004cc4:	08004ced 	.word	0x08004ced
 8004cc8:	08004cf5 	.word	0x08004cf5
 8004ccc:	08004d0b 	.word	0x08004d0b
 8004cd0:	08004cfb 	.word	0x08004cfb
 8004cd4:	08004d0b 	.word	0x08004d0b
 8004cd8:	08004d0b 	.word	0x08004d0b
 8004cdc:	08004d0b 	.word	0x08004d0b
 8004ce0:	08004d03 	.word	0x08004d03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ce4:	f7fe f936 	bl	8002f54 <HAL_RCC_GetPCLK1Freq>
 8004ce8:	61b8      	str	r0, [r7, #24]
        break;
 8004cea:	e013      	b.n	8004d14 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cec:	f7fe f954 	bl	8002f98 <HAL_RCC_GetPCLK2Freq>
 8004cf0:	61b8      	str	r0, [r7, #24]
        break;
 8004cf2:	e00f      	b.n	8004d14 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cf4:	4b20      	ldr	r3, [pc, #128]	@ (8004d78 <UART_SetConfig+0x268>)
 8004cf6:	61bb      	str	r3, [r7, #24]
        break;
 8004cf8:	e00c      	b.n	8004d14 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cfa:	f7fe f8cb 	bl	8002e94 <HAL_RCC_GetSysClockFreq>
 8004cfe:	61b8      	str	r0, [r7, #24]
        break;
 8004d00:	e008      	b.n	8004d14 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d06:	61bb      	str	r3, [r7, #24]
        break;
 8004d08:	e004      	b.n	8004d14 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	77bb      	strb	r3, [r7, #30]
        break;
 8004d12:	bf00      	nop
    }

    if (pclk != 0U)
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d018      	beq.n	8004d4c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	085a      	lsrs	r2, r3, #1
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	441a      	add	r2, r3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d2c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	2b0f      	cmp	r3, #15
 8004d32:	d909      	bls.n	8004d48 <UART_SetConfig+0x238>
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d3a:	d205      	bcs.n	8004d48 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	b29a      	uxth	r2, r3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	60da      	str	r2, [r3, #12]
 8004d46:	e001      	b.n	8004d4c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004d58:	7fbb      	ldrb	r3, [r7, #30]
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3720      	adds	r7, #32
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	efff69f3 	.word	0xefff69f3
 8004d68:	40013800 	.word	0x40013800
 8004d6c:	40021000 	.word	0x40021000
 8004d70:	40004400 	.word	0x40004400
 8004d74:	40004800 	.word	0x40004800
 8004d78:	007a1200 	.word	0x007a1200

08004d7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d88:	f003 0308 	and.w	r3, r3, #8
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d00a      	beq.n	8004da6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	430a      	orrs	r2, r1
 8004da4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d00a      	beq.n	8004dc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dcc:	f003 0302 	and.w	r3, r3, #2
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d00a      	beq.n	8004dea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	430a      	orrs	r2, r1
 8004de8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dee:	f003 0304 	and.w	r3, r3, #4
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d00a      	beq.n	8004e0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	430a      	orrs	r2, r1
 8004e0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e10:	f003 0310 	and.w	r3, r3, #16
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00a      	beq.n	8004e2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e32:	f003 0320 	and.w	r3, r3, #32
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00a      	beq.n	8004e50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d01a      	beq.n	8004e92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e7a:	d10a      	bne.n	8004e92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00a      	beq.n	8004eb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	605a      	str	r2, [r3, #4]
  }
}
 8004eb4:	bf00      	nop
 8004eb6:	370c      	adds	r7, #12
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b098      	sub	sp, #96	@ 0x60
 8004ec4:	af02      	add	r7, sp, #8
 8004ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ed0:	f7fc f9ac 	bl	800122c <HAL_GetTick>
 8004ed4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0308 	and.w	r3, r3, #8
 8004ee0:	2b08      	cmp	r3, #8
 8004ee2:	d12e      	bne.n	8004f42 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ee4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004ee8:	9300      	str	r3, [sp, #0]
 8004eea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004eec:	2200      	movs	r2, #0
 8004eee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 f88c 	bl	8005010 <UART_WaitOnFlagUntilTimeout>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d021      	beq.n	8004f42 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f06:	e853 3f00 	ldrex	r3, [r3]
 8004f0a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004f0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f12:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	461a      	mov	r2, r3
 8004f1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f1e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f20:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004f22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f24:	e841 2300 	strex	r3, r2, [r1]
 8004f28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004f2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d1e6      	bne.n	8004efe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2220      	movs	r2, #32
 8004f34:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e062      	b.n	8005008 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0304 	and.w	r3, r3, #4
 8004f4c:	2b04      	cmp	r3, #4
 8004f4e:	d149      	bne.n	8004fe4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f50:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004f54:	9300      	str	r3, [sp, #0]
 8004f56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 f856 	bl	8005010 <UART_WaitOnFlagUntilTimeout>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d03c      	beq.n	8004fe4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f72:	e853 3f00 	ldrex	r3, [r3]
 8004f76:	623b      	str	r3, [r7, #32]
   return(result);
 8004f78:	6a3b      	ldr	r3, [r7, #32]
 8004f7a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	461a      	mov	r2, r3
 8004f86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f88:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f8c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f90:	e841 2300 	strex	r3, r2, [r1]
 8004f94:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d1e6      	bne.n	8004f6a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	3308      	adds	r3, #8
 8004fa2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	e853 3f00 	ldrex	r3, [r3]
 8004faa:	60fb      	str	r3, [r7, #12]
   return(result);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f023 0301 	bic.w	r3, r3, #1
 8004fb2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	3308      	adds	r3, #8
 8004fba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004fbc:	61fa      	str	r2, [r7, #28]
 8004fbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc0:	69b9      	ldr	r1, [r7, #24]
 8004fc2:	69fa      	ldr	r2, [r7, #28]
 8004fc4:	e841 2300 	strex	r3, r2, [r1]
 8004fc8:	617b      	str	r3, [r7, #20]
   return(result);
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d1e5      	bne.n	8004f9c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2220      	movs	r2, #32
 8004fd4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	e011      	b.n	8005008 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2220      	movs	r2, #32
 8004fe8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2220      	movs	r2, #32
 8004fee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005006:	2300      	movs	r3, #0
}
 8005008:	4618      	mov	r0, r3
 800500a:	3758      	adds	r7, #88	@ 0x58
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	60b9      	str	r1, [r7, #8]
 800501a:	603b      	str	r3, [r7, #0]
 800501c:	4613      	mov	r3, r2
 800501e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005020:	e04f      	b.n	80050c2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005028:	d04b      	beq.n	80050c2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800502a:	f7fc f8ff 	bl	800122c <HAL_GetTick>
 800502e:	4602      	mov	r2, r0
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	69ba      	ldr	r2, [r7, #24]
 8005036:	429a      	cmp	r2, r3
 8005038:	d302      	bcc.n	8005040 <UART_WaitOnFlagUntilTimeout+0x30>
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d101      	bne.n	8005044 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005040:	2303      	movs	r3, #3
 8005042:	e04e      	b.n	80050e2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0304 	and.w	r3, r3, #4
 800504e:	2b00      	cmp	r3, #0
 8005050:	d037      	beq.n	80050c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	2b80      	cmp	r3, #128	@ 0x80
 8005056:	d034      	beq.n	80050c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	2b40      	cmp	r3, #64	@ 0x40
 800505c:	d031      	beq.n	80050c2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	69db      	ldr	r3, [r3, #28]
 8005064:	f003 0308 	and.w	r3, r3, #8
 8005068:	2b08      	cmp	r3, #8
 800506a:	d110      	bne.n	800508e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2208      	movs	r2, #8
 8005072:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005074:	68f8      	ldr	r0, [r7, #12]
 8005076:	f000 f8ff 	bl	8005278 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2208      	movs	r2, #8
 800507e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2200      	movs	r2, #0
 8005086:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e029      	b.n	80050e2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	69db      	ldr	r3, [r3, #28]
 8005094:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005098:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800509c:	d111      	bne.n	80050c2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80050a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80050a8:	68f8      	ldr	r0, [r7, #12]
 80050aa:	f000 f8e5 	bl	8005278 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2220      	movs	r2, #32
 80050b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e00f      	b.n	80050e2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	69da      	ldr	r2, [r3, #28]
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	4013      	ands	r3, r2
 80050cc:	68ba      	ldr	r2, [r7, #8]
 80050ce:	429a      	cmp	r2, r3
 80050d0:	bf0c      	ite	eq
 80050d2:	2301      	moveq	r3, #1
 80050d4:	2300      	movne	r3, #0
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	461a      	mov	r2, r3
 80050da:	79fb      	ldrb	r3, [r7, #7]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d0a0      	beq.n	8005022 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3710      	adds	r7, #16
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
	...

080050ec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b097      	sub	sp, #92	@ 0x5c
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	4613      	mov	r3, r2
 80050f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	68ba      	ldr	r2, [r7, #8]
 80050fe:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	88fa      	ldrh	r2, [r7, #6]
 8005104:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	88fa      	ldrh	r2, [r7, #6]
 800510c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2200      	movs	r2, #0
 8005114:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800511e:	d10e      	bne.n	800513e <UART_Start_Receive_IT+0x52>
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	691b      	ldr	r3, [r3, #16]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d105      	bne.n	8005134 <UART_Start_Receive_IT+0x48>
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800512e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005132:	e02d      	b.n	8005190 <UART_Start_Receive_IT+0xa4>
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	22ff      	movs	r2, #255	@ 0xff
 8005138:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800513c:	e028      	b.n	8005190 <UART_Start_Receive_IT+0xa4>
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d10d      	bne.n	8005162 <UART_Start_Receive_IT+0x76>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d104      	bne.n	8005158 <UART_Start_Receive_IT+0x6c>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	22ff      	movs	r2, #255	@ 0xff
 8005152:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005156:	e01b      	b.n	8005190 <UART_Start_Receive_IT+0xa4>
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	227f      	movs	r2, #127	@ 0x7f
 800515c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005160:	e016      	b.n	8005190 <UART_Start_Receive_IT+0xa4>
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800516a:	d10d      	bne.n	8005188 <UART_Start_Receive_IT+0x9c>
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	691b      	ldr	r3, [r3, #16]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d104      	bne.n	800517e <UART_Start_Receive_IT+0x92>
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	227f      	movs	r2, #127	@ 0x7f
 8005178:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800517c:	e008      	b.n	8005190 <UART_Start_Receive_IT+0xa4>
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	223f      	movs	r2, #63	@ 0x3f
 8005182:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005186:	e003      	b.n	8005190 <UART_Start_Receive_IT+0xa4>
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2200      	movs	r2, #0
 800518c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2200      	movs	r2, #0
 8005194:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2222      	movs	r2, #34	@ 0x22
 800519c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	3308      	adds	r3, #8
 80051a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051aa:	e853 3f00 	ldrex	r3, [r3]
 80051ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80051b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051b2:	f043 0301 	orr.w	r3, r3, #1
 80051b6:	657b      	str	r3, [r7, #84]	@ 0x54
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	3308      	adds	r3, #8
 80051be:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80051c0:	64ba      	str	r2, [r7, #72]	@ 0x48
 80051c2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80051c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80051c8:	e841 2300 	strex	r3, r2, [r1]
 80051cc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80051ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d1e5      	bne.n	80051a0 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051dc:	d107      	bne.n	80051ee <UART_Start_Receive_IT+0x102>
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d103      	bne.n	80051ee <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	4a21      	ldr	r2, [pc, #132]	@ (8005270 <UART_Start_Receive_IT+0x184>)
 80051ea:	669a      	str	r2, [r3, #104]	@ 0x68
 80051ec:	e002      	b.n	80051f4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	4a20      	ldr	r2, [pc, #128]	@ (8005274 <UART_Start_Receive_IT+0x188>)
 80051f2:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d019      	beq.n	8005230 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005204:	e853 3f00 	ldrex	r3, [r3]
 8005208:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800520a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800520c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8005210:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	461a      	mov	r2, r3
 8005218:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800521a:	637b      	str	r3, [r7, #52]	@ 0x34
 800521c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800521e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005220:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005222:	e841 2300 	strex	r3, r2, [r1]
 8005226:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800522a:	2b00      	cmp	r3, #0
 800522c:	d1e6      	bne.n	80051fc <UART_Start_Receive_IT+0x110>
 800522e:	e018      	b.n	8005262 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	e853 3f00 	ldrex	r3, [r3]
 800523c:	613b      	str	r3, [r7, #16]
   return(result);
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	f043 0320 	orr.w	r3, r3, #32
 8005244:	653b      	str	r3, [r7, #80]	@ 0x50
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	461a      	mov	r2, r3
 800524c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800524e:	623b      	str	r3, [r7, #32]
 8005250:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005252:	69f9      	ldr	r1, [r7, #28]
 8005254:	6a3a      	ldr	r2, [r7, #32]
 8005256:	e841 2300 	strex	r3, r2, [r1]
 800525a:	61bb      	str	r3, [r7, #24]
   return(result);
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d1e6      	bne.n	8005230 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8005262:	2300      	movs	r3, #0
}
 8005264:	4618      	mov	r0, r3
 8005266:	375c      	adds	r7, #92	@ 0x5c
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr
 8005270:	08005569 	.word	0x08005569
 8005274:	080053c1 	.word	0x080053c1

08005278 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005278:	b480      	push	{r7}
 800527a:	b095      	sub	sp, #84	@ 0x54
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005286:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005288:	e853 3f00 	ldrex	r3, [r3]
 800528c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800528e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005290:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005294:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	461a      	mov	r2, r3
 800529c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800529e:	643b      	str	r3, [r7, #64]	@ 0x40
 80052a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80052a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80052a6:	e841 2300 	strex	r3, r2, [r1]
 80052aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80052ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d1e6      	bne.n	8005280 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	3308      	adds	r3, #8
 80052b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ba:	6a3b      	ldr	r3, [r7, #32]
 80052bc:	e853 3f00 	ldrex	r3, [r3]
 80052c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	f023 0301 	bic.w	r3, r3, #1
 80052c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	3308      	adds	r3, #8
 80052d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80052d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80052d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80052d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052da:	e841 2300 	strex	r3, r2, [r1]
 80052de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80052e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d1e5      	bne.n	80052b2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d118      	bne.n	8005320 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	e853 3f00 	ldrex	r3, [r3]
 80052fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	f023 0310 	bic.w	r3, r3, #16
 8005302:	647b      	str	r3, [r7, #68]	@ 0x44
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	461a      	mov	r2, r3
 800530a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800530c:	61bb      	str	r3, [r7, #24]
 800530e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005310:	6979      	ldr	r1, [r7, #20]
 8005312:	69ba      	ldr	r2, [r7, #24]
 8005314:	e841 2300 	strex	r3, r2, [r1]
 8005318:	613b      	str	r3, [r7, #16]
   return(result);
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d1e6      	bne.n	80052ee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2220      	movs	r2, #32
 8005324:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005334:	bf00      	nop
 8005336:	3754      	adds	r7, #84	@ 0x54
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800534c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2200      	movs	r2, #0
 8005352:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2200      	movs	r2, #0
 800535a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800535e:	68f8      	ldr	r0, [r7, #12]
 8005360:	f7ff fbc0 	bl	8004ae4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005364:	bf00      	nop
 8005366:	3710      	adds	r7, #16
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b088      	sub	sp, #32
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	e853 3f00 	ldrex	r3, [r3]
 8005380:	60bb      	str	r3, [r7, #8]
   return(result);
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005388:	61fb      	str	r3, [r7, #28]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	461a      	mov	r2, r3
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	61bb      	str	r3, [r7, #24]
 8005394:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005396:	6979      	ldr	r1, [r7, #20]
 8005398:	69ba      	ldr	r2, [r7, #24]
 800539a:	e841 2300 	strex	r3, r2, [r1]
 800539e:	613b      	str	r3, [r7, #16]
   return(result);
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d1e6      	bne.n	8005374 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2220      	movs	r2, #32
 80053aa:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f7ff fb8c 	bl	8004ad0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053b8:	bf00      	nop
 80053ba:	3720      	adds	r7, #32
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b09c      	sub	sp, #112	@ 0x70
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80053ce:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053d8:	2b22      	cmp	r3, #34	@ 0x22
 80053da:	f040 80b9 	bne.w	8005550 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80053e4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80053e8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80053ec:	b2d9      	uxtb	r1, r3
 80053ee:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80053f2:	b2da      	uxtb	r2, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053f8:	400a      	ands	r2, r1
 80053fa:	b2d2      	uxtb	r2, r2
 80053fc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005402:	1c5a      	adds	r2, r3, #1
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800540e:	b29b      	uxth	r3, r3
 8005410:	3b01      	subs	r3, #1
 8005412:	b29a      	uxth	r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005420:	b29b      	uxth	r3, r3
 8005422:	2b00      	cmp	r3, #0
 8005424:	f040 809c 	bne.w	8005560 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800542e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005430:	e853 3f00 	ldrex	r3, [r3]
 8005434:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005436:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005438:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800543c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	461a      	mov	r2, r3
 8005444:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005446:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005448:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800544a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800544c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800544e:	e841 2300 	strex	r3, r2, [r1]
 8005452:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005454:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005456:	2b00      	cmp	r3, #0
 8005458:	d1e6      	bne.n	8005428 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	3308      	adds	r3, #8
 8005460:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005464:	e853 3f00 	ldrex	r3, [r3]
 8005468:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800546a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800546c:	f023 0301 	bic.w	r3, r3, #1
 8005470:	667b      	str	r3, [r7, #100]	@ 0x64
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	3308      	adds	r3, #8
 8005478:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800547a:	647a      	str	r2, [r7, #68]	@ 0x44
 800547c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005480:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005482:	e841 2300 	strex	r3, r2, [r1]
 8005486:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005488:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1e5      	bne.n	800545a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2220      	movs	r2, #32
 8005492:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d018      	beq.n	80054e2 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b8:	e853 3f00 	ldrex	r3, [r3]
 80054bc:	623b      	str	r3, [r7, #32]
   return(result);
 80054be:	6a3b      	ldr	r3, [r7, #32]
 80054c0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80054c4:	663b      	str	r3, [r7, #96]	@ 0x60
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	461a      	mov	r2, r3
 80054cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80054ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80054d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80054d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054d6:	e841 2300 	strex	r3, r2, [r1]
 80054da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80054dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d1e6      	bne.n	80054b0 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d12e      	bne.n	8005548 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	e853 3f00 	ldrex	r3, [r3]
 80054fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f023 0310 	bic.w	r3, r3, #16
 8005504:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	461a      	mov	r2, r3
 800550c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800550e:	61fb      	str	r3, [r7, #28]
 8005510:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005512:	69b9      	ldr	r1, [r7, #24]
 8005514:	69fa      	ldr	r2, [r7, #28]
 8005516:	e841 2300 	strex	r3, r2, [r1]
 800551a:	617b      	str	r3, [r7, #20]
   return(result);
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d1e6      	bne.n	80054f0 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	69db      	ldr	r3, [r3, #28]
 8005528:	f003 0310 	and.w	r3, r3, #16
 800552c:	2b10      	cmp	r3, #16
 800552e:	d103      	bne.n	8005538 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2210      	movs	r2, #16
 8005536:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800553e:	4619      	mov	r1, r3
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f7ff fad9 	bl	8004af8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005546:	e00b      	b.n	8005560 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f7fb fb07 	bl	8000b5c <HAL_UART_RxCpltCallback>
}
 800554e:	e007      	b.n	8005560 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	699a      	ldr	r2, [r3, #24]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f042 0208 	orr.w	r2, r2, #8
 800555e:	619a      	str	r2, [r3, #24]
}
 8005560:	bf00      	nop
 8005562:	3770      	adds	r7, #112	@ 0x70
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}

08005568 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b09c      	sub	sp, #112	@ 0x70
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005576:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005580:	2b22      	cmp	r3, #34	@ 0x22
 8005582:	f040 80b9 	bne.w	80056f8 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800558c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005594:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005596:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800559a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800559e:	4013      	ands	r3, r2
 80055a0:	b29a      	uxth	r2, r3
 80055a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80055a4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055aa:	1c9a      	adds	r2, r3, #2
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	3b01      	subs	r3, #1
 80055ba:	b29a      	uxth	r2, r3
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	f040 809c 	bne.w	8005708 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055d8:	e853 3f00 	ldrex	r3, [r3]
 80055dc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80055de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055e4:	667b      	str	r3, [r7, #100]	@ 0x64
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	461a      	mov	r2, r3
 80055ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80055f0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80055f4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80055f6:	e841 2300 	strex	r3, r2, [r1]
 80055fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80055fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d1e6      	bne.n	80055d0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	3308      	adds	r3, #8
 8005608:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800560a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800560c:	e853 3f00 	ldrex	r3, [r3]
 8005610:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005614:	f023 0301 	bic.w	r3, r3, #1
 8005618:	663b      	str	r3, [r7, #96]	@ 0x60
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	3308      	adds	r3, #8
 8005620:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005622:	643a      	str	r2, [r7, #64]	@ 0x40
 8005624:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005626:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005628:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800562a:	e841 2300 	strex	r3, r2, [r1]
 800562e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005632:	2b00      	cmp	r3, #0
 8005634:	d1e5      	bne.n	8005602 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2220      	movs	r2, #32
 800563a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005654:	2b00      	cmp	r3, #0
 8005656:	d018      	beq.n	800568a <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800565e:	6a3b      	ldr	r3, [r7, #32]
 8005660:	e853 3f00 	ldrex	r3, [r3]
 8005664:	61fb      	str	r3, [r7, #28]
   return(result);
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800566c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	461a      	mov	r2, r3
 8005674:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005676:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005678:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800567a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800567c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800567e:	e841 2300 	strex	r3, r2, [r1]
 8005682:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005686:	2b00      	cmp	r3, #0
 8005688:	d1e6      	bne.n	8005658 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800568e:	2b01      	cmp	r3, #1
 8005690:	d12e      	bne.n	80056f0 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	e853 3f00 	ldrex	r3, [r3]
 80056a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	f023 0310 	bic.w	r3, r3, #16
 80056ac:	65bb      	str	r3, [r7, #88]	@ 0x58
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	461a      	mov	r2, r3
 80056b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80056b6:	61bb      	str	r3, [r7, #24]
 80056b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ba:	6979      	ldr	r1, [r7, #20]
 80056bc:	69ba      	ldr	r2, [r7, #24]
 80056be:	e841 2300 	strex	r3, r2, [r1]
 80056c2:	613b      	str	r3, [r7, #16]
   return(result);
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d1e6      	bne.n	8005698 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	69db      	ldr	r3, [r3, #28]
 80056d0:	f003 0310 	and.w	r3, r3, #16
 80056d4:	2b10      	cmp	r3, #16
 80056d6:	d103      	bne.n	80056e0 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2210      	movs	r2, #16
 80056de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80056e6:	4619      	mov	r1, r3
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f7ff fa05 	bl	8004af8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80056ee:	e00b      	b.n	8005708 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f7fb fa33 	bl	8000b5c <HAL_UART_RxCpltCallback>
}
 80056f6:	e007      	b.n	8005708 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	699a      	ldr	r2, [r3, #24]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f042 0208 	orr.w	r2, r2, #8
 8005706:	619a      	str	r2, [r3, #24]
}
 8005708:	bf00      	nop
 800570a:	3770      	adds	r7, #112	@ 0x70
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}

08005710 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005718:	bf00      	nop
 800571a:	370c      	adds	r7, #12
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <atoi>:
 8005724:	220a      	movs	r2, #10
 8005726:	2100      	movs	r1, #0
 8005728:	f000 b87a 	b.w	8005820 <strtol>

0800572c <_strtol_l.constprop.0>:
 800572c:	2b24      	cmp	r3, #36	@ 0x24
 800572e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005732:	4686      	mov	lr, r0
 8005734:	4690      	mov	r8, r2
 8005736:	d801      	bhi.n	800573c <_strtol_l.constprop.0+0x10>
 8005738:	2b01      	cmp	r3, #1
 800573a:	d106      	bne.n	800574a <_strtol_l.constprop.0+0x1e>
 800573c:	f000 f9f2 	bl	8005b24 <__errno>
 8005740:	2316      	movs	r3, #22
 8005742:	6003      	str	r3, [r0, #0]
 8005744:	2000      	movs	r0, #0
 8005746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800574a:	4834      	ldr	r0, [pc, #208]	@ (800581c <_strtol_l.constprop.0+0xf0>)
 800574c:	460d      	mov	r5, r1
 800574e:	462a      	mov	r2, r5
 8005750:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005754:	5d06      	ldrb	r6, [r0, r4]
 8005756:	f016 0608 	ands.w	r6, r6, #8
 800575a:	d1f8      	bne.n	800574e <_strtol_l.constprop.0+0x22>
 800575c:	2c2d      	cmp	r4, #45	@ 0x2d
 800575e:	d12d      	bne.n	80057bc <_strtol_l.constprop.0+0x90>
 8005760:	782c      	ldrb	r4, [r5, #0]
 8005762:	2601      	movs	r6, #1
 8005764:	1c95      	adds	r5, r2, #2
 8005766:	f033 0210 	bics.w	r2, r3, #16
 800576a:	d109      	bne.n	8005780 <_strtol_l.constprop.0+0x54>
 800576c:	2c30      	cmp	r4, #48	@ 0x30
 800576e:	d12a      	bne.n	80057c6 <_strtol_l.constprop.0+0x9a>
 8005770:	782a      	ldrb	r2, [r5, #0]
 8005772:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005776:	2a58      	cmp	r2, #88	@ 0x58
 8005778:	d125      	bne.n	80057c6 <_strtol_l.constprop.0+0x9a>
 800577a:	786c      	ldrb	r4, [r5, #1]
 800577c:	2310      	movs	r3, #16
 800577e:	3502      	adds	r5, #2
 8005780:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005784:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005788:	2200      	movs	r2, #0
 800578a:	fbbc f9f3 	udiv	r9, ip, r3
 800578e:	4610      	mov	r0, r2
 8005790:	fb03 ca19 	mls	sl, r3, r9, ip
 8005794:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005798:	2f09      	cmp	r7, #9
 800579a:	d81b      	bhi.n	80057d4 <_strtol_l.constprop.0+0xa8>
 800579c:	463c      	mov	r4, r7
 800579e:	42a3      	cmp	r3, r4
 80057a0:	dd27      	ble.n	80057f2 <_strtol_l.constprop.0+0xc6>
 80057a2:	1c57      	adds	r7, r2, #1
 80057a4:	d007      	beq.n	80057b6 <_strtol_l.constprop.0+0x8a>
 80057a6:	4581      	cmp	r9, r0
 80057a8:	d320      	bcc.n	80057ec <_strtol_l.constprop.0+0xc0>
 80057aa:	d101      	bne.n	80057b0 <_strtol_l.constprop.0+0x84>
 80057ac:	45a2      	cmp	sl, r4
 80057ae:	db1d      	blt.n	80057ec <_strtol_l.constprop.0+0xc0>
 80057b0:	fb00 4003 	mla	r0, r0, r3, r4
 80057b4:	2201      	movs	r2, #1
 80057b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80057ba:	e7eb      	b.n	8005794 <_strtol_l.constprop.0+0x68>
 80057bc:	2c2b      	cmp	r4, #43	@ 0x2b
 80057be:	bf04      	itt	eq
 80057c0:	782c      	ldrbeq	r4, [r5, #0]
 80057c2:	1c95      	addeq	r5, r2, #2
 80057c4:	e7cf      	b.n	8005766 <_strtol_l.constprop.0+0x3a>
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d1da      	bne.n	8005780 <_strtol_l.constprop.0+0x54>
 80057ca:	2c30      	cmp	r4, #48	@ 0x30
 80057cc:	bf0c      	ite	eq
 80057ce:	2308      	moveq	r3, #8
 80057d0:	230a      	movne	r3, #10
 80057d2:	e7d5      	b.n	8005780 <_strtol_l.constprop.0+0x54>
 80057d4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80057d8:	2f19      	cmp	r7, #25
 80057da:	d801      	bhi.n	80057e0 <_strtol_l.constprop.0+0xb4>
 80057dc:	3c37      	subs	r4, #55	@ 0x37
 80057de:	e7de      	b.n	800579e <_strtol_l.constprop.0+0x72>
 80057e0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80057e4:	2f19      	cmp	r7, #25
 80057e6:	d804      	bhi.n	80057f2 <_strtol_l.constprop.0+0xc6>
 80057e8:	3c57      	subs	r4, #87	@ 0x57
 80057ea:	e7d8      	b.n	800579e <_strtol_l.constprop.0+0x72>
 80057ec:	f04f 32ff 	mov.w	r2, #4294967295
 80057f0:	e7e1      	b.n	80057b6 <_strtol_l.constprop.0+0x8a>
 80057f2:	1c53      	adds	r3, r2, #1
 80057f4:	d108      	bne.n	8005808 <_strtol_l.constprop.0+0xdc>
 80057f6:	2322      	movs	r3, #34	@ 0x22
 80057f8:	f8ce 3000 	str.w	r3, [lr]
 80057fc:	4660      	mov	r0, ip
 80057fe:	f1b8 0f00 	cmp.w	r8, #0
 8005802:	d0a0      	beq.n	8005746 <_strtol_l.constprop.0+0x1a>
 8005804:	1e69      	subs	r1, r5, #1
 8005806:	e006      	b.n	8005816 <_strtol_l.constprop.0+0xea>
 8005808:	b106      	cbz	r6, 800580c <_strtol_l.constprop.0+0xe0>
 800580a:	4240      	negs	r0, r0
 800580c:	f1b8 0f00 	cmp.w	r8, #0
 8005810:	d099      	beq.n	8005746 <_strtol_l.constprop.0+0x1a>
 8005812:	2a00      	cmp	r2, #0
 8005814:	d1f6      	bne.n	8005804 <_strtol_l.constprop.0+0xd8>
 8005816:	f8c8 1000 	str.w	r1, [r8]
 800581a:	e794      	b.n	8005746 <_strtol_l.constprop.0+0x1a>
 800581c:	08006831 	.word	0x08006831

08005820 <strtol>:
 8005820:	4613      	mov	r3, r2
 8005822:	460a      	mov	r2, r1
 8005824:	4601      	mov	r1, r0
 8005826:	4802      	ldr	r0, [pc, #8]	@ (8005830 <strtol+0x10>)
 8005828:	6800      	ldr	r0, [r0, #0]
 800582a:	f7ff bf7f 	b.w	800572c <_strtol_l.constprop.0>
 800582e:	bf00      	nop
 8005830:	20000018 	.word	0x20000018

08005834 <std>:
 8005834:	2300      	movs	r3, #0
 8005836:	b510      	push	{r4, lr}
 8005838:	4604      	mov	r4, r0
 800583a:	e9c0 3300 	strd	r3, r3, [r0]
 800583e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005842:	6083      	str	r3, [r0, #8]
 8005844:	8181      	strh	r1, [r0, #12]
 8005846:	6643      	str	r3, [r0, #100]	@ 0x64
 8005848:	81c2      	strh	r2, [r0, #14]
 800584a:	6183      	str	r3, [r0, #24]
 800584c:	4619      	mov	r1, r3
 800584e:	2208      	movs	r2, #8
 8005850:	305c      	adds	r0, #92	@ 0x5c
 8005852:	f000 f906 	bl	8005a62 <memset>
 8005856:	4b0d      	ldr	r3, [pc, #52]	@ (800588c <std+0x58>)
 8005858:	6263      	str	r3, [r4, #36]	@ 0x24
 800585a:	4b0d      	ldr	r3, [pc, #52]	@ (8005890 <std+0x5c>)
 800585c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800585e:	4b0d      	ldr	r3, [pc, #52]	@ (8005894 <std+0x60>)
 8005860:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005862:	4b0d      	ldr	r3, [pc, #52]	@ (8005898 <std+0x64>)
 8005864:	6323      	str	r3, [r4, #48]	@ 0x30
 8005866:	4b0d      	ldr	r3, [pc, #52]	@ (800589c <std+0x68>)
 8005868:	6224      	str	r4, [r4, #32]
 800586a:	429c      	cmp	r4, r3
 800586c:	d006      	beq.n	800587c <std+0x48>
 800586e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005872:	4294      	cmp	r4, r2
 8005874:	d002      	beq.n	800587c <std+0x48>
 8005876:	33d0      	adds	r3, #208	@ 0xd0
 8005878:	429c      	cmp	r4, r3
 800587a:	d105      	bne.n	8005888 <std+0x54>
 800587c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005884:	f000 b978 	b.w	8005b78 <__retarget_lock_init_recursive>
 8005888:	bd10      	pop	{r4, pc}
 800588a:	bf00      	nop
 800588c:	080059dd 	.word	0x080059dd
 8005890:	080059ff 	.word	0x080059ff
 8005894:	08005a37 	.word	0x08005a37
 8005898:	08005a5b 	.word	0x08005a5b
 800589c:	2000035c 	.word	0x2000035c

080058a0 <stdio_exit_handler>:
 80058a0:	4a02      	ldr	r2, [pc, #8]	@ (80058ac <stdio_exit_handler+0xc>)
 80058a2:	4903      	ldr	r1, [pc, #12]	@ (80058b0 <stdio_exit_handler+0x10>)
 80058a4:	4803      	ldr	r0, [pc, #12]	@ (80058b4 <stdio_exit_handler+0x14>)
 80058a6:	f000 b869 	b.w	800597c <_fwalk_sglue>
 80058aa:	bf00      	nop
 80058ac:	2000000c 	.word	0x2000000c
 80058b0:	08006419 	.word	0x08006419
 80058b4:	2000001c 	.word	0x2000001c

080058b8 <cleanup_stdio>:
 80058b8:	6841      	ldr	r1, [r0, #4]
 80058ba:	4b0c      	ldr	r3, [pc, #48]	@ (80058ec <cleanup_stdio+0x34>)
 80058bc:	4299      	cmp	r1, r3
 80058be:	b510      	push	{r4, lr}
 80058c0:	4604      	mov	r4, r0
 80058c2:	d001      	beq.n	80058c8 <cleanup_stdio+0x10>
 80058c4:	f000 fda8 	bl	8006418 <_fflush_r>
 80058c8:	68a1      	ldr	r1, [r4, #8]
 80058ca:	4b09      	ldr	r3, [pc, #36]	@ (80058f0 <cleanup_stdio+0x38>)
 80058cc:	4299      	cmp	r1, r3
 80058ce:	d002      	beq.n	80058d6 <cleanup_stdio+0x1e>
 80058d0:	4620      	mov	r0, r4
 80058d2:	f000 fda1 	bl	8006418 <_fflush_r>
 80058d6:	68e1      	ldr	r1, [r4, #12]
 80058d8:	4b06      	ldr	r3, [pc, #24]	@ (80058f4 <cleanup_stdio+0x3c>)
 80058da:	4299      	cmp	r1, r3
 80058dc:	d004      	beq.n	80058e8 <cleanup_stdio+0x30>
 80058de:	4620      	mov	r0, r4
 80058e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058e4:	f000 bd98 	b.w	8006418 <_fflush_r>
 80058e8:	bd10      	pop	{r4, pc}
 80058ea:	bf00      	nop
 80058ec:	2000035c 	.word	0x2000035c
 80058f0:	200003c4 	.word	0x200003c4
 80058f4:	2000042c 	.word	0x2000042c

080058f8 <global_stdio_init.part.0>:
 80058f8:	b510      	push	{r4, lr}
 80058fa:	4b0b      	ldr	r3, [pc, #44]	@ (8005928 <global_stdio_init.part.0+0x30>)
 80058fc:	4c0b      	ldr	r4, [pc, #44]	@ (800592c <global_stdio_init.part.0+0x34>)
 80058fe:	4a0c      	ldr	r2, [pc, #48]	@ (8005930 <global_stdio_init.part.0+0x38>)
 8005900:	601a      	str	r2, [r3, #0]
 8005902:	4620      	mov	r0, r4
 8005904:	2200      	movs	r2, #0
 8005906:	2104      	movs	r1, #4
 8005908:	f7ff ff94 	bl	8005834 <std>
 800590c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005910:	2201      	movs	r2, #1
 8005912:	2109      	movs	r1, #9
 8005914:	f7ff ff8e 	bl	8005834 <std>
 8005918:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800591c:	2202      	movs	r2, #2
 800591e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005922:	2112      	movs	r1, #18
 8005924:	f7ff bf86 	b.w	8005834 <std>
 8005928:	20000494 	.word	0x20000494
 800592c:	2000035c 	.word	0x2000035c
 8005930:	080058a1 	.word	0x080058a1

08005934 <__sfp_lock_acquire>:
 8005934:	4801      	ldr	r0, [pc, #4]	@ (800593c <__sfp_lock_acquire+0x8>)
 8005936:	f000 b920 	b.w	8005b7a <__retarget_lock_acquire_recursive>
 800593a:	bf00      	nop
 800593c:	2000049d 	.word	0x2000049d

08005940 <__sfp_lock_release>:
 8005940:	4801      	ldr	r0, [pc, #4]	@ (8005948 <__sfp_lock_release+0x8>)
 8005942:	f000 b91b 	b.w	8005b7c <__retarget_lock_release_recursive>
 8005946:	bf00      	nop
 8005948:	2000049d 	.word	0x2000049d

0800594c <__sinit>:
 800594c:	b510      	push	{r4, lr}
 800594e:	4604      	mov	r4, r0
 8005950:	f7ff fff0 	bl	8005934 <__sfp_lock_acquire>
 8005954:	6a23      	ldr	r3, [r4, #32]
 8005956:	b11b      	cbz	r3, 8005960 <__sinit+0x14>
 8005958:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800595c:	f7ff bff0 	b.w	8005940 <__sfp_lock_release>
 8005960:	4b04      	ldr	r3, [pc, #16]	@ (8005974 <__sinit+0x28>)
 8005962:	6223      	str	r3, [r4, #32]
 8005964:	4b04      	ldr	r3, [pc, #16]	@ (8005978 <__sinit+0x2c>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d1f5      	bne.n	8005958 <__sinit+0xc>
 800596c:	f7ff ffc4 	bl	80058f8 <global_stdio_init.part.0>
 8005970:	e7f2      	b.n	8005958 <__sinit+0xc>
 8005972:	bf00      	nop
 8005974:	080058b9 	.word	0x080058b9
 8005978:	20000494 	.word	0x20000494

0800597c <_fwalk_sglue>:
 800597c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005980:	4607      	mov	r7, r0
 8005982:	4688      	mov	r8, r1
 8005984:	4614      	mov	r4, r2
 8005986:	2600      	movs	r6, #0
 8005988:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800598c:	f1b9 0901 	subs.w	r9, r9, #1
 8005990:	d505      	bpl.n	800599e <_fwalk_sglue+0x22>
 8005992:	6824      	ldr	r4, [r4, #0]
 8005994:	2c00      	cmp	r4, #0
 8005996:	d1f7      	bne.n	8005988 <_fwalk_sglue+0xc>
 8005998:	4630      	mov	r0, r6
 800599a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800599e:	89ab      	ldrh	r3, [r5, #12]
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d907      	bls.n	80059b4 <_fwalk_sglue+0x38>
 80059a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80059a8:	3301      	adds	r3, #1
 80059aa:	d003      	beq.n	80059b4 <_fwalk_sglue+0x38>
 80059ac:	4629      	mov	r1, r5
 80059ae:	4638      	mov	r0, r7
 80059b0:	47c0      	blx	r8
 80059b2:	4306      	orrs	r6, r0
 80059b4:	3568      	adds	r5, #104	@ 0x68
 80059b6:	e7e9      	b.n	800598c <_fwalk_sglue+0x10>

080059b8 <iprintf>:
 80059b8:	b40f      	push	{r0, r1, r2, r3}
 80059ba:	b507      	push	{r0, r1, r2, lr}
 80059bc:	4906      	ldr	r1, [pc, #24]	@ (80059d8 <iprintf+0x20>)
 80059be:	ab04      	add	r3, sp, #16
 80059c0:	6808      	ldr	r0, [r1, #0]
 80059c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80059c6:	6881      	ldr	r1, [r0, #8]
 80059c8:	9301      	str	r3, [sp, #4]
 80059ca:	f000 f9fb 	bl	8005dc4 <_vfiprintf_r>
 80059ce:	b003      	add	sp, #12
 80059d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80059d4:	b004      	add	sp, #16
 80059d6:	4770      	bx	lr
 80059d8:	20000018 	.word	0x20000018

080059dc <__sread>:
 80059dc:	b510      	push	{r4, lr}
 80059de:	460c      	mov	r4, r1
 80059e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059e4:	f000 f87a 	bl	8005adc <_read_r>
 80059e8:	2800      	cmp	r0, #0
 80059ea:	bfab      	itete	ge
 80059ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80059ee:	89a3      	ldrhlt	r3, [r4, #12]
 80059f0:	181b      	addge	r3, r3, r0
 80059f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80059f6:	bfac      	ite	ge
 80059f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80059fa:	81a3      	strhlt	r3, [r4, #12]
 80059fc:	bd10      	pop	{r4, pc}

080059fe <__swrite>:
 80059fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a02:	461f      	mov	r7, r3
 8005a04:	898b      	ldrh	r3, [r1, #12]
 8005a06:	05db      	lsls	r3, r3, #23
 8005a08:	4605      	mov	r5, r0
 8005a0a:	460c      	mov	r4, r1
 8005a0c:	4616      	mov	r6, r2
 8005a0e:	d505      	bpl.n	8005a1c <__swrite+0x1e>
 8005a10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a14:	2302      	movs	r3, #2
 8005a16:	2200      	movs	r2, #0
 8005a18:	f000 f84e 	bl	8005ab8 <_lseek_r>
 8005a1c:	89a3      	ldrh	r3, [r4, #12]
 8005a1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a22:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a26:	81a3      	strh	r3, [r4, #12]
 8005a28:	4632      	mov	r2, r6
 8005a2a:	463b      	mov	r3, r7
 8005a2c:	4628      	mov	r0, r5
 8005a2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a32:	f000 b865 	b.w	8005b00 <_write_r>

08005a36 <__sseek>:
 8005a36:	b510      	push	{r4, lr}
 8005a38:	460c      	mov	r4, r1
 8005a3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a3e:	f000 f83b 	bl	8005ab8 <_lseek_r>
 8005a42:	1c43      	adds	r3, r0, #1
 8005a44:	89a3      	ldrh	r3, [r4, #12]
 8005a46:	bf15      	itete	ne
 8005a48:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005a4a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005a4e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005a52:	81a3      	strheq	r3, [r4, #12]
 8005a54:	bf18      	it	ne
 8005a56:	81a3      	strhne	r3, [r4, #12]
 8005a58:	bd10      	pop	{r4, pc}

08005a5a <__sclose>:
 8005a5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a5e:	f000 b81b 	b.w	8005a98 <_close_r>

08005a62 <memset>:
 8005a62:	4402      	add	r2, r0
 8005a64:	4603      	mov	r3, r0
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d100      	bne.n	8005a6c <memset+0xa>
 8005a6a:	4770      	bx	lr
 8005a6c:	f803 1b01 	strb.w	r1, [r3], #1
 8005a70:	e7f9      	b.n	8005a66 <memset+0x4>

08005a72 <strncmp>:
 8005a72:	b510      	push	{r4, lr}
 8005a74:	b16a      	cbz	r2, 8005a92 <strncmp+0x20>
 8005a76:	3901      	subs	r1, #1
 8005a78:	1884      	adds	r4, r0, r2
 8005a7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a7e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d103      	bne.n	8005a8e <strncmp+0x1c>
 8005a86:	42a0      	cmp	r0, r4
 8005a88:	d001      	beq.n	8005a8e <strncmp+0x1c>
 8005a8a:	2a00      	cmp	r2, #0
 8005a8c:	d1f5      	bne.n	8005a7a <strncmp+0x8>
 8005a8e:	1ad0      	subs	r0, r2, r3
 8005a90:	bd10      	pop	{r4, pc}
 8005a92:	4610      	mov	r0, r2
 8005a94:	e7fc      	b.n	8005a90 <strncmp+0x1e>
	...

08005a98 <_close_r>:
 8005a98:	b538      	push	{r3, r4, r5, lr}
 8005a9a:	4d06      	ldr	r5, [pc, #24]	@ (8005ab4 <_close_r+0x1c>)
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	4604      	mov	r4, r0
 8005aa0:	4608      	mov	r0, r1
 8005aa2:	602b      	str	r3, [r5, #0]
 8005aa4:	f7fb fac1 	bl	800102a <_close>
 8005aa8:	1c43      	adds	r3, r0, #1
 8005aaa:	d102      	bne.n	8005ab2 <_close_r+0x1a>
 8005aac:	682b      	ldr	r3, [r5, #0]
 8005aae:	b103      	cbz	r3, 8005ab2 <_close_r+0x1a>
 8005ab0:	6023      	str	r3, [r4, #0]
 8005ab2:	bd38      	pop	{r3, r4, r5, pc}
 8005ab4:	20000498 	.word	0x20000498

08005ab8 <_lseek_r>:
 8005ab8:	b538      	push	{r3, r4, r5, lr}
 8005aba:	4d07      	ldr	r5, [pc, #28]	@ (8005ad8 <_lseek_r+0x20>)
 8005abc:	4604      	mov	r4, r0
 8005abe:	4608      	mov	r0, r1
 8005ac0:	4611      	mov	r1, r2
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	602a      	str	r2, [r5, #0]
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	f7fb fad6 	bl	8001078 <_lseek>
 8005acc:	1c43      	adds	r3, r0, #1
 8005ace:	d102      	bne.n	8005ad6 <_lseek_r+0x1e>
 8005ad0:	682b      	ldr	r3, [r5, #0]
 8005ad2:	b103      	cbz	r3, 8005ad6 <_lseek_r+0x1e>
 8005ad4:	6023      	str	r3, [r4, #0]
 8005ad6:	bd38      	pop	{r3, r4, r5, pc}
 8005ad8:	20000498 	.word	0x20000498

08005adc <_read_r>:
 8005adc:	b538      	push	{r3, r4, r5, lr}
 8005ade:	4d07      	ldr	r5, [pc, #28]	@ (8005afc <_read_r+0x20>)
 8005ae0:	4604      	mov	r4, r0
 8005ae2:	4608      	mov	r0, r1
 8005ae4:	4611      	mov	r1, r2
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	602a      	str	r2, [r5, #0]
 8005aea:	461a      	mov	r2, r3
 8005aec:	f7fb fa80 	bl	8000ff0 <_read>
 8005af0:	1c43      	adds	r3, r0, #1
 8005af2:	d102      	bne.n	8005afa <_read_r+0x1e>
 8005af4:	682b      	ldr	r3, [r5, #0]
 8005af6:	b103      	cbz	r3, 8005afa <_read_r+0x1e>
 8005af8:	6023      	str	r3, [r4, #0]
 8005afa:	bd38      	pop	{r3, r4, r5, pc}
 8005afc:	20000498 	.word	0x20000498

08005b00 <_write_r>:
 8005b00:	b538      	push	{r3, r4, r5, lr}
 8005b02:	4d07      	ldr	r5, [pc, #28]	@ (8005b20 <_write_r+0x20>)
 8005b04:	4604      	mov	r4, r0
 8005b06:	4608      	mov	r0, r1
 8005b08:	4611      	mov	r1, r2
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	602a      	str	r2, [r5, #0]
 8005b0e:	461a      	mov	r2, r3
 8005b10:	f7fb f80e 	bl	8000b30 <_write>
 8005b14:	1c43      	adds	r3, r0, #1
 8005b16:	d102      	bne.n	8005b1e <_write_r+0x1e>
 8005b18:	682b      	ldr	r3, [r5, #0]
 8005b1a:	b103      	cbz	r3, 8005b1e <_write_r+0x1e>
 8005b1c:	6023      	str	r3, [r4, #0]
 8005b1e:	bd38      	pop	{r3, r4, r5, pc}
 8005b20:	20000498 	.word	0x20000498

08005b24 <__errno>:
 8005b24:	4b01      	ldr	r3, [pc, #4]	@ (8005b2c <__errno+0x8>)
 8005b26:	6818      	ldr	r0, [r3, #0]
 8005b28:	4770      	bx	lr
 8005b2a:	bf00      	nop
 8005b2c:	20000018 	.word	0x20000018

08005b30 <__libc_init_array>:
 8005b30:	b570      	push	{r4, r5, r6, lr}
 8005b32:	4d0d      	ldr	r5, [pc, #52]	@ (8005b68 <__libc_init_array+0x38>)
 8005b34:	4c0d      	ldr	r4, [pc, #52]	@ (8005b6c <__libc_init_array+0x3c>)
 8005b36:	1b64      	subs	r4, r4, r5
 8005b38:	10a4      	asrs	r4, r4, #2
 8005b3a:	2600      	movs	r6, #0
 8005b3c:	42a6      	cmp	r6, r4
 8005b3e:	d109      	bne.n	8005b54 <__libc_init_array+0x24>
 8005b40:	4d0b      	ldr	r5, [pc, #44]	@ (8005b70 <__libc_init_array+0x40>)
 8005b42:	4c0c      	ldr	r4, [pc, #48]	@ (8005b74 <__libc_init_array+0x44>)
 8005b44:	f000 fdb8 	bl	80066b8 <_init>
 8005b48:	1b64      	subs	r4, r4, r5
 8005b4a:	10a4      	asrs	r4, r4, #2
 8005b4c:	2600      	movs	r6, #0
 8005b4e:	42a6      	cmp	r6, r4
 8005b50:	d105      	bne.n	8005b5e <__libc_init_array+0x2e>
 8005b52:	bd70      	pop	{r4, r5, r6, pc}
 8005b54:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b58:	4798      	blx	r3
 8005b5a:	3601      	adds	r6, #1
 8005b5c:	e7ee      	b.n	8005b3c <__libc_init_array+0xc>
 8005b5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b62:	4798      	blx	r3
 8005b64:	3601      	adds	r6, #1
 8005b66:	e7f2      	b.n	8005b4e <__libc_init_array+0x1e>
 8005b68:	0800696c 	.word	0x0800696c
 8005b6c:	0800696c 	.word	0x0800696c
 8005b70:	0800696c 	.word	0x0800696c
 8005b74:	08006970 	.word	0x08006970

08005b78 <__retarget_lock_init_recursive>:
 8005b78:	4770      	bx	lr

08005b7a <__retarget_lock_acquire_recursive>:
 8005b7a:	4770      	bx	lr

08005b7c <__retarget_lock_release_recursive>:
 8005b7c:	4770      	bx	lr
	...

08005b80 <_free_r>:
 8005b80:	b538      	push	{r3, r4, r5, lr}
 8005b82:	4605      	mov	r5, r0
 8005b84:	2900      	cmp	r1, #0
 8005b86:	d041      	beq.n	8005c0c <_free_r+0x8c>
 8005b88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b8c:	1f0c      	subs	r4, r1, #4
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	bfb8      	it	lt
 8005b92:	18e4      	addlt	r4, r4, r3
 8005b94:	f000 f8e0 	bl	8005d58 <__malloc_lock>
 8005b98:	4a1d      	ldr	r2, [pc, #116]	@ (8005c10 <_free_r+0x90>)
 8005b9a:	6813      	ldr	r3, [r2, #0]
 8005b9c:	b933      	cbnz	r3, 8005bac <_free_r+0x2c>
 8005b9e:	6063      	str	r3, [r4, #4]
 8005ba0:	6014      	str	r4, [r2, #0]
 8005ba2:	4628      	mov	r0, r5
 8005ba4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ba8:	f000 b8dc 	b.w	8005d64 <__malloc_unlock>
 8005bac:	42a3      	cmp	r3, r4
 8005bae:	d908      	bls.n	8005bc2 <_free_r+0x42>
 8005bb0:	6820      	ldr	r0, [r4, #0]
 8005bb2:	1821      	adds	r1, r4, r0
 8005bb4:	428b      	cmp	r3, r1
 8005bb6:	bf01      	itttt	eq
 8005bb8:	6819      	ldreq	r1, [r3, #0]
 8005bba:	685b      	ldreq	r3, [r3, #4]
 8005bbc:	1809      	addeq	r1, r1, r0
 8005bbe:	6021      	streq	r1, [r4, #0]
 8005bc0:	e7ed      	b.n	8005b9e <_free_r+0x1e>
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	b10b      	cbz	r3, 8005bcc <_free_r+0x4c>
 8005bc8:	42a3      	cmp	r3, r4
 8005bca:	d9fa      	bls.n	8005bc2 <_free_r+0x42>
 8005bcc:	6811      	ldr	r1, [r2, #0]
 8005bce:	1850      	adds	r0, r2, r1
 8005bd0:	42a0      	cmp	r0, r4
 8005bd2:	d10b      	bne.n	8005bec <_free_r+0x6c>
 8005bd4:	6820      	ldr	r0, [r4, #0]
 8005bd6:	4401      	add	r1, r0
 8005bd8:	1850      	adds	r0, r2, r1
 8005bda:	4283      	cmp	r3, r0
 8005bdc:	6011      	str	r1, [r2, #0]
 8005bde:	d1e0      	bne.n	8005ba2 <_free_r+0x22>
 8005be0:	6818      	ldr	r0, [r3, #0]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	6053      	str	r3, [r2, #4]
 8005be6:	4408      	add	r0, r1
 8005be8:	6010      	str	r0, [r2, #0]
 8005bea:	e7da      	b.n	8005ba2 <_free_r+0x22>
 8005bec:	d902      	bls.n	8005bf4 <_free_r+0x74>
 8005bee:	230c      	movs	r3, #12
 8005bf0:	602b      	str	r3, [r5, #0]
 8005bf2:	e7d6      	b.n	8005ba2 <_free_r+0x22>
 8005bf4:	6820      	ldr	r0, [r4, #0]
 8005bf6:	1821      	adds	r1, r4, r0
 8005bf8:	428b      	cmp	r3, r1
 8005bfa:	bf04      	itt	eq
 8005bfc:	6819      	ldreq	r1, [r3, #0]
 8005bfe:	685b      	ldreq	r3, [r3, #4]
 8005c00:	6063      	str	r3, [r4, #4]
 8005c02:	bf04      	itt	eq
 8005c04:	1809      	addeq	r1, r1, r0
 8005c06:	6021      	streq	r1, [r4, #0]
 8005c08:	6054      	str	r4, [r2, #4]
 8005c0a:	e7ca      	b.n	8005ba2 <_free_r+0x22>
 8005c0c:	bd38      	pop	{r3, r4, r5, pc}
 8005c0e:	bf00      	nop
 8005c10:	200004a4 	.word	0x200004a4

08005c14 <sbrk_aligned>:
 8005c14:	b570      	push	{r4, r5, r6, lr}
 8005c16:	4e0f      	ldr	r6, [pc, #60]	@ (8005c54 <sbrk_aligned+0x40>)
 8005c18:	460c      	mov	r4, r1
 8005c1a:	6831      	ldr	r1, [r6, #0]
 8005c1c:	4605      	mov	r5, r0
 8005c1e:	b911      	cbnz	r1, 8005c26 <sbrk_aligned+0x12>
 8005c20:	f000 fcb6 	bl	8006590 <_sbrk_r>
 8005c24:	6030      	str	r0, [r6, #0]
 8005c26:	4621      	mov	r1, r4
 8005c28:	4628      	mov	r0, r5
 8005c2a:	f000 fcb1 	bl	8006590 <_sbrk_r>
 8005c2e:	1c43      	adds	r3, r0, #1
 8005c30:	d103      	bne.n	8005c3a <sbrk_aligned+0x26>
 8005c32:	f04f 34ff 	mov.w	r4, #4294967295
 8005c36:	4620      	mov	r0, r4
 8005c38:	bd70      	pop	{r4, r5, r6, pc}
 8005c3a:	1cc4      	adds	r4, r0, #3
 8005c3c:	f024 0403 	bic.w	r4, r4, #3
 8005c40:	42a0      	cmp	r0, r4
 8005c42:	d0f8      	beq.n	8005c36 <sbrk_aligned+0x22>
 8005c44:	1a21      	subs	r1, r4, r0
 8005c46:	4628      	mov	r0, r5
 8005c48:	f000 fca2 	bl	8006590 <_sbrk_r>
 8005c4c:	3001      	adds	r0, #1
 8005c4e:	d1f2      	bne.n	8005c36 <sbrk_aligned+0x22>
 8005c50:	e7ef      	b.n	8005c32 <sbrk_aligned+0x1e>
 8005c52:	bf00      	nop
 8005c54:	200004a0 	.word	0x200004a0

08005c58 <_malloc_r>:
 8005c58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c5c:	1ccd      	adds	r5, r1, #3
 8005c5e:	f025 0503 	bic.w	r5, r5, #3
 8005c62:	3508      	adds	r5, #8
 8005c64:	2d0c      	cmp	r5, #12
 8005c66:	bf38      	it	cc
 8005c68:	250c      	movcc	r5, #12
 8005c6a:	2d00      	cmp	r5, #0
 8005c6c:	4606      	mov	r6, r0
 8005c6e:	db01      	blt.n	8005c74 <_malloc_r+0x1c>
 8005c70:	42a9      	cmp	r1, r5
 8005c72:	d904      	bls.n	8005c7e <_malloc_r+0x26>
 8005c74:	230c      	movs	r3, #12
 8005c76:	6033      	str	r3, [r6, #0]
 8005c78:	2000      	movs	r0, #0
 8005c7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005d54 <_malloc_r+0xfc>
 8005c82:	f000 f869 	bl	8005d58 <__malloc_lock>
 8005c86:	f8d8 3000 	ldr.w	r3, [r8]
 8005c8a:	461c      	mov	r4, r3
 8005c8c:	bb44      	cbnz	r4, 8005ce0 <_malloc_r+0x88>
 8005c8e:	4629      	mov	r1, r5
 8005c90:	4630      	mov	r0, r6
 8005c92:	f7ff ffbf 	bl	8005c14 <sbrk_aligned>
 8005c96:	1c43      	adds	r3, r0, #1
 8005c98:	4604      	mov	r4, r0
 8005c9a:	d158      	bne.n	8005d4e <_malloc_r+0xf6>
 8005c9c:	f8d8 4000 	ldr.w	r4, [r8]
 8005ca0:	4627      	mov	r7, r4
 8005ca2:	2f00      	cmp	r7, #0
 8005ca4:	d143      	bne.n	8005d2e <_malloc_r+0xd6>
 8005ca6:	2c00      	cmp	r4, #0
 8005ca8:	d04b      	beq.n	8005d42 <_malloc_r+0xea>
 8005caa:	6823      	ldr	r3, [r4, #0]
 8005cac:	4639      	mov	r1, r7
 8005cae:	4630      	mov	r0, r6
 8005cb0:	eb04 0903 	add.w	r9, r4, r3
 8005cb4:	f000 fc6c 	bl	8006590 <_sbrk_r>
 8005cb8:	4581      	cmp	r9, r0
 8005cba:	d142      	bne.n	8005d42 <_malloc_r+0xea>
 8005cbc:	6821      	ldr	r1, [r4, #0]
 8005cbe:	1a6d      	subs	r5, r5, r1
 8005cc0:	4629      	mov	r1, r5
 8005cc2:	4630      	mov	r0, r6
 8005cc4:	f7ff ffa6 	bl	8005c14 <sbrk_aligned>
 8005cc8:	3001      	adds	r0, #1
 8005cca:	d03a      	beq.n	8005d42 <_malloc_r+0xea>
 8005ccc:	6823      	ldr	r3, [r4, #0]
 8005cce:	442b      	add	r3, r5
 8005cd0:	6023      	str	r3, [r4, #0]
 8005cd2:	f8d8 3000 	ldr.w	r3, [r8]
 8005cd6:	685a      	ldr	r2, [r3, #4]
 8005cd8:	bb62      	cbnz	r2, 8005d34 <_malloc_r+0xdc>
 8005cda:	f8c8 7000 	str.w	r7, [r8]
 8005cde:	e00f      	b.n	8005d00 <_malloc_r+0xa8>
 8005ce0:	6822      	ldr	r2, [r4, #0]
 8005ce2:	1b52      	subs	r2, r2, r5
 8005ce4:	d420      	bmi.n	8005d28 <_malloc_r+0xd0>
 8005ce6:	2a0b      	cmp	r2, #11
 8005ce8:	d917      	bls.n	8005d1a <_malloc_r+0xc2>
 8005cea:	1961      	adds	r1, r4, r5
 8005cec:	42a3      	cmp	r3, r4
 8005cee:	6025      	str	r5, [r4, #0]
 8005cf0:	bf18      	it	ne
 8005cf2:	6059      	strne	r1, [r3, #4]
 8005cf4:	6863      	ldr	r3, [r4, #4]
 8005cf6:	bf08      	it	eq
 8005cf8:	f8c8 1000 	streq.w	r1, [r8]
 8005cfc:	5162      	str	r2, [r4, r5]
 8005cfe:	604b      	str	r3, [r1, #4]
 8005d00:	4630      	mov	r0, r6
 8005d02:	f000 f82f 	bl	8005d64 <__malloc_unlock>
 8005d06:	f104 000b 	add.w	r0, r4, #11
 8005d0a:	1d23      	adds	r3, r4, #4
 8005d0c:	f020 0007 	bic.w	r0, r0, #7
 8005d10:	1ac2      	subs	r2, r0, r3
 8005d12:	bf1c      	itt	ne
 8005d14:	1a1b      	subne	r3, r3, r0
 8005d16:	50a3      	strne	r3, [r4, r2]
 8005d18:	e7af      	b.n	8005c7a <_malloc_r+0x22>
 8005d1a:	6862      	ldr	r2, [r4, #4]
 8005d1c:	42a3      	cmp	r3, r4
 8005d1e:	bf0c      	ite	eq
 8005d20:	f8c8 2000 	streq.w	r2, [r8]
 8005d24:	605a      	strne	r2, [r3, #4]
 8005d26:	e7eb      	b.n	8005d00 <_malloc_r+0xa8>
 8005d28:	4623      	mov	r3, r4
 8005d2a:	6864      	ldr	r4, [r4, #4]
 8005d2c:	e7ae      	b.n	8005c8c <_malloc_r+0x34>
 8005d2e:	463c      	mov	r4, r7
 8005d30:	687f      	ldr	r7, [r7, #4]
 8005d32:	e7b6      	b.n	8005ca2 <_malloc_r+0x4a>
 8005d34:	461a      	mov	r2, r3
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	42a3      	cmp	r3, r4
 8005d3a:	d1fb      	bne.n	8005d34 <_malloc_r+0xdc>
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	6053      	str	r3, [r2, #4]
 8005d40:	e7de      	b.n	8005d00 <_malloc_r+0xa8>
 8005d42:	230c      	movs	r3, #12
 8005d44:	6033      	str	r3, [r6, #0]
 8005d46:	4630      	mov	r0, r6
 8005d48:	f000 f80c 	bl	8005d64 <__malloc_unlock>
 8005d4c:	e794      	b.n	8005c78 <_malloc_r+0x20>
 8005d4e:	6005      	str	r5, [r0, #0]
 8005d50:	e7d6      	b.n	8005d00 <_malloc_r+0xa8>
 8005d52:	bf00      	nop
 8005d54:	200004a4 	.word	0x200004a4

08005d58 <__malloc_lock>:
 8005d58:	4801      	ldr	r0, [pc, #4]	@ (8005d60 <__malloc_lock+0x8>)
 8005d5a:	f7ff bf0e 	b.w	8005b7a <__retarget_lock_acquire_recursive>
 8005d5e:	bf00      	nop
 8005d60:	2000049c 	.word	0x2000049c

08005d64 <__malloc_unlock>:
 8005d64:	4801      	ldr	r0, [pc, #4]	@ (8005d6c <__malloc_unlock+0x8>)
 8005d66:	f7ff bf09 	b.w	8005b7c <__retarget_lock_release_recursive>
 8005d6a:	bf00      	nop
 8005d6c:	2000049c 	.word	0x2000049c

08005d70 <__sfputc_r>:
 8005d70:	6893      	ldr	r3, [r2, #8]
 8005d72:	3b01      	subs	r3, #1
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	b410      	push	{r4}
 8005d78:	6093      	str	r3, [r2, #8]
 8005d7a:	da08      	bge.n	8005d8e <__sfputc_r+0x1e>
 8005d7c:	6994      	ldr	r4, [r2, #24]
 8005d7e:	42a3      	cmp	r3, r4
 8005d80:	db01      	blt.n	8005d86 <__sfputc_r+0x16>
 8005d82:	290a      	cmp	r1, #10
 8005d84:	d103      	bne.n	8005d8e <__sfputc_r+0x1e>
 8005d86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d8a:	f000 bb6d 	b.w	8006468 <__swbuf_r>
 8005d8e:	6813      	ldr	r3, [r2, #0]
 8005d90:	1c58      	adds	r0, r3, #1
 8005d92:	6010      	str	r0, [r2, #0]
 8005d94:	7019      	strb	r1, [r3, #0]
 8005d96:	4608      	mov	r0, r1
 8005d98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d9c:	4770      	bx	lr

08005d9e <__sfputs_r>:
 8005d9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005da0:	4606      	mov	r6, r0
 8005da2:	460f      	mov	r7, r1
 8005da4:	4614      	mov	r4, r2
 8005da6:	18d5      	adds	r5, r2, r3
 8005da8:	42ac      	cmp	r4, r5
 8005daa:	d101      	bne.n	8005db0 <__sfputs_r+0x12>
 8005dac:	2000      	movs	r0, #0
 8005dae:	e007      	b.n	8005dc0 <__sfputs_r+0x22>
 8005db0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005db4:	463a      	mov	r2, r7
 8005db6:	4630      	mov	r0, r6
 8005db8:	f7ff ffda 	bl	8005d70 <__sfputc_r>
 8005dbc:	1c43      	adds	r3, r0, #1
 8005dbe:	d1f3      	bne.n	8005da8 <__sfputs_r+0xa>
 8005dc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005dc4 <_vfiprintf_r>:
 8005dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dc8:	460d      	mov	r5, r1
 8005dca:	b09d      	sub	sp, #116	@ 0x74
 8005dcc:	4614      	mov	r4, r2
 8005dce:	4698      	mov	r8, r3
 8005dd0:	4606      	mov	r6, r0
 8005dd2:	b118      	cbz	r0, 8005ddc <_vfiprintf_r+0x18>
 8005dd4:	6a03      	ldr	r3, [r0, #32]
 8005dd6:	b90b      	cbnz	r3, 8005ddc <_vfiprintf_r+0x18>
 8005dd8:	f7ff fdb8 	bl	800594c <__sinit>
 8005ddc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005dde:	07d9      	lsls	r1, r3, #31
 8005de0:	d405      	bmi.n	8005dee <_vfiprintf_r+0x2a>
 8005de2:	89ab      	ldrh	r3, [r5, #12]
 8005de4:	059a      	lsls	r2, r3, #22
 8005de6:	d402      	bmi.n	8005dee <_vfiprintf_r+0x2a>
 8005de8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005dea:	f7ff fec6 	bl	8005b7a <__retarget_lock_acquire_recursive>
 8005dee:	89ab      	ldrh	r3, [r5, #12]
 8005df0:	071b      	lsls	r3, r3, #28
 8005df2:	d501      	bpl.n	8005df8 <_vfiprintf_r+0x34>
 8005df4:	692b      	ldr	r3, [r5, #16]
 8005df6:	b99b      	cbnz	r3, 8005e20 <_vfiprintf_r+0x5c>
 8005df8:	4629      	mov	r1, r5
 8005dfa:	4630      	mov	r0, r6
 8005dfc:	f000 fb72 	bl	80064e4 <__swsetup_r>
 8005e00:	b170      	cbz	r0, 8005e20 <_vfiprintf_r+0x5c>
 8005e02:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005e04:	07dc      	lsls	r4, r3, #31
 8005e06:	d504      	bpl.n	8005e12 <_vfiprintf_r+0x4e>
 8005e08:	f04f 30ff 	mov.w	r0, #4294967295
 8005e0c:	b01d      	add	sp, #116	@ 0x74
 8005e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e12:	89ab      	ldrh	r3, [r5, #12]
 8005e14:	0598      	lsls	r0, r3, #22
 8005e16:	d4f7      	bmi.n	8005e08 <_vfiprintf_r+0x44>
 8005e18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005e1a:	f7ff feaf 	bl	8005b7c <__retarget_lock_release_recursive>
 8005e1e:	e7f3      	b.n	8005e08 <_vfiprintf_r+0x44>
 8005e20:	2300      	movs	r3, #0
 8005e22:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e24:	2320      	movs	r3, #32
 8005e26:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005e2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e2e:	2330      	movs	r3, #48	@ 0x30
 8005e30:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005fe0 <_vfiprintf_r+0x21c>
 8005e34:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005e38:	f04f 0901 	mov.w	r9, #1
 8005e3c:	4623      	mov	r3, r4
 8005e3e:	469a      	mov	sl, r3
 8005e40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e44:	b10a      	cbz	r2, 8005e4a <_vfiprintf_r+0x86>
 8005e46:	2a25      	cmp	r2, #37	@ 0x25
 8005e48:	d1f9      	bne.n	8005e3e <_vfiprintf_r+0x7a>
 8005e4a:	ebba 0b04 	subs.w	fp, sl, r4
 8005e4e:	d00b      	beq.n	8005e68 <_vfiprintf_r+0xa4>
 8005e50:	465b      	mov	r3, fp
 8005e52:	4622      	mov	r2, r4
 8005e54:	4629      	mov	r1, r5
 8005e56:	4630      	mov	r0, r6
 8005e58:	f7ff ffa1 	bl	8005d9e <__sfputs_r>
 8005e5c:	3001      	adds	r0, #1
 8005e5e:	f000 80a7 	beq.w	8005fb0 <_vfiprintf_r+0x1ec>
 8005e62:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e64:	445a      	add	r2, fp
 8005e66:	9209      	str	r2, [sp, #36]	@ 0x24
 8005e68:	f89a 3000 	ldrb.w	r3, [sl]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	f000 809f 	beq.w	8005fb0 <_vfiprintf_r+0x1ec>
 8005e72:	2300      	movs	r3, #0
 8005e74:	f04f 32ff 	mov.w	r2, #4294967295
 8005e78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e7c:	f10a 0a01 	add.w	sl, sl, #1
 8005e80:	9304      	str	r3, [sp, #16]
 8005e82:	9307      	str	r3, [sp, #28]
 8005e84:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005e88:	931a      	str	r3, [sp, #104]	@ 0x68
 8005e8a:	4654      	mov	r4, sl
 8005e8c:	2205      	movs	r2, #5
 8005e8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e92:	4853      	ldr	r0, [pc, #332]	@ (8005fe0 <_vfiprintf_r+0x21c>)
 8005e94:	f7fa f9a4 	bl	80001e0 <memchr>
 8005e98:	9a04      	ldr	r2, [sp, #16]
 8005e9a:	b9d8      	cbnz	r0, 8005ed4 <_vfiprintf_r+0x110>
 8005e9c:	06d1      	lsls	r1, r2, #27
 8005e9e:	bf44      	itt	mi
 8005ea0:	2320      	movmi	r3, #32
 8005ea2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ea6:	0713      	lsls	r3, r2, #28
 8005ea8:	bf44      	itt	mi
 8005eaa:	232b      	movmi	r3, #43	@ 0x2b
 8005eac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005eb0:	f89a 3000 	ldrb.w	r3, [sl]
 8005eb4:	2b2a      	cmp	r3, #42	@ 0x2a
 8005eb6:	d015      	beq.n	8005ee4 <_vfiprintf_r+0x120>
 8005eb8:	9a07      	ldr	r2, [sp, #28]
 8005eba:	4654      	mov	r4, sl
 8005ebc:	2000      	movs	r0, #0
 8005ebe:	f04f 0c0a 	mov.w	ip, #10
 8005ec2:	4621      	mov	r1, r4
 8005ec4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ec8:	3b30      	subs	r3, #48	@ 0x30
 8005eca:	2b09      	cmp	r3, #9
 8005ecc:	d94b      	bls.n	8005f66 <_vfiprintf_r+0x1a2>
 8005ece:	b1b0      	cbz	r0, 8005efe <_vfiprintf_r+0x13a>
 8005ed0:	9207      	str	r2, [sp, #28]
 8005ed2:	e014      	b.n	8005efe <_vfiprintf_r+0x13a>
 8005ed4:	eba0 0308 	sub.w	r3, r0, r8
 8005ed8:	fa09 f303 	lsl.w	r3, r9, r3
 8005edc:	4313      	orrs	r3, r2
 8005ede:	9304      	str	r3, [sp, #16]
 8005ee0:	46a2      	mov	sl, r4
 8005ee2:	e7d2      	b.n	8005e8a <_vfiprintf_r+0xc6>
 8005ee4:	9b03      	ldr	r3, [sp, #12]
 8005ee6:	1d19      	adds	r1, r3, #4
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	9103      	str	r1, [sp, #12]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	bfbb      	ittet	lt
 8005ef0:	425b      	neglt	r3, r3
 8005ef2:	f042 0202 	orrlt.w	r2, r2, #2
 8005ef6:	9307      	strge	r3, [sp, #28]
 8005ef8:	9307      	strlt	r3, [sp, #28]
 8005efa:	bfb8      	it	lt
 8005efc:	9204      	strlt	r2, [sp, #16]
 8005efe:	7823      	ldrb	r3, [r4, #0]
 8005f00:	2b2e      	cmp	r3, #46	@ 0x2e
 8005f02:	d10a      	bne.n	8005f1a <_vfiprintf_r+0x156>
 8005f04:	7863      	ldrb	r3, [r4, #1]
 8005f06:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f08:	d132      	bne.n	8005f70 <_vfiprintf_r+0x1ac>
 8005f0a:	9b03      	ldr	r3, [sp, #12]
 8005f0c:	1d1a      	adds	r2, r3, #4
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	9203      	str	r2, [sp, #12]
 8005f12:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005f16:	3402      	adds	r4, #2
 8005f18:	9305      	str	r3, [sp, #20]
 8005f1a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005ff0 <_vfiprintf_r+0x22c>
 8005f1e:	7821      	ldrb	r1, [r4, #0]
 8005f20:	2203      	movs	r2, #3
 8005f22:	4650      	mov	r0, sl
 8005f24:	f7fa f95c 	bl	80001e0 <memchr>
 8005f28:	b138      	cbz	r0, 8005f3a <_vfiprintf_r+0x176>
 8005f2a:	9b04      	ldr	r3, [sp, #16]
 8005f2c:	eba0 000a 	sub.w	r0, r0, sl
 8005f30:	2240      	movs	r2, #64	@ 0x40
 8005f32:	4082      	lsls	r2, r0
 8005f34:	4313      	orrs	r3, r2
 8005f36:	3401      	adds	r4, #1
 8005f38:	9304      	str	r3, [sp, #16]
 8005f3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f3e:	4829      	ldr	r0, [pc, #164]	@ (8005fe4 <_vfiprintf_r+0x220>)
 8005f40:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005f44:	2206      	movs	r2, #6
 8005f46:	f7fa f94b 	bl	80001e0 <memchr>
 8005f4a:	2800      	cmp	r0, #0
 8005f4c:	d03f      	beq.n	8005fce <_vfiprintf_r+0x20a>
 8005f4e:	4b26      	ldr	r3, [pc, #152]	@ (8005fe8 <_vfiprintf_r+0x224>)
 8005f50:	bb1b      	cbnz	r3, 8005f9a <_vfiprintf_r+0x1d6>
 8005f52:	9b03      	ldr	r3, [sp, #12]
 8005f54:	3307      	adds	r3, #7
 8005f56:	f023 0307 	bic.w	r3, r3, #7
 8005f5a:	3308      	adds	r3, #8
 8005f5c:	9303      	str	r3, [sp, #12]
 8005f5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f60:	443b      	add	r3, r7
 8005f62:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f64:	e76a      	b.n	8005e3c <_vfiprintf_r+0x78>
 8005f66:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f6a:	460c      	mov	r4, r1
 8005f6c:	2001      	movs	r0, #1
 8005f6e:	e7a8      	b.n	8005ec2 <_vfiprintf_r+0xfe>
 8005f70:	2300      	movs	r3, #0
 8005f72:	3401      	adds	r4, #1
 8005f74:	9305      	str	r3, [sp, #20]
 8005f76:	4619      	mov	r1, r3
 8005f78:	f04f 0c0a 	mov.w	ip, #10
 8005f7c:	4620      	mov	r0, r4
 8005f7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f82:	3a30      	subs	r2, #48	@ 0x30
 8005f84:	2a09      	cmp	r2, #9
 8005f86:	d903      	bls.n	8005f90 <_vfiprintf_r+0x1cc>
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d0c6      	beq.n	8005f1a <_vfiprintf_r+0x156>
 8005f8c:	9105      	str	r1, [sp, #20]
 8005f8e:	e7c4      	b.n	8005f1a <_vfiprintf_r+0x156>
 8005f90:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f94:	4604      	mov	r4, r0
 8005f96:	2301      	movs	r3, #1
 8005f98:	e7f0      	b.n	8005f7c <_vfiprintf_r+0x1b8>
 8005f9a:	ab03      	add	r3, sp, #12
 8005f9c:	9300      	str	r3, [sp, #0]
 8005f9e:	462a      	mov	r2, r5
 8005fa0:	4b12      	ldr	r3, [pc, #72]	@ (8005fec <_vfiprintf_r+0x228>)
 8005fa2:	a904      	add	r1, sp, #16
 8005fa4:	4630      	mov	r0, r6
 8005fa6:	f3af 8000 	nop.w
 8005faa:	4607      	mov	r7, r0
 8005fac:	1c78      	adds	r0, r7, #1
 8005fae:	d1d6      	bne.n	8005f5e <_vfiprintf_r+0x19a>
 8005fb0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005fb2:	07d9      	lsls	r1, r3, #31
 8005fb4:	d405      	bmi.n	8005fc2 <_vfiprintf_r+0x1fe>
 8005fb6:	89ab      	ldrh	r3, [r5, #12]
 8005fb8:	059a      	lsls	r2, r3, #22
 8005fba:	d402      	bmi.n	8005fc2 <_vfiprintf_r+0x1fe>
 8005fbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005fbe:	f7ff fddd 	bl	8005b7c <__retarget_lock_release_recursive>
 8005fc2:	89ab      	ldrh	r3, [r5, #12]
 8005fc4:	065b      	lsls	r3, r3, #25
 8005fc6:	f53f af1f 	bmi.w	8005e08 <_vfiprintf_r+0x44>
 8005fca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005fcc:	e71e      	b.n	8005e0c <_vfiprintf_r+0x48>
 8005fce:	ab03      	add	r3, sp, #12
 8005fd0:	9300      	str	r3, [sp, #0]
 8005fd2:	462a      	mov	r2, r5
 8005fd4:	4b05      	ldr	r3, [pc, #20]	@ (8005fec <_vfiprintf_r+0x228>)
 8005fd6:	a904      	add	r1, sp, #16
 8005fd8:	4630      	mov	r0, r6
 8005fda:	f000 f879 	bl	80060d0 <_printf_i>
 8005fde:	e7e4      	b.n	8005faa <_vfiprintf_r+0x1e6>
 8005fe0:	08006931 	.word	0x08006931
 8005fe4:	0800693b 	.word	0x0800693b
 8005fe8:	00000000 	.word	0x00000000
 8005fec:	08005d9f 	.word	0x08005d9f
 8005ff0:	08006937 	.word	0x08006937

08005ff4 <_printf_common>:
 8005ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ff8:	4616      	mov	r6, r2
 8005ffa:	4698      	mov	r8, r3
 8005ffc:	688a      	ldr	r2, [r1, #8]
 8005ffe:	690b      	ldr	r3, [r1, #16]
 8006000:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006004:	4293      	cmp	r3, r2
 8006006:	bfb8      	it	lt
 8006008:	4613      	movlt	r3, r2
 800600a:	6033      	str	r3, [r6, #0]
 800600c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006010:	4607      	mov	r7, r0
 8006012:	460c      	mov	r4, r1
 8006014:	b10a      	cbz	r2, 800601a <_printf_common+0x26>
 8006016:	3301      	adds	r3, #1
 8006018:	6033      	str	r3, [r6, #0]
 800601a:	6823      	ldr	r3, [r4, #0]
 800601c:	0699      	lsls	r1, r3, #26
 800601e:	bf42      	ittt	mi
 8006020:	6833      	ldrmi	r3, [r6, #0]
 8006022:	3302      	addmi	r3, #2
 8006024:	6033      	strmi	r3, [r6, #0]
 8006026:	6825      	ldr	r5, [r4, #0]
 8006028:	f015 0506 	ands.w	r5, r5, #6
 800602c:	d106      	bne.n	800603c <_printf_common+0x48>
 800602e:	f104 0a19 	add.w	sl, r4, #25
 8006032:	68e3      	ldr	r3, [r4, #12]
 8006034:	6832      	ldr	r2, [r6, #0]
 8006036:	1a9b      	subs	r3, r3, r2
 8006038:	42ab      	cmp	r3, r5
 800603a:	dc26      	bgt.n	800608a <_printf_common+0x96>
 800603c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006040:	6822      	ldr	r2, [r4, #0]
 8006042:	3b00      	subs	r3, #0
 8006044:	bf18      	it	ne
 8006046:	2301      	movne	r3, #1
 8006048:	0692      	lsls	r2, r2, #26
 800604a:	d42b      	bmi.n	80060a4 <_printf_common+0xb0>
 800604c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006050:	4641      	mov	r1, r8
 8006052:	4638      	mov	r0, r7
 8006054:	47c8      	blx	r9
 8006056:	3001      	adds	r0, #1
 8006058:	d01e      	beq.n	8006098 <_printf_common+0xa4>
 800605a:	6823      	ldr	r3, [r4, #0]
 800605c:	6922      	ldr	r2, [r4, #16]
 800605e:	f003 0306 	and.w	r3, r3, #6
 8006062:	2b04      	cmp	r3, #4
 8006064:	bf02      	ittt	eq
 8006066:	68e5      	ldreq	r5, [r4, #12]
 8006068:	6833      	ldreq	r3, [r6, #0]
 800606a:	1aed      	subeq	r5, r5, r3
 800606c:	68a3      	ldr	r3, [r4, #8]
 800606e:	bf0c      	ite	eq
 8006070:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006074:	2500      	movne	r5, #0
 8006076:	4293      	cmp	r3, r2
 8006078:	bfc4      	itt	gt
 800607a:	1a9b      	subgt	r3, r3, r2
 800607c:	18ed      	addgt	r5, r5, r3
 800607e:	2600      	movs	r6, #0
 8006080:	341a      	adds	r4, #26
 8006082:	42b5      	cmp	r5, r6
 8006084:	d11a      	bne.n	80060bc <_printf_common+0xc8>
 8006086:	2000      	movs	r0, #0
 8006088:	e008      	b.n	800609c <_printf_common+0xa8>
 800608a:	2301      	movs	r3, #1
 800608c:	4652      	mov	r2, sl
 800608e:	4641      	mov	r1, r8
 8006090:	4638      	mov	r0, r7
 8006092:	47c8      	blx	r9
 8006094:	3001      	adds	r0, #1
 8006096:	d103      	bne.n	80060a0 <_printf_common+0xac>
 8006098:	f04f 30ff 	mov.w	r0, #4294967295
 800609c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060a0:	3501      	adds	r5, #1
 80060a2:	e7c6      	b.n	8006032 <_printf_common+0x3e>
 80060a4:	18e1      	adds	r1, r4, r3
 80060a6:	1c5a      	adds	r2, r3, #1
 80060a8:	2030      	movs	r0, #48	@ 0x30
 80060aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80060ae:	4422      	add	r2, r4
 80060b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80060b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80060b8:	3302      	adds	r3, #2
 80060ba:	e7c7      	b.n	800604c <_printf_common+0x58>
 80060bc:	2301      	movs	r3, #1
 80060be:	4622      	mov	r2, r4
 80060c0:	4641      	mov	r1, r8
 80060c2:	4638      	mov	r0, r7
 80060c4:	47c8      	blx	r9
 80060c6:	3001      	adds	r0, #1
 80060c8:	d0e6      	beq.n	8006098 <_printf_common+0xa4>
 80060ca:	3601      	adds	r6, #1
 80060cc:	e7d9      	b.n	8006082 <_printf_common+0x8e>
	...

080060d0 <_printf_i>:
 80060d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060d4:	7e0f      	ldrb	r7, [r1, #24]
 80060d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80060d8:	2f78      	cmp	r7, #120	@ 0x78
 80060da:	4691      	mov	r9, r2
 80060dc:	4680      	mov	r8, r0
 80060de:	460c      	mov	r4, r1
 80060e0:	469a      	mov	sl, r3
 80060e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80060e6:	d807      	bhi.n	80060f8 <_printf_i+0x28>
 80060e8:	2f62      	cmp	r7, #98	@ 0x62
 80060ea:	d80a      	bhi.n	8006102 <_printf_i+0x32>
 80060ec:	2f00      	cmp	r7, #0
 80060ee:	f000 80d2 	beq.w	8006296 <_printf_i+0x1c6>
 80060f2:	2f58      	cmp	r7, #88	@ 0x58
 80060f4:	f000 80b9 	beq.w	800626a <_printf_i+0x19a>
 80060f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80060fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006100:	e03a      	b.n	8006178 <_printf_i+0xa8>
 8006102:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006106:	2b15      	cmp	r3, #21
 8006108:	d8f6      	bhi.n	80060f8 <_printf_i+0x28>
 800610a:	a101      	add	r1, pc, #4	@ (adr r1, 8006110 <_printf_i+0x40>)
 800610c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006110:	08006169 	.word	0x08006169
 8006114:	0800617d 	.word	0x0800617d
 8006118:	080060f9 	.word	0x080060f9
 800611c:	080060f9 	.word	0x080060f9
 8006120:	080060f9 	.word	0x080060f9
 8006124:	080060f9 	.word	0x080060f9
 8006128:	0800617d 	.word	0x0800617d
 800612c:	080060f9 	.word	0x080060f9
 8006130:	080060f9 	.word	0x080060f9
 8006134:	080060f9 	.word	0x080060f9
 8006138:	080060f9 	.word	0x080060f9
 800613c:	0800627d 	.word	0x0800627d
 8006140:	080061a7 	.word	0x080061a7
 8006144:	08006237 	.word	0x08006237
 8006148:	080060f9 	.word	0x080060f9
 800614c:	080060f9 	.word	0x080060f9
 8006150:	0800629f 	.word	0x0800629f
 8006154:	080060f9 	.word	0x080060f9
 8006158:	080061a7 	.word	0x080061a7
 800615c:	080060f9 	.word	0x080060f9
 8006160:	080060f9 	.word	0x080060f9
 8006164:	0800623f 	.word	0x0800623f
 8006168:	6833      	ldr	r3, [r6, #0]
 800616a:	1d1a      	adds	r2, r3, #4
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	6032      	str	r2, [r6, #0]
 8006170:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006174:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006178:	2301      	movs	r3, #1
 800617a:	e09d      	b.n	80062b8 <_printf_i+0x1e8>
 800617c:	6833      	ldr	r3, [r6, #0]
 800617e:	6820      	ldr	r0, [r4, #0]
 8006180:	1d19      	adds	r1, r3, #4
 8006182:	6031      	str	r1, [r6, #0]
 8006184:	0606      	lsls	r6, r0, #24
 8006186:	d501      	bpl.n	800618c <_printf_i+0xbc>
 8006188:	681d      	ldr	r5, [r3, #0]
 800618a:	e003      	b.n	8006194 <_printf_i+0xc4>
 800618c:	0645      	lsls	r5, r0, #25
 800618e:	d5fb      	bpl.n	8006188 <_printf_i+0xb8>
 8006190:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006194:	2d00      	cmp	r5, #0
 8006196:	da03      	bge.n	80061a0 <_printf_i+0xd0>
 8006198:	232d      	movs	r3, #45	@ 0x2d
 800619a:	426d      	negs	r5, r5
 800619c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061a0:	4859      	ldr	r0, [pc, #356]	@ (8006308 <_printf_i+0x238>)
 80061a2:	230a      	movs	r3, #10
 80061a4:	e011      	b.n	80061ca <_printf_i+0xfa>
 80061a6:	6821      	ldr	r1, [r4, #0]
 80061a8:	6833      	ldr	r3, [r6, #0]
 80061aa:	0608      	lsls	r0, r1, #24
 80061ac:	f853 5b04 	ldr.w	r5, [r3], #4
 80061b0:	d402      	bmi.n	80061b8 <_printf_i+0xe8>
 80061b2:	0649      	lsls	r1, r1, #25
 80061b4:	bf48      	it	mi
 80061b6:	b2ad      	uxthmi	r5, r5
 80061b8:	2f6f      	cmp	r7, #111	@ 0x6f
 80061ba:	4853      	ldr	r0, [pc, #332]	@ (8006308 <_printf_i+0x238>)
 80061bc:	6033      	str	r3, [r6, #0]
 80061be:	bf14      	ite	ne
 80061c0:	230a      	movne	r3, #10
 80061c2:	2308      	moveq	r3, #8
 80061c4:	2100      	movs	r1, #0
 80061c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80061ca:	6866      	ldr	r6, [r4, #4]
 80061cc:	60a6      	str	r6, [r4, #8]
 80061ce:	2e00      	cmp	r6, #0
 80061d0:	bfa2      	ittt	ge
 80061d2:	6821      	ldrge	r1, [r4, #0]
 80061d4:	f021 0104 	bicge.w	r1, r1, #4
 80061d8:	6021      	strge	r1, [r4, #0]
 80061da:	b90d      	cbnz	r5, 80061e0 <_printf_i+0x110>
 80061dc:	2e00      	cmp	r6, #0
 80061de:	d04b      	beq.n	8006278 <_printf_i+0x1a8>
 80061e0:	4616      	mov	r6, r2
 80061e2:	fbb5 f1f3 	udiv	r1, r5, r3
 80061e6:	fb03 5711 	mls	r7, r3, r1, r5
 80061ea:	5dc7      	ldrb	r7, [r0, r7]
 80061ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80061f0:	462f      	mov	r7, r5
 80061f2:	42bb      	cmp	r3, r7
 80061f4:	460d      	mov	r5, r1
 80061f6:	d9f4      	bls.n	80061e2 <_printf_i+0x112>
 80061f8:	2b08      	cmp	r3, #8
 80061fa:	d10b      	bne.n	8006214 <_printf_i+0x144>
 80061fc:	6823      	ldr	r3, [r4, #0]
 80061fe:	07df      	lsls	r7, r3, #31
 8006200:	d508      	bpl.n	8006214 <_printf_i+0x144>
 8006202:	6923      	ldr	r3, [r4, #16]
 8006204:	6861      	ldr	r1, [r4, #4]
 8006206:	4299      	cmp	r1, r3
 8006208:	bfde      	ittt	le
 800620a:	2330      	movle	r3, #48	@ 0x30
 800620c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006210:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006214:	1b92      	subs	r2, r2, r6
 8006216:	6122      	str	r2, [r4, #16]
 8006218:	f8cd a000 	str.w	sl, [sp]
 800621c:	464b      	mov	r3, r9
 800621e:	aa03      	add	r2, sp, #12
 8006220:	4621      	mov	r1, r4
 8006222:	4640      	mov	r0, r8
 8006224:	f7ff fee6 	bl	8005ff4 <_printf_common>
 8006228:	3001      	adds	r0, #1
 800622a:	d14a      	bne.n	80062c2 <_printf_i+0x1f2>
 800622c:	f04f 30ff 	mov.w	r0, #4294967295
 8006230:	b004      	add	sp, #16
 8006232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006236:	6823      	ldr	r3, [r4, #0]
 8006238:	f043 0320 	orr.w	r3, r3, #32
 800623c:	6023      	str	r3, [r4, #0]
 800623e:	4833      	ldr	r0, [pc, #204]	@ (800630c <_printf_i+0x23c>)
 8006240:	2778      	movs	r7, #120	@ 0x78
 8006242:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006246:	6823      	ldr	r3, [r4, #0]
 8006248:	6831      	ldr	r1, [r6, #0]
 800624a:	061f      	lsls	r7, r3, #24
 800624c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006250:	d402      	bmi.n	8006258 <_printf_i+0x188>
 8006252:	065f      	lsls	r7, r3, #25
 8006254:	bf48      	it	mi
 8006256:	b2ad      	uxthmi	r5, r5
 8006258:	6031      	str	r1, [r6, #0]
 800625a:	07d9      	lsls	r1, r3, #31
 800625c:	bf44      	itt	mi
 800625e:	f043 0320 	orrmi.w	r3, r3, #32
 8006262:	6023      	strmi	r3, [r4, #0]
 8006264:	b11d      	cbz	r5, 800626e <_printf_i+0x19e>
 8006266:	2310      	movs	r3, #16
 8006268:	e7ac      	b.n	80061c4 <_printf_i+0xf4>
 800626a:	4827      	ldr	r0, [pc, #156]	@ (8006308 <_printf_i+0x238>)
 800626c:	e7e9      	b.n	8006242 <_printf_i+0x172>
 800626e:	6823      	ldr	r3, [r4, #0]
 8006270:	f023 0320 	bic.w	r3, r3, #32
 8006274:	6023      	str	r3, [r4, #0]
 8006276:	e7f6      	b.n	8006266 <_printf_i+0x196>
 8006278:	4616      	mov	r6, r2
 800627a:	e7bd      	b.n	80061f8 <_printf_i+0x128>
 800627c:	6833      	ldr	r3, [r6, #0]
 800627e:	6825      	ldr	r5, [r4, #0]
 8006280:	6961      	ldr	r1, [r4, #20]
 8006282:	1d18      	adds	r0, r3, #4
 8006284:	6030      	str	r0, [r6, #0]
 8006286:	062e      	lsls	r6, r5, #24
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	d501      	bpl.n	8006290 <_printf_i+0x1c0>
 800628c:	6019      	str	r1, [r3, #0]
 800628e:	e002      	b.n	8006296 <_printf_i+0x1c6>
 8006290:	0668      	lsls	r0, r5, #25
 8006292:	d5fb      	bpl.n	800628c <_printf_i+0x1bc>
 8006294:	8019      	strh	r1, [r3, #0]
 8006296:	2300      	movs	r3, #0
 8006298:	6123      	str	r3, [r4, #16]
 800629a:	4616      	mov	r6, r2
 800629c:	e7bc      	b.n	8006218 <_printf_i+0x148>
 800629e:	6833      	ldr	r3, [r6, #0]
 80062a0:	1d1a      	adds	r2, r3, #4
 80062a2:	6032      	str	r2, [r6, #0]
 80062a4:	681e      	ldr	r6, [r3, #0]
 80062a6:	6862      	ldr	r2, [r4, #4]
 80062a8:	2100      	movs	r1, #0
 80062aa:	4630      	mov	r0, r6
 80062ac:	f7f9 ff98 	bl	80001e0 <memchr>
 80062b0:	b108      	cbz	r0, 80062b6 <_printf_i+0x1e6>
 80062b2:	1b80      	subs	r0, r0, r6
 80062b4:	6060      	str	r0, [r4, #4]
 80062b6:	6863      	ldr	r3, [r4, #4]
 80062b8:	6123      	str	r3, [r4, #16]
 80062ba:	2300      	movs	r3, #0
 80062bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80062c0:	e7aa      	b.n	8006218 <_printf_i+0x148>
 80062c2:	6923      	ldr	r3, [r4, #16]
 80062c4:	4632      	mov	r2, r6
 80062c6:	4649      	mov	r1, r9
 80062c8:	4640      	mov	r0, r8
 80062ca:	47d0      	blx	sl
 80062cc:	3001      	adds	r0, #1
 80062ce:	d0ad      	beq.n	800622c <_printf_i+0x15c>
 80062d0:	6823      	ldr	r3, [r4, #0]
 80062d2:	079b      	lsls	r3, r3, #30
 80062d4:	d413      	bmi.n	80062fe <_printf_i+0x22e>
 80062d6:	68e0      	ldr	r0, [r4, #12]
 80062d8:	9b03      	ldr	r3, [sp, #12]
 80062da:	4298      	cmp	r0, r3
 80062dc:	bfb8      	it	lt
 80062de:	4618      	movlt	r0, r3
 80062e0:	e7a6      	b.n	8006230 <_printf_i+0x160>
 80062e2:	2301      	movs	r3, #1
 80062e4:	4632      	mov	r2, r6
 80062e6:	4649      	mov	r1, r9
 80062e8:	4640      	mov	r0, r8
 80062ea:	47d0      	blx	sl
 80062ec:	3001      	adds	r0, #1
 80062ee:	d09d      	beq.n	800622c <_printf_i+0x15c>
 80062f0:	3501      	adds	r5, #1
 80062f2:	68e3      	ldr	r3, [r4, #12]
 80062f4:	9903      	ldr	r1, [sp, #12]
 80062f6:	1a5b      	subs	r3, r3, r1
 80062f8:	42ab      	cmp	r3, r5
 80062fa:	dcf2      	bgt.n	80062e2 <_printf_i+0x212>
 80062fc:	e7eb      	b.n	80062d6 <_printf_i+0x206>
 80062fe:	2500      	movs	r5, #0
 8006300:	f104 0619 	add.w	r6, r4, #25
 8006304:	e7f5      	b.n	80062f2 <_printf_i+0x222>
 8006306:	bf00      	nop
 8006308:	08006942 	.word	0x08006942
 800630c:	08006953 	.word	0x08006953

08006310 <__sflush_r>:
 8006310:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006318:	0716      	lsls	r6, r2, #28
 800631a:	4605      	mov	r5, r0
 800631c:	460c      	mov	r4, r1
 800631e:	d454      	bmi.n	80063ca <__sflush_r+0xba>
 8006320:	684b      	ldr	r3, [r1, #4]
 8006322:	2b00      	cmp	r3, #0
 8006324:	dc02      	bgt.n	800632c <__sflush_r+0x1c>
 8006326:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006328:	2b00      	cmp	r3, #0
 800632a:	dd48      	ble.n	80063be <__sflush_r+0xae>
 800632c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800632e:	2e00      	cmp	r6, #0
 8006330:	d045      	beq.n	80063be <__sflush_r+0xae>
 8006332:	2300      	movs	r3, #0
 8006334:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006338:	682f      	ldr	r7, [r5, #0]
 800633a:	6a21      	ldr	r1, [r4, #32]
 800633c:	602b      	str	r3, [r5, #0]
 800633e:	d030      	beq.n	80063a2 <__sflush_r+0x92>
 8006340:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006342:	89a3      	ldrh	r3, [r4, #12]
 8006344:	0759      	lsls	r1, r3, #29
 8006346:	d505      	bpl.n	8006354 <__sflush_r+0x44>
 8006348:	6863      	ldr	r3, [r4, #4]
 800634a:	1ad2      	subs	r2, r2, r3
 800634c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800634e:	b10b      	cbz	r3, 8006354 <__sflush_r+0x44>
 8006350:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006352:	1ad2      	subs	r2, r2, r3
 8006354:	2300      	movs	r3, #0
 8006356:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006358:	6a21      	ldr	r1, [r4, #32]
 800635a:	4628      	mov	r0, r5
 800635c:	47b0      	blx	r6
 800635e:	1c43      	adds	r3, r0, #1
 8006360:	89a3      	ldrh	r3, [r4, #12]
 8006362:	d106      	bne.n	8006372 <__sflush_r+0x62>
 8006364:	6829      	ldr	r1, [r5, #0]
 8006366:	291d      	cmp	r1, #29
 8006368:	d82b      	bhi.n	80063c2 <__sflush_r+0xb2>
 800636a:	4a2a      	ldr	r2, [pc, #168]	@ (8006414 <__sflush_r+0x104>)
 800636c:	410a      	asrs	r2, r1
 800636e:	07d6      	lsls	r6, r2, #31
 8006370:	d427      	bmi.n	80063c2 <__sflush_r+0xb2>
 8006372:	2200      	movs	r2, #0
 8006374:	6062      	str	r2, [r4, #4]
 8006376:	04d9      	lsls	r1, r3, #19
 8006378:	6922      	ldr	r2, [r4, #16]
 800637a:	6022      	str	r2, [r4, #0]
 800637c:	d504      	bpl.n	8006388 <__sflush_r+0x78>
 800637e:	1c42      	adds	r2, r0, #1
 8006380:	d101      	bne.n	8006386 <__sflush_r+0x76>
 8006382:	682b      	ldr	r3, [r5, #0]
 8006384:	b903      	cbnz	r3, 8006388 <__sflush_r+0x78>
 8006386:	6560      	str	r0, [r4, #84]	@ 0x54
 8006388:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800638a:	602f      	str	r7, [r5, #0]
 800638c:	b1b9      	cbz	r1, 80063be <__sflush_r+0xae>
 800638e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006392:	4299      	cmp	r1, r3
 8006394:	d002      	beq.n	800639c <__sflush_r+0x8c>
 8006396:	4628      	mov	r0, r5
 8006398:	f7ff fbf2 	bl	8005b80 <_free_r>
 800639c:	2300      	movs	r3, #0
 800639e:	6363      	str	r3, [r4, #52]	@ 0x34
 80063a0:	e00d      	b.n	80063be <__sflush_r+0xae>
 80063a2:	2301      	movs	r3, #1
 80063a4:	4628      	mov	r0, r5
 80063a6:	47b0      	blx	r6
 80063a8:	4602      	mov	r2, r0
 80063aa:	1c50      	adds	r0, r2, #1
 80063ac:	d1c9      	bne.n	8006342 <__sflush_r+0x32>
 80063ae:	682b      	ldr	r3, [r5, #0]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d0c6      	beq.n	8006342 <__sflush_r+0x32>
 80063b4:	2b1d      	cmp	r3, #29
 80063b6:	d001      	beq.n	80063bc <__sflush_r+0xac>
 80063b8:	2b16      	cmp	r3, #22
 80063ba:	d11e      	bne.n	80063fa <__sflush_r+0xea>
 80063bc:	602f      	str	r7, [r5, #0]
 80063be:	2000      	movs	r0, #0
 80063c0:	e022      	b.n	8006408 <__sflush_r+0xf8>
 80063c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063c6:	b21b      	sxth	r3, r3
 80063c8:	e01b      	b.n	8006402 <__sflush_r+0xf2>
 80063ca:	690f      	ldr	r7, [r1, #16]
 80063cc:	2f00      	cmp	r7, #0
 80063ce:	d0f6      	beq.n	80063be <__sflush_r+0xae>
 80063d0:	0793      	lsls	r3, r2, #30
 80063d2:	680e      	ldr	r6, [r1, #0]
 80063d4:	bf08      	it	eq
 80063d6:	694b      	ldreq	r3, [r1, #20]
 80063d8:	600f      	str	r7, [r1, #0]
 80063da:	bf18      	it	ne
 80063dc:	2300      	movne	r3, #0
 80063de:	eba6 0807 	sub.w	r8, r6, r7
 80063e2:	608b      	str	r3, [r1, #8]
 80063e4:	f1b8 0f00 	cmp.w	r8, #0
 80063e8:	dde9      	ble.n	80063be <__sflush_r+0xae>
 80063ea:	6a21      	ldr	r1, [r4, #32]
 80063ec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80063ee:	4643      	mov	r3, r8
 80063f0:	463a      	mov	r2, r7
 80063f2:	4628      	mov	r0, r5
 80063f4:	47b0      	blx	r6
 80063f6:	2800      	cmp	r0, #0
 80063f8:	dc08      	bgt.n	800640c <__sflush_r+0xfc>
 80063fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006402:	81a3      	strh	r3, [r4, #12]
 8006404:	f04f 30ff 	mov.w	r0, #4294967295
 8006408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800640c:	4407      	add	r7, r0
 800640e:	eba8 0800 	sub.w	r8, r8, r0
 8006412:	e7e7      	b.n	80063e4 <__sflush_r+0xd4>
 8006414:	dfbffffe 	.word	0xdfbffffe

08006418 <_fflush_r>:
 8006418:	b538      	push	{r3, r4, r5, lr}
 800641a:	690b      	ldr	r3, [r1, #16]
 800641c:	4605      	mov	r5, r0
 800641e:	460c      	mov	r4, r1
 8006420:	b913      	cbnz	r3, 8006428 <_fflush_r+0x10>
 8006422:	2500      	movs	r5, #0
 8006424:	4628      	mov	r0, r5
 8006426:	bd38      	pop	{r3, r4, r5, pc}
 8006428:	b118      	cbz	r0, 8006432 <_fflush_r+0x1a>
 800642a:	6a03      	ldr	r3, [r0, #32]
 800642c:	b90b      	cbnz	r3, 8006432 <_fflush_r+0x1a>
 800642e:	f7ff fa8d 	bl	800594c <__sinit>
 8006432:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d0f3      	beq.n	8006422 <_fflush_r+0xa>
 800643a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800643c:	07d0      	lsls	r0, r2, #31
 800643e:	d404      	bmi.n	800644a <_fflush_r+0x32>
 8006440:	0599      	lsls	r1, r3, #22
 8006442:	d402      	bmi.n	800644a <_fflush_r+0x32>
 8006444:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006446:	f7ff fb98 	bl	8005b7a <__retarget_lock_acquire_recursive>
 800644a:	4628      	mov	r0, r5
 800644c:	4621      	mov	r1, r4
 800644e:	f7ff ff5f 	bl	8006310 <__sflush_r>
 8006452:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006454:	07da      	lsls	r2, r3, #31
 8006456:	4605      	mov	r5, r0
 8006458:	d4e4      	bmi.n	8006424 <_fflush_r+0xc>
 800645a:	89a3      	ldrh	r3, [r4, #12]
 800645c:	059b      	lsls	r3, r3, #22
 800645e:	d4e1      	bmi.n	8006424 <_fflush_r+0xc>
 8006460:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006462:	f7ff fb8b 	bl	8005b7c <__retarget_lock_release_recursive>
 8006466:	e7dd      	b.n	8006424 <_fflush_r+0xc>

08006468 <__swbuf_r>:
 8006468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800646a:	460e      	mov	r6, r1
 800646c:	4614      	mov	r4, r2
 800646e:	4605      	mov	r5, r0
 8006470:	b118      	cbz	r0, 800647a <__swbuf_r+0x12>
 8006472:	6a03      	ldr	r3, [r0, #32]
 8006474:	b90b      	cbnz	r3, 800647a <__swbuf_r+0x12>
 8006476:	f7ff fa69 	bl	800594c <__sinit>
 800647a:	69a3      	ldr	r3, [r4, #24]
 800647c:	60a3      	str	r3, [r4, #8]
 800647e:	89a3      	ldrh	r3, [r4, #12]
 8006480:	071a      	lsls	r2, r3, #28
 8006482:	d501      	bpl.n	8006488 <__swbuf_r+0x20>
 8006484:	6923      	ldr	r3, [r4, #16]
 8006486:	b943      	cbnz	r3, 800649a <__swbuf_r+0x32>
 8006488:	4621      	mov	r1, r4
 800648a:	4628      	mov	r0, r5
 800648c:	f000 f82a 	bl	80064e4 <__swsetup_r>
 8006490:	b118      	cbz	r0, 800649a <__swbuf_r+0x32>
 8006492:	f04f 37ff 	mov.w	r7, #4294967295
 8006496:	4638      	mov	r0, r7
 8006498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800649a:	6823      	ldr	r3, [r4, #0]
 800649c:	6922      	ldr	r2, [r4, #16]
 800649e:	1a98      	subs	r0, r3, r2
 80064a0:	6963      	ldr	r3, [r4, #20]
 80064a2:	b2f6      	uxtb	r6, r6
 80064a4:	4283      	cmp	r3, r0
 80064a6:	4637      	mov	r7, r6
 80064a8:	dc05      	bgt.n	80064b6 <__swbuf_r+0x4e>
 80064aa:	4621      	mov	r1, r4
 80064ac:	4628      	mov	r0, r5
 80064ae:	f7ff ffb3 	bl	8006418 <_fflush_r>
 80064b2:	2800      	cmp	r0, #0
 80064b4:	d1ed      	bne.n	8006492 <__swbuf_r+0x2a>
 80064b6:	68a3      	ldr	r3, [r4, #8]
 80064b8:	3b01      	subs	r3, #1
 80064ba:	60a3      	str	r3, [r4, #8]
 80064bc:	6823      	ldr	r3, [r4, #0]
 80064be:	1c5a      	adds	r2, r3, #1
 80064c0:	6022      	str	r2, [r4, #0]
 80064c2:	701e      	strb	r6, [r3, #0]
 80064c4:	6962      	ldr	r2, [r4, #20]
 80064c6:	1c43      	adds	r3, r0, #1
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d004      	beq.n	80064d6 <__swbuf_r+0x6e>
 80064cc:	89a3      	ldrh	r3, [r4, #12]
 80064ce:	07db      	lsls	r3, r3, #31
 80064d0:	d5e1      	bpl.n	8006496 <__swbuf_r+0x2e>
 80064d2:	2e0a      	cmp	r6, #10
 80064d4:	d1df      	bne.n	8006496 <__swbuf_r+0x2e>
 80064d6:	4621      	mov	r1, r4
 80064d8:	4628      	mov	r0, r5
 80064da:	f7ff ff9d 	bl	8006418 <_fflush_r>
 80064de:	2800      	cmp	r0, #0
 80064e0:	d0d9      	beq.n	8006496 <__swbuf_r+0x2e>
 80064e2:	e7d6      	b.n	8006492 <__swbuf_r+0x2a>

080064e4 <__swsetup_r>:
 80064e4:	b538      	push	{r3, r4, r5, lr}
 80064e6:	4b29      	ldr	r3, [pc, #164]	@ (800658c <__swsetup_r+0xa8>)
 80064e8:	4605      	mov	r5, r0
 80064ea:	6818      	ldr	r0, [r3, #0]
 80064ec:	460c      	mov	r4, r1
 80064ee:	b118      	cbz	r0, 80064f8 <__swsetup_r+0x14>
 80064f0:	6a03      	ldr	r3, [r0, #32]
 80064f2:	b90b      	cbnz	r3, 80064f8 <__swsetup_r+0x14>
 80064f4:	f7ff fa2a 	bl	800594c <__sinit>
 80064f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064fc:	0719      	lsls	r1, r3, #28
 80064fe:	d422      	bmi.n	8006546 <__swsetup_r+0x62>
 8006500:	06da      	lsls	r2, r3, #27
 8006502:	d407      	bmi.n	8006514 <__swsetup_r+0x30>
 8006504:	2209      	movs	r2, #9
 8006506:	602a      	str	r2, [r5, #0]
 8006508:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800650c:	81a3      	strh	r3, [r4, #12]
 800650e:	f04f 30ff 	mov.w	r0, #4294967295
 8006512:	e033      	b.n	800657c <__swsetup_r+0x98>
 8006514:	0758      	lsls	r0, r3, #29
 8006516:	d512      	bpl.n	800653e <__swsetup_r+0x5a>
 8006518:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800651a:	b141      	cbz	r1, 800652e <__swsetup_r+0x4a>
 800651c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006520:	4299      	cmp	r1, r3
 8006522:	d002      	beq.n	800652a <__swsetup_r+0x46>
 8006524:	4628      	mov	r0, r5
 8006526:	f7ff fb2b 	bl	8005b80 <_free_r>
 800652a:	2300      	movs	r3, #0
 800652c:	6363      	str	r3, [r4, #52]	@ 0x34
 800652e:	89a3      	ldrh	r3, [r4, #12]
 8006530:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006534:	81a3      	strh	r3, [r4, #12]
 8006536:	2300      	movs	r3, #0
 8006538:	6063      	str	r3, [r4, #4]
 800653a:	6923      	ldr	r3, [r4, #16]
 800653c:	6023      	str	r3, [r4, #0]
 800653e:	89a3      	ldrh	r3, [r4, #12]
 8006540:	f043 0308 	orr.w	r3, r3, #8
 8006544:	81a3      	strh	r3, [r4, #12]
 8006546:	6923      	ldr	r3, [r4, #16]
 8006548:	b94b      	cbnz	r3, 800655e <__swsetup_r+0x7a>
 800654a:	89a3      	ldrh	r3, [r4, #12]
 800654c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006550:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006554:	d003      	beq.n	800655e <__swsetup_r+0x7a>
 8006556:	4621      	mov	r1, r4
 8006558:	4628      	mov	r0, r5
 800655a:	f000 f84f 	bl	80065fc <__smakebuf_r>
 800655e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006562:	f013 0201 	ands.w	r2, r3, #1
 8006566:	d00a      	beq.n	800657e <__swsetup_r+0x9a>
 8006568:	2200      	movs	r2, #0
 800656a:	60a2      	str	r2, [r4, #8]
 800656c:	6962      	ldr	r2, [r4, #20]
 800656e:	4252      	negs	r2, r2
 8006570:	61a2      	str	r2, [r4, #24]
 8006572:	6922      	ldr	r2, [r4, #16]
 8006574:	b942      	cbnz	r2, 8006588 <__swsetup_r+0xa4>
 8006576:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800657a:	d1c5      	bne.n	8006508 <__swsetup_r+0x24>
 800657c:	bd38      	pop	{r3, r4, r5, pc}
 800657e:	0799      	lsls	r1, r3, #30
 8006580:	bf58      	it	pl
 8006582:	6962      	ldrpl	r2, [r4, #20]
 8006584:	60a2      	str	r2, [r4, #8]
 8006586:	e7f4      	b.n	8006572 <__swsetup_r+0x8e>
 8006588:	2000      	movs	r0, #0
 800658a:	e7f7      	b.n	800657c <__swsetup_r+0x98>
 800658c:	20000018 	.word	0x20000018

08006590 <_sbrk_r>:
 8006590:	b538      	push	{r3, r4, r5, lr}
 8006592:	4d06      	ldr	r5, [pc, #24]	@ (80065ac <_sbrk_r+0x1c>)
 8006594:	2300      	movs	r3, #0
 8006596:	4604      	mov	r4, r0
 8006598:	4608      	mov	r0, r1
 800659a:	602b      	str	r3, [r5, #0]
 800659c:	f7fa fd7a 	bl	8001094 <_sbrk>
 80065a0:	1c43      	adds	r3, r0, #1
 80065a2:	d102      	bne.n	80065aa <_sbrk_r+0x1a>
 80065a4:	682b      	ldr	r3, [r5, #0]
 80065a6:	b103      	cbz	r3, 80065aa <_sbrk_r+0x1a>
 80065a8:	6023      	str	r3, [r4, #0]
 80065aa:	bd38      	pop	{r3, r4, r5, pc}
 80065ac:	20000498 	.word	0x20000498

080065b0 <__swhatbuf_r>:
 80065b0:	b570      	push	{r4, r5, r6, lr}
 80065b2:	460c      	mov	r4, r1
 80065b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065b8:	2900      	cmp	r1, #0
 80065ba:	b096      	sub	sp, #88	@ 0x58
 80065bc:	4615      	mov	r5, r2
 80065be:	461e      	mov	r6, r3
 80065c0:	da0d      	bge.n	80065de <__swhatbuf_r+0x2e>
 80065c2:	89a3      	ldrh	r3, [r4, #12]
 80065c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80065c8:	f04f 0100 	mov.w	r1, #0
 80065cc:	bf14      	ite	ne
 80065ce:	2340      	movne	r3, #64	@ 0x40
 80065d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80065d4:	2000      	movs	r0, #0
 80065d6:	6031      	str	r1, [r6, #0]
 80065d8:	602b      	str	r3, [r5, #0]
 80065da:	b016      	add	sp, #88	@ 0x58
 80065dc:	bd70      	pop	{r4, r5, r6, pc}
 80065de:	466a      	mov	r2, sp
 80065e0:	f000 f848 	bl	8006674 <_fstat_r>
 80065e4:	2800      	cmp	r0, #0
 80065e6:	dbec      	blt.n	80065c2 <__swhatbuf_r+0x12>
 80065e8:	9901      	ldr	r1, [sp, #4]
 80065ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80065ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80065f2:	4259      	negs	r1, r3
 80065f4:	4159      	adcs	r1, r3
 80065f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80065fa:	e7eb      	b.n	80065d4 <__swhatbuf_r+0x24>

080065fc <__smakebuf_r>:
 80065fc:	898b      	ldrh	r3, [r1, #12]
 80065fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006600:	079d      	lsls	r5, r3, #30
 8006602:	4606      	mov	r6, r0
 8006604:	460c      	mov	r4, r1
 8006606:	d507      	bpl.n	8006618 <__smakebuf_r+0x1c>
 8006608:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800660c:	6023      	str	r3, [r4, #0]
 800660e:	6123      	str	r3, [r4, #16]
 8006610:	2301      	movs	r3, #1
 8006612:	6163      	str	r3, [r4, #20]
 8006614:	b003      	add	sp, #12
 8006616:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006618:	ab01      	add	r3, sp, #4
 800661a:	466a      	mov	r2, sp
 800661c:	f7ff ffc8 	bl	80065b0 <__swhatbuf_r>
 8006620:	9f00      	ldr	r7, [sp, #0]
 8006622:	4605      	mov	r5, r0
 8006624:	4639      	mov	r1, r7
 8006626:	4630      	mov	r0, r6
 8006628:	f7ff fb16 	bl	8005c58 <_malloc_r>
 800662c:	b948      	cbnz	r0, 8006642 <__smakebuf_r+0x46>
 800662e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006632:	059a      	lsls	r2, r3, #22
 8006634:	d4ee      	bmi.n	8006614 <__smakebuf_r+0x18>
 8006636:	f023 0303 	bic.w	r3, r3, #3
 800663a:	f043 0302 	orr.w	r3, r3, #2
 800663e:	81a3      	strh	r3, [r4, #12]
 8006640:	e7e2      	b.n	8006608 <__smakebuf_r+0xc>
 8006642:	89a3      	ldrh	r3, [r4, #12]
 8006644:	6020      	str	r0, [r4, #0]
 8006646:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800664a:	81a3      	strh	r3, [r4, #12]
 800664c:	9b01      	ldr	r3, [sp, #4]
 800664e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006652:	b15b      	cbz	r3, 800666c <__smakebuf_r+0x70>
 8006654:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006658:	4630      	mov	r0, r6
 800665a:	f000 f81d 	bl	8006698 <_isatty_r>
 800665e:	b128      	cbz	r0, 800666c <__smakebuf_r+0x70>
 8006660:	89a3      	ldrh	r3, [r4, #12]
 8006662:	f023 0303 	bic.w	r3, r3, #3
 8006666:	f043 0301 	orr.w	r3, r3, #1
 800666a:	81a3      	strh	r3, [r4, #12]
 800666c:	89a3      	ldrh	r3, [r4, #12]
 800666e:	431d      	orrs	r5, r3
 8006670:	81a5      	strh	r5, [r4, #12]
 8006672:	e7cf      	b.n	8006614 <__smakebuf_r+0x18>

08006674 <_fstat_r>:
 8006674:	b538      	push	{r3, r4, r5, lr}
 8006676:	4d07      	ldr	r5, [pc, #28]	@ (8006694 <_fstat_r+0x20>)
 8006678:	2300      	movs	r3, #0
 800667a:	4604      	mov	r4, r0
 800667c:	4608      	mov	r0, r1
 800667e:	4611      	mov	r1, r2
 8006680:	602b      	str	r3, [r5, #0]
 8006682:	f7fa fcde 	bl	8001042 <_fstat>
 8006686:	1c43      	adds	r3, r0, #1
 8006688:	d102      	bne.n	8006690 <_fstat_r+0x1c>
 800668a:	682b      	ldr	r3, [r5, #0]
 800668c:	b103      	cbz	r3, 8006690 <_fstat_r+0x1c>
 800668e:	6023      	str	r3, [r4, #0]
 8006690:	bd38      	pop	{r3, r4, r5, pc}
 8006692:	bf00      	nop
 8006694:	20000498 	.word	0x20000498

08006698 <_isatty_r>:
 8006698:	b538      	push	{r3, r4, r5, lr}
 800669a:	4d06      	ldr	r5, [pc, #24]	@ (80066b4 <_isatty_r+0x1c>)
 800669c:	2300      	movs	r3, #0
 800669e:	4604      	mov	r4, r0
 80066a0:	4608      	mov	r0, r1
 80066a2:	602b      	str	r3, [r5, #0]
 80066a4:	f7fa fcdd 	bl	8001062 <_isatty>
 80066a8:	1c43      	adds	r3, r0, #1
 80066aa:	d102      	bne.n	80066b2 <_isatty_r+0x1a>
 80066ac:	682b      	ldr	r3, [r5, #0]
 80066ae:	b103      	cbz	r3, 80066b2 <_isatty_r+0x1a>
 80066b0:	6023      	str	r3, [r4, #0]
 80066b2:	bd38      	pop	{r3, r4, r5, pc}
 80066b4:	20000498 	.word	0x20000498

080066b8 <_init>:
 80066b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ba:	bf00      	nop
 80066bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066be:	bc08      	pop	{r3}
 80066c0:	469e      	mov	lr, r3
 80066c2:	4770      	bx	lr

080066c4 <_fini>:
 80066c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066c6:	bf00      	nop
 80066c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066ca:	bc08      	pop	{r3}
 80066cc:	469e      	mov	lr, r3
 80066ce:	4770      	bx	lr
