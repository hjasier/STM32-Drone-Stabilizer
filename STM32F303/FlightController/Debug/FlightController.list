
FlightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005978  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08005b00  08005b00  00006b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b98  08005b98  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  08005b98  08005b98  00006b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ba0  08005ba0  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ba0  08005ba0  00006ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005ba4  08005ba4  00006ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005ba8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000700c  2**0
                  CONTENTS
 10 .bss          0000026c  2000000c  2000000c  0000700c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000278  20000278  0000700c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012de7  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028fe  00000000  00000000  00019e23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001090  00000000  00000000  0001c728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d0d  00000000  00000000  0001d7b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000259c  00000000  00000000  0001e4c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015f66  00000000  00000000  00020a61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a6318  00000000  00000000  000369c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000dccdf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000045e8  00000000  00000000  000dcd24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  000e130c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005ae8 	.word	0x08005ae8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005ae8 	.word	0x08005ae8

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <Control_Init>:
extern int16_t ax, ay, az;
extern int16_t gx, gy, gz;
extern int16_t mx, my, mz;


void Control_Init(void) {
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
    Control.pid_roll.Kp = 1.0;
 80001dc:	4b20      	ldr	r3, [pc, #128]	@ (8000260 <Control_Init+0x88>)
 80001de:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80001e2:	601a      	str	r2, [r3, #0]
    Control.pid_roll.Ki = 0.0;
 80001e4:	4b1e      	ldr	r3, [pc, #120]	@ (8000260 <Control_Init+0x88>)
 80001e6:	f04f 0200 	mov.w	r2, #0
 80001ea:	605a      	str	r2, [r3, #4]
    Control.pid_roll.Kd = 0.0;
 80001ec:	4b1c      	ldr	r3, [pc, #112]	@ (8000260 <Control_Init+0x88>)
 80001ee:	f04f 0200 	mov.w	r2, #0
 80001f2:	609a      	str	r2, [r3, #8]
    Control.pid_roll.prev_error = 0.0;
 80001f4:	4b1a      	ldr	r3, [pc, #104]	@ (8000260 <Control_Init+0x88>)
 80001f6:	f04f 0200 	mov.w	r2, #0
 80001fa:	60da      	str	r2, [r3, #12]
    Control.pid_roll.integral = 0.0;
 80001fc:	4b18      	ldr	r3, [pc, #96]	@ (8000260 <Control_Init+0x88>)
 80001fe:	f04f 0200 	mov.w	r2, #0
 8000202:	611a      	str	r2, [r3, #16]

    Control.pid_pitch.Kp = 1.0;
 8000204:	4b16      	ldr	r3, [pc, #88]	@ (8000260 <Control_Init+0x88>)
 8000206:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800020a:	615a      	str	r2, [r3, #20]
    Control.pid_pitch.Ki = 0.0;
 800020c:	4b14      	ldr	r3, [pc, #80]	@ (8000260 <Control_Init+0x88>)
 800020e:	f04f 0200 	mov.w	r2, #0
 8000212:	619a      	str	r2, [r3, #24]
    Control.pid_pitch.Kd = 0.0;
 8000214:	4b12      	ldr	r3, [pc, #72]	@ (8000260 <Control_Init+0x88>)
 8000216:	f04f 0200 	mov.w	r2, #0
 800021a:	61da      	str	r2, [r3, #28]
    Control.pid_pitch.prev_error = 0.0;
 800021c:	4b10      	ldr	r3, [pc, #64]	@ (8000260 <Control_Init+0x88>)
 800021e:	f04f 0200 	mov.w	r2, #0
 8000222:	621a      	str	r2, [r3, #32]
    Control.pid_pitch.integral = 0.0;
 8000224:	4b0e      	ldr	r3, [pc, #56]	@ (8000260 <Control_Init+0x88>)
 8000226:	f04f 0200 	mov.w	r2, #0
 800022a:	625a      	str	r2, [r3, #36]	@ 0x24

    Control.pid_yaw.Kp = 1.0;
 800022c:	4b0c      	ldr	r3, [pc, #48]	@ (8000260 <Control_Init+0x88>)
 800022e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000232:	629a      	str	r2, [r3, #40]	@ 0x28
    Control.pid_yaw.Ki = 0.0;
 8000234:	4b0a      	ldr	r3, [pc, #40]	@ (8000260 <Control_Init+0x88>)
 8000236:	f04f 0200 	mov.w	r2, #0
 800023a:	62da      	str	r2, [r3, #44]	@ 0x2c
    Control.pid_yaw.Kd = 0.0;
 800023c:	4b08      	ldr	r3, [pc, #32]	@ (8000260 <Control_Init+0x88>)
 800023e:	f04f 0200 	mov.w	r2, #0
 8000242:	631a      	str	r2, [r3, #48]	@ 0x30
    Control.pid_yaw.prev_error = 0.0;
 8000244:	4b06      	ldr	r3, [pc, #24]	@ (8000260 <Control_Init+0x88>)
 8000246:	f04f 0200 	mov.w	r2, #0
 800024a:	635a      	str	r2, [r3, #52]	@ 0x34
    Control.pid_yaw.integral = 0.0;
 800024c:	4b04      	ldr	r3, [pc, #16]	@ (8000260 <Control_Init+0x88>)
 800024e:	f04f 0200 	mov.w	r2, #0
 8000252:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000254:	bf00      	nop
 8000256:	46bd      	mov	sp, r7
 8000258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop
 8000260:	20000028 	.word	0x20000028

08000264 <Control_Update>:


void Control_Update(void) {
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
    //Control_Compute(ax, ay, az, gx, gy, gz, mx, my, mz);

    Control_SetMotorSpeeds();
 8000268:	f000 f802 	bl	8000270 <Control_SetMotorSpeeds>

    //Control_SendMotorCommands();
}
 800026c:	bf00      	nop
 800026e:	bd80      	pop	{r7, pc}

08000270 <Control_SetMotorSpeeds>:

    return output;
}

// Asignar las velocidades de los motores basados en el PID
void Control_SetMotorSpeeds(void) {
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0

    int motor1_speed = (Control.motor_control.motor1_speed < 0) ? 0 : (Control.motor_control.motor1_speed > MOTOR_MAX_SPEED ? MOTOR_MAX_SPEED : Control.motor_control.motor1_speed);
 8000276:	4b26      	ldr	r3, [pc, #152]	@ (8000310 <Control_SetMotorSpeeds+0xa0>)
 8000278:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800027a:	2b00      	cmp	r3, #0
 800027c:	db07      	blt.n	800028e <Control_SetMotorSpeeds+0x1e>
 800027e:	4b24      	ldr	r3, [pc, #144]	@ (8000310 <Control_SetMotorSpeeds+0xa0>)
 8000280:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000282:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000286:	bfa8      	it	ge
 8000288:	f44f 737a 	movge.w	r3, #1000	@ 0x3e8
 800028c:	e000      	b.n	8000290 <Control_SetMotorSpeeds+0x20>
 800028e:	2300      	movs	r3, #0
 8000290:	60fb      	str	r3, [r7, #12]
    int motor2_speed = (Control.motor_control.motor2_speed < 0) ? 0 : (Control.motor_control.motor2_speed > MOTOR_MAX_SPEED ? MOTOR_MAX_SPEED : Control.motor_control.motor2_speed);
 8000292:	4b1f      	ldr	r3, [pc, #124]	@ (8000310 <Control_SetMotorSpeeds+0xa0>)
 8000294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000296:	2b00      	cmp	r3, #0
 8000298:	db07      	blt.n	80002aa <Control_SetMotorSpeeds+0x3a>
 800029a:	4b1d      	ldr	r3, [pc, #116]	@ (8000310 <Control_SetMotorSpeeds+0xa0>)
 800029c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800029e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80002a2:	bfa8      	it	ge
 80002a4:	f44f 737a 	movge.w	r3, #1000	@ 0x3e8
 80002a8:	e000      	b.n	80002ac <Control_SetMotorSpeeds+0x3c>
 80002aa:	2300      	movs	r3, #0
 80002ac:	60bb      	str	r3, [r7, #8]
    int motor3_speed = (Control.motor_control.motor3_speed < 0) ? 0 : (Control.motor_control.motor3_speed > MOTOR_MAX_SPEED ? MOTOR_MAX_SPEED : Control.motor_control.motor3_speed);
 80002ae:	4b18      	ldr	r3, [pc, #96]	@ (8000310 <Control_SetMotorSpeeds+0xa0>)
 80002b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	db07      	blt.n	80002c6 <Control_SetMotorSpeeds+0x56>
 80002b6:	4b16      	ldr	r3, [pc, #88]	@ (8000310 <Control_SetMotorSpeeds+0xa0>)
 80002b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80002ba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80002be:	bfa8      	it	ge
 80002c0:	f44f 737a 	movge.w	r3, #1000	@ 0x3e8
 80002c4:	e000      	b.n	80002c8 <Control_SetMotorSpeeds+0x58>
 80002c6:	2300      	movs	r3, #0
 80002c8:	607b      	str	r3, [r7, #4]
    int motor4_speed = (Control.motor_control.motor4_speed < 0) ? 0 : (Control.motor_control.motor4_speed > MOTOR_MAX_SPEED ? MOTOR_MAX_SPEED : Control.motor_control.motor4_speed);
 80002ca:	4b11      	ldr	r3, [pc, #68]	@ (8000310 <Control_SetMotorSpeeds+0xa0>)
 80002cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	db07      	blt.n	80002e2 <Control_SetMotorSpeeds+0x72>
 80002d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000310 <Control_SetMotorSpeeds+0xa0>)
 80002d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80002d6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80002da:	bfa8      	it	ge
 80002dc:	f44f 737a 	movge.w	r3, #1000	@ 0x3e8
 80002e0:	e000      	b.n	80002e4 <Control_SetMotorSpeeds+0x74>
 80002e2:	2300      	movs	r3, #0
 80002e4:	603b      	str	r3, [r7, #0]

    TIM1->CCR1 = motor1_speed;  // Motor 1 (TIM1 Channel 1)
 80002e6:	4a0b      	ldr	r2, [pc, #44]	@ (8000314 <Control_SetMotorSpeeds+0xa4>)
 80002e8:	68fb      	ldr	r3, [r7, #12]
 80002ea:	6353      	str	r3, [r2, #52]	@ 0x34
    TIM1->CCR4 = motor2_speed;  // Motor 2 (TIM1 Channel 4)
 80002ec:	4a09      	ldr	r2, [pc, #36]	@ (8000314 <Control_SetMotorSpeeds+0xa4>)
 80002ee:	68bb      	ldr	r3, [r7, #8]
 80002f0:	6413      	str	r3, [r2, #64]	@ 0x40
    TIM2->CCR1 = motor3_speed;  // Motor 3 (TIM2 Channel 1)
 80002f2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	6353      	str	r3, [r2, #52]	@ 0x34
    TIM2->CCR2 = motor4_speed;  // Motor 4 (TIM2 Channel 2)
 80002fa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002fe:	683b      	ldr	r3, [r7, #0]
 8000300:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000302:	bf00      	nop
 8000304:	3714      	adds	r7, #20
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop
 8000310:	20000028 	.word	0x20000028
 8000314:	40012c00 	.word	0x40012c00

08000318 <Control_SetMotorsPower>:


void Control_SetMotorsPower(int base_power_percentage) {
 8000318:	b580      	push	{r7, lr}
 800031a:	b084      	sub	sp, #16
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
    if (base_power_percentage < 0) base_power_percentage = 0;
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	2b00      	cmp	r3, #0
 8000324:	da01      	bge.n	800032a <Control_SetMotorsPower+0x12>
 8000326:	2300      	movs	r3, #0
 8000328:	607b      	str	r3, [r7, #4]
    if (base_power_percentage > 100) base_power_percentage = 100;
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	2b64      	cmp	r3, #100	@ 0x64
 800032e:	dd01      	ble.n	8000334 <Control_SetMotorsPower+0x1c>
 8000330:	2364      	movs	r3, #100	@ 0x64
 8000332:	607b      	str	r3, [r7, #4]

    int base_power = MOTOR_MAX_SPEED * base_power_percentage / 100;
 8000334:	687a      	ldr	r2, [r7, #4]
 8000336:	4613      	mov	r3, r2
 8000338:	009b      	lsls	r3, r3, #2
 800033a:	4413      	add	r3, r2
 800033c:	005b      	lsls	r3, r3, #1
 800033e:	60fb      	str	r3, [r7, #12]

    printData("Base power: %d\n", base_power);
 8000340:	68f9      	ldr	r1, [r7, #12]
 8000342:	480a      	ldr	r0, [pc, #40]	@ (800036c <Control_SetMotorsPower+0x54>)
 8000344:	f000 fb08 	bl	8000958 <printData>
    Control.motor_control.motor1_speed = base_power;
 8000348:	4a09      	ldr	r2, [pc, #36]	@ (8000370 <Control_SetMotorsPower+0x58>)
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	63d3      	str	r3, [r2, #60]	@ 0x3c
    Control.motor_control.motor2_speed = base_power;
 800034e:	4a08      	ldr	r2, [pc, #32]	@ (8000370 <Control_SetMotorsPower+0x58>)
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	6413      	str	r3, [r2, #64]	@ 0x40
    Control.motor_control.motor3_speed = base_power;
 8000354:	4a06      	ldr	r2, [pc, #24]	@ (8000370 <Control_SetMotorsPower+0x58>)
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	6453      	str	r3, [r2, #68]	@ 0x44
    Control.motor_control.motor4_speed = base_power;
 800035a:	4a05      	ldr	r2, [pc, #20]	@ (8000370 <Control_SetMotorsPower+0x58>)
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	6493      	str	r3, [r2, #72]	@ 0x48

    Control_Update(); //igual mejor no empezar ajustando por si acaso pero ya se quitara si no
 8000360:	f7ff ff80 	bl	8000264 <Control_Update>
}
 8000364:	bf00      	nop
 8000366:	3710      	adds	r7, #16
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}
 800036c:	08005b00 	.word	0x08005b00
 8000370:	20000028 	.word	0x20000028

08000374 <GY85_Init>:


extern I2C_HandleTypeDef hi2c1;


void GY85_Init() {
 8000374:	b580      	push	{r7, lr}
 8000376:	b086      	sub	sp, #24
 8000378:	af04      	add	r7, sp, #16
    // Inicializar el acelerómetro (ADXL345)
    uint8_t data = 0x08; // Encender el sensor
 800037a:	2308      	movs	r3, #8
 800037c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, (ADXL345_ADDR << 1), 0x2D, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 800037e:	f04f 33ff 	mov.w	r3, #4294967295
 8000382:	9302      	str	r3, [sp, #8]
 8000384:	2301      	movs	r3, #1
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	1dfb      	adds	r3, r7, #7
 800038a:	9300      	str	r3, [sp, #0]
 800038c:	2301      	movs	r3, #1
 800038e:	222d      	movs	r2, #45	@ 0x2d
 8000390:	21a6      	movs	r1, #166	@ 0xa6
 8000392:	4812      	ldr	r0, [pc, #72]	@ (80003dc <GY85_Init+0x68>)
 8000394:	f001 f956 	bl	8001644 <HAL_I2C_Mem_Write>

    // Inicializar el magnetómetro (HMC5883L)
    data = 0x70; // Configuración estándar
 8000398:	2370      	movs	r3, #112	@ 0x70
 800039a:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, (HMC5883L_ADDR << 1), 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 800039c:	f04f 33ff 	mov.w	r3, #4294967295
 80003a0:	9302      	str	r3, [sp, #8]
 80003a2:	2301      	movs	r3, #1
 80003a4:	9301      	str	r3, [sp, #4]
 80003a6:	1dfb      	adds	r3, r7, #7
 80003a8:	9300      	str	r3, [sp, #0]
 80003aa:	2301      	movs	r3, #1
 80003ac:	2200      	movs	r2, #0
 80003ae:	213c      	movs	r1, #60	@ 0x3c
 80003b0:	480a      	ldr	r0, [pc, #40]	@ (80003dc <GY85_Init+0x68>)
 80003b2:	f001 f947 	bl	8001644 <HAL_I2C_Mem_Write>

    // Inicializar el giroscopio (ITG-3205)
    data = 0x00; // Configuración estándar
 80003b6:	2300      	movs	r3, #0
 80003b8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, (ITG3205_ADDR << 1), 0x3E, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80003ba:	f04f 33ff 	mov.w	r3, #4294967295
 80003be:	9302      	str	r3, [sp, #8]
 80003c0:	2301      	movs	r3, #1
 80003c2:	9301      	str	r3, [sp, #4]
 80003c4:	1dfb      	adds	r3, r7, #7
 80003c6:	9300      	str	r3, [sp, #0]
 80003c8:	2301      	movs	r3, #1
 80003ca:	223e      	movs	r2, #62	@ 0x3e
 80003cc:	21d0      	movs	r1, #208	@ 0xd0
 80003ce:	4803      	ldr	r0, [pc, #12]	@ (80003dc <GY85_Init+0x68>)
 80003d0:	f001 f938 	bl	8001644 <HAL_I2C_Mem_Write>
}
 80003d4:	bf00      	nop
 80003d6:	3708      	adds	r7, #8
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	20000074 	.word	0x20000074

080003e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003e4:	f000 fcf0 	bl	8000dc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003e8:	f000 f838 	bl	800045c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003ec:	f000 fa6a 	bl	80008c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80003f0:	f000 fa38 	bl	8000864 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80003f4:	f000 fa06 	bl	8000804 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80003f8:	f000 f88a 	bl	8000510 <MX_I2C1_Init>
  MX_TIM1_Init();
 80003fc:	f000 f8c8 	bl	8000590 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000400:	f000 f97e 	bl	8000700 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  // Inicializar el sensor GY-85
  GY85_Init();//Acelerometro
 8000404:	f7ff ffb6 	bl	8000374 <GY85_Init>

  Control_Init();
 8000408:	f7ff fee6 	bl	80001d8 <Control_Init>

  HAL_UART_Receive_IT(&huart1, rx_buffer, sizeof(rx_buffer));
 800040c:	2204      	movs	r2, #4
 800040e:	490f      	ldr	r1, [pc, #60]	@ (800044c <main+0x6c>)
 8000410:	480f      	ldr	r0, [pc, #60]	@ (8000450 <main+0x70>)
 8000412:	f004 f9de 	bl	80047d2 <HAL_UART_Receive_IT>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000416:	2100      	movs	r1, #0
 8000418:	480e      	ldr	r0, [pc, #56]	@ (8000454 <main+0x74>)
 800041a:	f003 f969 	bl	80036f0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800041e:	210c      	movs	r1, #12
 8000420:	480c      	ldr	r0, [pc, #48]	@ (8000454 <main+0x74>)
 8000422:	f003 f965 	bl	80036f0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000426:	2100      	movs	r1, #0
 8000428:	480b      	ldr	r0, [pc, #44]	@ (8000458 <main+0x78>)
 800042a:	f003 f961 	bl	80036f0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800042e:	2104      	movs	r1, #4
 8000430:	4809      	ldr	r0, [pc, #36]	@ (8000458 <main+0x78>)
 8000432:	f003 f95d 	bl	80036f0 <HAL_TIM_PWM_Start>

  Control_SetMotorsPower(10);
 8000436:	200a      	movs	r0, #10
 8000438:	f7ff ff6e 	bl	8000318 <Control_SetMotorsPower>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  Control_Update();
 800043c:	f7ff ff12 	bl	8000264 <Control_Update>
	  HAL_Delay(100);
 8000440:	2064      	movs	r0, #100	@ 0x64
 8000442:	f000 fd27 	bl	8000e94 <HAL_Delay>
	  Control_Update();
 8000446:	bf00      	nop
 8000448:	e7f8      	b.n	800043c <main+0x5c>
 800044a:	bf00      	nop
 800044c:	20000270 	.word	0x20000270
 8000450:	20000160 	.word	0x20000160
 8000454:	200000c8 	.word	0x200000c8
 8000458:	20000114 	.word	0x20000114

0800045c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b096      	sub	sp, #88	@ 0x58
 8000460:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000462:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000466:	2228      	movs	r2, #40	@ 0x28
 8000468:	2100      	movs	r1, #0
 800046a:	4618      	mov	r0, r3
 800046c:	f005 fb10 	bl	8005a90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000470:	f107 031c 	add.w	r3, r7, #28
 8000474:	2200      	movs	r2, #0
 8000476:	601a      	str	r2, [r3, #0]
 8000478:	605a      	str	r2, [r3, #4]
 800047a:	609a      	str	r2, [r3, #8]
 800047c:	60da      	str	r2, [r3, #12]
 800047e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000480:	1d3b      	adds	r3, r7, #4
 8000482:	2200      	movs	r2, #0
 8000484:	601a      	str	r2, [r3, #0]
 8000486:	605a      	str	r2, [r3, #4]
 8000488:	609a      	str	r2, [r3, #8]
 800048a:	60da      	str	r2, [r3, #12]
 800048c:	611a      	str	r2, [r3, #16]
 800048e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000490:	2302      	movs	r3, #2
 8000492:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000494:	2301      	movs	r3, #1
 8000496:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000498:	2310      	movs	r3, #16
 800049a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800049c:	2300      	movs	r3, #0
 800049e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004a0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80004a4:	4618      	mov	r0, r3
 80004a6:	f001 fce7 	bl	8001e78 <HAL_RCC_OscConfig>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d001      	beq.n	80004b4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80004b0:	f000 fa66 	bl	8000980 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004b4:	230f      	movs	r3, #15
 80004b6:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004b8:	2300      	movs	r3, #0
 80004ba:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004bc:	2300      	movs	r3, #0
 80004be:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80004c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80004c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80004ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004cc:	f107 031c 	add.w	r3, r7, #28
 80004d0:	2100      	movs	r1, #0
 80004d2:	4618      	mov	r0, r3
 80004d4:	f002 fd0e 	bl	8002ef4 <HAL_RCC_ClockConfig>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <SystemClock_Config+0x86>
  {
    Error_Handler();
 80004de:	f000 fa4f 	bl	8000980 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 80004e2:	f241 0321 	movw	r3, #4129	@ 0x1021
 80004e6:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80004e8:	2300      	movs	r3, #0
 80004ea:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80004ec:	2300      	movs	r3, #0
 80004ee:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80004f0:	2300      	movs	r3, #0
 80004f2:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004f4:	1d3b      	adds	r3, r7, #4
 80004f6:	4618      	mov	r0, r3
 80004f8:	f002 ff1c 	bl	8003334 <HAL_RCCEx_PeriphCLKConfig>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d001      	beq.n	8000506 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000502:	f000 fa3d 	bl	8000980 <Error_Handler>
  }
}
 8000506:	bf00      	nop
 8000508:	3758      	adds	r7, #88	@ 0x58
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
	...

08000510 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000514:	4b1b      	ldr	r3, [pc, #108]	@ (8000584 <MX_I2C1_Init+0x74>)
 8000516:	4a1c      	ldr	r2, [pc, #112]	@ (8000588 <MX_I2C1_Init+0x78>)
 8000518:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 800051a:	4b1a      	ldr	r3, [pc, #104]	@ (8000584 <MX_I2C1_Init+0x74>)
 800051c:	4a1b      	ldr	r2, [pc, #108]	@ (800058c <MX_I2C1_Init+0x7c>)
 800051e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000520:	4b18      	ldr	r3, [pc, #96]	@ (8000584 <MX_I2C1_Init+0x74>)
 8000522:	2200      	movs	r2, #0
 8000524:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000526:	4b17      	ldr	r3, [pc, #92]	@ (8000584 <MX_I2C1_Init+0x74>)
 8000528:	2201      	movs	r2, #1
 800052a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800052c:	4b15      	ldr	r3, [pc, #84]	@ (8000584 <MX_I2C1_Init+0x74>)
 800052e:	2200      	movs	r2, #0
 8000530:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000532:	4b14      	ldr	r3, [pc, #80]	@ (8000584 <MX_I2C1_Init+0x74>)
 8000534:	2200      	movs	r2, #0
 8000536:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000538:	4b12      	ldr	r3, [pc, #72]	@ (8000584 <MX_I2C1_Init+0x74>)
 800053a:	2200      	movs	r2, #0
 800053c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800053e:	4b11      	ldr	r3, [pc, #68]	@ (8000584 <MX_I2C1_Init+0x74>)
 8000540:	2200      	movs	r2, #0
 8000542:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000544:	4b0f      	ldr	r3, [pc, #60]	@ (8000584 <MX_I2C1_Init+0x74>)
 8000546:	2200      	movs	r2, #0
 8000548:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800054a:	480e      	ldr	r0, [pc, #56]	@ (8000584 <MX_I2C1_Init+0x74>)
 800054c:	f000 ffde 	bl	800150c <HAL_I2C_Init>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000556:	f000 fa13 	bl	8000980 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800055a:	2100      	movs	r1, #0
 800055c:	4809      	ldr	r0, [pc, #36]	@ (8000584 <MX_I2C1_Init+0x74>)
 800055e:	f001 fbf3 	bl	8001d48 <HAL_I2CEx_ConfigAnalogFilter>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000568:	f000 fa0a 	bl	8000980 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800056c:	2100      	movs	r1, #0
 800056e:	4805      	ldr	r0, [pc, #20]	@ (8000584 <MX_I2C1_Init+0x74>)
 8000570:	f001 fc35 	bl	8001dde <HAL_I2CEx_ConfigDigitalFilter>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800057a:	f000 fa01 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800057e:	bf00      	nop
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	20000074 	.word	0x20000074
 8000588:	40005400 	.word	0x40005400
 800058c:	00201d2b 	.word	0x00201d2b

08000590 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b09a      	sub	sp, #104	@ 0x68
 8000594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000596:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	605a      	str	r2, [r3, #4]
 80005a0:	609a      	str	r2, [r3, #8]
 80005a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005a4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005b0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
 80005be:	611a      	str	r2, [r3, #16]
 80005c0:	615a      	str	r2, [r3, #20]
 80005c2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80005c4:	1d3b      	adds	r3, r7, #4
 80005c6:	222c      	movs	r2, #44	@ 0x2c
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f005 fa60 	bl	8005a90 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80005d0:	4b49      	ldr	r3, [pc, #292]	@ (80006f8 <MX_TIM1_Init+0x168>)
 80005d2:	4a4a      	ldr	r2, [pc, #296]	@ (80006fc <MX_TIM1_Init+0x16c>)
 80005d4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 80005d6:	4b48      	ldr	r3, [pc, #288]	@ (80006f8 <MX_TIM1_Init+0x168>)
 80005d8:	224f      	movs	r2, #79	@ 0x4f
 80005da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005dc:	4b46      	ldr	r3, [pc, #280]	@ (80006f8 <MX_TIM1_Init+0x168>)
 80005de:	2200      	movs	r2, #0
 80005e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000-1;
 80005e2:	4b45      	ldr	r3, [pc, #276]	@ (80006f8 <MX_TIM1_Init+0x168>)
 80005e4:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80005e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005ea:	4b43      	ldr	r3, [pc, #268]	@ (80006f8 <MX_TIM1_Init+0x168>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80005f0:	4b41      	ldr	r3, [pc, #260]	@ (80006f8 <MX_TIM1_Init+0x168>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005f6:	4b40      	ldr	r3, [pc, #256]	@ (80006f8 <MX_TIM1_Init+0x168>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80005fc:	483e      	ldr	r0, [pc, #248]	@ (80006f8 <MX_TIM1_Init+0x168>)
 80005fe:	f002 ffbf 	bl	8003580 <HAL_TIM_Base_Init>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000608:	f000 f9ba 	bl	8000980 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800060c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000610:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000612:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000616:	4619      	mov	r1, r3
 8000618:	4837      	ldr	r0, [pc, #220]	@ (80006f8 <MX_TIM1_Init+0x168>)
 800061a:	f003 fa69 	bl	8003af0 <HAL_TIM_ConfigClockSource>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000624:	f000 f9ac 	bl	8000980 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000628:	4833      	ldr	r0, [pc, #204]	@ (80006f8 <MX_TIM1_Init+0x168>)
 800062a:	f003 f800 	bl	800362e <HAL_TIM_PWM_Init>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000634:	f000 f9a4 	bl	8000980 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000638:	2300      	movs	r3, #0
 800063a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800063c:	2300      	movs	r3, #0
 800063e:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000640:	2300      	movs	r3, #0
 8000642:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000644:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000648:	4619      	mov	r1, r3
 800064a:	482b      	ldr	r0, [pc, #172]	@ (80006f8 <MX_TIM1_Init+0x168>)
 800064c:	f003 ff04 	bl	8004458 <HAL_TIMEx_MasterConfigSynchronization>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000656:	f000 f993 	bl	8000980 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800065a:	2360      	movs	r3, #96	@ 0x60
 800065c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800065e:	2300      	movs	r3, #0
 8000660:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000662:	2300      	movs	r3, #0
 8000664:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000666:	2300      	movs	r3, #0
 8000668:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800066a:	2300      	movs	r3, #0
 800066c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800066e:	2300      	movs	r3, #0
 8000670:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000672:	2300      	movs	r3, #0
 8000674:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000676:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800067a:	2200      	movs	r2, #0
 800067c:	4619      	mov	r1, r3
 800067e:	481e      	ldr	r0, [pc, #120]	@ (80006f8 <MX_TIM1_Init+0x168>)
 8000680:	f003 f922 	bl	80038c8 <HAL_TIM_PWM_ConfigChannel>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800068a:	f000 f979 	bl	8000980 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800068e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000692:	220c      	movs	r2, #12
 8000694:	4619      	mov	r1, r3
 8000696:	4818      	ldr	r0, [pc, #96]	@ (80006f8 <MX_TIM1_Init+0x168>)
 8000698:	f003 f916 	bl	80038c8 <HAL_TIM_PWM_ConfigChannel>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80006a2:	f000 f96d 	bl	8000980 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006a6:	2300      	movs	r3, #0
 80006a8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80006aa:	2300      	movs	r3, #0
 80006ac:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80006ae:	2300      	movs	r3, #0
 80006b0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80006b6:	2300      	movs	r3, #0
 80006b8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80006ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006be:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80006c4:	2300      	movs	r3, #0
 80006c6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80006c8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80006cc:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80006d2:	2300      	movs	r3, #0
 80006d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	4619      	mov	r1, r3
 80006da:	4807      	ldr	r0, [pc, #28]	@ (80006f8 <MX_TIM1_Init+0x168>)
 80006dc:	f003 ff2a 	bl	8004534 <HAL_TIMEx_ConfigBreakDeadTime>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 80006e6:	f000 f94b 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80006ea:	4803      	ldr	r0, [pc, #12]	@ (80006f8 <MX_TIM1_Init+0x168>)
 80006ec:	f000 f9fc 	bl	8000ae8 <HAL_TIM_MspPostInit>

}
 80006f0:	bf00      	nop
 80006f2:	3768      	adds	r7, #104	@ 0x68
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	200000c8 	.word	0x200000c8
 80006fc:	40012c00 	.word	0x40012c00

08000700 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b08e      	sub	sp, #56	@ 0x38
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000706:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
 8000712:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000714:	f107 031c 	add.w	r3, r7, #28
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000720:	463b      	mov	r3, r7
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
 800072c:	611a      	str	r2, [r3, #16]
 800072e:	615a      	str	r2, [r3, #20]
 8000730:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000732:	4b33      	ldr	r3, [pc, #204]	@ (8000800 <MX_TIM2_Init+0x100>)
 8000734:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000738:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 800073a:	4b31      	ldr	r3, [pc, #196]	@ (8000800 <MX_TIM2_Init+0x100>)
 800073c:	224f      	movs	r2, #79	@ 0x4f
 800073e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000740:	4b2f      	ldr	r3, [pc, #188]	@ (8000800 <MX_TIM2_Init+0x100>)
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 8000746:	4b2e      	ldr	r3, [pc, #184]	@ (8000800 <MX_TIM2_Init+0x100>)
 8000748:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 800074c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800074e:	4b2c      	ldr	r3, [pc, #176]	@ (8000800 <MX_TIM2_Init+0x100>)
 8000750:	2200      	movs	r2, #0
 8000752:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000754:	4b2a      	ldr	r3, [pc, #168]	@ (8000800 <MX_TIM2_Init+0x100>)
 8000756:	2200      	movs	r2, #0
 8000758:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800075a:	4829      	ldr	r0, [pc, #164]	@ (8000800 <MX_TIM2_Init+0x100>)
 800075c:	f002 ff10 	bl	8003580 <HAL_TIM_Base_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000766:	f000 f90b 	bl	8000980 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800076a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800076e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000770:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000774:	4619      	mov	r1, r3
 8000776:	4822      	ldr	r0, [pc, #136]	@ (8000800 <MX_TIM2_Init+0x100>)
 8000778:	f003 f9ba 	bl	8003af0 <HAL_TIM_ConfigClockSource>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000782:	f000 f8fd 	bl	8000980 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000786:	481e      	ldr	r0, [pc, #120]	@ (8000800 <MX_TIM2_Init+0x100>)
 8000788:	f002 ff51 	bl	800362e <HAL_TIM_PWM_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000792:	f000 f8f5 	bl	8000980 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000796:	2300      	movs	r3, #0
 8000798:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800079a:	2300      	movs	r3, #0
 800079c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800079e:	f107 031c 	add.w	r3, r7, #28
 80007a2:	4619      	mov	r1, r3
 80007a4:	4816      	ldr	r0, [pc, #88]	@ (8000800 <MX_TIM2_Init+0x100>)
 80007a6:	f003 fe57 	bl	8004458 <HAL_TIMEx_MasterConfigSynchronization>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80007b0:	f000 f8e6 	bl	8000980 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007b4:	2360      	movs	r3, #96	@ 0x60
 80007b6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007bc:	2300      	movs	r3, #0
 80007be:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007c0:	2300      	movs	r3, #0
 80007c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007c4:	463b      	mov	r3, r7
 80007c6:	2200      	movs	r2, #0
 80007c8:	4619      	mov	r1, r3
 80007ca:	480d      	ldr	r0, [pc, #52]	@ (8000800 <MX_TIM2_Init+0x100>)
 80007cc:	f003 f87c 	bl	80038c8 <HAL_TIM_PWM_ConfigChannel>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80007d6:	f000 f8d3 	bl	8000980 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007da:	463b      	mov	r3, r7
 80007dc:	2204      	movs	r2, #4
 80007de:	4619      	mov	r1, r3
 80007e0:	4807      	ldr	r0, [pc, #28]	@ (8000800 <MX_TIM2_Init+0x100>)
 80007e2:	f003 f871 	bl	80038c8 <HAL_TIM_PWM_ConfigChannel>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80007ec:	f000 f8c8 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80007f0:	4803      	ldr	r0, [pc, #12]	@ (8000800 <MX_TIM2_Init+0x100>)
 80007f2:	f000 f979 	bl	8000ae8 <HAL_TIM_MspPostInit>

}
 80007f6:	bf00      	nop
 80007f8:	3738      	adds	r7, #56	@ 0x38
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000114 	.word	0x20000114

08000804 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000808:	4b14      	ldr	r3, [pc, #80]	@ (800085c <MX_USART1_UART_Init+0x58>)
 800080a:	4a15      	ldr	r2, [pc, #84]	@ (8000860 <MX_USART1_UART_Init+0x5c>)
 800080c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800080e:	4b13      	ldr	r3, [pc, #76]	@ (800085c <MX_USART1_UART_Init+0x58>)
 8000810:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000814:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000816:	4b11      	ldr	r3, [pc, #68]	@ (800085c <MX_USART1_UART_Init+0x58>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800081c:	4b0f      	ldr	r3, [pc, #60]	@ (800085c <MX_USART1_UART_Init+0x58>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000822:	4b0e      	ldr	r3, [pc, #56]	@ (800085c <MX_USART1_UART_Init+0x58>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000828:	4b0c      	ldr	r3, [pc, #48]	@ (800085c <MX_USART1_UART_Init+0x58>)
 800082a:	220c      	movs	r2, #12
 800082c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082e:	4b0b      	ldr	r3, [pc, #44]	@ (800085c <MX_USART1_UART_Init+0x58>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000834:	4b09      	ldr	r3, [pc, #36]	@ (800085c <MX_USART1_UART_Init+0x58>)
 8000836:	2200      	movs	r2, #0
 8000838:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800083a:	4b08      	ldr	r3, [pc, #32]	@ (800085c <MX_USART1_UART_Init+0x58>)
 800083c:	2200      	movs	r2, #0
 800083e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000840:	4b06      	ldr	r3, [pc, #24]	@ (800085c <MX_USART1_UART_Init+0x58>)
 8000842:	2200      	movs	r2, #0
 8000844:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000846:	4805      	ldr	r0, [pc, #20]	@ (800085c <MX_USART1_UART_Init+0x58>)
 8000848:	f003 feec 	bl	8004624 <HAL_UART_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000852:	f000 f895 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20000160 	.word	0x20000160
 8000860:	40013800 	.word	0x40013800

08000864 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000868:	4b14      	ldr	r3, [pc, #80]	@ (80008bc <MX_USART2_UART_Init+0x58>)
 800086a:	4a15      	ldr	r2, [pc, #84]	@ (80008c0 <MX_USART2_UART_Init+0x5c>)
 800086c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800086e:	4b13      	ldr	r3, [pc, #76]	@ (80008bc <MX_USART2_UART_Init+0x58>)
 8000870:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000874:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000876:	4b11      	ldr	r3, [pc, #68]	@ (80008bc <MX_USART2_UART_Init+0x58>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800087c:	4b0f      	ldr	r3, [pc, #60]	@ (80008bc <MX_USART2_UART_Init+0x58>)
 800087e:	2200      	movs	r2, #0
 8000880:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000882:	4b0e      	ldr	r3, [pc, #56]	@ (80008bc <MX_USART2_UART_Init+0x58>)
 8000884:	2200      	movs	r2, #0
 8000886:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000888:	4b0c      	ldr	r3, [pc, #48]	@ (80008bc <MX_USART2_UART_Init+0x58>)
 800088a:	220c      	movs	r2, #12
 800088c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800088e:	4b0b      	ldr	r3, [pc, #44]	@ (80008bc <MX_USART2_UART_Init+0x58>)
 8000890:	2200      	movs	r2, #0
 8000892:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000894:	4b09      	ldr	r3, [pc, #36]	@ (80008bc <MX_USART2_UART_Init+0x58>)
 8000896:	2200      	movs	r2, #0
 8000898:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800089a:	4b08      	ldr	r3, [pc, #32]	@ (80008bc <MX_USART2_UART_Init+0x58>)
 800089c:	2200      	movs	r2, #0
 800089e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008a0:	4b06      	ldr	r3, [pc, #24]	@ (80008bc <MX_USART2_UART_Init+0x58>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008a6:	4805      	ldr	r0, [pc, #20]	@ (80008bc <MX_USART2_UART_Init+0x58>)
 80008a8:	f003 febc 	bl	8004624 <HAL_UART_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008b2:	f000 f865 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	200001e8 	.word	0x200001e8
 80008c0:	40004400 	.word	0x40004400

080008c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b088      	sub	sp, #32
 80008c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ca:	f107 030c 	add.w	r3, r7, #12
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	60da      	str	r2, [r3, #12]
 80008d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008da:	4b1d      	ldr	r3, [pc, #116]	@ (8000950 <MX_GPIO_Init+0x8c>)
 80008dc:	695b      	ldr	r3, [r3, #20]
 80008de:	4a1c      	ldr	r2, [pc, #112]	@ (8000950 <MX_GPIO_Init+0x8c>)
 80008e0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80008e4:	6153      	str	r3, [r2, #20]
 80008e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000950 <MX_GPIO_Init+0x8c>)
 80008e8:	695b      	ldr	r3, [r3, #20]
 80008ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80008ee:	60bb      	str	r3, [r7, #8]
 80008f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f2:	4b17      	ldr	r3, [pc, #92]	@ (8000950 <MX_GPIO_Init+0x8c>)
 80008f4:	695b      	ldr	r3, [r3, #20]
 80008f6:	4a16      	ldr	r2, [pc, #88]	@ (8000950 <MX_GPIO_Init+0x8c>)
 80008f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008fc:	6153      	str	r3, [r2, #20]
 80008fe:	4b14      	ldr	r3, [pc, #80]	@ (8000950 <MX_GPIO_Init+0x8c>)
 8000900:	695b      	ldr	r3, [r3, #20]
 8000902:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800090a:	4b11      	ldr	r3, [pc, #68]	@ (8000950 <MX_GPIO_Init+0x8c>)
 800090c:	695b      	ldr	r3, [r3, #20]
 800090e:	4a10      	ldr	r2, [pc, #64]	@ (8000950 <MX_GPIO_Init+0x8c>)
 8000910:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000914:	6153      	str	r3, [r2, #20]
 8000916:	4b0e      	ldr	r3, [pc, #56]	@ (8000950 <MX_GPIO_Init+0x8c>)
 8000918:	695b      	ldr	r3, [r3, #20]
 800091a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800091e:	603b      	str	r3, [r7, #0]
 8000920:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	2108      	movs	r1, #8
 8000926:	480b      	ldr	r0, [pc, #44]	@ (8000954 <MX_GPIO_Init+0x90>)
 8000928:	f000 fdd8 	bl	80014dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800092c:	2308      	movs	r3, #8
 800092e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000930:	2301      	movs	r3, #1
 8000932:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000938:	2300      	movs	r3, #0
 800093a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800093c:	f107 030c 	add.w	r3, r7, #12
 8000940:	4619      	mov	r1, r3
 8000942:	4804      	ldr	r0, [pc, #16]	@ (8000954 <MX_GPIO_Init+0x90>)
 8000944:	f000 fc58 	bl	80011f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000948:	bf00      	nop
 800094a:	3720      	adds	r7, #32
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	40021000 	.word	0x40021000
 8000954:	48000400 	.word	0x48000400

08000958 <printData>:
/* USER CODE BEGIN 4 */




void printData(char* data) {
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)data, strlen(data), 100);
 8000960:	6878      	ldr	r0, [r7, #4]
 8000962:	f7ff fc31 	bl	80001c8 <strlen>
 8000966:	4603      	mov	r3, r0
 8000968:	b29a      	uxth	r2, r3
 800096a:	2364      	movs	r3, #100	@ 0x64
 800096c:	6879      	ldr	r1, [r7, #4]
 800096e:	4803      	ldr	r0, [pc, #12]	@ (800097c <printData+0x24>)
 8000970:	f003 fea6 	bl	80046c0 <HAL_UART_Transmit>
}
 8000974:	bf00      	nop
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	200001e8 	.word	0x200001e8

08000980 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000984:	b672      	cpsid	i
}
 8000986:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000988:	bf00      	nop
 800098a:	e7fd      	b.n	8000988 <Error_Handler+0x8>

0800098c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000992:	4b0f      	ldr	r3, [pc, #60]	@ (80009d0 <HAL_MspInit+0x44>)
 8000994:	699b      	ldr	r3, [r3, #24]
 8000996:	4a0e      	ldr	r2, [pc, #56]	@ (80009d0 <HAL_MspInit+0x44>)
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	6193      	str	r3, [r2, #24]
 800099e:	4b0c      	ldr	r3, [pc, #48]	@ (80009d0 <HAL_MspInit+0x44>)
 80009a0:	699b      	ldr	r3, [r3, #24]
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009aa:	4b09      	ldr	r3, [pc, #36]	@ (80009d0 <HAL_MspInit+0x44>)
 80009ac:	69db      	ldr	r3, [r3, #28]
 80009ae:	4a08      	ldr	r2, [pc, #32]	@ (80009d0 <HAL_MspInit+0x44>)
 80009b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009b4:	61d3      	str	r3, [r2, #28]
 80009b6:	4b06      	ldr	r3, [pc, #24]	@ (80009d0 <HAL_MspInit+0x44>)
 80009b8:	69db      	ldr	r3, [r3, #28]
 80009ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c2:	bf00      	nop
 80009c4:	370c      	adds	r7, #12
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	40021000 	.word	0x40021000

080009d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08a      	sub	sp, #40	@ 0x28
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a17      	ldr	r2, [pc, #92]	@ (8000a50 <HAL_I2C_MspInit+0x7c>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d127      	bne.n	8000a46 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f6:	4b17      	ldr	r3, [pc, #92]	@ (8000a54 <HAL_I2C_MspInit+0x80>)
 80009f8:	695b      	ldr	r3, [r3, #20]
 80009fa:	4a16      	ldr	r2, [pc, #88]	@ (8000a54 <HAL_I2C_MspInit+0x80>)
 80009fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a00:	6153      	str	r3, [r2, #20]
 8000a02:	4b14      	ldr	r3, [pc, #80]	@ (8000a54 <HAL_I2C_MspInit+0x80>)
 8000a04:	695b      	ldr	r3, [r3, #20]
 8000a06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000a0a:	613b      	str	r3, [r7, #16]
 8000a0c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a0e:	23c0      	movs	r3, #192	@ 0xc0
 8000a10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a12:	2312      	movs	r3, #18
 8000a14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a1a:	2303      	movs	r3, #3
 8000a1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a1e:	2304      	movs	r3, #4
 8000a20:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a22:	f107 0314 	add.w	r3, r7, #20
 8000a26:	4619      	mov	r1, r3
 8000a28:	480b      	ldr	r0, [pc, #44]	@ (8000a58 <HAL_I2C_MspInit+0x84>)
 8000a2a:	f000 fbe5 	bl	80011f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a2e:	4b09      	ldr	r3, [pc, #36]	@ (8000a54 <HAL_I2C_MspInit+0x80>)
 8000a30:	69db      	ldr	r3, [r3, #28]
 8000a32:	4a08      	ldr	r2, [pc, #32]	@ (8000a54 <HAL_I2C_MspInit+0x80>)
 8000a34:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a38:	61d3      	str	r3, [r2, #28]
 8000a3a:	4b06      	ldr	r3, [pc, #24]	@ (8000a54 <HAL_I2C_MspInit+0x80>)
 8000a3c:	69db      	ldr	r3, [r3, #28]
 8000a3e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000a46:	bf00      	nop
 8000a48:	3728      	adds	r7, #40	@ 0x28
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40005400 	.word	0x40005400
 8000a54:	40021000 	.word	0x40021000
 8000a58:	48000400 	.word	0x48000400

08000a5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b087      	sub	sp, #28
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a1c      	ldr	r2, [pc, #112]	@ (8000adc <HAL_TIM_Base_MspInit+0x80>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d10c      	bne.n	8000a88 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a6e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ae0 <HAL_TIM_Base_MspInit+0x84>)
 8000a70:	699b      	ldr	r3, [r3, #24]
 8000a72:	4a1b      	ldr	r2, [pc, #108]	@ (8000ae0 <HAL_TIM_Base_MspInit+0x84>)
 8000a74:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000a78:	6193      	str	r3, [r2, #24]
 8000a7a:	4b19      	ldr	r3, [pc, #100]	@ (8000ae0 <HAL_TIM_Base_MspInit+0x84>)
 8000a7c:	699b      	ldr	r3, [r3, #24]
 8000a7e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000a82:	617b      	str	r3, [r7, #20]
 8000a84:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000a86:	e022      	b.n	8000ace <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM2)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a90:	d10c      	bne.n	8000aac <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a92:	4b13      	ldr	r3, [pc, #76]	@ (8000ae0 <HAL_TIM_Base_MspInit+0x84>)
 8000a94:	69db      	ldr	r3, [r3, #28]
 8000a96:	4a12      	ldr	r2, [pc, #72]	@ (8000ae0 <HAL_TIM_Base_MspInit+0x84>)
 8000a98:	f043 0301 	orr.w	r3, r3, #1
 8000a9c:	61d3      	str	r3, [r2, #28]
 8000a9e:	4b10      	ldr	r3, [pc, #64]	@ (8000ae0 <HAL_TIM_Base_MspInit+0x84>)
 8000aa0:	69db      	ldr	r3, [r3, #28]
 8000aa2:	f003 0301 	and.w	r3, r3, #1
 8000aa6:	613b      	str	r3, [r7, #16]
 8000aa8:	693b      	ldr	r3, [r7, #16]
}
 8000aaa:	e010      	b.n	8000ace <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a0c      	ldr	r2, [pc, #48]	@ (8000ae4 <HAL_TIM_Base_MspInit+0x88>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d10b      	bne.n	8000ace <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ae0 <HAL_TIM_Base_MspInit+0x84>)
 8000ab8:	69db      	ldr	r3, [r3, #28]
 8000aba:	4a09      	ldr	r2, [pc, #36]	@ (8000ae0 <HAL_TIM_Base_MspInit+0x84>)
 8000abc:	f043 0302 	orr.w	r3, r3, #2
 8000ac0:	61d3      	str	r3, [r2, #28]
 8000ac2:	4b07      	ldr	r3, [pc, #28]	@ (8000ae0 <HAL_TIM_Base_MspInit+0x84>)
 8000ac4:	69db      	ldr	r3, [r3, #28]
 8000ac6:	f003 0302 	and.w	r3, r3, #2
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
}
 8000ace:	bf00      	nop
 8000ad0:	371c      	adds	r7, #28
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	40012c00 	.word	0x40012c00
 8000ae0:	40021000 	.word	0x40021000
 8000ae4:	40000400 	.word	0x40000400

08000ae8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08a      	sub	sp, #40	@ 0x28
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a2c      	ldr	r2, [pc, #176]	@ (8000bb8 <HAL_TIM_MspPostInit+0xd0>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d130      	bne.n	8000b6c <HAL_TIM_MspPostInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0a:	4b2c      	ldr	r3, [pc, #176]	@ (8000bbc <HAL_TIM_MspPostInit+0xd4>)
 8000b0c:	695b      	ldr	r3, [r3, #20]
 8000b0e:	4a2b      	ldr	r2, [pc, #172]	@ (8000bbc <HAL_TIM_MspPostInit+0xd4>)
 8000b10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b14:	6153      	str	r3, [r2, #20]
 8000b16:	4b29      	ldr	r3, [pc, #164]	@ (8000bbc <HAL_TIM_MspPostInit+0xd4>)
 8000b18:	695b      	ldr	r3, [r3, #20]
 8000b1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b1e:	613b      	str	r3, [r7, #16]
 8000b20:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b22:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b30:	2300      	movs	r3, #0
 8000b32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000b34:	2306      	movs	r3, #6
 8000b36:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b42:	f000 fb59 	bl	80011f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000b46:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000b4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b54:	2300      	movs	r3, #0
 8000b56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 8000b58:	230b      	movs	r3, #11
 8000b5a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	4619      	mov	r1, r3
 8000b62:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b66:	f000 fb47 	bl	80011f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000b6a:	e021      	b.n	8000bb0 <HAL_TIM_MspPostInit+0xc8>
  else if(htim->Instance==TIM2)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b74:	d11c      	bne.n	8000bb0 <HAL_TIM_MspPostInit+0xc8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b76:	4b11      	ldr	r3, [pc, #68]	@ (8000bbc <HAL_TIM_MspPostInit+0xd4>)
 8000b78:	695b      	ldr	r3, [r3, #20]
 8000b7a:	4a10      	ldr	r2, [pc, #64]	@ (8000bbc <HAL_TIM_MspPostInit+0xd4>)
 8000b7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b80:	6153      	str	r3, [r2, #20]
 8000b82:	4b0e      	ldr	r3, [pc, #56]	@ (8000bbc <HAL_TIM_MspPostInit+0xd4>)
 8000b84:	695b      	ldr	r3, [r3, #20]
 8000b86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b8e:	2303      	movs	r3, #3
 8000b90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b92:	2302      	movs	r3, #2
 8000b94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba2:	f107 0314 	add.w	r3, r7, #20
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bac:	f000 fb24 	bl	80011f8 <HAL_GPIO_Init>
}
 8000bb0:	bf00      	nop
 8000bb2:	3728      	adds	r7, #40	@ 0x28
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40012c00 	.word	0x40012c00
 8000bbc:	40021000 	.word	0x40021000

08000bc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08c      	sub	sp, #48	@ 0x30
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc8:	f107 031c 	add.w	r3, r7, #28
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a37      	ldr	r2, [pc, #220]	@ (8000cbc <HAL_UART_MspInit+0xfc>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d132      	bne.n	8000c48 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000be2:	4b37      	ldr	r3, [pc, #220]	@ (8000cc0 <HAL_UART_MspInit+0x100>)
 8000be4:	699b      	ldr	r3, [r3, #24]
 8000be6:	4a36      	ldr	r2, [pc, #216]	@ (8000cc0 <HAL_UART_MspInit+0x100>)
 8000be8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bec:	6193      	str	r3, [r2, #24]
 8000bee:	4b34      	ldr	r3, [pc, #208]	@ (8000cc0 <HAL_UART_MspInit+0x100>)
 8000bf0:	699b      	ldr	r3, [r3, #24]
 8000bf2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bf6:	61bb      	str	r3, [r7, #24]
 8000bf8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfa:	4b31      	ldr	r3, [pc, #196]	@ (8000cc0 <HAL_UART_MspInit+0x100>)
 8000bfc:	695b      	ldr	r3, [r3, #20]
 8000bfe:	4a30      	ldr	r2, [pc, #192]	@ (8000cc0 <HAL_UART_MspInit+0x100>)
 8000c00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c04:	6153      	str	r3, [r2, #20]
 8000c06:	4b2e      	ldr	r3, [pc, #184]	@ (8000cc0 <HAL_UART_MspInit+0x100>)
 8000c08:	695b      	ldr	r3, [r3, #20]
 8000c0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c0e:	617b      	str	r3, [r7, #20]
 8000c10:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c12:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000c16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c20:	2303      	movs	r3, #3
 8000c22:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c24:	2307      	movs	r3, #7
 8000c26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c28:	f107 031c 	add.w	r3, r7, #28
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c32:	f000 fae1 	bl	80011f8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c36:	2200      	movs	r2, #0
 8000c38:	2100      	movs	r1, #0
 8000c3a:	2025      	movs	r0, #37	@ 0x25
 8000c3c:	f000 fa29 	bl	8001092 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c40:	2025      	movs	r0, #37	@ 0x25
 8000c42:	f000 fa42 	bl	80010ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c46:	e035      	b.n	8000cb4 <HAL_UART_MspInit+0xf4>
  else if(huart->Instance==USART2)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a1d      	ldr	r2, [pc, #116]	@ (8000cc4 <HAL_UART_MspInit+0x104>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d130      	bne.n	8000cb4 <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c52:	4b1b      	ldr	r3, [pc, #108]	@ (8000cc0 <HAL_UART_MspInit+0x100>)
 8000c54:	69db      	ldr	r3, [r3, #28]
 8000c56:	4a1a      	ldr	r2, [pc, #104]	@ (8000cc0 <HAL_UART_MspInit+0x100>)
 8000c58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c5c:	61d3      	str	r3, [r2, #28]
 8000c5e:	4b18      	ldr	r3, [pc, #96]	@ (8000cc0 <HAL_UART_MspInit+0x100>)
 8000c60:	69db      	ldr	r3, [r3, #28]
 8000c62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c66:	613b      	str	r3, [r7, #16]
 8000c68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6a:	4b15      	ldr	r3, [pc, #84]	@ (8000cc0 <HAL_UART_MspInit+0x100>)
 8000c6c:	695b      	ldr	r3, [r3, #20]
 8000c6e:	4a14      	ldr	r2, [pc, #80]	@ (8000cc0 <HAL_UART_MspInit+0x100>)
 8000c70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c74:	6153      	str	r3, [r2, #20]
 8000c76:	4b12      	ldr	r3, [pc, #72]	@ (8000cc0 <HAL_UART_MspInit+0x100>)
 8000c78:	695b      	ldr	r3, [r3, #20]
 8000c7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000c82:	230c      	movs	r3, #12
 8000c84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c86:	2302      	movs	r3, #2
 8000c88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c8e:	2303      	movs	r3, #3
 8000c90:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c92:	2307      	movs	r3, #7
 8000c94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c96:	f107 031c 	add.w	r3, r7, #28
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ca0:	f000 faaa 	bl	80011f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	2026      	movs	r0, #38	@ 0x26
 8000caa:	f000 f9f2 	bl	8001092 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000cae:	2026      	movs	r0, #38	@ 0x26
 8000cb0:	f000 fa0b 	bl	80010ca <HAL_NVIC_EnableIRQ>
}
 8000cb4:	bf00      	nop
 8000cb6:	3730      	adds	r7, #48	@ 0x30
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	40013800 	.word	0x40013800
 8000cc0:	40021000 	.word	0x40021000
 8000cc4:	40004400 	.word	0x40004400

08000cc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ccc:	bf00      	nop
 8000cce:	e7fd      	b.n	8000ccc <NMI_Handler+0x4>

08000cd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cd4:	bf00      	nop
 8000cd6:	e7fd      	b.n	8000cd4 <HardFault_Handler+0x4>

08000cd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cdc:	bf00      	nop
 8000cde:	e7fd      	b.n	8000cdc <MemManage_Handler+0x4>

08000ce0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ce4:	bf00      	nop
 8000ce6:	e7fd      	b.n	8000ce4 <BusFault_Handler+0x4>

08000ce8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cec:	bf00      	nop
 8000cee:	e7fd      	b.n	8000cec <UsageFault_Handler+0x4>

08000cf0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr

08000cfe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr

08000d1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d1e:	f000 f899 	bl	8000e54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
	...

08000d28 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d2c:	4802      	ldr	r0, [pc, #8]	@ (8000d38 <USART1_IRQHandler+0x10>)
 8000d2e:	f003 fd95 	bl	800485c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000160 	.word	0x20000160

08000d3c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d40:	4802      	ldr	r0, [pc, #8]	@ (8000d4c <USART2_IRQHandler+0x10>)
 8000d42:	f003 fd8b 	bl	800485c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	200001e8 	.word	0x200001e8

08000d50 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d54:	4b06      	ldr	r3, [pc, #24]	@ (8000d70 <SystemInit+0x20>)
 8000d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d5a:	4a05      	ldr	r2, [pc, #20]	@ (8000d70 <SystemInit+0x20>)
 8000d5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d74:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000dac <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d78:	f7ff ffea 	bl	8000d50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d7c:	480c      	ldr	r0, [pc, #48]	@ (8000db0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d7e:	490d      	ldr	r1, [pc, #52]	@ (8000db4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d80:	4a0d      	ldr	r2, [pc, #52]	@ (8000db8 <LoopForever+0xe>)
  movs r3, #0
 8000d82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d84:	e002      	b.n	8000d8c <LoopCopyDataInit>

08000d86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d8a:	3304      	adds	r3, #4

08000d8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d90:	d3f9      	bcc.n	8000d86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d92:	4a0a      	ldr	r2, [pc, #40]	@ (8000dbc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d94:	4c0a      	ldr	r4, [pc, #40]	@ (8000dc0 <LoopForever+0x16>)
  movs r3, #0
 8000d96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d98:	e001      	b.n	8000d9e <LoopFillZerobss>

08000d9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d9c:	3204      	adds	r2, #4

08000d9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da0:	d3fb      	bcc.n	8000d9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000da2:	f004 fe7d 	bl	8005aa0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000da6:	f7ff fb1b 	bl	80003e0 <main>

08000daa <LoopForever>:

LoopForever:
    b LoopForever
 8000daa:	e7fe      	b.n	8000daa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000dac:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000db0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000db4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000db8:	08005ba8 	.word	0x08005ba8
  ldr r2, =_sbss
 8000dbc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000dc0:	20000278 	.word	0x20000278

08000dc4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dc4:	e7fe      	b.n	8000dc4 <ADC1_2_IRQHandler>
	...

08000dc8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dcc:	4b08      	ldr	r3, [pc, #32]	@ (8000df0 <HAL_Init+0x28>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a07      	ldr	r2, [pc, #28]	@ (8000df0 <HAL_Init+0x28>)
 8000dd2:	f043 0310 	orr.w	r3, r3, #16
 8000dd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd8:	2003      	movs	r0, #3
 8000dda:	f000 f94f 	bl	800107c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dde:	2000      	movs	r0, #0
 8000de0:	f000 f808 	bl	8000df4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000de4:	f7ff fdd2 	bl	800098c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000de8:	2300      	movs	r3, #0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40022000 	.word	0x40022000

08000df4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dfc:	4b12      	ldr	r3, [pc, #72]	@ (8000e48 <HAL_InitTick+0x54>)
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	4b12      	ldr	r3, [pc, #72]	@ (8000e4c <HAL_InitTick+0x58>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	4619      	mov	r1, r3
 8000e06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e12:	4618      	mov	r0, r3
 8000e14:	f000 f967 	bl	80010e6 <HAL_SYSTICK_Config>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e00e      	b.n	8000e40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2b0f      	cmp	r3, #15
 8000e26:	d80a      	bhi.n	8000e3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	6879      	ldr	r1, [r7, #4]
 8000e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e30:	f000 f92f 	bl	8001092 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e34:	4a06      	ldr	r2, [pc, #24]	@ (8000e50 <HAL_InitTick+0x5c>)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	e000      	b.n	8000e40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20000000 	.word	0x20000000
 8000e4c:	20000008 	.word	0x20000008
 8000e50:	20000004 	.word	0x20000004

08000e54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e58:	4b06      	ldr	r3, [pc, #24]	@ (8000e74 <HAL_IncTick+0x20>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	4b06      	ldr	r3, [pc, #24]	@ (8000e78 <HAL_IncTick+0x24>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4413      	add	r3, r2
 8000e64:	4a04      	ldr	r2, [pc, #16]	@ (8000e78 <HAL_IncTick+0x24>)
 8000e66:	6013      	str	r3, [r2, #0]
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	20000008 	.word	0x20000008
 8000e78:	20000274 	.word	0x20000274

08000e7c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000e80:	4b03      	ldr	r3, [pc, #12]	@ (8000e90 <HAL_GetTick+0x14>)
 8000e82:	681b      	ldr	r3, [r3, #0]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	20000274 	.word	0x20000274

08000e94 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e9c:	f7ff ffee 	bl	8000e7c <HAL_GetTick>
 8000ea0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eac:	d005      	beq.n	8000eba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eae:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed8 <HAL_Delay+0x44>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000eba:	bf00      	nop
 8000ebc:	f7ff ffde 	bl	8000e7c <HAL_GetTick>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	68fa      	ldr	r2, [r7, #12]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d8f7      	bhi.n	8000ebc <HAL_Delay+0x28>
  {
  }
}
 8000ecc:	bf00      	nop
 8000ece:	bf00      	nop
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000008 	.word	0x20000008

08000edc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b085      	sub	sp, #20
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f003 0307 	and.w	r3, r3, #7
 8000eea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eec:	4b0c      	ldr	r3, [pc, #48]	@ (8000f20 <__NVIC_SetPriorityGrouping+0x44>)
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ef2:	68ba      	ldr	r2, [r7, #8]
 8000ef4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ef8:	4013      	ands	r3, r2
 8000efa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f0e:	4a04      	ldr	r2, [pc, #16]	@ (8000f20 <__NVIC_SetPriorityGrouping+0x44>)
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	60d3      	str	r3, [r2, #12]
}
 8000f14:	bf00      	nop
 8000f16:	3714      	adds	r7, #20
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f28:	4b04      	ldr	r3, [pc, #16]	@ (8000f3c <__NVIC_GetPriorityGrouping+0x18>)
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	0a1b      	lsrs	r3, r3, #8
 8000f2e:	f003 0307 	and.w	r3, r3, #7
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	db0b      	blt.n	8000f6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	f003 021f 	and.w	r2, r3, #31
 8000f58:	4907      	ldr	r1, [pc, #28]	@ (8000f78 <__NVIC_EnableIRQ+0x38>)
 8000f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5e:	095b      	lsrs	r3, r3, #5
 8000f60:	2001      	movs	r0, #1
 8000f62:	fa00 f202 	lsl.w	r2, r0, r2
 8000f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f6a:	bf00      	nop
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	e000e100 	.word	0xe000e100

08000f7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	6039      	str	r1, [r7, #0]
 8000f86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	db0a      	blt.n	8000fa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	b2da      	uxtb	r2, r3
 8000f94:	490c      	ldr	r1, [pc, #48]	@ (8000fc8 <__NVIC_SetPriority+0x4c>)
 8000f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9a:	0112      	lsls	r2, r2, #4
 8000f9c:	b2d2      	uxtb	r2, r2
 8000f9e:	440b      	add	r3, r1
 8000fa0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fa4:	e00a      	b.n	8000fbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	4908      	ldr	r1, [pc, #32]	@ (8000fcc <__NVIC_SetPriority+0x50>)
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	f003 030f 	and.w	r3, r3, #15
 8000fb2:	3b04      	subs	r3, #4
 8000fb4:	0112      	lsls	r2, r2, #4
 8000fb6:	b2d2      	uxtb	r2, r2
 8000fb8:	440b      	add	r3, r1
 8000fba:	761a      	strb	r2, [r3, #24]
}
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	e000e100 	.word	0xe000e100
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b089      	sub	sp, #36	@ 0x24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	f003 0307 	and.w	r3, r3, #7
 8000fe2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	f1c3 0307 	rsb	r3, r3, #7
 8000fea:	2b04      	cmp	r3, #4
 8000fec:	bf28      	it	cs
 8000fee:	2304      	movcs	r3, #4
 8000ff0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	3304      	adds	r3, #4
 8000ff6:	2b06      	cmp	r3, #6
 8000ff8:	d902      	bls.n	8001000 <NVIC_EncodePriority+0x30>
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	3b03      	subs	r3, #3
 8000ffe:	e000      	b.n	8001002 <NVIC_EncodePriority+0x32>
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001004:	f04f 32ff 	mov.w	r2, #4294967295
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	43da      	mvns	r2, r3
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	401a      	ands	r2, r3
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001018:	f04f 31ff 	mov.w	r1, #4294967295
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	fa01 f303 	lsl.w	r3, r1, r3
 8001022:	43d9      	mvns	r1, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001028:	4313      	orrs	r3, r2
         );
}
 800102a:	4618      	mov	r0, r3
 800102c:	3724      	adds	r7, #36	@ 0x24
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
	...

08001038 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3b01      	subs	r3, #1
 8001044:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001048:	d301      	bcc.n	800104e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800104a:	2301      	movs	r3, #1
 800104c:	e00f      	b.n	800106e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800104e:	4a0a      	ldr	r2, [pc, #40]	@ (8001078 <SysTick_Config+0x40>)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3b01      	subs	r3, #1
 8001054:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001056:	210f      	movs	r1, #15
 8001058:	f04f 30ff 	mov.w	r0, #4294967295
 800105c:	f7ff ff8e 	bl	8000f7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001060:	4b05      	ldr	r3, [pc, #20]	@ (8001078 <SysTick_Config+0x40>)
 8001062:	2200      	movs	r2, #0
 8001064:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001066:	4b04      	ldr	r3, [pc, #16]	@ (8001078 <SysTick_Config+0x40>)
 8001068:	2207      	movs	r2, #7
 800106a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	e000e010 	.word	0xe000e010

0800107c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f7ff ff29 	bl	8000edc <__NVIC_SetPriorityGrouping>
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b086      	sub	sp, #24
 8001096:	af00      	add	r7, sp, #0
 8001098:	4603      	mov	r3, r0
 800109a:	60b9      	str	r1, [r7, #8]
 800109c:	607a      	str	r2, [r7, #4]
 800109e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010a4:	f7ff ff3e 	bl	8000f24 <__NVIC_GetPriorityGrouping>
 80010a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	68b9      	ldr	r1, [r7, #8]
 80010ae:	6978      	ldr	r0, [r7, #20]
 80010b0:	f7ff ff8e 	bl	8000fd0 <NVIC_EncodePriority>
 80010b4:	4602      	mov	r2, r0
 80010b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ba:	4611      	mov	r1, r2
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff ff5d 	bl	8000f7c <__NVIC_SetPriority>
}
 80010c2:	bf00      	nop
 80010c4:	3718      	adds	r7, #24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b082      	sub	sp, #8
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	4603      	mov	r3, r0
 80010d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff ff31 	bl	8000f40 <__NVIC_EnableIRQ>
}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f7ff ffa2 	bl	8001038 <SysTick_Config>
 80010f4:	4603      	mov	r3, r0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010fe:	b480      	push	{r7}
 8001100:	b083      	sub	sp, #12
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d101      	bne.n	8001110 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	e02e      	b.n	800116e <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001116:	2b02      	cmp	r3, #2
 8001118:	d008      	beq.n	800112c <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2204      	movs	r2, #4
 800111e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2200      	movs	r2, #0
 8001124:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	e020      	b.n	800116e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f022 020e 	bic.w	r2, r2, #14
 800113a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f022 0201 	bic.w	r2, r2, #1
 800114a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001154:	2101      	movs	r1, #1
 8001156:	fa01 f202 	lsl.w	r2, r1, r2
 800115a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2201      	movs	r2, #1
 8001160:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2200      	movs	r2, #0
 8001168:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr

0800117a <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b084      	sub	sp, #16
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001182:	2300      	movs	r3, #0
 8001184:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800118c:	2b02      	cmp	r3, #2
 800118e:	d005      	beq.n	800119c <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2204      	movs	r2, #4
 8001194:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	73fb      	strb	r3, [r7, #15]
 800119a:	e027      	b.n	80011ec <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f022 020e 	bic.w	r2, r2, #14
 80011aa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f022 0201 	bic.w	r2, r2, #1
 80011ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80011c4:	2101      	movs	r1, #1
 80011c6:	fa01 f202 	lsl.w	r2, r1, r2
 80011ca:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2201      	movs	r2, #1
 80011d0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2200      	movs	r2, #0
 80011d8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d003      	beq.n	80011ec <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	4798      	blx	r3
    }
  }
  return status;
 80011ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
	...

080011f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b087      	sub	sp, #28
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001202:	2300      	movs	r3, #0
 8001204:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001206:	e14e      	b.n	80014a6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	2101      	movs	r1, #1
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	fa01 f303 	lsl.w	r3, r1, r3
 8001214:	4013      	ands	r3, r2
 8001216:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	2b00      	cmp	r3, #0
 800121c:	f000 8140 	beq.w	80014a0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f003 0303 	and.w	r3, r3, #3
 8001228:	2b01      	cmp	r3, #1
 800122a:	d005      	beq.n	8001238 <HAL_GPIO_Init+0x40>
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f003 0303 	and.w	r3, r3, #3
 8001234:	2b02      	cmp	r3, #2
 8001236:	d130      	bne.n	800129a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	2203      	movs	r2, #3
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	43db      	mvns	r3, r3
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	4013      	ands	r3, r2
 800124e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	68da      	ldr	r2, [r3, #12]
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	4313      	orrs	r3, r2
 8001260:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800126e:	2201      	movs	r2, #1
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43db      	mvns	r3, r3
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	4013      	ands	r3, r2
 800127c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	091b      	lsrs	r3, r3, #4
 8001284:	f003 0201 	and.w	r2, r3, #1
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	4313      	orrs	r3, r2
 8001292:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f003 0303 	and.w	r3, r3, #3
 80012a2:	2b03      	cmp	r3, #3
 80012a4:	d017      	beq.n	80012d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	2203      	movs	r2, #3
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43db      	mvns	r3, r3
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	4013      	ands	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	689a      	ldr	r2, [r3, #8]
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f003 0303 	and.w	r3, r3, #3
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d123      	bne.n	800132a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	08da      	lsrs	r2, r3, #3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	3208      	adds	r2, #8
 80012ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	f003 0307 	and.w	r3, r3, #7
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	220f      	movs	r2, #15
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	43db      	mvns	r3, r3
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	4013      	ands	r3, r2
 8001304:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	691a      	ldr	r2, [r3, #16]
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	f003 0307 	and.w	r3, r3, #7
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	4313      	orrs	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	08da      	lsrs	r2, r3, #3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	3208      	adds	r2, #8
 8001324:	6939      	ldr	r1, [r7, #16]
 8001326:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	2203      	movs	r2, #3
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	43db      	mvns	r3, r3
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	4013      	ands	r3, r2
 8001340:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f003 0203 	and.w	r2, r3, #3
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	4313      	orrs	r3, r2
 8001356:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001366:	2b00      	cmp	r3, #0
 8001368:	f000 809a 	beq.w	80014a0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800136c:	4b55      	ldr	r3, [pc, #340]	@ (80014c4 <HAL_GPIO_Init+0x2cc>)
 800136e:	699b      	ldr	r3, [r3, #24]
 8001370:	4a54      	ldr	r2, [pc, #336]	@ (80014c4 <HAL_GPIO_Init+0x2cc>)
 8001372:	f043 0301 	orr.w	r3, r3, #1
 8001376:	6193      	str	r3, [r2, #24]
 8001378:	4b52      	ldr	r3, [pc, #328]	@ (80014c4 <HAL_GPIO_Init+0x2cc>)
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	f003 0301 	and.w	r3, r3, #1
 8001380:	60bb      	str	r3, [r7, #8]
 8001382:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001384:	4a50      	ldr	r2, [pc, #320]	@ (80014c8 <HAL_GPIO_Init+0x2d0>)
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	089b      	lsrs	r3, r3, #2
 800138a:	3302      	adds	r3, #2
 800138c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001390:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	f003 0303 	and.w	r3, r3, #3
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	220f      	movs	r2, #15
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	43db      	mvns	r3, r3
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	4013      	ands	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80013ae:	d013      	beq.n	80013d8 <HAL_GPIO_Init+0x1e0>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4a46      	ldr	r2, [pc, #280]	@ (80014cc <HAL_GPIO_Init+0x2d4>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d00d      	beq.n	80013d4 <HAL_GPIO_Init+0x1dc>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4a45      	ldr	r2, [pc, #276]	@ (80014d0 <HAL_GPIO_Init+0x2d8>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d007      	beq.n	80013d0 <HAL_GPIO_Init+0x1d8>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	4a44      	ldr	r2, [pc, #272]	@ (80014d4 <HAL_GPIO_Init+0x2dc>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d101      	bne.n	80013cc <HAL_GPIO_Init+0x1d4>
 80013c8:	2303      	movs	r3, #3
 80013ca:	e006      	b.n	80013da <HAL_GPIO_Init+0x1e2>
 80013cc:	2305      	movs	r3, #5
 80013ce:	e004      	b.n	80013da <HAL_GPIO_Init+0x1e2>
 80013d0:	2302      	movs	r3, #2
 80013d2:	e002      	b.n	80013da <HAL_GPIO_Init+0x1e2>
 80013d4:	2301      	movs	r3, #1
 80013d6:	e000      	b.n	80013da <HAL_GPIO_Init+0x1e2>
 80013d8:	2300      	movs	r3, #0
 80013da:	697a      	ldr	r2, [r7, #20]
 80013dc:	f002 0203 	and.w	r2, r2, #3
 80013e0:	0092      	lsls	r2, r2, #2
 80013e2:	4093      	lsls	r3, r2
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013ea:	4937      	ldr	r1, [pc, #220]	@ (80014c8 <HAL_GPIO_Init+0x2d0>)
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	089b      	lsrs	r3, r3, #2
 80013f0:	3302      	adds	r3, #2
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013f8:	4b37      	ldr	r3, [pc, #220]	@ (80014d8 <HAL_GPIO_Init+0x2e0>)
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	43db      	mvns	r3, r3
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	4013      	ands	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d003      	beq.n	800141c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	4313      	orrs	r3, r2
 800141a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800141c:	4a2e      	ldr	r2, [pc, #184]	@ (80014d8 <HAL_GPIO_Init+0x2e0>)
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001422:	4b2d      	ldr	r3, [pc, #180]	@ (80014d8 <HAL_GPIO_Init+0x2e0>)
 8001424:	68db      	ldr	r3, [r3, #12]
 8001426:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	43db      	mvns	r3, r3
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	4013      	ands	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d003      	beq.n	8001446 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	4313      	orrs	r3, r2
 8001444:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001446:	4a24      	ldr	r2, [pc, #144]	@ (80014d8 <HAL_GPIO_Init+0x2e0>)
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800144c:	4b22      	ldr	r3, [pc, #136]	@ (80014d8 <HAL_GPIO_Init+0x2e0>)
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	43db      	mvns	r3, r3
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	4013      	ands	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d003      	beq.n	8001470 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	4313      	orrs	r3, r2
 800146e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001470:	4a19      	ldr	r2, [pc, #100]	@ (80014d8 <HAL_GPIO_Init+0x2e0>)
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001476:	4b18      	ldr	r3, [pc, #96]	@ (80014d8 <HAL_GPIO_Init+0x2e0>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	43db      	mvns	r3, r3
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	4013      	ands	r3, r2
 8001484:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d003      	beq.n	800149a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	4313      	orrs	r3, r2
 8001498:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800149a:	4a0f      	ldr	r2, [pc, #60]	@ (80014d8 <HAL_GPIO_Init+0x2e0>)
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	3301      	adds	r3, #1
 80014a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	fa22 f303 	lsr.w	r3, r2, r3
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	f47f aea9 	bne.w	8001208 <HAL_GPIO_Init+0x10>
  }
}
 80014b6:	bf00      	nop
 80014b8:	bf00      	nop
 80014ba:	371c      	adds	r7, #28
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	40021000 	.word	0x40021000
 80014c8:	40010000 	.word	0x40010000
 80014cc:	48000400 	.word	0x48000400
 80014d0:	48000800 	.word	0x48000800
 80014d4:	48000c00 	.word	0x48000c00
 80014d8:	40010400 	.word	0x40010400

080014dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	460b      	mov	r3, r1
 80014e6:	807b      	strh	r3, [r7, #2]
 80014e8:	4613      	mov	r3, r2
 80014ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014ec:	787b      	ldrb	r3, [r7, #1]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d003      	beq.n	80014fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014f2:	887a      	ldrh	r2, [r7, #2]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014f8:	e002      	b.n	8001500 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014fa:	887a      	ldrh	r2, [r7, #2]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d101      	bne.n	800151e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e08d      	b.n	800163a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001524:	b2db      	uxtb	r3, r3
 8001526:	2b00      	cmp	r3, #0
 8001528:	d106      	bne.n	8001538 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2200      	movs	r2, #0
 800152e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f7ff fa4e 	bl	80009d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2224      	movs	r2, #36	@ 0x24
 800153c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f022 0201 	bic.w	r2, r2, #1
 800154e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	685a      	ldr	r2, [r3, #4]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800155c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	689a      	ldr	r2, [r3, #8]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800156c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d107      	bne.n	8001586 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	689a      	ldr	r2, [r3, #8]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	e006      	b.n	8001594 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	689a      	ldr	r2, [r3, #8]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001592:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	2b02      	cmp	r3, #2
 800159a:	d108      	bne.n	80015ae <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	685a      	ldr	r2, [r3, #4]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80015aa:	605a      	str	r2, [r3, #4]
 80015ac:	e007      	b.n	80015be <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	685a      	ldr	r2, [r3, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80015bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	6812      	ldr	r2, [r2, #0]
 80015c8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80015cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80015d0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	68da      	ldr	r2, [r3, #12]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80015e0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	691a      	ldr	r2, [r3, #16]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	695b      	ldr	r3, [r3, #20]
 80015ea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	699b      	ldr	r3, [r3, #24]
 80015f2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	430a      	orrs	r2, r1
 80015fa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	69d9      	ldr	r1, [r3, #28]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a1a      	ldr	r2, [r3, #32]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	430a      	orrs	r2, r1
 800160a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f042 0201 	orr.w	r2, r2, #1
 800161a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2220      	movs	r2, #32
 8001626:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2200      	movs	r2, #0
 800162e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2200      	movs	r2, #0
 8001634:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
	...

08001644 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b088      	sub	sp, #32
 8001648:	af02      	add	r7, sp, #8
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	4608      	mov	r0, r1
 800164e:	4611      	mov	r1, r2
 8001650:	461a      	mov	r2, r3
 8001652:	4603      	mov	r3, r0
 8001654:	817b      	strh	r3, [r7, #10]
 8001656:	460b      	mov	r3, r1
 8001658:	813b      	strh	r3, [r7, #8]
 800165a:	4613      	mov	r3, r2
 800165c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001664:	b2db      	uxtb	r3, r3
 8001666:	2b20      	cmp	r3, #32
 8001668:	f040 80f9 	bne.w	800185e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800166c:	6a3b      	ldr	r3, [r7, #32]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d002      	beq.n	8001678 <HAL_I2C_Mem_Write+0x34>
 8001672:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001674:	2b00      	cmp	r3, #0
 8001676:	d105      	bne.n	8001684 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800167e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e0ed      	b.n	8001860 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800168a:	2b01      	cmp	r3, #1
 800168c:	d101      	bne.n	8001692 <HAL_I2C_Mem_Write+0x4e>
 800168e:	2302      	movs	r3, #2
 8001690:	e0e6      	b.n	8001860 <HAL_I2C_Mem_Write+0x21c>
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	2201      	movs	r2, #1
 8001696:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800169a:	f7ff fbef 	bl	8000e7c <HAL_GetTick>
 800169e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	9300      	str	r3, [sp, #0]
 80016a4:	2319      	movs	r3, #25
 80016a6:	2201      	movs	r2, #1
 80016a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80016ac:	68f8      	ldr	r0, [r7, #12]
 80016ae:	f000 f955 	bl	800195c <I2C_WaitOnFlagUntilTimeout>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e0d1      	b.n	8001860 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2221      	movs	r2, #33	@ 0x21
 80016c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2240      	movs	r2, #64	@ 0x40
 80016c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	2200      	movs	r2, #0
 80016d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	6a3a      	ldr	r2, [r7, #32]
 80016d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80016dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2200      	movs	r2, #0
 80016e2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80016e4:	88f8      	ldrh	r0, [r7, #6]
 80016e6:	893a      	ldrh	r2, [r7, #8]
 80016e8:	8979      	ldrh	r1, [r7, #10]
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	9301      	str	r3, [sp, #4]
 80016ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016f0:	9300      	str	r3, [sp, #0]
 80016f2:	4603      	mov	r3, r0
 80016f4:	68f8      	ldr	r0, [r7, #12]
 80016f6:	f000 f8b9 	bl	800186c <I2C_RequestMemoryWrite>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d005      	beq.n	800170c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2200      	movs	r2, #0
 8001704:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e0a9      	b.n	8001860 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001710:	b29b      	uxth	r3, r3
 8001712:	2bff      	cmp	r3, #255	@ 0xff
 8001714:	d90e      	bls.n	8001734 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	22ff      	movs	r2, #255	@ 0xff
 800171a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001720:	b2da      	uxtb	r2, r3
 8001722:	8979      	ldrh	r1, [r7, #10]
 8001724:	2300      	movs	r3, #0
 8001726:	9300      	str	r3, [sp, #0]
 8001728:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800172c:	68f8      	ldr	r0, [r7, #12]
 800172e:	f000 fad9 	bl	8001ce4 <I2C_TransferConfig>
 8001732:	e00f      	b.n	8001754 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001738:	b29a      	uxth	r2, r3
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001742:	b2da      	uxtb	r2, r3
 8001744:	8979      	ldrh	r1, [r7, #10]
 8001746:	2300      	movs	r3, #0
 8001748:	9300      	str	r3, [sp, #0]
 800174a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800174e:	68f8      	ldr	r0, [r7, #12]
 8001750:	f000 fac8 	bl	8001ce4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001754:	697a      	ldr	r2, [r7, #20]
 8001756:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001758:	68f8      	ldr	r0, [r7, #12]
 800175a:	f000 f958 	bl	8001a0e <I2C_WaitOnTXISFlagUntilTimeout>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e07b      	b.n	8001860 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800176c:	781a      	ldrb	r2, [r3, #0]
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001778:	1c5a      	adds	r2, r3, #1
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001782:	b29b      	uxth	r3, r3
 8001784:	3b01      	subs	r3, #1
 8001786:	b29a      	uxth	r2, r3
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001790:	3b01      	subs	r3, #1
 8001792:	b29a      	uxth	r2, r3
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800179c:	b29b      	uxth	r3, r3
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d034      	beq.n	800180c <HAL_I2C_Mem_Write+0x1c8>
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d130      	bne.n	800180c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	9300      	str	r3, [sp, #0]
 80017ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017b0:	2200      	movs	r2, #0
 80017b2:	2180      	movs	r1, #128	@ 0x80
 80017b4:	68f8      	ldr	r0, [r7, #12]
 80017b6:	f000 f8d1 	bl	800195c <I2C_WaitOnFlagUntilTimeout>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e04d      	b.n	8001860 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	2bff      	cmp	r3, #255	@ 0xff
 80017cc:	d90e      	bls.n	80017ec <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	22ff      	movs	r2, #255	@ 0xff
 80017d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017d8:	b2da      	uxtb	r2, r3
 80017da:	8979      	ldrh	r1, [r7, #10]
 80017dc:	2300      	movs	r3, #0
 80017de:	9300      	str	r3, [sp, #0]
 80017e0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80017e4:	68f8      	ldr	r0, [r7, #12]
 80017e6:	f000 fa7d 	bl	8001ce4 <I2C_TransferConfig>
 80017ea:	e00f      	b.n	800180c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017f0:	b29a      	uxth	r2, r3
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017fa:	b2da      	uxtb	r2, r3
 80017fc:	8979      	ldrh	r1, [r7, #10]
 80017fe:	2300      	movs	r3, #0
 8001800:	9300      	str	r3, [sp, #0]
 8001802:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001806:	68f8      	ldr	r0, [r7, #12]
 8001808:	f000 fa6c 	bl	8001ce4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001810:	b29b      	uxth	r3, r3
 8001812:	2b00      	cmp	r3, #0
 8001814:	d19e      	bne.n	8001754 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001816:	697a      	ldr	r2, [r7, #20]
 8001818:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800181a:	68f8      	ldr	r0, [r7, #12]
 800181c:	f000 f93e 	bl	8001a9c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e01a      	b.n	8001860 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2220      	movs	r2, #32
 8001830:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	6859      	ldr	r1, [r3, #4]
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	4b0a      	ldr	r3, [pc, #40]	@ (8001868 <HAL_I2C_Mem_Write+0x224>)
 800183e:	400b      	ands	r3, r1
 8001840:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	2220      	movs	r2, #32
 8001846:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	2200      	movs	r2, #0
 800184e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	2200      	movs	r2, #0
 8001856:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800185a:	2300      	movs	r3, #0
 800185c:	e000      	b.n	8001860 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800185e:	2302      	movs	r3, #2
  }
}
 8001860:	4618      	mov	r0, r3
 8001862:	3718      	adds	r7, #24
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	fe00e800 	.word	0xfe00e800

0800186c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af02      	add	r7, sp, #8
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	4608      	mov	r0, r1
 8001876:	4611      	mov	r1, r2
 8001878:	461a      	mov	r2, r3
 800187a:	4603      	mov	r3, r0
 800187c:	817b      	strh	r3, [r7, #10]
 800187e:	460b      	mov	r3, r1
 8001880:	813b      	strh	r3, [r7, #8]
 8001882:	4613      	mov	r3, r2
 8001884:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001886:	88fb      	ldrh	r3, [r7, #6]
 8001888:	b2da      	uxtb	r2, r3
 800188a:	8979      	ldrh	r1, [r7, #10]
 800188c:	4b20      	ldr	r3, [pc, #128]	@ (8001910 <I2C_RequestMemoryWrite+0xa4>)
 800188e:	9300      	str	r3, [sp, #0]
 8001890:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001894:	68f8      	ldr	r0, [r7, #12]
 8001896:	f000 fa25 	bl	8001ce4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800189a:	69fa      	ldr	r2, [r7, #28]
 800189c:	69b9      	ldr	r1, [r7, #24]
 800189e:	68f8      	ldr	r0, [r7, #12]
 80018a0:	f000 f8b5 	bl	8001a0e <I2C_WaitOnTXISFlagUntilTimeout>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e02c      	b.n	8001908 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80018ae:	88fb      	ldrh	r3, [r7, #6]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d105      	bne.n	80018c0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80018b4:	893b      	ldrh	r3, [r7, #8]
 80018b6:	b2da      	uxtb	r2, r3
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	629a      	str	r2, [r3, #40]	@ 0x28
 80018be:	e015      	b.n	80018ec <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80018c0:	893b      	ldrh	r3, [r7, #8]
 80018c2:	0a1b      	lsrs	r3, r3, #8
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	b2da      	uxtb	r2, r3
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018ce:	69fa      	ldr	r2, [r7, #28]
 80018d0:	69b9      	ldr	r1, [r7, #24]
 80018d2:	68f8      	ldr	r0, [r7, #12]
 80018d4:	f000 f89b 	bl	8001a0e <I2C_WaitOnTXISFlagUntilTimeout>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e012      	b.n	8001908 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80018e2:	893b      	ldrh	r3, [r7, #8]
 80018e4:	b2da      	uxtb	r2, r3
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	9300      	str	r3, [sp, #0]
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	2200      	movs	r2, #0
 80018f4:	2180      	movs	r1, #128	@ 0x80
 80018f6:	68f8      	ldr	r0, [r7, #12]
 80018f8:	f000 f830 	bl	800195c <I2C_WaitOnFlagUntilTimeout>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e000      	b.n	8001908 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001906:	2300      	movs	r3, #0
}
 8001908:	4618      	mov	r0, r3
 800190a:	3710      	adds	r7, #16
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	80002000 	.word	0x80002000

08001914 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	699b      	ldr	r3, [r3, #24]
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b02      	cmp	r3, #2
 8001928:	d103      	bne.n	8001932 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2200      	movs	r2, #0
 8001930:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	f003 0301 	and.w	r3, r3, #1
 800193c:	2b01      	cmp	r3, #1
 800193e:	d007      	beq.n	8001950 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	699a      	ldr	r2, [r3, #24]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f042 0201 	orr.w	r2, r2, #1
 800194e:	619a      	str	r2, [r3, #24]
  }
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	603b      	str	r3, [r7, #0]
 8001968:	4613      	mov	r3, r2
 800196a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800196c:	e03b      	b.n	80019e6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	6839      	ldr	r1, [r7, #0]
 8001972:	68f8      	ldr	r0, [r7, #12]
 8001974:	f000 f8d6 	bl	8001b24 <I2C_IsErrorOccurred>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e041      	b.n	8001a06 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001988:	d02d      	beq.n	80019e6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800198a:	f7ff fa77 	bl	8000e7c <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	683a      	ldr	r2, [r7, #0]
 8001996:	429a      	cmp	r2, r3
 8001998:	d302      	bcc.n	80019a0 <I2C_WaitOnFlagUntilTimeout+0x44>
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d122      	bne.n	80019e6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	699a      	ldr	r2, [r3, #24]
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	4013      	ands	r3, r2
 80019aa:	68ba      	ldr	r2, [r7, #8]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	bf0c      	ite	eq
 80019b0:	2301      	moveq	r3, #1
 80019b2:	2300      	movne	r3, #0
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	461a      	mov	r2, r3
 80019b8:	79fb      	ldrb	r3, [r7, #7]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d113      	bne.n	80019e6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019c2:	f043 0220 	orr.w	r2, r3, #32
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2220      	movs	r2, #32
 80019ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	2200      	movs	r2, #0
 80019d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	2200      	movs	r2, #0
 80019de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e00f      	b.n	8001a06 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	699a      	ldr	r2, [r3, #24]
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	4013      	ands	r3, r2
 80019f0:	68ba      	ldr	r2, [r7, #8]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	bf0c      	ite	eq
 80019f6:	2301      	moveq	r3, #1
 80019f8:	2300      	movne	r3, #0
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	461a      	mov	r2, r3
 80019fe:	79fb      	ldrb	r3, [r7, #7]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d0b4      	beq.n	800196e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b084      	sub	sp, #16
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	60f8      	str	r0, [r7, #12]
 8001a16:	60b9      	str	r1, [r7, #8]
 8001a18:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001a1a:	e033      	b.n	8001a84 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	68b9      	ldr	r1, [r7, #8]
 8001a20:	68f8      	ldr	r0, [r7, #12]
 8001a22:	f000 f87f 	bl	8001b24 <I2C_IsErrorOccurred>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e031      	b.n	8001a94 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a36:	d025      	beq.n	8001a84 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a38:	f7ff fa20 	bl	8000e7c <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	68ba      	ldr	r2, [r7, #8]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d302      	bcc.n	8001a4e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d11a      	bne.n	8001a84 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	f003 0302 	and.w	r3, r3, #2
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d013      	beq.n	8001a84 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a60:	f043 0220 	orr.w	r2, r3, #32
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2220      	movs	r2, #32
 8001a6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2200      	movs	r2, #0
 8001a74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e007      	b.n	8001a94 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	699b      	ldr	r3, [r3, #24]
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d1c4      	bne.n	8001a1c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001a92:	2300      	movs	r3, #0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3710      	adds	r7, #16
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001aa8:	e02f      	b.n	8001b0a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	68b9      	ldr	r1, [r7, #8]
 8001aae:	68f8      	ldr	r0, [r7, #12]
 8001ab0:	f000 f838 	bl	8001b24 <I2C_IsErrorOccurred>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e02d      	b.n	8001b1a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001abe:	f7ff f9dd 	bl	8000e7c <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	68ba      	ldr	r2, [r7, #8]
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d302      	bcc.n	8001ad4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d11a      	bne.n	8001b0a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	699b      	ldr	r3, [r3, #24]
 8001ada:	f003 0320 	and.w	r3, r3, #32
 8001ade:	2b20      	cmp	r3, #32
 8001ae0:	d013      	beq.n	8001b0a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ae6:	f043 0220 	orr.w	r2, r3, #32
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2220      	movs	r2, #32
 8001af2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e007      	b.n	8001b1a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	f003 0320 	and.w	r3, r3, #32
 8001b14:	2b20      	cmp	r3, #32
 8001b16:	d1c8      	bne.n	8001aaa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
	...

08001b24 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b08a      	sub	sp, #40	@ 0x28
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b30:	2300      	movs	r3, #0
 8001b32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	f003 0310 	and.w	r3, r3, #16
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d068      	beq.n	8001c22 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2210      	movs	r2, #16
 8001b56:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001b58:	e049      	b.n	8001bee <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b60:	d045      	beq.n	8001bee <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001b62:	f7ff f98b 	bl	8000e7c <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	68ba      	ldr	r2, [r7, #8]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d302      	bcc.n	8001b78 <I2C_IsErrorOccurred+0x54>
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d13a      	bne.n	8001bee <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b82:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001b8a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001b9a:	d121      	bne.n	8001be0 <I2C_IsErrorOccurred+0xbc>
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001ba2:	d01d      	beq.n	8001be0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001ba4:	7cfb      	ldrb	r3, [r7, #19]
 8001ba6:	2b20      	cmp	r3, #32
 8001ba8:	d01a      	beq.n	8001be0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	685a      	ldr	r2, [r3, #4]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001bb8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001bba:	f7ff f95f 	bl	8000e7c <HAL_GetTick>
 8001bbe:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bc0:	e00e      	b.n	8001be0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001bc2:	f7ff f95b 	bl	8000e7c <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	2b19      	cmp	r3, #25
 8001bce:	d907      	bls.n	8001be0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001bd0:	6a3b      	ldr	r3, [r7, #32]
 8001bd2:	f043 0320 	orr.w	r3, r3, #32
 8001bd6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8001bde:	e006      	b.n	8001bee <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	f003 0320 	and.w	r3, r3, #32
 8001bea:	2b20      	cmp	r3, #32
 8001bec:	d1e9      	bne.n	8001bc2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	f003 0320 	and.w	r3, r3, #32
 8001bf8:	2b20      	cmp	r3, #32
 8001bfa:	d003      	beq.n	8001c04 <I2C_IsErrorOccurred+0xe0>
 8001bfc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d0aa      	beq.n	8001b5a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001c04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d103      	bne.n	8001c14 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2220      	movs	r2, #32
 8001c12:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001c14:	6a3b      	ldr	r3, [r7, #32]
 8001c16:	f043 0304 	orr.w	r3, r3, #4
 8001c1a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d00b      	beq.n	8001c4c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001c34:	6a3b      	ldr	r3, [r7, #32]
 8001c36:	f043 0301 	orr.w	r3, r3, #1
 8001c3a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c44:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d00b      	beq.n	8001c6e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001c56:	6a3b      	ldr	r3, [r7, #32]
 8001c58:	f043 0308 	orr.w	r3, r3, #8
 8001c5c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c66:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d00b      	beq.n	8001c90 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001c78:	6a3b      	ldr	r3, [r7, #32]
 8001c7a:	f043 0302 	orr.w	r3, r3, #2
 8001c7e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c88:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8001c90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d01c      	beq.n	8001cd2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001c98:	68f8      	ldr	r0, [r7, #12]
 8001c9a:	f7ff fe3b 	bl	8001914 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	6859      	ldr	r1, [r3, #4]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	4b0d      	ldr	r3, [pc, #52]	@ (8001ce0 <I2C_IsErrorOccurred+0x1bc>)
 8001caa:	400b      	ands	r3, r1
 8001cac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001cb2:	6a3b      	ldr	r3, [r7, #32]
 8001cb4:	431a      	orrs	r2, r3
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2220      	movs	r2, #32
 8001cbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8001cd2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3728      	adds	r7, #40	@ 0x28
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	fe00e800 	.word	0xfe00e800

08001ce4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b087      	sub	sp, #28
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	607b      	str	r3, [r7, #4]
 8001cee:	460b      	mov	r3, r1
 8001cf0:	817b      	strh	r3, [r7, #10]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001cf6:	897b      	ldrh	r3, [r7, #10]
 8001cf8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001cfc:	7a7b      	ldrb	r3, [r7, #9]
 8001cfe:	041b      	lsls	r3, r3, #16
 8001d00:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d04:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d0a:	6a3b      	ldr	r3, [r7, #32]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d12:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	685a      	ldr	r2, [r3, #4]
 8001d1a:	6a3b      	ldr	r3, [r7, #32]
 8001d1c:	0d5b      	lsrs	r3, r3, #21
 8001d1e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8001d22:	4b08      	ldr	r3, [pc, #32]	@ (8001d44 <I2C_TransferConfig+0x60>)
 8001d24:	430b      	orrs	r3, r1
 8001d26:	43db      	mvns	r3, r3
 8001d28:	ea02 0103 	and.w	r1, r2, r3
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	697a      	ldr	r2, [r7, #20]
 8001d32:	430a      	orrs	r2, r1
 8001d34:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001d36:	bf00      	nop
 8001d38:	371c      	adds	r7, #28
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	03ff63ff 	.word	0x03ff63ff

08001d48 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b20      	cmp	r3, #32
 8001d5c:	d138      	bne.n	8001dd0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d101      	bne.n	8001d6c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001d68:	2302      	movs	r3, #2
 8001d6a:	e032      	b.n	8001dd2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2224      	movs	r2, #36	@ 0x24
 8001d78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f022 0201 	bic.w	r2, r2, #1
 8001d8a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001d9a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	6819      	ldr	r1, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	683a      	ldr	r2, [r7, #0]
 8001da8:	430a      	orrs	r2, r1
 8001daa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f042 0201 	orr.w	r2, r2, #1
 8001dba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2220      	movs	r2, #32
 8001dc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	e000      	b.n	8001dd2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001dd0:	2302      	movs	r3, #2
  }
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr

08001dde <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b085      	sub	sp, #20
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
 8001de6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	2b20      	cmp	r3, #32
 8001df2:	d139      	bne.n	8001e68 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d101      	bne.n	8001e02 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001dfe:	2302      	movs	r3, #2
 8001e00:	e033      	b.n	8001e6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2201      	movs	r2, #1
 8001e06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2224      	movs	r2, #36	@ 0x24
 8001e0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f022 0201 	bic.w	r2, r2, #1
 8001e20:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001e30:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	021b      	lsls	r3, r3, #8
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	68fa      	ldr	r2, [r7, #12]
 8001e42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f042 0201 	orr.w	r2, r2, #1
 8001e52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2220      	movs	r2, #32
 8001e58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001e64:	2300      	movs	r3, #0
 8001e66:	e000      	b.n	8001e6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001e68:	2302      	movs	r3, #2
  }
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3714      	adds	r7, #20
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
	...

08001e78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e84:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e88:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e8e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d102      	bne.n	8001e9e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	f001 b823 	b.w	8002ee4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ea2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f000 817d 	beq.w	80021ae <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001eb4:	4bbc      	ldr	r3, [pc, #752]	@ (80021a8 <HAL_RCC_OscConfig+0x330>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f003 030c 	and.w	r3, r3, #12
 8001ebc:	2b04      	cmp	r3, #4
 8001ebe:	d00c      	beq.n	8001eda <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ec0:	4bb9      	ldr	r3, [pc, #740]	@ (80021a8 <HAL_RCC_OscConfig+0x330>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f003 030c 	and.w	r3, r3, #12
 8001ec8:	2b08      	cmp	r3, #8
 8001eca:	d15c      	bne.n	8001f86 <HAL_RCC_OscConfig+0x10e>
 8001ecc:	4bb6      	ldr	r3, [pc, #728]	@ (80021a8 <HAL_RCC_OscConfig+0x330>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ed4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ed8:	d155      	bne.n	8001f86 <HAL_RCC_OscConfig+0x10e>
 8001eda:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ede:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001ee6:	fa93 f3a3 	rbit	r3, r3
 8001eea:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001eee:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ef2:	fab3 f383 	clz	r3, r3
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	095b      	lsrs	r3, r3, #5
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	f043 0301 	orr.w	r3, r3, #1
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d102      	bne.n	8001f0c <HAL_RCC_OscConfig+0x94>
 8001f06:	4ba8      	ldr	r3, [pc, #672]	@ (80021a8 <HAL_RCC_OscConfig+0x330>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	e015      	b.n	8001f38 <HAL_RCC_OscConfig+0xc0>
 8001f0c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f10:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f14:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001f18:	fa93 f3a3 	rbit	r3, r3
 8001f1c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001f20:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f24:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001f28:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001f2c:	fa93 f3a3 	rbit	r3, r3
 8001f30:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001f34:	4b9c      	ldr	r3, [pc, #624]	@ (80021a8 <HAL_RCC_OscConfig+0x330>)
 8001f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f38:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001f3c:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001f40:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001f44:	fa92 f2a2 	rbit	r2, r2
 8001f48:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001f4c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001f50:	fab2 f282 	clz	r2, r2
 8001f54:	b2d2      	uxtb	r2, r2
 8001f56:	f042 0220 	orr.w	r2, r2, #32
 8001f5a:	b2d2      	uxtb	r2, r2
 8001f5c:	f002 021f 	and.w	r2, r2, #31
 8001f60:	2101      	movs	r1, #1
 8001f62:	fa01 f202 	lsl.w	r2, r1, r2
 8001f66:	4013      	ands	r3, r2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f000 811f 	beq.w	80021ac <HAL_RCC_OscConfig+0x334>
 8001f6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f72:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f040 8116 	bne.w	80021ac <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	f000 bfaf 	b.w	8002ee4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f8a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f96:	d106      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x12e>
 8001f98:	4b83      	ldr	r3, [pc, #524]	@ (80021a8 <HAL_RCC_OscConfig+0x330>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a82      	ldr	r2, [pc, #520]	@ (80021a8 <HAL_RCC_OscConfig+0x330>)
 8001f9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fa2:	6013      	str	r3, [r2, #0]
 8001fa4:	e036      	b.n	8002014 <HAL_RCC_OscConfig+0x19c>
 8001fa6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001faa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d10c      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x158>
 8001fb6:	4b7c      	ldr	r3, [pc, #496]	@ (80021a8 <HAL_RCC_OscConfig+0x330>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a7b      	ldr	r2, [pc, #492]	@ (80021a8 <HAL_RCC_OscConfig+0x330>)
 8001fbc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fc0:	6013      	str	r3, [r2, #0]
 8001fc2:	4b79      	ldr	r3, [pc, #484]	@ (80021a8 <HAL_RCC_OscConfig+0x330>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a78      	ldr	r2, [pc, #480]	@ (80021a8 <HAL_RCC_OscConfig+0x330>)
 8001fc8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fcc:	6013      	str	r3, [r2, #0]
 8001fce:	e021      	b.n	8002014 <HAL_RCC_OscConfig+0x19c>
 8001fd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fd4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001fe0:	d10c      	bne.n	8001ffc <HAL_RCC_OscConfig+0x184>
 8001fe2:	4b71      	ldr	r3, [pc, #452]	@ (80021a8 <HAL_RCC_OscConfig+0x330>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a70      	ldr	r2, [pc, #448]	@ (80021a8 <HAL_RCC_OscConfig+0x330>)
 8001fe8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fec:	6013      	str	r3, [r2, #0]
 8001fee:	4b6e      	ldr	r3, [pc, #440]	@ (80021a8 <HAL_RCC_OscConfig+0x330>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a6d      	ldr	r2, [pc, #436]	@ (80021a8 <HAL_RCC_OscConfig+0x330>)
 8001ff4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ff8:	6013      	str	r3, [r2, #0]
 8001ffa:	e00b      	b.n	8002014 <HAL_RCC_OscConfig+0x19c>
 8001ffc:	4b6a      	ldr	r3, [pc, #424]	@ (80021a8 <HAL_RCC_OscConfig+0x330>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a69      	ldr	r2, [pc, #420]	@ (80021a8 <HAL_RCC_OscConfig+0x330>)
 8002002:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002006:	6013      	str	r3, [r2, #0]
 8002008:	4b67      	ldr	r3, [pc, #412]	@ (80021a8 <HAL_RCC_OscConfig+0x330>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a66      	ldr	r2, [pc, #408]	@ (80021a8 <HAL_RCC_OscConfig+0x330>)
 800200e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002012:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002014:	4b64      	ldr	r3, [pc, #400]	@ (80021a8 <HAL_RCC_OscConfig+0x330>)
 8002016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002018:	f023 020f 	bic.w	r2, r3, #15
 800201c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002020:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	495f      	ldr	r1, [pc, #380]	@ (80021a8 <HAL_RCC_OscConfig+0x330>)
 800202a:	4313      	orrs	r3, r2
 800202c:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800202e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002032:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d059      	beq.n	80020f2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800203e:	f7fe ff1d 	bl	8000e7c <HAL_GetTick>
 8002042:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002046:	e00a      	b.n	800205e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002048:	f7fe ff18 	bl	8000e7c <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	2b64      	cmp	r3, #100	@ 0x64
 8002056:	d902      	bls.n	800205e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	f000 bf43 	b.w	8002ee4 <HAL_RCC_OscConfig+0x106c>
 800205e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002062:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002066:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800206a:	fa93 f3a3 	rbit	r3, r3
 800206e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002072:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002076:	fab3 f383 	clz	r3, r3
 800207a:	b2db      	uxtb	r3, r3
 800207c:	095b      	lsrs	r3, r3, #5
 800207e:	b2db      	uxtb	r3, r3
 8002080:	f043 0301 	orr.w	r3, r3, #1
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b01      	cmp	r3, #1
 8002088:	d102      	bne.n	8002090 <HAL_RCC_OscConfig+0x218>
 800208a:	4b47      	ldr	r3, [pc, #284]	@ (80021a8 <HAL_RCC_OscConfig+0x330>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	e015      	b.n	80020bc <HAL_RCC_OscConfig+0x244>
 8002090:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002094:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002098:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800209c:	fa93 f3a3 	rbit	r3, r3
 80020a0:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80020a4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80020a8:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80020ac:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80020b0:	fa93 f3a3 	rbit	r3, r3
 80020b4:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80020b8:	4b3b      	ldr	r3, [pc, #236]	@ (80021a8 <HAL_RCC_OscConfig+0x330>)
 80020ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020bc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80020c0:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80020c4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80020c8:	fa92 f2a2 	rbit	r2, r2
 80020cc:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80020d0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80020d4:	fab2 f282 	clz	r2, r2
 80020d8:	b2d2      	uxtb	r2, r2
 80020da:	f042 0220 	orr.w	r2, r2, #32
 80020de:	b2d2      	uxtb	r2, r2
 80020e0:	f002 021f 	and.w	r2, r2, #31
 80020e4:	2101      	movs	r1, #1
 80020e6:	fa01 f202 	lsl.w	r2, r1, r2
 80020ea:	4013      	ands	r3, r2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0ab      	beq.n	8002048 <HAL_RCC_OscConfig+0x1d0>
 80020f0:	e05d      	b.n	80021ae <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f2:	f7fe fec3 	bl	8000e7c <HAL_GetTick>
 80020f6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020fa:	e00a      	b.n	8002112 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020fc:	f7fe febe 	bl	8000e7c <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	2b64      	cmp	r3, #100	@ 0x64
 800210a:	d902      	bls.n	8002112 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	f000 bee9 	b.w	8002ee4 <HAL_RCC_OscConfig+0x106c>
 8002112:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002116:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800211e:	fa93 f3a3 	rbit	r3, r3
 8002122:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8002126:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800212a:	fab3 f383 	clz	r3, r3
 800212e:	b2db      	uxtb	r3, r3
 8002130:	095b      	lsrs	r3, r3, #5
 8002132:	b2db      	uxtb	r3, r3
 8002134:	f043 0301 	orr.w	r3, r3, #1
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b01      	cmp	r3, #1
 800213c:	d102      	bne.n	8002144 <HAL_RCC_OscConfig+0x2cc>
 800213e:	4b1a      	ldr	r3, [pc, #104]	@ (80021a8 <HAL_RCC_OscConfig+0x330>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	e015      	b.n	8002170 <HAL_RCC_OscConfig+0x2f8>
 8002144:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002148:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002150:	fa93 f3a3 	rbit	r3, r3
 8002154:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002158:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800215c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002160:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002164:	fa93 f3a3 	rbit	r3, r3
 8002168:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 800216c:	4b0e      	ldr	r3, [pc, #56]	@ (80021a8 <HAL_RCC_OscConfig+0x330>)
 800216e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002170:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002174:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002178:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800217c:	fa92 f2a2 	rbit	r2, r2
 8002180:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002184:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002188:	fab2 f282 	clz	r2, r2
 800218c:	b2d2      	uxtb	r2, r2
 800218e:	f042 0220 	orr.w	r2, r2, #32
 8002192:	b2d2      	uxtb	r2, r2
 8002194:	f002 021f 	and.w	r2, r2, #31
 8002198:	2101      	movs	r1, #1
 800219a:	fa01 f202 	lsl.w	r2, r1, r2
 800219e:	4013      	ands	r3, r2
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d1ab      	bne.n	80020fc <HAL_RCC_OscConfig+0x284>
 80021a4:	e003      	b.n	80021ae <HAL_RCC_OscConfig+0x336>
 80021a6:	bf00      	nop
 80021a8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021b2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f000 817d 	beq.w	80024be <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80021c4:	4ba6      	ldr	r3, [pc, #664]	@ (8002460 <HAL_RCC_OscConfig+0x5e8>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f003 030c 	and.w	r3, r3, #12
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d00b      	beq.n	80021e8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80021d0:	4ba3      	ldr	r3, [pc, #652]	@ (8002460 <HAL_RCC_OscConfig+0x5e8>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f003 030c 	and.w	r3, r3, #12
 80021d8:	2b08      	cmp	r3, #8
 80021da:	d172      	bne.n	80022c2 <HAL_RCC_OscConfig+0x44a>
 80021dc:	4ba0      	ldr	r3, [pc, #640]	@ (8002460 <HAL_RCC_OscConfig+0x5e8>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d16c      	bne.n	80022c2 <HAL_RCC_OscConfig+0x44a>
 80021e8:	2302      	movs	r3, #2
 80021ea:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ee:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80021f2:	fa93 f3a3 	rbit	r3, r3
 80021f6:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80021fa:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021fe:	fab3 f383 	clz	r3, r3
 8002202:	b2db      	uxtb	r3, r3
 8002204:	095b      	lsrs	r3, r3, #5
 8002206:	b2db      	uxtb	r3, r3
 8002208:	f043 0301 	orr.w	r3, r3, #1
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b01      	cmp	r3, #1
 8002210:	d102      	bne.n	8002218 <HAL_RCC_OscConfig+0x3a0>
 8002212:	4b93      	ldr	r3, [pc, #588]	@ (8002460 <HAL_RCC_OscConfig+0x5e8>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	e013      	b.n	8002240 <HAL_RCC_OscConfig+0x3c8>
 8002218:	2302      	movs	r3, #2
 800221a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221e:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002222:	fa93 f3a3 	rbit	r3, r3
 8002226:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800222a:	2302      	movs	r3, #2
 800222c:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002230:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002234:	fa93 f3a3 	rbit	r3, r3
 8002238:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 800223c:	4b88      	ldr	r3, [pc, #544]	@ (8002460 <HAL_RCC_OscConfig+0x5e8>)
 800223e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002240:	2202      	movs	r2, #2
 8002242:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002246:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800224a:	fa92 f2a2 	rbit	r2, r2
 800224e:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002252:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002256:	fab2 f282 	clz	r2, r2
 800225a:	b2d2      	uxtb	r2, r2
 800225c:	f042 0220 	orr.w	r2, r2, #32
 8002260:	b2d2      	uxtb	r2, r2
 8002262:	f002 021f 	and.w	r2, r2, #31
 8002266:	2101      	movs	r1, #1
 8002268:	fa01 f202 	lsl.w	r2, r1, r2
 800226c:	4013      	ands	r3, r2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00a      	beq.n	8002288 <HAL_RCC_OscConfig+0x410>
 8002272:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002276:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d002      	beq.n	8002288 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	f000 be2e 	b.w	8002ee4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002288:	4b75      	ldr	r3, [pc, #468]	@ (8002460 <HAL_RCC_OscConfig+0x5e8>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002290:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002294:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	695b      	ldr	r3, [r3, #20]
 800229c:	21f8      	movs	r1, #248	@ 0xf8
 800229e:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a2:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80022a6:	fa91 f1a1 	rbit	r1, r1
 80022aa:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80022ae:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80022b2:	fab1 f181 	clz	r1, r1
 80022b6:	b2c9      	uxtb	r1, r1
 80022b8:	408b      	lsls	r3, r1
 80022ba:	4969      	ldr	r1, [pc, #420]	@ (8002460 <HAL_RCC_OscConfig+0x5e8>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022c0:	e0fd      	b.n	80024be <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022c6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f000 8088 	beq.w	80023e4 <HAL_RCC_OscConfig+0x56c>
 80022d4:	2301      	movs	r3, #1
 80022d6:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022da:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80022de:	fa93 f3a3 	rbit	r3, r3
 80022e2:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80022e6:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022ea:	fab3 f383 	clz	r3, r3
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80022f4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	461a      	mov	r2, r3
 80022fc:	2301      	movs	r3, #1
 80022fe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002300:	f7fe fdbc 	bl	8000e7c <HAL_GetTick>
 8002304:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002308:	e00a      	b.n	8002320 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800230a:	f7fe fdb7 	bl	8000e7c <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b02      	cmp	r3, #2
 8002318:	d902      	bls.n	8002320 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	f000 bde2 	b.w	8002ee4 <HAL_RCC_OscConfig+0x106c>
 8002320:	2302      	movs	r3, #2
 8002322:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002326:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800232a:	fa93 f3a3 	rbit	r3, r3
 800232e:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002332:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002336:	fab3 f383 	clz	r3, r3
 800233a:	b2db      	uxtb	r3, r3
 800233c:	095b      	lsrs	r3, r3, #5
 800233e:	b2db      	uxtb	r3, r3
 8002340:	f043 0301 	orr.w	r3, r3, #1
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b01      	cmp	r3, #1
 8002348:	d102      	bne.n	8002350 <HAL_RCC_OscConfig+0x4d8>
 800234a:	4b45      	ldr	r3, [pc, #276]	@ (8002460 <HAL_RCC_OscConfig+0x5e8>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	e013      	b.n	8002378 <HAL_RCC_OscConfig+0x500>
 8002350:	2302      	movs	r3, #2
 8002352:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002356:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800235a:	fa93 f3a3 	rbit	r3, r3
 800235e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002362:	2302      	movs	r3, #2
 8002364:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002368:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800236c:	fa93 f3a3 	rbit	r3, r3
 8002370:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002374:	4b3a      	ldr	r3, [pc, #232]	@ (8002460 <HAL_RCC_OscConfig+0x5e8>)
 8002376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002378:	2202      	movs	r2, #2
 800237a:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800237e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002382:	fa92 f2a2 	rbit	r2, r2
 8002386:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800238a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800238e:	fab2 f282 	clz	r2, r2
 8002392:	b2d2      	uxtb	r2, r2
 8002394:	f042 0220 	orr.w	r2, r2, #32
 8002398:	b2d2      	uxtb	r2, r2
 800239a:	f002 021f 	and.w	r2, r2, #31
 800239e:	2101      	movs	r1, #1
 80023a0:	fa01 f202 	lsl.w	r2, r1, r2
 80023a4:	4013      	ands	r3, r2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d0af      	beq.n	800230a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023aa:	4b2d      	ldr	r3, [pc, #180]	@ (8002460 <HAL_RCC_OscConfig+0x5e8>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023b6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	695b      	ldr	r3, [r3, #20]
 80023be:	21f8      	movs	r1, #248	@ 0xf8
 80023c0:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c4:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80023c8:	fa91 f1a1 	rbit	r1, r1
 80023cc:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80023d0:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80023d4:	fab1 f181 	clz	r1, r1
 80023d8:	b2c9      	uxtb	r1, r1
 80023da:	408b      	lsls	r3, r1
 80023dc:	4920      	ldr	r1, [pc, #128]	@ (8002460 <HAL_RCC_OscConfig+0x5e8>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	600b      	str	r3, [r1, #0]
 80023e2:	e06c      	b.n	80024be <HAL_RCC_OscConfig+0x646>
 80023e4:	2301      	movs	r3, #1
 80023e6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ea:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80023ee:	fa93 f3a3 	rbit	r3, r3
 80023f2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80023f6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023fa:	fab3 f383 	clz	r3, r3
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002404:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	461a      	mov	r2, r3
 800240c:	2300      	movs	r3, #0
 800240e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002410:	f7fe fd34 	bl	8000e7c <HAL_GetTick>
 8002414:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002418:	e00a      	b.n	8002430 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800241a:	f7fe fd2f 	bl	8000e7c <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d902      	bls.n	8002430 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	f000 bd5a 	b.w	8002ee4 <HAL_RCC_OscConfig+0x106c>
 8002430:	2302      	movs	r3, #2
 8002432:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002436:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800243a:	fa93 f3a3 	rbit	r3, r3
 800243e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002442:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002446:	fab3 f383 	clz	r3, r3
 800244a:	b2db      	uxtb	r3, r3
 800244c:	095b      	lsrs	r3, r3, #5
 800244e:	b2db      	uxtb	r3, r3
 8002450:	f043 0301 	orr.w	r3, r3, #1
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b01      	cmp	r3, #1
 8002458:	d104      	bne.n	8002464 <HAL_RCC_OscConfig+0x5ec>
 800245a:	4b01      	ldr	r3, [pc, #4]	@ (8002460 <HAL_RCC_OscConfig+0x5e8>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	e015      	b.n	800248c <HAL_RCC_OscConfig+0x614>
 8002460:	40021000 	.word	0x40021000
 8002464:	2302      	movs	r3, #2
 8002466:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800246e:	fa93 f3a3 	rbit	r3, r3
 8002472:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002476:	2302      	movs	r3, #2
 8002478:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800247c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002480:	fa93 f3a3 	rbit	r3, r3
 8002484:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002488:	4bc8      	ldr	r3, [pc, #800]	@ (80027ac <HAL_RCC_OscConfig+0x934>)
 800248a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800248c:	2202      	movs	r2, #2
 800248e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002492:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002496:	fa92 f2a2 	rbit	r2, r2
 800249a:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 800249e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80024a2:	fab2 f282 	clz	r2, r2
 80024a6:	b2d2      	uxtb	r2, r2
 80024a8:	f042 0220 	orr.w	r2, r2, #32
 80024ac:	b2d2      	uxtb	r2, r2
 80024ae:	f002 021f 	and.w	r2, r2, #31
 80024b2:	2101      	movs	r1, #1
 80024b4:	fa01 f202 	lsl.w	r2, r1, r2
 80024b8:	4013      	ands	r3, r2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1ad      	bne.n	800241a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024c2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0308 	and.w	r3, r3, #8
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f000 8110 	beq.w	80026f4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024d8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d079      	beq.n	80025d8 <HAL_RCC_OscConfig+0x760>
 80024e4:	2301      	movs	r3, #1
 80024e6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ea:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80024ee:	fa93 f3a3 	rbit	r3, r3
 80024f2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80024f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024fa:	fab3 f383 	clz	r3, r3
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	461a      	mov	r2, r3
 8002502:	4bab      	ldr	r3, [pc, #684]	@ (80027b0 <HAL_RCC_OscConfig+0x938>)
 8002504:	4413      	add	r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	461a      	mov	r2, r3
 800250a:	2301      	movs	r3, #1
 800250c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800250e:	f7fe fcb5 	bl	8000e7c <HAL_GetTick>
 8002512:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002516:	e00a      	b.n	800252e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002518:	f7fe fcb0 	bl	8000e7c <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b02      	cmp	r3, #2
 8002526:	d902      	bls.n	800252e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	f000 bcdb 	b.w	8002ee4 <HAL_RCC_OscConfig+0x106c>
 800252e:	2302      	movs	r3, #2
 8002530:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002534:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002538:	fa93 f3a3 	rbit	r3, r3
 800253c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002540:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002544:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002548:	2202      	movs	r2, #2
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002550:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	fa93 f2a3 	rbit	r2, r3
 800255a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800255e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002568:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800256c:	2202      	movs	r2, #2
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002574:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	fa93 f2a3 	rbit	r2, r3
 800257e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002582:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002586:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002588:	4b88      	ldr	r3, [pc, #544]	@ (80027ac <HAL_RCC_OscConfig+0x934>)
 800258a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800258c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002590:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002594:	2102      	movs	r1, #2
 8002596:	6019      	str	r1, [r3, #0]
 8002598:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800259c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	fa93 f1a3 	rbit	r1, r3
 80025a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025aa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80025ae:	6019      	str	r1, [r3, #0]
  return result;
 80025b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025b4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	fab3 f383 	clz	r3, r3
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	f003 031f 	and.w	r3, r3, #31
 80025ca:	2101      	movs	r1, #1
 80025cc:	fa01 f303 	lsl.w	r3, r1, r3
 80025d0:	4013      	ands	r3, r2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d0a0      	beq.n	8002518 <HAL_RCC_OscConfig+0x6a0>
 80025d6:	e08d      	b.n	80026f4 <HAL_RCC_OscConfig+0x87c>
 80025d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025dc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80025e0:	2201      	movs	r2, #1
 80025e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025e8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	fa93 f2a3 	rbit	r2, r3
 80025f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025f6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80025fa:	601a      	str	r2, [r3, #0]
  return result;
 80025fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002600:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002604:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002606:	fab3 f383 	clz	r3, r3
 800260a:	b2db      	uxtb	r3, r3
 800260c:	461a      	mov	r2, r3
 800260e:	4b68      	ldr	r3, [pc, #416]	@ (80027b0 <HAL_RCC_OscConfig+0x938>)
 8002610:	4413      	add	r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	461a      	mov	r2, r3
 8002616:	2300      	movs	r3, #0
 8002618:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800261a:	f7fe fc2f 	bl	8000e7c <HAL_GetTick>
 800261e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002622:	e00a      	b.n	800263a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002624:	f7fe fc2a 	bl	8000e7c <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d902      	bls.n	800263a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	f000 bc55 	b.w	8002ee4 <HAL_RCC_OscConfig+0x106c>
 800263a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800263e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002642:	2202      	movs	r2, #2
 8002644:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002646:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800264a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	fa93 f2a3 	rbit	r2, r3
 8002654:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002658:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800265c:	601a      	str	r2, [r3, #0]
 800265e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002662:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002666:	2202      	movs	r2, #2
 8002668:	601a      	str	r2, [r3, #0]
 800266a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800266e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	fa93 f2a3 	rbit	r2, r3
 8002678:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800267c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002680:	601a      	str	r2, [r3, #0]
 8002682:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002686:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800268a:	2202      	movs	r2, #2
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002692:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	fa93 f2a3 	rbit	r2, r3
 800269c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026a0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80026a4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026a6:	4b41      	ldr	r3, [pc, #260]	@ (80027ac <HAL_RCC_OscConfig+0x934>)
 80026a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ae:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80026b2:	2102      	movs	r1, #2
 80026b4:	6019      	str	r1, [r3, #0]
 80026b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ba:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	fa93 f1a3 	rbit	r1, r3
 80026c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026c8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80026cc:	6019      	str	r1, [r3, #0]
  return result;
 80026ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026d2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	fab3 f383 	clz	r3, r3
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	f003 031f 	and.w	r3, r3, #31
 80026e8:	2101      	movs	r1, #1
 80026ea:	fa01 f303 	lsl.w	r3, r1, r3
 80026ee:	4013      	ands	r3, r2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d197      	bne.n	8002624 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026f8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0304 	and.w	r3, r3, #4
 8002704:	2b00      	cmp	r3, #0
 8002706:	f000 81a1 	beq.w	8002a4c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800270a:	2300      	movs	r3, #0
 800270c:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002710:	4b26      	ldr	r3, [pc, #152]	@ (80027ac <HAL_RCC_OscConfig+0x934>)
 8002712:	69db      	ldr	r3, [r3, #28]
 8002714:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d116      	bne.n	800274a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800271c:	4b23      	ldr	r3, [pc, #140]	@ (80027ac <HAL_RCC_OscConfig+0x934>)
 800271e:	69db      	ldr	r3, [r3, #28]
 8002720:	4a22      	ldr	r2, [pc, #136]	@ (80027ac <HAL_RCC_OscConfig+0x934>)
 8002722:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002726:	61d3      	str	r3, [r2, #28]
 8002728:	4b20      	ldr	r3, [pc, #128]	@ (80027ac <HAL_RCC_OscConfig+0x934>)
 800272a:	69db      	ldr	r3, [r3, #28]
 800272c:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002730:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002734:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002738:	601a      	str	r2, [r3, #0]
 800273a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800273e:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002742:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002744:	2301      	movs	r3, #1
 8002746:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800274a:	4b1a      	ldr	r3, [pc, #104]	@ (80027b4 <HAL_RCC_OscConfig+0x93c>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002752:	2b00      	cmp	r3, #0
 8002754:	d11a      	bne.n	800278c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002756:	4b17      	ldr	r3, [pc, #92]	@ (80027b4 <HAL_RCC_OscConfig+0x93c>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a16      	ldr	r2, [pc, #88]	@ (80027b4 <HAL_RCC_OscConfig+0x93c>)
 800275c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002760:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002762:	f7fe fb8b 	bl	8000e7c <HAL_GetTick>
 8002766:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800276a:	e009      	b.n	8002780 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800276c:	f7fe fb86 	bl	8000e7c <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b64      	cmp	r3, #100	@ 0x64
 800277a:	d901      	bls.n	8002780 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e3b1      	b.n	8002ee4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002780:	4b0c      	ldr	r3, [pc, #48]	@ (80027b4 <HAL_RCC_OscConfig+0x93c>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002788:	2b00      	cmp	r3, #0
 800278a:	d0ef      	beq.n	800276c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800278c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002790:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d10d      	bne.n	80027b8 <HAL_RCC_OscConfig+0x940>
 800279c:	4b03      	ldr	r3, [pc, #12]	@ (80027ac <HAL_RCC_OscConfig+0x934>)
 800279e:	6a1b      	ldr	r3, [r3, #32]
 80027a0:	4a02      	ldr	r2, [pc, #8]	@ (80027ac <HAL_RCC_OscConfig+0x934>)
 80027a2:	f043 0301 	orr.w	r3, r3, #1
 80027a6:	6213      	str	r3, [r2, #32]
 80027a8:	e03c      	b.n	8002824 <HAL_RCC_OscConfig+0x9ac>
 80027aa:	bf00      	nop
 80027ac:	40021000 	.word	0x40021000
 80027b0:	10908120 	.word	0x10908120
 80027b4:	40007000 	.word	0x40007000
 80027b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d10c      	bne.n	80027e2 <HAL_RCC_OscConfig+0x96a>
 80027c8:	4bc1      	ldr	r3, [pc, #772]	@ (8002ad0 <HAL_RCC_OscConfig+0xc58>)
 80027ca:	6a1b      	ldr	r3, [r3, #32]
 80027cc:	4ac0      	ldr	r2, [pc, #768]	@ (8002ad0 <HAL_RCC_OscConfig+0xc58>)
 80027ce:	f023 0301 	bic.w	r3, r3, #1
 80027d2:	6213      	str	r3, [r2, #32]
 80027d4:	4bbe      	ldr	r3, [pc, #760]	@ (8002ad0 <HAL_RCC_OscConfig+0xc58>)
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	4abd      	ldr	r2, [pc, #756]	@ (8002ad0 <HAL_RCC_OscConfig+0xc58>)
 80027da:	f023 0304 	bic.w	r3, r3, #4
 80027de:	6213      	str	r3, [r2, #32]
 80027e0:	e020      	b.n	8002824 <HAL_RCC_OscConfig+0x9ac>
 80027e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027e6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	2b05      	cmp	r3, #5
 80027f0:	d10c      	bne.n	800280c <HAL_RCC_OscConfig+0x994>
 80027f2:	4bb7      	ldr	r3, [pc, #732]	@ (8002ad0 <HAL_RCC_OscConfig+0xc58>)
 80027f4:	6a1b      	ldr	r3, [r3, #32]
 80027f6:	4ab6      	ldr	r2, [pc, #728]	@ (8002ad0 <HAL_RCC_OscConfig+0xc58>)
 80027f8:	f043 0304 	orr.w	r3, r3, #4
 80027fc:	6213      	str	r3, [r2, #32]
 80027fe:	4bb4      	ldr	r3, [pc, #720]	@ (8002ad0 <HAL_RCC_OscConfig+0xc58>)
 8002800:	6a1b      	ldr	r3, [r3, #32]
 8002802:	4ab3      	ldr	r2, [pc, #716]	@ (8002ad0 <HAL_RCC_OscConfig+0xc58>)
 8002804:	f043 0301 	orr.w	r3, r3, #1
 8002808:	6213      	str	r3, [r2, #32]
 800280a:	e00b      	b.n	8002824 <HAL_RCC_OscConfig+0x9ac>
 800280c:	4bb0      	ldr	r3, [pc, #704]	@ (8002ad0 <HAL_RCC_OscConfig+0xc58>)
 800280e:	6a1b      	ldr	r3, [r3, #32]
 8002810:	4aaf      	ldr	r2, [pc, #700]	@ (8002ad0 <HAL_RCC_OscConfig+0xc58>)
 8002812:	f023 0301 	bic.w	r3, r3, #1
 8002816:	6213      	str	r3, [r2, #32]
 8002818:	4bad      	ldr	r3, [pc, #692]	@ (8002ad0 <HAL_RCC_OscConfig+0xc58>)
 800281a:	6a1b      	ldr	r3, [r3, #32]
 800281c:	4aac      	ldr	r2, [pc, #688]	@ (8002ad0 <HAL_RCC_OscConfig+0xc58>)
 800281e:	f023 0304 	bic.w	r3, r3, #4
 8002822:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002824:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002828:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	2b00      	cmp	r3, #0
 8002832:	f000 8081 	beq.w	8002938 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002836:	f7fe fb21 	bl	8000e7c <HAL_GetTick>
 800283a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800283e:	e00b      	b.n	8002858 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002840:	f7fe fb1c 	bl	8000e7c <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002850:	4293      	cmp	r3, r2
 8002852:	d901      	bls.n	8002858 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e345      	b.n	8002ee4 <HAL_RCC_OscConfig+0x106c>
 8002858:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800285c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002860:	2202      	movs	r2, #2
 8002862:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002864:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002868:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	fa93 f2a3 	rbit	r2, r3
 8002872:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002876:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800287a:	601a      	str	r2, [r3, #0]
 800287c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002880:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002884:	2202      	movs	r2, #2
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800288c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	fa93 f2a3 	rbit	r2, r3
 8002896:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800289a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800289e:	601a      	str	r2, [r3, #0]
  return result;
 80028a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028a4:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80028a8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028aa:	fab3 f383 	clz	r3, r3
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	095b      	lsrs	r3, r3, #5
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	f043 0302 	orr.w	r3, r3, #2
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d102      	bne.n	80028c4 <HAL_RCC_OscConfig+0xa4c>
 80028be:	4b84      	ldr	r3, [pc, #528]	@ (8002ad0 <HAL_RCC_OscConfig+0xc58>)
 80028c0:	6a1b      	ldr	r3, [r3, #32]
 80028c2:	e013      	b.n	80028ec <HAL_RCC_OscConfig+0xa74>
 80028c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028c8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80028cc:	2202      	movs	r2, #2
 80028ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028d4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	fa93 f2a3 	rbit	r2, r3
 80028de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028e2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	4b79      	ldr	r3, [pc, #484]	@ (8002ad0 <HAL_RCC_OscConfig+0xc58>)
 80028ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028f0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80028f4:	2102      	movs	r1, #2
 80028f6:	6011      	str	r1, [r2, #0]
 80028f8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028fc:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002900:	6812      	ldr	r2, [r2, #0]
 8002902:	fa92 f1a2 	rbit	r1, r2
 8002906:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800290a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800290e:	6011      	str	r1, [r2, #0]
  return result;
 8002910:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002914:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002918:	6812      	ldr	r2, [r2, #0]
 800291a:	fab2 f282 	clz	r2, r2
 800291e:	b2d2      	uxtb	r2, r2
 8002920:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002924:	b2d2      	uxtb	r2, r2
 8002926:	f002 021f 	and.w	r2, r2, #31
 800292a:	2101      	movs	r1, #1
 800292c:	fa01 f202 	lsl.w	r2, r1, r2
 8002930:	4013      	ands	r3, r2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d084      	beq.n	8002840 <HAL_RCC_OscConfig+0x9c8>
 8002936:	e07f      	b.n	8002a38 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002938:	f7fe faa0 	bl	8000e7c <HAL_GetTick>
 800293c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002940:	e00b      	b.n	800295a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002942:	f7fe fa9b 	bl	8000e7c <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002952:	4293      	cmp	r3, r2
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e2c4      	b.n	8002ee4 <HAL_RCC_OscConfig+0x106c>
 800295a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800295e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002962:	2202      	movs	r2, #2
 8002964:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002966:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800296a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	fa93 f2a3 	rbit	r2, r3
 8002974:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002978:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800297c:	601a      	str	r2, [r3, #0]
 800297e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002982:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002986:	2202      	movs	r2, #2
 8002988:	601a      	str	r2, [r3, #0]
 800298a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800298e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	fa93 f2a3 	rbit	r2, r3
 8002998:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800299c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80029a0:	601a      	str	r2, [r3, #0]
  return result;
 80029a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029a6:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80029aa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029ac:	fab3 f383 	clz	r3, r3
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	095b      	lsrs	r3, r3, #5
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	f043 0302 	orr.w	r3, r3, #2
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d102      	bne.n	80029c6 <HAL_RCC_OscConfig+0xb4e>
 80029c0:	4b43      	ldr	r3, [pc, #268]	@ (8002ad0 <HAL_RCC_OscConfig+0xc58>)
 80029c2:	6a1b      	ldr	r3, [r3, #32]
 80029c4:	e013      	b.n	80029ee <HAL_RCC_OscConfig+0xb76>
 80029c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ca:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80029ce:	2202      	movs	r2, #2
 80029d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029d6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	fa93 f2a3 	rbit	r2, r3
 80029e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029e4:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80029e8:	601a      	str	r2, [r3, #0]
 80029ea:	4b39      	ldr	r3, [pc, #228]	@ (8002ad0 <HAL_RCC_OscConfig+0xc58>)
 80029ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029f2:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80029f6:	2102      	movs	r1, #2
 80029f8:	6011      	str	r1, [r2, #0]
 80029fa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029fe:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002a02:	6812      	ldr	r2, [r2, #0]
 8002a04:	fa92 f1a2 	rbit	r1, r2
 8002a08:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a0c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002a10:	6011      	str	r1, [r2, #0]
  return result;
 8002a12:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a16:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002a1a:	6812      	ldr	r2, [r2, #0]
 8002a1c:	fab2 f282 	clz	r2, r2
 8002a20:	b2d2      	uxtb	r2, r2
 8002a22:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a26:	b2d2      	uxtb	r2, r2
 8002a28:	f002 021f 	and.w	r2, r2, #31
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a32:	4013      	ands	r3, r2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d184      	bne.n	8002942 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a38:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d105      	bne.n	8002a4c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a40:	4b23      	ldr	r3, [pc, #140]	@ (8002ad0 <HAL_RCC_OscConfig+0xc58>)
 8002a42:	69db      	ldr	r3, [r3, #28]
 8002a44:	4a22      	ldr	r2, [pc, #136]	@ (8002ad0 <HAL_RCC_OscConfig+0xc58>)
 8002a46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a4a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a50:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	69db      	ldr	r3, [r3, #28]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f000 8242 	beq.w	8002ee2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a5e:	4b1c      	ldr	r3, [pc, #112]	@ (8002ad0 <HAL_RCC_OscConfig+0xc58>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f003 030c 	and.w	r3, r3, #12
 8002a66:	2b08      	cmp	r3, #8
 8002a68:	f000 8213 	beq.w	8002e92 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a70:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	69db      	ldr	r3, [r3, #28]
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	f040 8162 	bne.w	8002d42 <HAL_RCC_OscConfig+0xeca>
 8002a7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a82:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002a86:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002a8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a90:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	fa93 f2a3 	rbit	r2, r3
 8002a9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a9e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002aa2:	601a      	str	r2, [r3, #0]
  return result;
 8002aa4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aa8:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002aac:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aae:	fab3 f383 	clz	r3, r3
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002ab8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	461a      	mov	r2, r3
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac4:	f7fe f9da 	bl	8000e7c <HAL_GetTick>
 8002ac8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002acc:	e00c      	b.n	8002ae8 <HAL_RCC_OscConfig+0xc70>
 8002ace:	bf00      	nop
 8002ad0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ad4:	f7fe f9d2 	bl	8000e7c <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d901      	bls.n	8002ae8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e1fd      	b.n	8002ee4 <HAL_RCC_OscConfig+0x106c>
 8002ae8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aec:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002af0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002af4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002afa:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	fa93 f2a3 	rbit	r2, r3
 8002b04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b08:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002b0c:	601a      	str	r2, [r3, #0]
  return result;
 8002b0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b12:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002b16:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b18:	fab3 f383 	clz	r3, r3
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	095b      	lsrs	r3, r3, #5
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	f043 0301 	orr.w	r3, r3, #1
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d102      	bne.n	8002b32 <HAL_RCC_OscConfig+0xcba>
 8002b2c:	4bb0      	ldr	r3, [pc, #704]	@ (8002df0 <HAL_RCC_OscConfig+0xf78>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	e027      	b.n	8002b82 <HAL_RCC_OscConfig+0xd0a>
 8002b32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b36:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002b3a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b44:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	fa93 f2a3 	rbit	r2, r3
 8002b4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b52:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002b56:	601a      	str	r2, [r3, #0]
 8002b58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b5c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002b60:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b64:	601a      	str	r2, [r3, #0]
 8002b66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b6a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	fa93 f2a3 	rbit	r2, r3
 8002b74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b78:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002b7c:	601a      	str	r2, [r3, #0]
 8002b7e:	4b9c      	ldr	r3, [pc, #624]	@ (8002df0 <HAL_RCC_OscConfig+0xf78>)
 8002b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b82:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b86:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002b8a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002b8e:	6011      	str	r1, [r2, #0]
 8002b90:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b94:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002b98:	6812      	ldr	r2, [r2, #0]
 8002b9a:	fa92 f1a2 	rbit	r1, r2
 8002b9e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ba2:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002ba6:	6011      	str	r1, [r2, #0]
  return result;
 8002ba8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002bac:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002bb0:	6812      	ldr	r2, [r2, #0]
 8002bb2:	fab2 f282 	clz	r2, r2
 8002bb6:	b2d2      	uxtb	r2, r2
 8002bb8:	f042 0220 	orr.w	r2, r2, #32
 8002bbc:	b2d2      	uxtb	r2, r2
 8002bbe:	f002 021f 	and.w	r2, r2, #31
 8002bc2:	2101      	movs	r1, #1
 8002bc4:	fa01 f202 	lsl.w	r2, r1, r2
 8002bc8:	4013      	ands	r3, r2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d182      	bne.n	8002ad4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bce:	4b88      	ldr	r3, [pc, #544]	@ (8002df0 <HAL_RCC_OscConfig+0xf78>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002bd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bda:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002be2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002be6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	6a1b      	ldr	r3, [r3, #32]
 8002bee:	430b      	orrs	r3, r1
 8002bf0:	497f      	ldr	r1, [pc, #508]	@ (8002df0 <HAL_RCC_OscConfig+0xf78>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	604b      	str	r3, [r1, #4]
 8002bf6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bfa:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002bfe:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002c02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c08:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	fa93 f2a3 	rbit	r2, r3
 8002c12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c16:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002c1a:	601a      	str	r2, [r3, #0]
  return result;
 8002c1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c20:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002c24:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c26:	fab3 f383 	clz	r3, r3
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002c30:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	461a      	mov	r2, r3
 8002c38:	2301      	movs	r3, #1
 8002c3a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3c:	f7fe f91e 	bl	8000e7c <HAL_GetTick>
 8002c40:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c44:	e009      	b.n	8002c5a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c46:	f7fe f919 	bl	8000e7c <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e144      	b.n	8002ee4 <HAL_RCC_OscConfig+0x106c>
 8002c5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c5e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002c62:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c6c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	fa93 f2a3 	rbit	r2, r3
 8002c76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c7a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002c7e:	601a      	str	r2, [r3, #0]
  return result;
 8002c80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c84:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002c88:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c8a:	fab3 f383 	clz	r3, r3
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	095b      	lsrs	r3, r3, #5
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	f043 0301 	orr.w	r3, r3, #1
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d102      	bne.n	8002ca4 <HAL_RCC_OscConfig+0xe2c>
 8002c9e:	4b54      	ldr	r3, [pc, #336]	@ (8002df0 <HAL_RCC_OscConfig+0xf78>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	e027      	b.n	8002cf4 <HAL_RCC_OscConfig+0xe7c>
 8002ca4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ca8:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002cac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002cb0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cb6:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	fa93 f2a3 	rbit	r2, r3
 8002cc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cc4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002cc8:	601a      	str	r2, [r3, #0]
 8002cca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cce:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002cd2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cdc:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	fa93 f2a3 	rbit	r2, r3
 8002ce6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cea:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002cee:	601a      	str	r2, [r3, #0]
 8002cf0:	4b3f      	ldr	r3, [pc, #252]	@ (8002df0 <HAL_RCC_OscConfig+0xf78>)
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002cf8:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002cfc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002d00:	6011      	str	r1, [r2, #0]
 8002d02:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d06:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002d0a:	6812      	ldr	r2, [r2, #0]
 8002d0c:	fa92 f1a2 	rbit	r1, r2
 8002d10:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d14:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002d18:	6011      	str	r1, [r2, #0]
  return result;
 8002d1a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d1e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002d22:	6812      	ldr	r2, [r2, #0]
 8002d24:	fab2 f282 	clz	r2, r2
 8002d28:	b2d2      	uxtb	r2, r2
 8002d2a:	f042 0220 	orr.w	r2, r2, #32
 8002d2e:	b2d2      	uxtb	r2, r2
 8002d30:	f002 021f 	and.w	r2, r2, #31
 8002d34:	2101      	movs	r1, #1
 8002d36:	fa01 f202 	lsl.w	r2, r1, r2
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d082      	beq.n	8002c46 <HAL_RCC_OscConfig+0xdce>
 8002d40:	e0cf      	b.n	8002ee2 <HAL_RCC_OscConfig+0x106a>
 8002d42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d46:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002d4a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002d4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d54:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	fa93 f2a3 	rbit	r2, r3
 8002d5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d62:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002d66:	601a      	str	r2, [r3, #0]
  return result;
 8002d68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d6c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002d70:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d72:	fab3 f383 	clz	r3, r3
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002d7c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	461a      	mov	r2, r3
 8002d84:	2300      	movs	r3, #0
 8002d86:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d88:	f7fe f878 	bl	8000e7c <HAL_GetTick>
 8002d8c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d90:	e009      	b.n	8002da6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d92:	f7fe f873 	bl	8000e7c <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e09e      	b.n	8002ee4 <HAL_RCC_OscConfig+0x106c>
 8002da6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002daa:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002dae:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002db2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002db8:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	fa93 f2a3 	rbit	r2, r3
 8002dc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dc6:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002dca:	601a      	str	r2, [r3, #0]
  return result;
 8002dcc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dd0:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002dd4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dd6:	fab3 f383 	clz	r3, r3
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	095b      	lsrs	r3, r3, #5
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	f043 0301 	orr.w	r3, r3, #1
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d104      	bne.n	8002df4 <HAL_RCC_OscConfig+0xf7c>
 8002dea:	4b01      	ldr	r3, [pc, #4]	@ (8002df0 <HAL_RCC_OscConfig+0xf78>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	e029      	b.n	8002e44 <HAL_RCC_OscConfig+0xfcc>
 8002df0:	40021000 	.word	0x40021000
 8002df4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002df8:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002dfc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e06:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	fa93 f2a3 	rbit	r2, r3
 8002e10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e14:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002e18:	601a      	str	r2, [r3, #0]
 8002e1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e1e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002e22:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e26:	601a      	str	r2, [r3, #0]
 8002e28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e2c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	fa93 f2a3 	rbit	r2, r3
 8002e36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e3a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002e3e:	601a      	str	r2, [r3, #0]
 8002e40:	4b2b      	ldr	r3, [pc, #172]	@ (8002ef0 <HAL_RCC_OscConfig+0x1078>)
 8002e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e44:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e48:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002e4c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002e50:	6011      	str	r1, [r2, #0]
 8002e52:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e56:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002e5a:	6812      	ldr	r2, [r2, #0]
 8002e5c:	fa92 f1a2 	rbit	r1, r2
 8002e60:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e64:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002e68:	6011      	str	r1, [r2, #0]
  return result;
 8002e6a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e6e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002e72:	6812      	ldr	r2, [r2, #0]
 8002e74:	fab2 f282 	clz	r2, r2
 8002e78:	b2d2      	uxtb	r2, r2
 8002e7a:	f042 0220 	orr.w	r2, r2, #32
 8002e7e:	b2d2      	uxtb	r2, r2
 8002e80:	f002 021f 	and.w	r2, r2, #31
 8002e84:	2101      	movs	r1, #1
 8002e86:	fa01 f202 	lsl.w	r2, r1, r2
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d180      	bne.n	8002d92 <HAL_RCC_OscConfig+0xf1a>
 8002e90:	e027      	b.n	8002ee2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e96:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	69db      	ldr	r3, [r3, #28]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d101      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e01e      	b.n	8002ee4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ea6:	4b12      	ldr	r3, [pc, #72]	@ (8002ef0 <HAL_RCC_OscConfig+0x1078>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002eae:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002eb2:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002eb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d10b      	bne.n	8002ede <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002ec6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002eca:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002ece:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ed2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d001      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e000      	b.n	8002ee4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	40021000 	.word	0x40021000

08002ef4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b09e      	sub	sp, #120	@ 0x78
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002efe:	2300      	movs	r3, #0
 8002f00:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d101      	bne.n	8002f0c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e162      	b.n	80031d2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f0c:	4b90      	ldr	r3, [pc, #576]	@ (8003150 <HAL_RCC_ClockConfig+0x25c>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0307 	and.w	r3, r3, #7
 8002f14:	683a      	ldr	r2, [r7, #0]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d910      	bls.n	8002f3c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f1a:	4b8d      	ldr	r3, [pc, #564]	@ (8003150 <HAL_RCC_ClockConfig+0x25c>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f023 0207 	bic.w	r2, r3, #7
 8002f22:	498b      	ldr	r1, [pc, #556]	@ (8003150 <HAL_RCC_ClockConfig+0x25c>)
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f2a:	4b89      	ldr	r3, [pc, #548]	@ (8003150 <HAL_RCC_ClockConfig+0x25c>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0307 	and.w	r3, r3, #7
 8002f32:	683a      	ldr	r2, [r7, #0]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d001      	beq.n	8002f3c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e14a      	b.n	80031d2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0302 	and.w	r3, r3, #2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d008      	beq.n	8002f5a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f48:	4b82      	ldr	r3, [pc, #520]	@ (8003154 <HAL_RCC_ClockConfig+0x260>)
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	497f      	ldr	r1, [pc, #508]	@ (8003154 <HAL_RCC_ClockConfig+0x260>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f000 80dc 	beq.w	8003120 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d13c      	bne.n	8002fea <HAL_RCC_ClockConfig+0xf6>
 8002f70:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f74:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f78:	fa93 f3a3 	rbit	r3, r3
 8002f7c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002f7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f80:	fab3 f383 	clz	r3, r3
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	095b      	lsrs	r3, r3, #5
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	f043 0301 	orr.w	r3, r3, #1
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d102      	bne.n	8002f9a <HAL_RCC_ClockConfig+0xa6>
 8002f94:	4b6f      	ldr	r3, [pc, #444]	@ (8003154 <HAL_RCC_ClockConfig+0x260>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	e00f      	b.n	8002fba <HAL_RCC_ClockConfig+0xc6>
 8002f9a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f9e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002fa2:	fa93 f3a3 	rbit	r3, r3
 8002fa6:	667b      	str	r3, [r7, #100]	@ 0x64
 8002fa8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002fac:	663b      	str	r3, [r7, #96]	@ 0x60
 8002fae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002fb0:	fa93 f3a3 	rbit	r3, r3
 8002fb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002fb6:	4b67      	ldr	r3, [pc, #412]	@ (8003154 <HAL_RCC_ClockConfig+0x260>)
 8002fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fba:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002fbe:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002fc0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002fc2:	fa92 f2a2 	rbit	r2, r2
 8002fc6:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002fc8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002fca:	fab2 f282 	clz	r2, r2
 8002fce:	b2d2      	uxtb	r2, r2
 8002fd0:	f042 0220 	orr.w	r2, r2, #32
 8002fd4:	b2d2      	uxtb	r2, r2
 8002fd6:	f002 021f 	and.w	r2, r2, #31
 8002fda:	2101      	movs	r1, #1
 8002fdc:	fa01 f202 	lsl.w	r2, r1, r2
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d17b      	bne.n	80030de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e0f3      	b.n	80031d2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d13c      	bne.n	800306c <HAL_RCC_ClockConfig+0x178>
 8002ff2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ff6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ffa:	fa93 f3a3 	rbit	r3, r3
 8002ffe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003000:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003002:	fab3 f383 	clz	r3, r3
 8003006:	b2db      	uxtb	r3, r3
 8003008:	095b      	lsrs	r3, r3, #5
 800300a:	b2db      	uxtb	r3, r3
 800300c:	f043 0301 	orr.w	r3, r3, #1
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b01      	cmp	r3, #1
 8003014:	d102      	bne.n	800301c <HAL_RCC_ClockConfig+0x128>
 8003016:	4b4f      	ldr	r3, [pc, #316]	@ (8003154 <HAL_RCC_ClockConfig+0x260>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	e00f      	b.n	800303c <HAL_RCC_ClockConfig+0x148>
 800301c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003020:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003022:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003024:	fa93 f3a3 	rbit	r3, r3
 8003028:	647b      	str	r3, [r7, #68]	@ 0x44
 800302a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800302e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003030:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003032:	fa93 f3a3 	rbit	r3, r3
 8003036:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003038:	4b46      	ldr	r3, [pc, #280]	@ (8003154 <HAL_RCC_ClockConfig+0x260>)
 800303a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800303c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003040:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003042:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003044:	fa92 f2a2 	rbit	r2, r2
 8003048:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800304a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800304c:	fab2 f282 	clz	r2, r2
 8003050:	b2d2      	uxtb	r2, r2
 8003052:	f042 0220 	orr.w	r2, r2, #32
 8003056:	b2d2      	uxtb	r2, r2
 8003058:	f002 021f 	and.w	r2, r2, #31
 800305c:	2101      	movs	r1, #1
 800305e:	fa01 f202 	lsl.w	r2, r1, r2
 8003062:	4013      	ands	r3, r2
 8003064:	2b00      	cmp	r3, #0
 8003066:	d13a      	bne.n	80030de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e0b2      	b.n	80031d2 <HAL_RCC_ClockConfig+0x2de>
 800306c:	2302      	movs	r3, #2
 800306e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003072:	fa93 f3a3 	rbit	r3, r3
 8003076:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800307a:	fab3 f383 	clz	r3, r3
 800307e:	b2db      	uxtb	r3, r3
 8003080:	095b      	lsrs	r3, r3, #5
 8003082:	b2db      	uxtb	r3, r3
 8003084:	f043 0301 	orr.w	r3, r3, #1
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b01      	cmp	r3, #1
 800308c:	d102      	bne.n	8003094 <HAL_RCC_ClockConfig+0x1a0>
 800308e:	4b31      	ldr	r3, [pc, #196]	@ (8003154 <HAL_RCC_ClockConfig+0x260>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	e00d      	b.n	80030b0 <HAL_RCC_ClockConfig+0x1bc>
 8003094:	2302      	movs	r3, #2
 8003096:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800309a:	fa93 f3a3 	rbit	r3, r3
 800309e:	627b      	str	r3, [r7, #36]	@ 0x24
 80030a0:	2302      	movs	r3, #2
 80030a2:	623b      	str	r3, [r7, #32]
 80030a4:	6a3b      	ldr	r3, [r7, #32]
 80030a6:	fa93 f3a3 	rbit	r3, r3
 80030aa:	61fb      	str	r3, [r7, #28]
 80030ac:	4b29      	ldr	r3, [pc, #164]	@ (8003154 <HAL_RCC_ClockConfig+0x260>)
 80030ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b0:	2202      	movs	r2, #2
 80030b2:	61ba      	str	r2, [r7, #24]
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	fa92 f2a2 	rbit	r2, r2
 80030ba:	617a      	str	r2, [r7, #20]
  return result;
 80030bc:	697a      	ldr	r2, [r7, #20]
 80030be:	fab2 f282 	clz	r2, r2
 80030c2:	b2d2      	uxtb	r2, r2
 80030c4:	f042 0220 	orr.w	r2, r2, #32
 80030c8:	b2d2      	uxtb	r2, r2
 80030ca:	f002 021f 	and.w	r2, r2, #31
 80030ce:	2101      	movs	r1, #1
 80030d0:	fa01 f202 	lsl.w	r2, r1, r2
 80030d4:	4013      	ands	r3, r2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e079      	b.n	80031d2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030de:	4b1d      	ldr	r3, [pc, #116]	@ (8003154 <HAL_RCC_ClockConfig+0x260>)
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f023 0203 	bic.w	r2, r3, #3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	491a      	ldr	r1, [pc, #104]	@ (8003154 <HAL_RCC_ClockConfig+0x260>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030f0:	f7fd fec4 	bl	8000e7c <HAL_GetTick>
 80030f4:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030f6:	e00a      	b.n	800310e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030f8:	f7fd fec0 	bl	8000e7c <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003106:	4293      	cmp	r3, r2
 8003108:	d901      	bls.n	800310e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e061      	b.n	80031d2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800310e:	4b11      	ldr	r3, [pc, #68]	@ (8003154 <HAL_RCC_ClockConfig+0x260>)
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f003 020c 	and.w	r2, r3, #12
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	429a      	cmp	r2, r3
 800311e:	d1eb      	bne.n	80030f8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003120:	4b0b      	ldr	r3, [pc, #44]	@ (8003150 <HAL_RCC_ClockConfig+0x25c>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0307 	and.w	r3, r3, #7
 8003128:	683a      	ldr	r2, [r7, #0]
 800312a:	429a      	cmp	r2, r3
 800312c:	d214      	bcs.n	8003158 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800312e:	4b08      	ldr	r3, [pc, #32]	@ (8003150 <HAL_RCC_ClockConfig+0x25c>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f023 0207 	bic.w	r2, r3, #7
 8003136:	4906      	ldr	r1, [pc, #24]	@ (8003150 <HAL_RCC_ClockConfig+0x25c>)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	4313      	orrs	r3, r2
 800313c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800313e:	4b04      	ldr	r3, [pc, #16]	@ (8003150 <HAL_RCC_ClockConfig+0x25c>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0307 	and.w	r3, r3, #7
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	429a      	cmp	r2, r3
 800314a:	d005      	beq.n	8003158 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e040      	b.n	80031d2 <HAL_RCC_ClockConfig+0x2de>
 8003150:	40022000 	.word	0x40022000
 8003154:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0304 	and.w	r3, r3, #4
 8003160:	2b00      	cmp	r3, #0
 8003162:	d008      	beq.n	8003176 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003164:	4b1d      	ldr	r3, [pc, #116]	@ (80031dc <HAL_RCC_ClockConfig+0x2e8>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	491a      	ldr	r1, [pc, #104]	@ (80031dc <HAL_RCC_ClockConfig+0x2e8>)
 8003172:	4313      	orrs	r3, r2
 8003174:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0308 	and.w	r3, r3, #8
 800317e:	2b00      	cmp	r3, #0
 8003180:	d009      	beq.n	8003196 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003182:	4b16      	ldr	r3, [pc, #88]	@ (80031dc <HAL_RCC_ClockConfig+0x2e8>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	00db      	lsls	r3, r3, #3
 8003190:	4912      	ldr	r1, [pc, #72]	@ (80031dc <HAL_RCC_ClockConfig+0x2e8>)
 8003192:	4313      	orrs	r3, r2
 8003194:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003196:	f000 f829 	bl	80031ec <HAL_RCC_GetSysClockFreq>
 800319a:	4601      	mov	r1, r0
 800319c:	4b0f      	ldr	r3, [pc, #60]	@ (80031dc <HAL_RCC_ClockConfig+0x2e8>)
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031a4:	22f0      	movs	r2, #240	@ 0xf0
 80031a6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a8:	693a      	ldr	r2, [r7, #16]
 80031aa:	fa92 f2a2 	rbit	r2, r2
 80031ae:	60fa      	str	r2, [r7, #12]
  return result;
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	fab2 f282 	clz	r2, r2
 80031b6:	b2d2      	uxtb	r2, r2
 80031b8:	40d3      	lsrs	r3, r2
 80031ba:	4a09      	ldr	r2, [pc, #36]	@ (80031e0 <HAL_RCC_ClockConfig+0x2ec>)
 80031bc:	5cd3      	ldrb	r3, [r2, r3]
 80031be:	fa21 f303 	lsr.w	r3, r1, r3
 80031c2:	4a08      	ldr	r2, [pc, #32]	@ (80031e4 <HAL_RCC_ClockConfig+0x2f0>)
 80031c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80031c6:	4b08      	ldr	r3, [pc, #32]	@ (80031e8 <HAL_RCC_ClockConfig+0x2f4>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7fd fe12 	bl	8000df4 <HAL_InitTick>
  
  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3778      	adds	r7, #120	@ 0x78
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	40021000 	.word	0x40021000
 80031e0:	08005b60 	.word	0x08005b60
 80031e4:	20000000 	.word	0x20000000
 80031e8:	20000004 	.word	0x20000004

080031ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b087      	sub	sp, #28
 80031f0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80031f2:	2300      	movs	r3, #0
 80031f4:	60fb      	str	r3, [r7, #12]
 80031f6:	2300      	movs	r3, #0
 80031f8:	60bb      	str	r3, [r7, #8]
 80031fa:	2300      	movs	r3, #0
 80031fc:	617b      	str	r3, [r7, #20]
 80031fe:	2300      	movs	r3, #0
 8003200:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003202:	2300      	movs	r3, #0
 8003204:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003206:	4b1e      	ldr	r3, [pc, #120]	@ (8003280 <HAL_RCC_GetSysClockFreq+0x94>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f003 030c 	and.w	r3, r3, #12
 8003212:	2b04      	cmp	r3, #4
 8003214:	d002      	beq.n	800321c <HAL_RCC_GetSysClockFreq+0x30>
 8003216:	2b08      	cmp	r3, #8
 8003218:	d003      	beq.n	8003222 <HAL_RCC_GetSysClockFreq+0x36>
 800321a:	e026      	b.n	800326a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800321c:	4b19      	ldr	r3, [pc, #100]	@ (8003284 <HAL_RCC_GetSysClockFreq+0x98>)
 800321e:	613b      	str	r3, [r7, #16]
      break;
 8003220:	e026      	b.n	8003270 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	0c9b      	lsrs	r3, r3, #18
 8003226:	f003 030f 	and.w	r3, r3, #15
 800322a:	4a17      	ldr	r2, [pc, #92]	@ (8003288 <HAL_RCC_GetSysClockFreq+0x9c>)
 800322c:	5cd3      	ldrb	r3, [r2, r3]
 800322e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003230:	4b13      	ldr	r3, [pc, #76]	@ (8003280 <HAL_RCC_GetSysClockFreq+0x94>)
 8003232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003234:	f003 030f 	and.w	r3, r3, #15
 8003238:	4a14      	ldr	r2, [pc, #80]	@ (800328c <HAL_RCC_GetSysClockFreq+0xa0>)
 800323a:	5cd3      	ldrb	r3, [r2, r3]
 800323c:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d008      	beq.n	800325a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003248:	4a0e      	ldr	r2, [pc, #56]	@ (8003284 <HAL_RCC_GetSysClockFreq+0x98>)
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	fb02 f303 	mul.w	r3, r2, r3
 8003256:	617b      	str	r3, [r7, #20]
 8003258:	e004      	b.n	8003264 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a0c      	ldr	r2, [pc, #48]	@ (8003290 <HAL_RCC_GetSysClockFreq+0xa4>)
 800325e:	fb02 f303 	mul.w	r3, r2, r3
 8003262:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	613b      	str	r3, [r7, #16]
      break;
 8003268:	e002      	b.n	8003270 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800326a:	4b06      	ldr	r3, [pc, #24]	@ (8003284 <HAL_RCC_GetSysClockFreq+0x98>)
 800326c:	613b      	str	r3, [r7, #16]
      break;
 800326e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003270:	693b      	ldr	r3, [r7, #16]
}
 8003272:	4618      	mov	r0, r3
 8003274:	371c      	adds	r7, #28
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	40021000 	.word	0x40021000
 8003284:	007a1200 	.word	0x007a1200
 8003288:	08005b78 	.word	0x08005b78
 800328c:	08005b88 	.word	0x08005b88
 8003290:	003d0900 	.word	0x003d0900

08003294 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003298:	4b03      	ldr	r3, [pc, #12]	@ (80032a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800329a:	681b      	ldr	r3, [r3, #0]
}
 800329c:	4618      	mov	r0, r3
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	20000000 	.word	0x20000000

080032ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80032b2:	f7ff ffef 	bl	8003294 <HAL_RCC_GetHCLKFreq>
 80032b6:	4601      	mov	r1, r0
 80032b8:	4b0b      	ldr	r3, [pc, #44]	@ (80032e8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80032c0:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80032c4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	fa92 f2a2 	rbit	r2, r2
 80032cc:	603a      	str	r2, [r7, #0]
  return result;
 80032ce:	683a      	ldr	r2, [r7, #0]
 80032d0:	fab2 f282 	clz	r2, r2
 80032d4:	b2d2      	uxtb	r2, r2
 80032d6:	40d3      	lsrs	r3, r2
 80032d8:	4a04      	ldr	r2, [pc, #16]	@ (80032ec <HAL_RCC_GetPCLK1Freq+0x40>)
 80032da:	5cd3      	ldrb	r3, [r2, r3]
 80032dc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80032e0:	4618      	mov	r0, r3
 80032e2:	3708      	adds	r7, #8
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	40021000 	.word	0x40021000
 80032ec:	08005b70 	.word	0x08005b70

080032f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80032f6:	f7ff ffcd 	bl	8003294 <HAL_RCC_GetHCLKFreq>
 80032fa:	4601      	mov	r1, r0
 80032fc:	4b0b      	ldr	r3, [pc, #44]	@ (800332c <HAL_RCC_GetPCLK2Freq+0x3c>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003304:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003308:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	fa92 f2a2 	rbit	r2, r2
 8003310:	603a      	str	r2, [r7, #0]
  return result;
 8003312:	683a      	ldr	r2, [r7, #0]
 8003314:	fab2 f282 	clz	r2, r2
 8003318:	b2d2      	uxtb	r2, r2
 800331a:	40d3      	lsrs	r3, r2
 800331c:	4a04      	ldr	r2, [pc, #16]	@ (8003330 <HAL_RCC_GetPCLK2Freq+0x40>)
 800331e:	5cd3      	ldrb	r3, [r2, r3]
 8003320:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003324:	4618      	mov	r0, r3
 8003326:	3708      	adds	r7, #8
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	40021000 	.word	0x40021000
 8003330:	08005b70 	.word	0x08005b70

08003334 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b092      	sub	sp, #72	@ 0x48
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800333c:	2300      	movs	r3, #0
 800333e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003340:	2300      	movs	r3, #0
 8003342:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003344:	2300      	movs	r3, #0
 8003346:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003352:	2b00      	cmp	r3, #0
 8003354:	f000 80cd 	beq.w	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003358:	4b86      	ldr	r3, [pc, #536]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800335a:	69db      	ldr	r3, [r3, #28]
 800335c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d10e      	bne.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003364:	4b83      	ldr	r3, [pc, #524]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003366:	69db      	ldr	r3, [r3, #28]
 8003368:	4a82      	ldr	r2, [pc, #520]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800336a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800336e:	61d3      	str	r3, [r2, #28]
 8003370:	4b80      	ldr	r3, [pc, #512]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003372:	69db      	ldr	r3, [r3, #28]
 8003374:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003378:	60bb      	str	r3, [r7, #8]
 800337a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800337c:	2301      	movs	r3, #1
 800337e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003382:	4b7d      	ldr	r3, [pc, #500]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800338a:	2b00      	cmp	r3, #0
 800338c:	d118      	bne.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800338e:	4b7a      	ldr	r3, [pc, #488]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a79      	ldr	r2, [pc, #484]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003394:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003398:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800339a:	f7fd fd6f 	bl	8000e7c <HAL_GetTick>
 800339e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a0:	e008      	b.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033a2:	f7fd fd6b 	bl	8000e7c <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	2b64      	cmp	r3, #100	@ 0x64
 80033ae:	d901      	bls.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e0db      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033b4:	4b70      	ldr	r3, [pc, #448]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d0f0      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80033c0:	4b6c      	ldr	r3, [pc, #432]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80033c2:	6a1b      	ldr	r3, [r3, #32]
 80033c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80033ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d07d      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x198>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033d8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80033da:	429a      	cmp	r2, r3
 80033dc:	d076      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033de:	4b65      	ldr	r3, [pc, #404]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80033e0:	6a1b      	ldr	r3, [r3, #32]
 80033e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80033e8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80033ec:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033f0:	fa93 f3a3 	rbit	r3, r3
 80033f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80033f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033f8:	fab3 f383 	clz	r3, r3
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	461a      	mov	r2, r3
 8003400:	4b5e      	ldr	r3, [pc, #376]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003402:	4413      	add	r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	461a      	mov	r2, r3
 8003408:	2301      	movs	r3, #1
 800340a:	6013      	str	r3, [r2, #0]
 800340c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003410:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003414:	fa93 f3a3 	rbit	r3, r3
 8003418:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800341a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800341c:	fab3 f383 	clz	r3, r3
 8003420:	b2db      	uxtb	r3, r3
 8003422:	461a      	mov	r2, r3
 8003424:	4b55      	ldr	r3, [pc, #340]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003426:	4413      	add	r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	461a      	mov	r2, r3
 800342c:	2300      	movs	r3, #0
 800342e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003430:	4a50      	ldr	r2, [pc, #320]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003432:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003434:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003436:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003438:	f003 0301 	and.w	r3, r3, #1
 800343c:	2b00      	cmp	r3, #0
 800343e:	d045      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003440:	f7fd fd1c 	bl	8000e7c <HAL_GetTick>
 8003444:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003446:	e00a      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003448:	f7fd fd18 	bl	8000e7c <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003456:	4293      	cmp	r3, r2
 8003458:	d901      	bls.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e086      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x238>
 800345e:	2302      	movs	r3, #2
 8003460:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003464:	fa93 f3a3 	rbit	r3, r3
 8003468:	627b      	str	r3, [r7, #36]	@ 0x24
 800346a:	2302      	movs	r3, #2
 800346c:	623b      	str	r3, [r7, #32]
 800346e:	6a3b      	ldr	r3, [r7, #32]
 8003470:	fa93 f3a3 	rbit	r3, r3
 8003474:	61fb      	str	r3, [r7, #28]
  return result;
 8003476:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003478:	fab3 f383 	clz	r3, r3
 800347c:	b2db      	uxtb	r3, r3
 800347e:	095b      	lsrs	r3, r3, #5
 8003480:	b2db      	uxtb	r3, r3
 8003482:	f043 0302 	orr.w	r3, r3, #2
 8003486:	b2db      	uxtb	r3, r3
 8003488:	2b02      	cmp	r3, #2
 800348a:	d102      	bne.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800348c:	4b39      	ldr	r3, [pc, #228]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800348e:	6a1b      	ldr	r3, [r3, #32]
 8003490:	e007      	b.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003492:	2302      	movs	r3, #2
 8003494:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	fa93 f3a3 	rbit	r3, r3
 800349c:	617b      	str	r3, [r7, #20]
 800349e:	4b35      	ldr	r3, [pc, #212]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80034a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a2:	2202      	movs	r2, #2
 80034a4:	613a      	str	r2, [r7, #16]
 80034a6:	693a      	ldr	r2, [r7, #16]
 80034a8:	fa92 f2a2 	rbit	r2, r2
 80034ac:	60fa      	str	r2, [r7, #12]
  return result;
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	fab2 f282 	clz	r2, r2
 80034b4:	b2d2      	uxtb	r2, r2
 80034b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80034ba:	b2d2      	uxtb	r2, r2
 80034bc:	f002 021f 	and.w	r2, r2, #31
 80034c0:	2101      	movs	r1, #1
 80034c2:	fa01 f202 	lsl.w	r2, r1, r2
 80034c6:	4013      	ands	r3, r2
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d0bd      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80034cc:	4b29      	ldr	r3, [pc, #164]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80034ce:	6a1b      	ldr	r3, [r3, #32]
 80034d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	4926      	ldr	r1, [pc, #152]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80034de:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d105      	bne.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034e6:	4b23      	ldr	r3, [pc, #140]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80034e8:	69db      	ldr	r3, [r3, #28]
 80034ea:	4a22      	ldr	r2, [pc, #136]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80034ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034f0:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d008      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034fe:	4b1d      	ldr	r3, [pc, #116]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003502:	f023 0203 	bic.w	r2, r3, #3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	491a      	ldr	r1, [pc, #104]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800350c:	4313      	orrs	r3, r2
 800350e:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0320 	and.w	r3, r3, #32
 8003518:	2b00      	cmp	r3, #0
 800351a:	d008      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800351c:	4b15      	ldr	r3, [pc, #84]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800351e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003520:	f023 0210 	bic.w	r2, r3, #16
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	4912      	ldr	r1, [pc, #72]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800352a:	4313      	orrs	r3, r2
 800352c:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003536:	2b00      	cmp	r3, #0
 8003538:	d008      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800353a:	4b0e      	ldr	r3, [pc, #56]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800353c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800353e:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	490b      	ldr	r1, [pc, #44]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003548:	4313      	orrs	r3, r2
 800354a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d008      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003558:	4b06      	ldr	r3, [pc, #24]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800355a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800355c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	695b      	ldr	r3, [r3, #20]
 8003564:	4903      	ldr	r1, [pc, #12]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003566:	4313      	orrs	r3, r2
 8003568:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800356a:	2300      	movs	r3, #0
}
 800356c:	4618      	mov	r0, r3
 800356e:	3748      	adds	r7, #72	@ 0x48
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	40021000 	.word	0x40021000
 8003578:	40007000 	.word	0x40007000
 800357c:	10908100 	.word	0x10908100

08003580 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e049      	b.n	8003626 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	d106      	bne.n	80035ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f7fd fa58 	bl	8000a5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2202      	movs	r2, #2
 80035b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	3304      	adds	r3, #4
 80035bc:	4619      	mov	r1, r3
 80035be:	4610      	mov	r0, r2
 80035c0:	f000 fb60 	bl	8003c84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3708      	adds	r7, #8
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}

0800362e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800362e:	b580      	push	{r7, lr}
 8003630:	b082      	sub	sp, #8
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d101      	bne.n	8003640 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e049      	b.n	80036d4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003646:	b2db      	uxtb	r3, r3
 8003648:	2b00      	cmp	r3, #0
 800364a:	d106      	bne.n	800365a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 f841 	bl	80036dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2202      	movs	r2, #2
 800365e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	3304      	adds	r3, #4
 800366a:	4619      	mov	r1, r3
 800366c:	4610      	mov	r0, r2
 800366e:	f000 fb09 	bl	8003c84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2201      	movs	r2, #1
 8003676:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2201      	movs	r2, #1
 800367e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2201      	movs	r2, #1
 800368e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2201      	movs	r2, #1
 8003696:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2201      	movs	r2, #1
 800369e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2201      	movs	r2, #1
 80036ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2201      	movs	r2, #1
 80036be:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2201      	movs	r2, #1
 80036c6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2201      	movs	r2, #1
 80036ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3708      	adds	r7, #8
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d109      	bne.n	8003714 <HAL_TIM_PWM_Start+0x24>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2b01      	cmp	r3, #1
 800370a:	bf14      	ite	ne
 800370c:	2301      	movne	r3, #1
 800370e:	2300      	moveq	r3, #0
 8003710:	b2db      	uxtb	r3, r3
 8003712:	e03c      	b.n	800378e <HAL_TIM_PWM_Start+0x9e>
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	2b04      	cmp	r3, #4
 8003718:	d109      	bne.n	800372e <HAL_TIM_PWM_Start+0x3e>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b01      	cmp	r3, #1
 8003724:	bf14      	ite	ne
 8003726:	2301      	movne	r3, #1
 8003728:	2300      	moveq	r3, #0
 800372a:	b2db      	uxtb	r3, r3
 800372c:	e02f      	b.n	800378e <HAL_TIM_PWM_Start+0x9e>
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	2b08      	cmp	r3, #8
 8003732:	d109      	bne.n	8003748 <HAL_TIM_PWM_Start+0x58>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800373a:	b2db      	uxtb	r3, r3
 800373c:	2b01      	cmp	r3, #1
 800373e:	bf14      	ite	ne
 8003740:	2301      	movne	r3, #1
 8003742:	2300      	moveq	r3, #0
 8003744:	b2db      	uxtb	r3, r3
 8003746:	e022      	b.n	800378e <HAL_TIM_PWM_Start+0x9e>
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	2b0c      	cmp	r3, #12
 800374c:	d109      	bne.n	8003762 <HAL_TIM_PWM_Start+0x72>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b01      	cmp	r3, #1
 8003758:	bf14      	ite	ne
 800375a:	2301      	movne	r3, #1
 800375c:	2300      	moveq	r3, #0
 800375e:	b2db      	uxtb	r3, r3
 8003760:	e015      	b.n	800378e <HAL_TIM_PWM_Start+0x9e>
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	2b10      	cmp	r3, #16
 8003766:	d109      	bne.n	800377c <HAL_TIM_PWM_Start+0x8c>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800376e:	b2db      	uxtb	r3, r3
 8003770:	2b01      	cmp	r3, #1
 8003772:	bf14      	ite	ne
 8003774:	2301      	movne	r3, #1
 8003776:	2300      	moveq	r3, #0
 8003778:	b2db      	uxtb	r3, r3
 800377a:	e008      	b.n	800378e <HAL_TIM_PWM_Start+0x9e>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003782:	b2db      	uxtb	r3, r3
 8003784:	2b01      	cmp	r3, #1
 8003786:	bf14      	ite	ne
 8003788:	2301      	movne	r3, #1
 800378a:	2300      	moveq	r3, #0
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e088      	b.n	80038a8 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d104      	bne.n	80037a6 <HAL_TIM_PWM_Start+0xb6>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2202      	movs	r2, #2
 80037a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037a4:	e023      	b.n	80037ee <HAL_TIM_PWM_Start+0xfe>
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	2b04      	cmp	r3, #4
 80037aa:	d104      	bne.n	80037b6 <HAL_TIM_PWM_Start+0xc6>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2202      	movs	r2, #2
 80037b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037b4:	e01b      	b.n	80037ee <HAL_TIM_PWM_Start+0xfe>
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	2b08      	cmp	r3, #8
 80037ba:	d104      	bne.n	80037c6 <HAL_TIM_PWM_Start+0xd6>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2202      	movs	r2, #2
 80037c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037c4:	e013      	b.n	80037ee <HAL_TIM_PWM_Start+0xfe>
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	2b0c      	cmp	r3, #12
 80037ca:	d104      	bne.n	80037d6 <HAL_TIM_PWM_Start+0xe6>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2202      	movs	r2, #2
 80037d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80037d4:	e00b      	b.n	80037ee <HAL_TIM_PWM_Start+0xfe>
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	2b10      	cmp	r3, #16
 80037da:	d104      	bne.n	80037e6 <HAL_TIM_PWM_Start+0xf6>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2202      	movs	r2, #2
 80037e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80037e4:	e003      	b.n	80037ee <HAL_TIM_PWM_Start+0xfe>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2202      	movs	r2, #2
 80037ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2201      	movs	r2, #1
 80037f4:	6839      	ldr	r1, [r7, #0]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f000 fe08 	bl	800440c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a2b      	ldr	r2, [pc, #172]	@ (80038b0 <HAL_TIM_PWM_Start+0x1c0>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d00e      	beq.n	8003824 <HAL_TIM_PWM_Start+0x134>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a2a      	ldr	r2, [pc, #168]	@ (80038b4 <HAL_TIM_PWM_Start+0x1c4>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d009      	beq.n	8003824 <HAL_TIM_PWM_Start+0x134>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a28      	ldr	r2, [pc, #160]	@ (80038b8 <HAL_TIM_PWM_Start+0x1c8>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d004      	beq.n	8003824 <HAL_TIM_PWM_Start+0x134>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a27      	ldr	r2, [pc, #156]	@ (80038bc <HAL_TIM_PWM_Start+0x1cc>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d101      	bne.n	8003828 <HAL_TIM_PWM_Start+0x138>
 8003824:	2301      	movs	r3, #1
 8003826:	e000      	b.n	800382a <HAL_TIM_PWM_Start+0x13a>
 8003828:	2300      	movs	r3, #0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d007      	beq.n	800383e <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800383c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a1b      	ldr	r2, [pc, #108]	@ (80038b0 <HAL_TIM_PWM_Start+0x1c0>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d00e      	beq.n	8003866 <HAL_TIM_PWM_Start+0x176>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003850:	d009      	beq.n	8003866 <HAL_TIM_PWM_Start+0x176>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a1a      	ldr	r2, [pc, #104]	@ (80038c0 <HAL_TIM_PWM_Start+0x1d0>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d004      	beq.n	8003866 <HAL_TIM_PWM_Start+0x176>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a14      	ldr	r2, [pc, #80]	@ (80038b4 <HAL_TIM_PWM_Start+0x1c4>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d115      	bne.n	8003892 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	689a      	ldr	r2, [r3, #8]
 800386c:	4b15      	ldr	r3, [pc, #84]	@ (80038c4 <HAL_TIM_PWM_Start+0x1d4>)
 800386e:	4013      	ands	r3, r2
 8003870:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2b06      	cmp	r3, #6
 8003876:	d015      	beq.n	80038a4 <HAL_TIM_PWM_Start+0x1b4>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800387e:	d011      	beq.n	80038a4 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f042 0201 	orr.w	r2, r2, #1
 800388e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003890:	e008      	b.n	80038a4 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f042 0201 	orr.w	r2, r2, #1
 80038a0:	601a      	str	r2, [r3, #0]
 80038a2:	e000      	b.n	80038a6 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038a4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3710      	adds	r7, #16
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	40012c00 	.word	0x40012c00
 80038b4:	40014000 	.word	0x40014000
 80038b8:	40014400 	.word	0x40014400
 80038bc:	40014800 	.word	0x40014800
 80038c0:	40000400 	.word	0x40000400
 80038c4:	00010007 	.word	0x00010007

080038c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b086      	sub	sp, #24
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038d4:	2300      	movs	r3, #0
 80038d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d101      	bne.n	80038e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80038e2:	2302      	movs	r3, #2
 80038e4:	e0ff      	b.n	8003ae6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2201      	movs	r2, #1
 80038ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2b14      	cmp	r3, #20
 80038f2:	f200 80f0 	bhi.w	8003ad6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80038f6:	a201      	add	r2, pc, #4	@ (adr r2, 80038fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80038f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038fc:	08003951 	.word	0x08003951
 8003900:	08003ad7 	.word	0x08003ad7
 8003904:	08003ad7 	.word	0x08003ad7
 8003908:	08003ad7 	.word	0x08003ad7
 800390c:	08003991 	.word	0x08003991
 8003910:	08003ad7 	.word	0x08003ad7
 8003914:	08003ad7 	.word	0x08003ad7
 8003918:	08003ad7 	.word	0x08003ad7
 800391c:	080039d3 	.word	0x080039d3
 8003920:	08003ad7 	.word	0x08003ad7
 8003924:	08003ad7 	.word	0x08003ad7
 8003928:	08003ad7 	.word	0x08003ad7
 800392c:	08003a13 	.word	0x08003a13
 8003930:	08003ad7 	.word	0x08003ad7
 8003934:	08003ad7 	.word	0x08003ad7
 8003938:	08003ad7 	.word	0x08003ad7
 800393c:	08003a55 	.word	0x08003a55
 8003940:	08003ad7 	.word	0x08003ad7
 8003944:	08003ad7 	.word	0x08003ad7
 8003948:	08003ad7 	.word	0x08003ad7
 800394c:	08003a95 	.word	0x08003a95
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68b9      	ldr	r1, [r7, #8]
 8003956:	4618      	mov	r0, r3
 8003958:	f000 fa18 	bl	8003d8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	699a      	ldr	r2, [r3, #24]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f042 0208 	orr.w	r2, r2, #8
 800396a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	699a      	ldr	r2, [r3, #24]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f022 0204 	bic.w	r2, r2, #4
 800397a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	6999      	ldr	r1, [r3, #24]
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	691a      	ldr	r2, [r3, #16]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	430a      	orrs	r2, r1
 800398c:	619a      	str	r2, [r3, #24]
      break;
 800398e:	e0a5      	b.n	8003adc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68b9      	ldr	r1, [r7, #8]
 8003996:	4618      	mov	r0, r3
 8003998:	f000 fa7e 	bl	8003e98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	699a      	ldr	r2, [r3, #24]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	699a      	ldr	r2, [r3, #24]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	6999      	ldr	r1, [r3, #24]
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	021a      	lsls	r2, r3, #8
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	430a      	orrs	r2, r1
 80039ce:	619a      	str	r2, [r3, #24]
      break;
 80039d0:	e084      	b.n	8003adc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	68b9      	ldr	r1, [r7, #8]
 80039d8:	4618      	mov	r0, r3
 80039da:	f000 fadd 	bl	8003f98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	69da      	ldr	r2, [r3, #28]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f042 0208 	orr.w	r2, r2, #8
 80039ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	69da      	ldr	r2, [r3, #28]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f022 0204 	bic.w	r2, r2, #4
 80039fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	69d9      	ldr	r1, [r3, #28]
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	691a      	ldr	r2, [r3, #16]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	61da      	str	r2, [r3, #28]
      break;
 8003a10:	e064      	b.n	8003adc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68b9      	ldr	r1, [r7, #8]
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f000 fb3b 	bl	8004094 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	69da      	ldr	r2, [r3, #28]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	69da      	ldr	r2, [r3, #28]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	69d9      	ldr	r1, [r3, #28]
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	021a      	lsls	r2, r3, #8
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	61da      	str	r2, [r3, #28]
      break;
 8003a52:	e043      	b.n	8003adc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68b9      	ldr	r1, [r7, #8]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f000 fb7e 	bl	800415c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f042 0208 	orr.w	r2, r2, #8
 8003a6e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f022 0204 	bic.w	r2, r2, #4
 8003a7e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	691a      	ldr	r2, [r3, #16]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003a92:	e023      	b.n	8003adc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68b9      	ldr	r1, [r7, #8]
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f000 fbbc 	bl	8004218 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003aae:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003abe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	021a      	lsls	r2, r3, #8
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003ad4:	e002      	b.n	8003adc <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	75fb      	strb	r3, [r7, #23]
      break;
 8003ada:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003ae4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3718      	adds	r7, #24
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop

08003af0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003afa:	2300      	movs	r3, #0
 8003afc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d101      	bne.n	8003b0c <HAL_TIM_ConfigClockSource+0x1c>
 8003b08:	2302      	movs	r3, #2
 8003b0a:	e0b6      	b.n	8003c7a <HAL_TIM_ConfigClockSource+0x18a>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2202      	movs	r2, #2
 8003b18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b2a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003b2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68ba      	ldr	r2, [r7, #8]
 8003b3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b48:	d03e      	beq.n	8003bc8 <HAL_TIM_ConfigClockSource+0xd8>
 8003b4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b4e:	f200 8087 	bhi.w	8003c60 <HAL_TIM_ConfigClockSource+0x170>
 8003b52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b56:	f000 8086 	beq.w	8003c66 <HAL_TIM_ConfigClockSource+0x176>
 8003b5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b5e:	d87f      	bhi.n	8003c60 <HAL_TIM_ConfigClockSource+0x170>
 8003b60:	2b70      	cmp	r3, #112	@ 0x70
 8003b62:	d01a      	beq.n	8003b9a <HAL_TIM_ConfigClockSource+0xaa>
 8003b64:	2b70      	cmp	r3, #112	@ 0x70
 8003b66:	d87b      	bhi.n	8003c60 <HAL_TIM_ConfigClockSource+0x170>
 8003b68:	2b60      	cmp	r3, #96	@ 0x60
 8003b6a:	d050      	beq.n	8003c0e <HAL_TIM_ConfigClockSource+0x11e>
 8003b6c:	2b60      	cmp	r3, #96	@ 0x60
 8003b6e:	d877      	bhi.n	8003c60 <HAL_TIM_ConfigClockSource+0x170>
 8003b70:	2b50      	cmp	r3, #80	@ 0x50
 8003b72:	d03c      	beq.n	8003bee <HAL_TIM_ConfigClockSource+0xfe>
 8003b74:	2b50      	cmp	r3, #80	@ 0x50
 8003b76:	d873      	bhi.n	8003c60 <HAL_TIM_ConfigClockSource+0x170>
 8003b78:	2b40      	cmp	r3, #64	@ 0x40
 8003b7a:	d058      	beq.n	8003c2e <HAL_TIM_ConfigClockSource+0x13e>
 8003b7c:	2b40      	cmp	r3, #64	@ 0x40
 8003b7e:	d86f      	bhi.n	8003c60 <HAL_TIM_ConfigClockSource+0x170>
 8003b80:	2b30      	cmp	r3, #48	@ 0x30
 8003b82:	d064      	beq.n	8003c4e <HAL_TIM_ConfigClockSource+0x15e>
 8003b84:	2b30      	cmp	r3, #48	@ 0x30
 8003b86:	d86b      	bhi.n	8003c60 <HAL_TIM_ConfigClockSource+0x170>
 8003b88:	2b20      	cmp	r3, #32
 8003b8a:	d060      	beq.n	8003c4e <HAL_TIM_ConfigClockSource+0x15e>
 8003b8c:	2b20      	cmp	r3, #32
 8003b8e:	d867      	bhi.n	8003c60 <HAL_TIM_ConfigClockSource+0x170>
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d05c      	beq.n	8003c4e <HAL_TIM_ConfigClockSource+0x15e>
 8003b94:	2b10      	cmp	r3, #16
 8003b96:	d05a      	beq.n	8003c4e <HAL_TIM_ConfigClockSource+0x15e>
 8003b98:	e062      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003baa:	f000 fc0f 	bl	80043cc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003bbc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68ba      	ldr	r2, [r7, #8]
 8003bc4:	609a      	str	r2, [r3, #8]
      break;
 8003bc6:	e04f      	b.n	8003c68 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003bd8:	f000 fbf8 	bl	80043cc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	689a      	ldr	r2, [r3, #8]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003bea:	609a      	str	r2, [r3, #8]
      break;
 8003bec:	e03c      	b.n	8003c68 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	f000 fb6c 	bl	80042d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2150      	movs	r1, #80	@ 0x50
 8003c06:	4618      	mov	r0, r3
 8003c08:	f000 fbc5 	bl	8004396 <TIM_ITRx_SetConfig>
      break;
 8003c0c:	e02c      	b.n	8003c68 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	f000 fb8b 	bl	8004336 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2160      	movs	r1, #96	@ 0x60
 8003c26:	4618      	mov	r0, r3
 8003c28:	f000 fbb5 	bl	8004396 <TIM_ITRx_SetConfig>
      break;
 8003c2c:	e01c      	b.n	8003c68 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	f000 fb4c 	bl	80042d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2140      	movs	r1, #64	@ 0x40
 8003c46:	4618      	mov	r0, r3
 8003c48:	f000 fba5 	bl	8004396 <TIM_ITRx_SetConfig>
      break;
 8003c4c:	e00c      	b.n	8003c68 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4619      	mov	r1, r3
 8003c58:	4610      	mov	r0, r2
 8003c5a:	f000 fb9c 	bl	8004396 <TIM_ITRx_SetConfig>
      break;
 8003c5e:	e003      	b.n	8003c68 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	73fb      	strb	r3, [r7, #15]
      break;
 8003c64:	e000      	b.n	8003c68 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003c66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3710      	adds	r7, #16
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
	...

08003c84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a38      	ldr	r2, [pc, #224]	@ (8003d78 <TIM_Base_SetConfig+0xf4>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d007      	beq.n	8003cac <TIM_Base_SetConfig+0x28>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ca2:	d003      	beq.n	8003cac <TIM_Base_SetConfig+0x28>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a35      	ldr	r2, [pc, #212]	@ (8003d7c <TIM_Base_SetConfig+0xf8>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d108      	bne.n	8003cbe <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a2d      	ldr	r2, [pc, #180]	@ (8003d78 <TIM_Base_SetConfig+0xf4>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d013      	beq.n	8003cee <TIM_Base_SetConfig+0x6a>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ccc:	d00f      	beq.n	8003cee <TIM_Base_SetConfig+0x6a>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a2a      	ldr	r2, [pc, #168]	@ (8003d7c <TIM_Base_SetConfig+0xf8>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d00b      	beq.n	8003cee <TIM_Base_SetConfig+0x6a>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a29      	ldr	r2, [pc, #164]	@ (8003d80 <TIM_Base_SetConfig+0xfc>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d007      	beq.n	8003cee <TIM_Base_SetConfig+0x6a>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a28      	ldr	r2, [pc, #160]	@ (8003d84 <TIM_Base_SetConfig+0x100>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d003      	beq.n	8003cee <TIM_Base_SetConfig+0x6a>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a27      	ldr	r2, [pc, #156]	@ (8003d88 <TIM_Base_SetConfig+0x104>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d108      	bne.n	8003d00 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	68fa      	ldr	r2, [r7, #12]
 8003d12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	689a      	ldr	r2, [r3, #8]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a14      	ldr	r2, [pc, #80]	@ (8003d78 <TIM_Base_SetConfig+0xf4>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d00b      	beq.n	8003d44 <TIM_Base_SetConfig+0xc0>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a14      	ldr	r2, [pc, #80]	@ (8003d80 <TIM_Base_SetConfig+0xfc>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d007      	beq.n	8003d44 <TIM_Base_SetConfig+0xc0>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a13      	ldr	r2, [pc, #76]	@ (8003d84 <TIM_Base_SetConfig+0x100>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d003      	beq.n	8003d44 <TIM_Base_SetConfig+0xc0>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a12      	ldr	r2, [pc, #72]	@ (8003d88 <TIM_Base_SetConfig+0x104>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d103      	bne.n	8003d4c <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	691a      	ldr	r2, [r3, #16]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d105      	bne.n	8003d6a <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	f023 0201 	bic.w	r2, r3, #1
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	611a      	str	r2, [r3, #16]
  }
}
 8003d6a:	bf00      	nop
 8003d6c:	3714      	adds	r7, #20
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop
 8003d78:	40012c00 	.word	0x40012c00
 8003d7c:	40000400 	.word	0x40000400
 8003d80:	40014000 	.word	0x40014000
 8003d84:	40014400 	.word	0x40014400
 8003d88:	40014800 	.word	0x40014800

08003d8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b087      	sub	sp, #28
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a1b      	ldr	r3, [r3, #32]
 8003d9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a1b      	ldr	r3, [r3, #32]
 8003da0:	f023 0201 	bic.w	r2, r3, #1
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	699b      	ldr	r3, [r3, #24]
 8003db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f023 0303 	bic.w	r3, r3, #3
 8003dc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68fa      	ldr	r2, [r7, #12]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	f023 0302 	bic.w	r3, r3, #2
 8003dd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	697a      	ldr	r2, [r7, #20]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a28      	ldr	r2, [pc, #160]	@ (8003e88 <TIM_OC1_SetConfig+0xfc>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d00b      	beq.n	8003e04 <TIM_OC1_SetConfig+0x78>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a27      	ldr	r2, [pc, #156]	@ (8003e8c <TIM_OC1_SetConfig+0x100>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d007      	beq.n	8003e04 <TIM_OC1_SetConfig+0x78>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a26      	ldr	r2, [pc, #152]	@ (8003e90 <TIM_OC1_SetConfig+0x104>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d003      	beq.n	8003e04 <TIM_OC1_SetConfig+0x78>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a25      	ldr	r2, [pc, #148]	@ (8003e94 <TIM_OC1_SetConfig+0x108>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d10c      	bne.n	8003e1e <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	f023 0308 	bic.w	r3, r3, #8
 8003e0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	697a      	ldr	r2, [r7, #20]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	f023 0304 	bic.w	r3, r3, #4
 8003e1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a19      	ldr	r2, [pc, #100]	@ (8003e88 <TIM_OC1_SetConfig+0xfc>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d00b      	beq.n	8003e3e <TIM_OC1_SetConfig+0xb2>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a18      	ldr	r2, [pc, #96]	@ (8003e8c <TIM_OC1_SetConfig+0x100>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d007      	beq.n	8003e3e <TIM_OC1_SetConfig+0xb2>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a17      	ldr	r2, [pc, #92]	@ (8003e90 <TIM_OC1_SetConfig+0x104>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d003      	beq.n	8003e3e <TIM_OC1_SetConfig+0xb2>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a16      	ldr	r2, [pc, #88]	@ (8003e94 <TIM_OC1_SetConfig+0x108>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d111      	bne.n	8003e62 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003e4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	695b      	ldr	r3, [r3, #20]
 8003e52:	693a      	ldr	r2, [r7, #16]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	699b      	ldr	r3, [r3, #24]
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	685a      	ldr	r2, [r3, #4]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	697a      	ldr	r2, [r7, #20]
 8003e7a:	621a      	str	r2, [r3, #32]
}
 8003e7c:	bf00      	nop
 8003e7e:	371c      	adds	r7, #28
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr
 8003e88:	40012c00 	.word	0x40012c00
 8003e8c:	40014000 	.word	0x40014000
 8003e90:	40014400 	.word	0x40014400
 8003e94:	40014800 	.word	0x40014800

08003e98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b087      	sub	sp, #28
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a1b      	ldr	r3, [r3, #32]
 8003eac:	f023 0210 	bic.w	r2, r3, #16
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ec6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003eca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ed2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	021b      	lsls	r3, r3, #8
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	f023 0320 	bic.w	r3, r3, #32
 8003ee6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	011b      	lsls	r3, r3, #4
 8003eee:	697a      	ldr	r2, [r7, #20]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a24      	ldr	r2, [pc, #144]	@ (8003f88 <TIM_OC2_SetConfig+0xf0>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d10d      	bne.n	8003f18 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	011b      	lsls	r3, r3, #4
 8003f0a:	697a      	ldr	r2, [r7, #20]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f16:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a1b      	ldr	r2, [pc, #108]	@ (8003f88 <TIM_OC2_SetConfig+0xf0>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d00b      	beq.n	8003f38 <TIM_OC2_SetConfig+0xa0>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a1a      	ldr	r2, [pc, #104]	@ (8003f8c <TIM_OC2_SetConfig+0xf4>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d007      	beq.n	8003f38 <TIM_OC2_SetConfig+0xa0>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a19      	ldr	r2, [pc, #100]	@ (8003f90 <TIM_OC2_SetConfig+0xf8>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d003      	beq.n	8003f38 <TIM_OC2_SetConfig+0xa0>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a18      	ldr	r2, [pc, #96]	@ (8003f94 <TIM_OC2_SetConfig+0xfc>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d113      	bne.n	8003f60 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003f3e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003f46:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	695b      	ldr	r3, [r3, #20]
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	693a      	ldr	r2, [r7, #16]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	693a      	ldr	r2, [r7, #16]
 8003f64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	685a      	ldr	r2, [r3, #4]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	697a      	ldr	r2, [r7, #20]
 8003f78:	621a      	str	r2, [r3, #32]
}
 8003f7a:	bf00      	nop
 8003f7c:	371c      	adds	r7, #28
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	40012c00 	.word	0x40012c00
 8003f8c:	40014000 	.word	0x40014000
 8003f90:	40014400 	.word	0x40014400
 8003f94:	40014800 	.word	0x40014800

08003f98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b087      	sub	sp, #28
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a1b      	ldr	r3, [r3, #32]
 8003fac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	69db      	ldr	r3, [r3, #28]
 8003fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f023 0303 	bic.w	r3, r3, #3
 8003fd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003fe4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	021b      	lsls	r3, r3, #8
 8003fec:	697a      	ldr	r2, [r7, #20]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a23      	ldr	r2, [pc, #140]	@ (8004084 <TIM_OC3_SetConfig+0xec>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d10d      	bne.n	8004016 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004000:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	021b      	lsls	r3, r3, #8
 8004008:	697a      	ldr	r2, [r7, #20]
 800400a:	4313      	orrs	r3, r2
 800400c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004014:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a1a      	ldr	r2, [pc, #104]	@ (8004084 <TIM_OC3_SetConfig+0xec>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d00b      	beq.n	8004036 <TIM_OC3_SetConfig+0x9e>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a19      	ldr	r2, [pc, #100]	@ (8004088 <TIM_OC3_SetConfig+0xf0>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d007      	beq.n	8004036 <TIM_OC3_SetConfig+0x9e>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a18      	ldr	r2, [pc, #96]	@ (800408c <TIM_OC3_SetConfig+0xf4>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d003      	beq.n	8004036 <TIM_OC3_SetConfig+0x9e>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a17      	ldr	r2, [pc, #92]	@ (8004090 <TIM_OC3_SetConfig+0xf8>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d113      	bne.n	800405e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800403c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004044:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	011b      	lsls	r3, r3, #4
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	4313      	orrs	r3, r2
 8004050:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	011b      	lsls	r3, r3, #4
 8004058:	693a      	ldr	r2, [r7, #16]
 800405a:	4313      	orrs	r3, r2
 800405c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	685a      	ldr	r2, [r3, #4]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	697a      	ldr	r2, [r7, #20]
 8004076:	621a      	str	r2, [r3, #32]
}
 8004078:	bf00      	nop
 800407a:	371c      	adds	r7, #28
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr
 8004084:	40012c00 	.word	0x40012c00
 8004088:	40014000 	.word	0x40014000
 800408c:	40014400 	.word	0x40014400
 8004090:	40014800 	.word	0x40014800

08004094 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004094:	b480      	push	{r7}
 8004096:	b087      	sub	sp, #28
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a1b      	ldr	r3, [r3, #32]
 80040a8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	69db      	ldr	r3, [r3, #28]
 80040ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	021b      	lsls	r3, r3, #8
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	4313      	orrs	r3, r2
 80040da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80040e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	031b      	lsls	r3, r3, #12
 80040ea:	693a      	ldr	r2, [r7, #16]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a16      	ldr	r2, [pc, #88]	@ (800414c <TIM_OC4_SetConfig+0xb8>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d00b      	beq.n	8004110 <TIM_OC4_SetConfig+0x7c>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a15      	ldr	r2, [pc, #84]	@ (8004150 <TIM_OC4_SetConfig+0xbc>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d007      	beq.n	8004110 <TIM_OC4_SetConfig+0x7c>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a14      	ldr	r2, [pc, #80]	@ (8004154 <TIM_OC4_SetConfig+0xc0>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d003      	beq.n	8004110 <TIM_OC4_SetConfig+0x7c>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a13      	ldr	r2, [pc, #76]	@ (8004158 <TIM_OC4_SetConfig+0xc4>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d109      	bne.n	8004124 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004116:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	695b      	ldr	r3, [r3, #20]
 800411c:	019b      	lsls	r3, r3, #6
 800411e:	697a      	ldr	r2, [r7, #20]
 8004120:	4313      	orrs	r3, r2
 8004122:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	685a      	ldr	r2, [r3, #4]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	621a      	str	r2, [r3, #32]
}
 800413e:	bf00      	nop
 8004140:	371c      	adds	r7, #28
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	40012c00 	.word	0x40012c00
 8004150:	40014000 	.word	0x40014000
 8004154:	40014400 	.word	0x40014400
 8004158:	40014800 	.word	0x40014800

0800415c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800415c:	b480      	push	{r7}
 800415e:	b087      	sub	sp, #28
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a1b      	ldr	r3, [r3, #32]
 800416a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a1b      	ldr	r3, [r3, #32]
 8004170:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800418a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800418e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	4313      	orrs	r3, r2
 8004198:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80041a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	041b      	lsls	r3, r3, #16
 80041a8:	693a      	ldr	r2, [r7, #16]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a15      	ldr	r2, [pc, #84]	@ (8004208 <TIM_OC5_SetConfig+0xac>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d00b      	beq.n	80041ce <TIM_OC5_SetConfig+0x72>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a14      	ldr	r2, [pc, #80]	@ (800420c <TIM_OC5_SetConfig+0xb0>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d007      	beq.n	80041ce <TIM_OC5_SetConfig+0x72>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a13      	ldr	r2, [pc, #76]	@ (8004210 <TIM_OC5_SetConfig+0xb4>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d003      	beq.n	80041ce <TIM_OC5_SetConfig+0x72>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a12      	ldr	r2, [pc, #72]	@ (8004214 <TIM_OC5_SetConfig+0xb8>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d109      	bne.n	80041e2 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	021b      	lsls	r3, r3, #8
 80041dc:	697a      	ldr	r2, [r7, #20]
 80041de:	4313      	orrs	r3, r2
 80041e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	697a      	ldr	r2, [r7, #20]
 80041e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	685a      	ldr	r2, [r3, #4]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	621a      	str	r2, [r3, #32]
}
 80041fc:	bf00      	nop
 80041fe:	371c      	adds	r7, #28
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr
 8004208:	40012c00 	.word	0x40012c00
 800420c:	40014000 	.word	0x40014000
 8004210:	40014400 	.word	0x40014400
 8004214:	40014800 	.word	0x40014800

08004218 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004218:	b480      	push	{r7}
 800421a:	b087      	sub	sp, #28
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a1b      	ldr	r3, [r3, #32]
 8004226:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a1b      	ldr	r3, [r3, #32]
 800422c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800423e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004246:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800424a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	021b      	lsls	r3, r3, #8
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	4313      	orrs	r3, r2
 8004256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800425e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	051b      	lsls	r3, r3, #20
 8004266:	693a      	ldr	r2, [r7, #16]
 8004268:	4313      	orrs	r3, r2
 800426a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a16      	ldr	r2, [pc, #88]	@ (80042c8 <TIM_OC6_SetConfig+0xb0>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d00b      	beq.n	800428c <TIM_OC6_SetConfig+0x74>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a15      	ldr	r2, [pc, #84]	@ (80042cc <TIM_OC6_SetConfig+0xb4>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d007      	beq.n	800428c <TIM_OC6_SetConfig+0x74>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a14      	ldr	r2, [pc, #80]	@ (80042d0 <TIM_OC6_SetConfig+0xb8>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d003      	beq.n	800428c <TIM_OC6_SetConfig+0x74>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	4a13      	ldr	r2, [pc, #76]	@ (80042d4 <TIM_OC6_SetConfig+0xbc>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d109      	bne.n	80042a0 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004292:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	695b      	ldr	r3, [r3, #20]
 8004298:	029b      	lsls	r3, r3, #10
 800429a:	697a      	ldr	r2, [r7, #20]
 800429c:	4313      	orrs	r3, r2
 800429e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	697a      	ldr	r2, [r7, #20]
 80042a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	685a      	ldr	r2, [r3, #4]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	693a      	ldr	r2, [r7, #16]
 80042b8:	621a      	str	r2, [r3, #32]
}
 80042ba:	bf00      	nop
 80042bc:	371c      	adds	r7, #28
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	40012c00 	.word	0x40012c00
 80042cc:	40014000 	.word	0x40014000
 80042d0:	40014400 	.word	0x40014400
 80042d4:	40014800 	.word	0x40014800

080042d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042d8:	b480      	push	{r7}
 80042da:	b087      	sub	sp, #28
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6a1b      	ldr	r3, [r3, #32]
 80042e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6a1b      	ldr	r3, [r3, #32]
 80042ee:	f023 0201 	bic.w	r2, r3, #1
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	699b      	ldr	r3, [r3, #24]
 80042fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004302:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	011b      	lsls	r3, r3, #4
 8004308:	693a      	ldr	r2, [r7, #16]
 800430a:	4313      	orrs	r3, r2
 800430c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	f023 030a 	bic.w	r3, r3, #10
 8004314:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004316:	697a      	ldr	r2, [r7, #20]
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	4313      	orrs	r3, r2
 800431c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	693a      	ldr	r2, [r7, #16]
 8004322:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	697a      	ldr	r2, [r7, #20]
 8004328:	621a      	str	r2, [r3, #32]
}
 800432a:	bf00      	nop
 800432c:	371c      	adds	r7, #28
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr

08004336 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004336:	b480      	push	{r7}
 8004338:	b087      	sub	sp, #28
 800433a:	af00      	add	r7, sp, #0
 800433c:	60f8      	str	r0, [r7, #12]
 800433e:	60b9      	str	r1, [r7, #8]
 8004340:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	f023 0210 	bic.w	r2, r3, #16
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004360:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	031b      	lsls	r3, r3, #12
 8004366:	693a      	ldr	r2, [r7, #16]
 8004368:	4313      	orrs	r3, r2
 800436a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004372:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	011b      	lsls	r3, r3, #4
 8004378:	697a      	ldr	r2, [r7, #20]
 800437a:	4313      	orrs	r3, r2
 800437c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	693a      	ldr	r2, [r7, #16]
 8004382:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	697a      	ldr	r2, [r7, #20]
 8004388:	621a      	str	r2, [r3, #32]
}
 800438a:	bf00      	nop
 800438c:	371c      	adds	r7, #28
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr

08004396 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004396:	b480      	push	{r7}
 8004398:	b085      	sub	sp, #20
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
 800439e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043ae:	683a      	ldr	r2, [r7, #0]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	f043 0307 	orr.w	r3, r3, #7
 80043b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	609a      	str	r2, [r3, #8]
}
 80043c0:	bf00      	nop
 80043c2:	3714      	adds	r7, #20
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b087      	sub	sp, #28
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	607a      	str	r2, [r7, #4]
 80043d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80043e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	021a      	lsls	r2, r3, #8
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	431a      	orrs	r2, r3
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	697a      	ldr	r2, [r7, #20]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	697a      	ldr	r2, [r7, #20]
 80043fe:	609a      	str	r2, [r3, #8]
}
 8004400:	bf00      	nop
 8004402:	371c      	adds	r7, #28
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800440c:	b480      	push	{r7}
 800440e:	b087      	sub	sp, #28
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	f003 031f 	and.w	r3, r3, #31
 800441e:	2201      	movs	r2, #1
 8004420:	fa02 f303 	lsl.w	r3, r2, r3
 8004424:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6a1a      	ldr	r2, [r3, #32]
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	43db      	mvns	r3, r3
 800442e:	401a      	ands	r2, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6a1a      	ldr	r2, [r3, #32]
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	f003 031f 	and.w	r3, r3, #31
 800443e:	6879      	ldr	r1, [r7, #4]
 8004440:	fa01 f303 	lsl.w	r3, r1, r3
 8004444:	431a      	orrs	r2, r3
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	621a      	str	r2, [r3, #32]
}
 800444a:	bf00      	nop
 800444c:	371c      	adds	r7, #28
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
	...

08004458 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004468:	2b01      	cmp	r3, #1
 800446a:	d101      	bne.n	8004470 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800446c:	2302      	movs	r3, #2
 800446e:	e054      	b.n	800451a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2202      	movs	r2, #2
 800447c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a24      	ldr	r2, [pc, #144]	@ (8004528 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d108      	bne.n	80044ac <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80044a0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	68fa      	ldr	r2, [r7, #12]
 80044c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a17      	ldr	r2, [pc, #92]	@ (8004528 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d00e      	beq.n	80044ee <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044d8:	d009      	beq.n	80044ee <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a13      	ldr	r2, [pc, #76]	@ (800452c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d004      	beq.n	80044ee <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a11      	ldr	r2, [pc, #68]	@ (8004530 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d10c      	bne.n	8004508 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	68ba      	ldr	r2, [r7, #8]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68ba      	ldr	r2, [r7, #8]
 8004506:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3714      	adds	r7, #20
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	40012c00 	.word	0x40012c00
 800452c:	40000400 	.word	0x40000400
 8004530:	40014000 	.word	0x40014000

08004534 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004534:	b480      	push	{r7}
 8004536:	b085      	sub	sp, #20
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800453e:	2300      	movs	r3, #0
 8004540:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004548:	2b01      	cmp	r3, #1
 800454a:	d101      	bne.n	8004550 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800454c:	2302      	movs	r3, #2
 800454e:	e060      	b.n	8004612 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	4313      	orrs	r3, r2
 8004564:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	4313      	orrs	r3, r2
 8004572:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	4313      	orrs	r3, r2
 8004580:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4313      	orrs	r3, r2
 800458e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	4313      	orrs	r3, r2
 800459c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	695b      	ldr	r3, [r3, #20]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045b6:	4313      	orrs	r3, r2
 80045b8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	699b      	ldr	r3, [r3, #24]
 80045c4:	041b      	lsls	r3, r3, #16
 80045c6:	4313      	orrs	r3, r2
 80045c8:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a14      	ldr	r2, [pc, #80]	@ (8004620 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d115      	bne.n	8004600 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045de:	051b      	lsls	r3, r3, #20
 80045e0:	4313      	orrs	r3, r2
 80045e2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	69db      	ldr	r3, [r3, #28]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	6a1b      	ldr	r3, [r3, #32]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	68fa      	ldr	r2, [r7, #12]
 8004606:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3714      	adds	r7, #20
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	40012c00 	.word	0x40012c00

08004624 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d101      	bne.n	8004636 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e040      	b.n	80046b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800463a:	2b00      	cmp	r3, #0
 800463c:	d106      	bne.n	800464c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f7fc faba 	bl	8000bc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2224      	movs	r2, #36	@ 0x24
 8004650:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f022 0201 	bic.w	r2, r2, #1
 8004660:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004666:	2b00      	cmp	r3, #0
 8004668:	d002      	beq.n	8004670 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 fd3c 	bl	80050e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f000 fc03 	bl	8004e7c <UART_SetConfig>
 8004676:	4603      	mov	r3, r0
 8004678:	2b01      	cmp	r3, #1
 800467a:	d101      	bne.n	8004680 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e01b      	b.n	80046b8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	685a      	ldr	r2, [r3, #4]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800468e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	689a      	ldr	r2, [r3, #8]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800469e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f042 0201 	orr.w	r2, r2, #1
 80046ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f000 fdbb 	bl	800522c <UART_CheckIdleState>
 80046b6:	4603      	mov	r3, r0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3708      	adds	r7, #8
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b08a      	sub	sp, #40	@ 0x28
 80046c4:	af02      	add	r7, sp, #8
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	603b      	str	r3, [r7, #0]
 80046cc:	4613      	mov	r3, r2
 80046ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046d4:	2b20      	cmp	r3, #32
 80046d6:	d177      	bne.n	80047c8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d002      	beq.n	80046e4 <HAL_UART_Transmit+0x24>
 80046de:	88fb      	ldrh	r3, [r7, #6]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d101      	bne.n	80046e8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e070      	b.n	80047ca <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2221      	movs	r2, #33	@ 0x21
 80046f4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046f6:	f7fc fbc1 	bl	8000e7c <HAL_GetTick>
 80046fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	88fa      	ldrh	r2, [r7, #6]
 8004700:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	88fa      	ldrh	r2, [r7, #6]
 8004708:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004714:	d108      	bne.n	8004728 <HAL_UART_Transmit+0x68>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d104      	bne.n	8004728 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800471e:	2300      	movs	r3, #0
 8004720:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	61bb      	str	r3, [r7, #24]
 8004726:	e003      	b.n	8004730 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800472c:	2300      	movs	r3, #0
 800472e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004730:	e02f      	b.n	8004792 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	9300      	str	r3, [sp, #0]
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	2200      	movs	r2, #0
 800473a:	2180      	movs	r1, #128	@ 0x80
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f000 fe1d 	bl	800537c <UART_WaitOnFlagUntilTimeout>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d004      	beq.n	8004752 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2220      	movs	r2, #32
 800474c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e03b      	b.n	80047ca <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d10b      	bne.n	8004770 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	881a      	ldrh	r2, [r3, #0]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004764:	b292      	uxth	r2, r2
 8004766:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	3302      	adds	r3, #2
 800476c:	61bb      	str	r3, [r7, #24]
 800476e:	e007      	b.n	8004780 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	781a      	ldrb	r2, [r3, #0]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	3301      	adds	r3, #1
 800477e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004786:	b29b      	uxth	r3, r3
 8004788:	3b01      	subs	r3, #1
 800478a:	b29a      	uxth	r2, r3
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004798:	b29b      	uxth	r3, r3
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1c9      	bne.n	8004732 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	9300      	str	r3, [sp, #0]
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	2200      	movs	r2, #0
 80047a6:	2140      	movs	r1, #64	@ 0x40
 80047a8:	68f8      	ldr	r0, [r7, #12]
 80047aa:	f000 fde7 	bl	800537c <UART_WaitOnFlagUntilTimeout>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d004      	beq.n	80047be <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2220      	movs	r2, #32
 80047b8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e005      	b.n	80047ca <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2220      	movs	r2, #32
 80047c2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80047c4:	2300      	movs	r3, #0
 80047c6:	e000      	b.n	80047ca <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80047c8:	2302      	movs	r3, #2
  }
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3720      	adds	r7, #32
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}

080047d2 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047d2:	b580      	push	{r7, lr}
 80047d4:	b08a      	sub	sp, #40	@ 0x28
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	60f8      	str	r0, [r7, #12]
 80047da:	60b9      	str	r1, [r7, #8]
 80047dc:	4613      	mov	r3, r2
 80047de:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047e6:	2b20      	cmp	r3, #32
 80047e8:	d132      	bne.n	8004850 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d002      	beq.n	80047f6 <HAL_UART_Receive_IT+0x24>
 80047f0:	88fb      	ldrh	r3, [r7, #6]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d101      	bne.n	80047fa <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e02b      	b.n	8004852 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2200      	movs	r2, #0
 80047fe:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800480a:	2b00      	cmp	r3, #0
 800480c:	d018      	beq.n	8004840 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	e853 3f00 	ldrex	r3, [r3]
 800481a:	613b      	str	r3, [r7, #16]
   return(result);
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004822:	627b      	str	r3, [r7, #36]	@ 0x24
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	461a      	mov	r2, r3
 800482a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800482c:	623b      	str	r3, [r7, #32]
 800482e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004830:	69f9      	ldr	r1, [r7, #28]
 8004832:	6a3a      	ldr	r2, [r7, #32]
 8004834:	e841 2300 	strex	r3, r2, [r1]
 8004838:	61bb      	str	r3, [r7, #24]
   return(result);
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d1e6      	bne.n	800480e <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004840:	88fb      	ldrh	r3, [r7, #6]
 8004842:	461a      	mov	r2, r3
 8004844:	68b9      	ldr	r1, [r7, #8]
 8004846:	68f8      	ldr	r0, [r7, #12]
 8004848:	f000 fe06 	bl	8005458 <UART_Start_Receive_IT>
 800484c:	4603      	mov	r3, r0
 800484e:	e000      	b.n	8004852 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8004850:	2302      	movs	r3, #2
  }
}
 8004852:	4618      	mov	r0, r3
 8004854:	3728      	adds	r7, #40	@ 0x28
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
	...

0800485c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b0ba      	sub	sp, #232	@ 0xe8
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	69db      	ldr	r3, [r3, #28]
 800486a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004882:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004886:	f640 030f 	movw	r3, #2063	@ 0x80f
 800488a:	4013      	ands	r3, r2
 800488c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004890:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004894:	2b00      	cmp	r3, #0
 8004896:	d115      	bne.n	80048c4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004898:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800489c:	f003 0320 	and.w	r3, r3, #32
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00f      	beq.n	80048c4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80048a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048a8:	f003 0320 	and.w	r3, r3, #32
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d009      	beq.n	80048c4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	f000 82ab 	beq.w	8004e10 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	4798      	blx	r3
      }
      return;
 80048c2:	e2a5      	b.n	8004e10 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80048c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f000 8117 	beq.w	8004afc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80048ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048d2:	f003 0301 	and.w	r3, r3, #1
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d106      	bne.n	80048e8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80048da:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80048de:	4b85      	ldr	r3, [pc, #532]	@ (8004af4 <HAL_UART_IRQHandler+0x298>)
 80048e0:	4013      	ands	r3, r2
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	f000 810a 	beq.w	8004afc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80048e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048ec:	f003 0301 	and.w	r3, r3, #1
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d011      	beq.n	8004918 <HAL_UART_IRQHandler+0xbc>
 80048f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d00b      	beq.n	8004918 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2201      	movs	r2, #1
 8004906:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800490e:	f043 0201 	orr.w	r2, r3, #1
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800491c:	f003 0302 	and.w	r3, r3, #2
 8004920:	2b00      	cmp	r3, #0
 8004922:	d011      	beq.n	8004948 <HAL_UART_IRQHandler+0xec>
 8004924:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004928:	f003 0301 	and.w	r3, r3, #1
 800492c:	2b00      	cmp	r3, #0
 800492e:	d00b      	beq.n	8004948 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2202      	movs	r2, #2
 8004936:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800493e:	f043 0204 	orr.w	r2, r3, #4
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004948:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800494c:	f003 0304 	and.w	r3, r3, #4
 8004950:	2b00      	cmp	r3, #0
 8004952:	d011      	beq.n	8004978 <HAL_UART_IRQHandler+0x11c>
 8004954:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004958:	f003 0301 	and.w	r3, r3, #1
 800495c:	2b00      	cmp	r3, #0
 800495e:	d00b      	beq.n	8004978 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2204      	movs	r2, #4
 8004966:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800496e:	f043 0202 	orr.w	r2, r3, #2
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004978:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800497c:	f003 0308 	and.w	r3, r3, #8
 8004980:	2b00      	cmp	r3, #0
 8004982:	d017      	beq.n	80049b4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004984:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004988:	f003 0320 	and.w	r3, r3, #32
 800498c:	2b00      	cmp	r3, #0
 800498e:	d105      	bne.n	800499c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004990:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004994:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004998:	2b00      	cmp	r3, #0
 800499a:	d00b      	beq.n	80049b4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2208      	movs	r2, #8
 80049a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049aa:	f043 0208 	orr.w	r2, r3, #8
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80049b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d012      	beq.n	80049e6 <HAL_UART_IRQHandler+0x18a>
 80049c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049c4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d00c      	beq.n	80049e6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80049d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049dc:	f043 0220 	orr.w	r2, r3, #32
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	f000 8211 	beq.w	8004e14 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80049f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049f6:	f003 0320 	and.w	r3, r3, #32
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00d      	beq.n	8004a1a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80049fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a02:	f003 0320 	and.w	r3, r3, #32
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d007      	beq.n	8004a1a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d003      	beq.n	8004a1a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a20:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a2e:	2b40      	cmp	r3, #64	@ 0x40
 8004a30:	d005      	beq.n	8004a3e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004a32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a36:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d04f      	beq.n	8004ade <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 fdd0 	bl	80055e4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a4e:	2b40      	cmp	r3, #64	@ 0x40
 8004a50:	d141      	bne.n	8004ad6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	3308      	adds	r3, #8
 8004a58:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004a60:	e853 3f00 	ldrex	r3, [r3]
 8004a64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004a68:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004a6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	3308      	adds	r3, #8
 8004a7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004a7e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004a82:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a86:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004a8a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004a8e:	e841 2300 	strex	r3, r2, [r1]
 8004a92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004a96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d1d9      	bne.n	8004a52 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d013      	beq.n	8004ace <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004aaa:	4a13      	ldr	r2, [pc, #76]	@ (8004af8 <HAL_UART_IRQHandler+0x29c>)
 8004aac:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7fc fb61 	bl	800117a <HAL_DMA_Abort_IT>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d017      	beq.n	8004aee <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ac2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004ac8:	4610      	mov	r0, r2
 8004aca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004acc:	e00f      	b.n	8004aee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 f9be 	bl	8004e50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ad4:	e00b      	b.n	8004aee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 f9ba 	bl	8004e50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004adc:	e007      	b.n	8004aee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 f9b6 	bl	8004e50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004aec:	e192      	b.n	8004e14 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004aee:	bf00      	nop
    return;
 8004af0:	e190      	b.n	8004e14 <HAL_UART_IRQHandler+0x5b8>
 8004af2:	bf00      	nop
 8004af4:	04000120 	.word	0x04000120
 8004af8:	080056ad 	.word	0x080056ad

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	f040 814b 	bne.w	8004d9c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b0a:	f003 0310 	and.w	r3, r3, #16
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	f000 8144 	beq.w	8004d9c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004b14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b18:	f003 0310 	and.w	r3, r3, #16
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	f000 813d 	beq.w	8004d9c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2210      	movs	r2, #16
 8004b28:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b34:	2b40      	cmp	r3, #64	@ 0x40
 8004b36:	f040 80b5 	bne.w	8004ca4 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004b46:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	f000 8164 	beq.w	8004e18 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004b56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	f080 815c 	bcs.w	8004e18 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004b66:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b6e:	699b      	ldr	r3, [r3, #24]
 8004b70:	2b20      	cmp	r3, #32
 8004b72:	f000 8086 	beq.w	8004c82 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004b82:	e853 3f00 	ldrex	r3, [r3]
 8004b86:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004b8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004b8e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b92:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004ba0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004ba4:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004bac:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004bb0:	e841 2300 	strex	r3, r2, [r1]
 8004bb4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004bb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d1da      	bne.n	8004b76 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	3308      	adds	r3, #8
 8004bc6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004bca:	e853 3f00 	ldrex	r3, [r3]
 8004bce:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004bd0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004bd2:	f023 0301 	bic.w	r3, r3, #1
 8004bd6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	3308      	adds	r3, #8
 8004be0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004be4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004be8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bea:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004bec:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004bf0:	e841 2300 	strex	r3, r2, [r1]
 8004bf4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004bf6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d1e1      	bne.n	8004bc0 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	3308      	adds	r3, #8
 8004c02:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c04:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c06:	e853 3f00 	ldrex	r3, [r3]
 8004c0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004c0c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c12:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	3308      	adds	r3, #8
 8004c1c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004c20:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004c22:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c24:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004c26:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004c28:	e841 2300 	strex	r3, r2, [r1]
 8004c2c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004c2e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d1e3      	bne.n	8004bfc <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2220      	movs	r2, #32
 8004c38:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c4a:	e853 3f00 	ldrex	r3, [r3]
 8004c4e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004c50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c52:	f023 0310 	bic.w	r3, r3, #16
 8004c56:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	461a      	mov	r2, r3
 8004c60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004c64:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004c66:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c68:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004c6a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004c6c:	e841 2300 	strex	r3, r2, [r1]
 8004c70:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004c72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d1e4      	bne.n	8004c42 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f7fc fa3e 	bl	80010fe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2202      	movs	r2, #2
 8004c86:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	4619      	mov	r1, r3
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f000 f8e1 	bl	8004e64 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004ca2:	e0b9      	b.n	8004e18 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	f000 80ab 	beq.w	8004e1c <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8004cc6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	f000 80a6 	beq.w	8004e1c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cd8:	e853 3f00 	ldrex	r3, [r3]
 8004cdc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004cde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ce0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ce4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	461a      	mov	r2, r3
 8004cee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004cf2:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cf4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004cf8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004cfa:	e841 2300 	strex	r3, r2, [r1]
 8004cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004d00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d1e4      	bne.n	8004cd0 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	3308      	adds	r3, #8
 8004d0c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d10:	e853 3f00 	ldrex	r3, [r3]
 8004d14:	623b      	str	r3, [r7, #32]
   return(result);
 8004d16:	6a3b      	ldr	r3, [r7, #32]
 8004d18:	f023 0301 	bic.w	r3, r3, #1
 8004d1c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	3308      	adds	r3, #8
 8004d26:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004d2a:	633a      	str	r2, [r7, #48]	@ 0x30
 8004d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d32:	e841 2300 	strex	r3, r2, [r1]
 8004d36:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1e3      	bne.n	8004d06 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2220      	movs	r2, #32
 8004d42:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	e853 3f00 	ldrex	r3, [r3]
 8004d5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f023 0310 	bic.w	r3, r3, #16
 8004d66:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	461a      	mov	r2, r3
 8004d70:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004d74:	61fb      	str	r3, [r7, #28]
 8004d76:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d78:	69b9      	ldr	r1, [r7, #24]
 8004d7a:	69fa      	ldr	r2, [r7, #28]
 8004d7c:	e841 2300 	strex	r3, r2, [r1]
 8004d80:	617b      	str	r3, [r7, #20]
   return(result);
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1e4      	bne.n	8004d52 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2202      	movs	r2, #2
 8004d8c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d8e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004d92:	4619      	mov	r1, r3
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f000 f865 	bl	8004e64 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004d9a:	e03f      	b.n	8004e1c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004d9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004da0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d00e      	beq.n	8004dc6 <HAL_UART_IRQHandler+0x56a>
 8004da8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004dac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d008      	beq.n	8004dc6 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004dbc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 fe5c 	bl	8005a7c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004dc4:	e02d      	b.n	8004e22 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00e      	beq.n	8004df0 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004dd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d008      	beq.n	8004df0 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d01c      	beq.n	8004e20 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	4798      	blx	r3
    }
    return;
 8004dee:	e017      	b.n	8004e20 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004df0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004df4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d012      	beq.n	8004e22 <HAL_UART_IRQHandler+0x5c6>
 8004dfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d00c      	beq.n	8004e22 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 fc65 	bl	80056d8 <UART_EndTransmit_IT>
    return;
 8004e0e:	e008      	b.n	8004e22 <HAL_UART_IRQHandler+0x5c6>
      return;
 8004e10:	bf00      	nop
 8004e12:	e006      	b.n	8004e22 <HAL_UART_IRQHandler+0x5c6>
    return;
 8004e14:	bf00      	nop
 8004e16:	e004      	b.n	8004e22 <HAL_UART_IRQHandler+0x5c6>
      return;
 8004e18:	bf00      	nop
 8004e1a:	e002      	b.n	8004e22 <HAL_UART_IRQHandler+0x5c6>
      return;
 8004e1c:	bf00      	nop
 8004e1e:	e000      	b.n	8004e22 <HAL_UART_IRQHandler+0x5c6>
    return;
 8004e20:	bf00      	nop
  }

}
 8004e22:	37e8      	adds	r7, #232	@ 0xe8
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004e30:	bf00      	nop
 8004e32:	370c      	adds	r7, #12
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004e44:	bf00      	nop
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004e58:	bf00      	nop
 8004e5a:	370c      	adds	r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	460b      	mov	r3, r1
 8004e6e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e70:	bf00      	nop
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b088      	sub	sp, #32
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e84:	2300      	movs	r3, #0
 8004e86:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	689a      	ldr	r2, [r3, #8]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	691b      	ldr	r3, [r3, #16]
 8004e90:	431a      	orrs	r2, r3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	695b      	ldr	r3, [r3, #20]
 8004e96:	431a      	orrs	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	69db      	ldr	r3, [r3, #28]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	4b8a      	ldr	r3, [pc, #552]	@ (80050d0 <UART_SetConfig+0x254>)
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	6812      	ldr	r2, [r2, #0]
 8004eae:	6979      	ldr	r1, [r7, #20]
 8004eb0:	430b      	orrs	r3, r1
 8004eb2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	68da      	ldr	r2, [r3, #12]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	430a      	orrs	r2, r1
 8004ec8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	699b      	ldr	r3, [r3, #24]
 8004ece:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a1b      	ldr	r3, [r3, #32]
 8004ed4:	697a      	ldr	r2, [r7, #20]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	697a      	ldr	r2, [r7, #20]
 8004eea:	430a      	orrs	r2, r1
 8004eec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a78      	ldr	r2, [pc, #480]	@ (80050d4 <UART_SetConfig+0x258>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d120      	bne.n	8004f3a <UART_SetConfig+0xbe>
 8004ef8:	4b77      	ldr	r3, [pc, #476]	@ (80050d8 <UART_SetConfig+0x25c>)
 8004efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004efc:	f003 0303 	and.w	r3, r3, #3
 8004f00:	2b03      	cmp	r3, #3
 8004f02:	d817      	bhi.n	8004f34 <UART_SetConfig+0xb8>
 8004f04:	a201      	add	r2, pc, #4	@ (adr r2, 8004f0c <UART_SetConfig+0x90>)
 8004f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f0a:	bf00      	nop
 8004f0c:	08004f1d 	.word	0x08004f1d
 8004f10:	08004f29 	.word	0x08004f29
 8004f14:	08004f2f 	.word	0x08004f2f
 8004f18:	08004f23 	.word	0x08004f23
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	77fb      	strb	r3, [r7, #31]
 8004f20:	e01d      	b.n	8004f5e <UART_SetConfig+0xe2>
 8004f22:	2302      	movs	r3, #2
 8004f24:	77fb      	strb	r3, [r7, #31]
 8004f26:	e01a      	b.n	8004f5e <UART_SetConfig+0xe2>
 8004f28:	2304      	movs	r3, #4
 8004f2a:	77fb      	strb	r3, [r7, #31]
 8004f2c:	e017      	b.n	8004f5e <UART_SetConfig+0xe2>
 8004f2e:	2308      	movs	r3, #8
 8004f30:	77fb      	strb	r3, [r7, #31]
 8004f32:	e014      	b.n	8004f5e <UART_SetConfig+0xe2>
 8004f34:	2310      	movs	r3, #16
 8004f36:	77fb      	strb	r3, [r7, #31]
 8004f38:	e011      	b.n	8004f5e <UART_SetConfig+0xe2>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a67      	ldr	r2, [pc, #412]	@ (80050dc <UART_SetConfig+0x260>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d102      	bne.n	8004f4a <UART_SetConfig+0xce>
 8004f44:	2300      	movs	r3, #0
 8004f46:	77fb      	strb	r3, [r7, #31]
 8004f48:	e009      	b.n	8004f5e <UART_SetConfig+0xe2>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a64      	ldr	r2, [pc, #400]	@ (80050e0 <UART_SetConfig+0x264>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d102      	bne.n	8004f5a <UART_SetConfig+0xde>
 8004f54:	2300      	movs	r3, #0
 8004f56:	77fb      	strb	r3, [r7, #31]
 8004f58:	e001      	b.n	8004f5e <UART_SetConfig+0xe2>
 8004f5a:	2310      	movs	r3, #16
 8004f5c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	69db      	ldr	r3, [r3, #28]
 8004f62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f66:	d15a      	bne.n	800501e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004f68:	7ffb      	ldrb	r3, [r7, #31]
 8004f6a:	2b08      	cmp	r3, #8
 8004f6c:	d827      	bhi.n	8004fbe <UART_SetConfig+0x142>
 8004f6e:	a201      	add	r2, pc, #4	@ (adr r2, 8004f74 <UART_SetConfig+0xf8>)
 8004f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f74:	08004f99 	.word	0x08004f99
 8004f78:	08004fa1 	.word	0x08004fa1
 8004f7c:	08004fa9 	.word	0x08004fa9
 8004f80:	08004fbf 	.word	0x08004fbf
 8004f84:	08004faf 	.word	0x08004faf
 8004f88:	08004fbf 	.word	0x08004fbf
 8004f8c:	08004fbf 	.word	0x08004fbf
 8004f90:	08004fbf 	.word	0x08004fbf
 8004f94:	08004fb7 	.word	0x08004fb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f98:	f7fe f988 	bl	80032ac <HAL_RCC_GetPCLK1Freq>
 8004f9c:	61b8      	str	r0, [r7, #24]
        break;
 8004f9e:	e013      	b.n	8004fc8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fa0:	f7fe f9a6 	bl	80032f0 <HAL_RCC_GetPCLK2Freq>
 8004fa4:	61b8      	str	r0, [r7, #24]
        break;
 8004fa6:	e00f      	b.n	8004fc8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fa8:	4b4e      	ldr	r3, [pc, #312]	@ (80050e4 <UART_SetConfig+0x268>)
 8004faa:	61bb      	str	r3, [r7, #24]
        break;
 8004fac:	e00c      	b.n	8004fc8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fae:	f7fe f91d 	bl	80031ec <HAL_RCC_GetSysClockFreq>
 8004fb2:	61b8      	str	r0, [r7, #24]
        break;
 8004fb4:	e008      	b.n	8004fc8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004fba:	61bb      	str	r3, [r7, #24]
        break;
 8004fbc:	e004      	b.n	8004fc8 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	77bb      	strb	r3, [r7, #30]
        break;
 8004fc6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d074      	beq.n	80050b8 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	005a      	lsls	r2, r3, #1
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	085b      	lsrs	r3, r3, #1
 8004fd8:	441a      	add	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fe2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	2b0f      	cmp	r3, #15
 8004fe8:	d916      	bls.n	8005018 <UART_SetConfig+0x19c>
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ff0:	d212      	bcs.n	8005018 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	f023 030f 	bic.w	r3, r3, #15
 8004ffa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	085b      	lsrs	r3, r3, #1
 8005000:	b29b      	uxth	r3, r3
 8005002:	f003 0307 	and.w	r3, r3, #7
 8005006:	b29a      	uxth	r2, r3
 8005008:	89fb      	ldrh	r3, [r7, #14]
 800500a:	4313      	orrs	r3, r2
 800500c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	89fa      	ldrh	r2, [r7, #14]
 8005014:	60da      	str	r2, [r3, #12]
 8005016:	e04f      	b.n	80050b8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	77bb      	strb	r3, [r7, #30]
 800501c:	e04c      	b.n	80050b8 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800501e:	7ffb      	ldrb	r3, [r7, #31]
 8005020:	2b08      	cmp	r3, #8
 8005022:	d828      	bhi.n	8005076 <UART_SetConfig+0x1fa>
 8005024:	a201      	add	r2, pc, #4	@ (adr r2, 800502c <UART_SetConfig+0x1b0>)
 8005026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800502a:	bf00      	nop
 800502c:	08005051 	.word	0x08005051
 8005030:	08005059 	.word	0x08005059
 8005034:	08005061 	.word	0x08005061
 8005038:	08005077 	.word	0x08005077
 800503c:	08005067 	.word	0x08005067
 8005040:	08005077 	.word	0x08005077
 8005044:	08005077 	.word	0x08005077
 8005048:	08005077 	.word	0x08005077
 800504c:	0800506f 	.word	0x0800506f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005050:	f7fe f92c 	bl	80032ac <HAL_RCC_GetPCLK1Freq>
 8005054:	61b8      	str	r0, [r7, #24]
        break;
 8005056:	e013      	b.n	8005080 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005058:	f7fe f94a 	bl	80032f0 <HAL_RCC_GetPCLK2Freq>
 800505c:	61b8      	str	r0, [r7, #24]
        break;
 800505e:	e00f      	b.n	8005080 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005060:	4b20      	ldr	r3, [pc, #128]	@ (80050e4 <UART_SetConfig+0x268>)
 8005062:	61bb      	str	r3, [r7, #24]
        break;
 8005064:	e00c      	b.n	8005080 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005066:	f7fe f8c1 	bl	80031ec <HAL_RCC_GetSysClockFreq>
 800506a:	61b8      	str	r0, [r7, #24]
        break;
 800506c:	e008      	b.n	8005080 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800506e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005072:	61bb      	str	r3, [r7, #24]
        break;
 8005074:	e004      	b.n	8005080 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005076:	2300      	movs	r3, #0
 8005078:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	77bb      	strb	r3, [r7, #30]
        break;
 800507e:	bf00      	nop
    }

    if (pclk != 0U)
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d018      	beq.n	80050b8 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	085a      	lsrs	r2, r3, #1
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	441a      	add	r2, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	fbb2 f3f3 	udiv	r3, r2, r3
 8005098:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	2b0f      	cmp	r3, #15
 800509e:	d909      	bls.n	80050b4 <UART_SetConfig+0x238>
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050a6:	d205      	bcs.n	80050b4 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	b29a      	uxth	r2, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	60da      	str	r2, [r3, #12]
 80050b2:	e001      	b.n	80050b8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80050c4:	7fbb      	ldrb	r3, [r7, #30]
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3720      	adds	r7, #32
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	bf00      	nop
 80050d0:	efff69f3 	.word	0xefff69f3
 80050d4:	40013800 	.word	0x40013800
 80050d8:	40021000 	.word	0x40021000
 80050dc:	40004400 	.word	0x40004400
 80050e0:	40004800 	.word	0x40004800
 80050e4:	007a1200 	.word	0x007a1200

080050e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050f4:	f003 0308 	and.w	r3, r3, #8
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d00a      	beq.n	8005112 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	430a      	orrs	r2, r1
 8005110:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005116:	f003 0301 	and.w	r3, r3, #1
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00a      	beq.n	8005134 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	430a      	orrs	r2, r1
 8005132:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005138:	f003 0302 	and.w	r3, r3, #2
 800513c:	2b00      	cmp	r3, #0
 800513e:	d00a      	beq.n	8005156 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	430a      	orrs	r2, r1
 8005154:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800515a:	f003 0304 	and.w	r3, r3, #4
 800515e:	2b00      	cmp	r3, #0
 8005160:	d00a      	beq.n	8005178 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	430a      	orrs	r2, r1
 8005176:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800517c:	f003 0310 	and.w	r3, r3, #16
 8005180:	2b00      	cmp	r3, #0
 8005182:	d00a      	beq.n	800519a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	430a      	orrs	r2, r1
 8005198:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800519e:	f003 0320 	and.w	r3, r3, #32
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00a      	beq.n	80051bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	430a      	orrs	r2, r1
 80051ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d01a      	beq.n	80051fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	430a      	orrs	r2, r1
 80051dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80051e6:	d10a      	bne.n	80051fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	430a      	orrs	r2, r1
 80051fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005202:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005206:	2b00      	cmp	r3, #0
 8005208:	d00a      	beq.n	8005220 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	430a      	orrs	r2, r1
 800521e:	605a      	str	r2, [r3, #4]
  }
}
 8005220:	bf00      	nop
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b098      	sub	sp, #96	@ 0x60
 8005230:	af02      	add	r7, sp, #8
 8005232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800523c:	f7fb fe1e 	bl	8000e7c <HAL_GetTick>
 8005240:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 0308 	and.w	r3, r3, #8
 800524c:	2b08      	cmp	r3, #8
 800524e:	d12e      	bne.n	80052ae <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005250:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005254:	9300      	str	r3, [sp, #0]
 8005256:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005258:	2200      	movs	r2, #0
 800525a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 f88c 	bl	800537c <UART_WaitOnFlagUntilTimeout>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d021      	beq.n	80052ae <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005272:	e853 3f00 	ldrex	r3, [r3]
 8005276:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005278:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800527a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800527e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	461a      	mov	r2, r3
 8005286:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005288:	647b      	str	r3, [r7, #68]	@ 0x44
 800528a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800528c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800528e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005290:	e841 2300 	strex	r3, r2, [r1]
 8005294:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005296:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005298:	2b00      	cmp	r3, #0
 800529a:	d1e6      	bne.n	800526a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2220      	movs	r2, #32
 80052a0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e062      	b.n	8005374 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 0304 	and.w	r3, r3, #4
 80052b8:	2b04      	cmp	r3, #4
 80052ba:	d149      	bne.n	8005350 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80052c0:	9300      	str	r3, [sp, #0]
 80052c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052c4:	2200      	movs	r2, #0
 80052c6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 f856 	bl	800537c <UART_WaitOnFlagUntilTimeout>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d03c      	beq.n	8005350 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052de:	e853 3f00 	ldrex	r3, [r3]
 80052e2:	623b      	str	r3, [r7, #32]
   return(result);
 80052e4:	6a3b      	ldr	r3, [r7, #32]
 80052e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	461a      	mov	r2, r3
 80052f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80052f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80052fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052fc:	e841 2300 	strex	r3, r2, [r1]
 8005300:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005304:	2b00      	cmp	r3, #0
 8005306:	d1e6      	bne.n	80052d6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	3308      	adds	r3, #8
 800530e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	e853 3f00 	ldrex	r3, [r3]
 8005316:	60fb      	str	r3, [r7, #12]
   return(result);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f023 0301 	bic.w	r3, r3, #1
 800531e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	3308      	adds	r3, #8
 8005326:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005328:	61fa      	str	r2, [r7, #28]
 800532a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532c:	69b9      	ldr	r1, [r7, #24]
 800532e:	69fa      	ldr	r2, [r7, #28]
 8005330:	e841 2300 	strex	r3, r2, [r1]
 8005334:	617b      	str	r3, [r7, #20]
   return(result);
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d1e5      	bne.n	8005308 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2220      	movs	r2, #32
 8005340:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800534c:	2303      	movs	r3, #3
 800534e:	e011      	b.n	8005374 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2220      	movs	r2, #32
 8005354:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2220      	movs	r2, #32
 800535a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005372:	2300      	movs	r3, #0
}
 8005374:	4618      	mov	r0, r3
 8005376:	3758      	adds	r7, #88	@ 0x58
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	603b      	str	r3, [r7, #0]
 8005388:	4613      	mov	r3, r2
 800538a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800538c:	e04f      	b.n	800542e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005394:	d04b      	beq.n	800542e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005396:	f7fb fd71 	bl	8000e7c <HAL_GetTick>
 800539a:	4602      	mov	r2, r0
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	69ba      	ldr	r2, [r7, #24]
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d302      	bcc.n	80053ac <UART_WaitOnFlagUntilTimeout+0x30>
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d101      	bne.n	80053b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80053ac:	2303      	movs	r3, #3
 80053ae:	e04e      	b.n	800544e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0304 	and.w	r3, r3, #4
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d037      	beq.n	800542e <UART_WaitOnFlagUntilTimeout+0xb2>
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	2b80      	cmp	r3, #128	@ 0x80
 80053c2:	d034      	beq.n	800542e <UART_WaitOnFlagUntilTimeout+0xb2>
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	2b40      	cmp	r3, #64	@ 0x40
 80053c8:	d031      	beq.n	800542e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	69db      	ldr	r3, [r3, #28]
 80053d0:	f003 0308 	and.w	r3, r3, #8
 80053d4:	2b08      	cmp	r3, #8
 80053d6:	d110      	bne.n	80053fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2208      	movs	r2, #8
 80053de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80053e0:	68f8      	ldr	r0, [r7, #12]
 80053e2:	f000 f8ff 	bl	80055e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2208      	movs	r2, #8
 80053ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e029      	b.n	800544e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	69db      	ldr	r3, [r3, #28]
 8005400:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005404:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005408:	d111      	bne.n	800542e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005412:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005414:	68f8      	ldr	r0, [r7, #12]
 8005416:	f000 f8e5 	bl	80055e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2220      	movs	r2, #32
 800541e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2200      	movs	r2, #0
 8005426:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e00f      	b.n	800544e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	69da      	ldr	r2, [r3, #28]
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	4013      	ands	r3, r2
 8005438:	68ba      	ldr	r2, [r7, #8]
 800543a:	429a      	cmp	r2, r3
 800543c:	bf0c      	ite	eq
 800543e:	2301      	moveq	r3, #1
 8005440:	2300      	movne	r3, #0
 8005442:	b2db      	uxtb	r3, r3
 8005444:	461a      	mov	r2, r3
 8005446:	79fb      	ldrb	r3, [r7, #7]
 8005448:	429a      	cmp	r2, r3
 800544a:	d0a0      	beq.n	800538e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	3710      	adds	r7, #16
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
	...

08005458 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005458:	b480      	push	{r7}
 800545a:	b097      	sub	sp, #92	@ 0x5c
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	4613      	mov	r3, r2
 8005464:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	68ba      	ldr	r2, [r7, #8]
 800546a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	88fa      	ldrh	r2, [r7, #6]
 8005470:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	88fa      	ldrh	r2, [r7, #6]
 8005478:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2200      	movs	r2, #0
 8005480:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800548a:	d10e      	bne.n	80054aa <UART_Start_Receive_IT+0x52>
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	691b      	ldr	r3, [r3, #16]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d105      	bne.n	80054a0 <UART_Start_Receive_IT+0x48>
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800549a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800549e:	e02d      	b.n	80054fc <UART_Start_Receive_IT+0xa4>
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	22ff      	movs	r2, #255	@ 0xff
 80054a4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80054a8:	e028      	b.n	80054fc <UART_Start_Receive_IT+0xa4>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d10d      	bne.n	80054ce <UART_Start_Receive_IT+0x76>
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d104      	bne.n	80054c4 <UART_Start_Receive_IT+0x6c>
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	22ff      	movs	r2, #255	@ 0xff
 80054be:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80054c2:	e01b      	b.n	80054fc <UART_Start_Receive_IT+0xa4>
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	227f      	movs	r2, #127	@ 0x7f
 80054c8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80054cc:	e016      	b.n	80054fc <UART_Start_Receive_IT+0xa4>
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80054d6:	d10d      	bne.n	80054f4 <UART_Start_Receive_IT+0x9c>
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	691b      	ldr	r3, [r3, #16]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d104      	bne.n	80054ea <UART_Start_Receive_IT+0x92>
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	227f      	movs	r2, #127	@ 0x7f
 80054e4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80054e8:	e008      	b.n	80054fc <UART_Start_Receive_IT+0xa4>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	223f      	movs	r2, #63	@ 0x3f
 80054ee:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80054f2:	e003      	b.n	80054fc <UART_Start_Receive_IT+0xa4>
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2200      	movs	r2, #0
 8005500:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2222      	movs	r2, #34	@ 0x22
 8005508:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	3308      	adds	r3, #8
 8005512:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005514:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005516:	e853 3f00 	ldrex	r3, [r3]
 800551a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800551c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800551e:	f043 0301 	orr.w	r3, r3, #1
 8005522:	657b      	str	r3, [r7, #84]	@ 0x54
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	3308      	adds	r3, #8
 800552a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800552c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800552e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005530:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005532:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005534:	e841 2300 	strex	r3, r2, [r1]
 8005538:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800553a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800553c:	2b00      	cmp	r3, #0
 800553e:	d1e5      	bne.n	800550c <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005548:	d107      	bne.n	800555a <UART_Start_Receive_IT+0x102>
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d103      	bne.n	800555a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	4a21      	ldr	r2, [pc, #132]	@ (80055dc <UART_Start_Receive_IT+0x184>)
 8005556:	669a      	str	r2, [r3, #104]	@ 0x68
 8005558:	e002      	b.n	8005560 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	4a20      	ldr	r2, [pc, #128]	@ (80055e0 <UART_Start_Receive_IT+0x188>)
 800555e:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	691b      	ldr	r3, [r3, #16]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d019      	beq.n	800559c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800556e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005570:	e853 3f00 	ldrex	r3, [r3]
 8005574:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005578:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800557c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	461a      	mov	r2, r3
 8005584:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005586:	637b      	str	r3, [r7, #52]	@ 0x34
 8005588:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800558a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800558c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800558e:	e841 2300 	strex	r3, r2, [r1]
 8005592:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005596:	2b00      	cmp	r3, #0
 8005598:	d1e6      	bne.n	8005568 <UART_Start_Receive_IT+0x110>
 800559a:	e018      	b.n	80055ce <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	e853 3f00 	ldrex	r3, [r3]
 80055a8:	613b      	str	r3, [r7, #16]
   return(result);
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	f043 0320 	orr.w	r3, r3, #32
 80055b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	461a      	mov	r2, r3
 80055b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80055ba:	623b      	str	r3, [r7, #32]
 80055bc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055be:	69f9      	ldr	r1, [r7, #28]
 80055c0:	6a3a      	ldr	r2, [r7, #32]
 80055c2:	e841 2300 	strex	r3, r2, [r1]
 80055c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1e6      	bne.n	800559c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80055ce:	2300      	movs	r3, #0
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	375c      	adds	r7, #92	@ 0x5c
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr
 80055dc:	080058d5 	.word	0x080058d5
 80055e0:	0800572d 	.word	0x0800572d

080055e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b095      	sub	sp, #84	@ 0x54
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055f4:	e853 3f00 	ldrex	r3, [r3]
 80055f8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80055fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005600:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	461a      	mov	r2, r3
 8005608:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800560a:	643b      	str	r3, [r7, #64]	@ 0x40
 800560c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800560e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005610:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005612:	e841 2300 	strex	r3, r2, [r1]
 8005616:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800561a:	2b00      	cmp	r3, #0
 800561c:	d1e6      	bne.n	80055ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	3308      	adds	r3, #8
 8005624:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005626:	6a3b      	ldr	r3, [r7, #32]
 8005628:	e853 3f00 	ldrex	r3, [r3]
 800562c:	61fb      	str	r3, [r7, #28]
   return(result);
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	f023 0301 	bic.w	r3, r3, #1
 8005634:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	3308      	adds	r3, #8
 800563c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800563e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005640:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005642:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005644:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005646:	e841 2300 	strex	r3, r2, [r1]
 800564a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800564c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800564e:	2b00      	cmp	r3, #0
 8005650:	d1e5      	bne.n	800561e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005656:	2b01      	cmp	r3, #1
 8005658:	d118      	bne.n	800568c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	e853 3f00 	ldrex	r3, [r3]
 8005666:	60bb      	str	r3, [r7, #8]
   return(result);
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	f023 0310 	bic.w	r3, r3, #16
 800566e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	461a      	mov	r2, r3
 8005676:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005678:	61bb      	str	r3, [r7, #24]
 800567a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800567c:	6979      	ldr	r1, [r7, #20]
 800567e:	69ba      	ldr	r2, [r7, #24]
 8005680:	e841 2300 	strex	r3, r2, [r1]
 8005684:	613b      	str	r3, [r7, #16]
   return(result);
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d1e6      	bne.n	800565a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2220      	movs	r2, #32
 8005690:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80056a0:	bf00      	nop
 80056a2:	3754      	adds	r7, #84	@ 0x54
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr

080056ac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2200      	movs	r2, #0
 80056be:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80056ca:	68f8      	ldr	r0, [r7, #12]
 80056cc:	f7ff fbc0 	bl	8004e50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056d0:	bf00      	nop
 80056d2:	3710      	adds	r7, #16
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b088      	sub	sp, #32
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	e853 3f00 	ldrex	r3, [r3]
 80056ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056f4:	61fb      	str	r3, [r7, #28]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	461a      	mov	r2, r3
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	61bb      	str	r3, [r7, #24]
 8005700:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005702:	6979      	ldr	r1, [r7, #20]
 8005704:	69ba      	ldr	r2, [r7, #24]
 8005706:	e841 2300 	strex	r3, r2, [r1]
 800570a:	613b      	str	r3, [r7, #16]
   return(result);
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d1e6      	bne.n	80056e0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2220      	movs	r2, #32
 8005716:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f7ff fb82 	bl	8004e28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005724:	bf00      	nop
 8005726:	3720      	adds	r7, #32
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b09c      	sub	sp, #112	@ 0x70
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800573a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005744:	2b22      	cmp	r3, #34	@ 0x22
 8005746:	f040 80b9 	bne.w	80058bc <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005750:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005754:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005758:	b2d9      	uxtb	r1, r3
 800575a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800575e:	b2da      	uxtb	r2, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005764:	400a      	ands	r2, r1
 8005766:	b2d2      	uxtb	r2, r2
 8005768:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800576e:	1c5a      	adds	r2, r3, #1
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800577a:	b29b      	uxth	r3, r3
 800577c:	3b01      	subs	r3, #1
 800577e:	b29a      	uxth	r2, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800578c:	b29b      	uxth	r3, r3
 800578e:	2b00      	cmp	r3, #0
 8005790:	f040 809c 	bne.w	80058cc <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800579a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800579c:	e853 3f00 	ldrex	r3, [r3]
 80057a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80057a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80057a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80057a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	461a      	mov	r2, r3
 80057b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80057b2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80057b4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80057b8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80057ba:	e841 2300 	strex	r3, r2, [r1]
 80057be:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80057c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d1e6      	bne.n	8005794 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	3308      	adds	r3, #8
 80057cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057d0:	e853 3f00 	ldrex	r3, [r3]
 80057d4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80057d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057d8:	f023 0301 	bic.w	r3, r3, #1
 80057dc:	667b      	str	r3, [r7, #100]	@ 0x64
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	3308      	adds	r3, #8
 80057e4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80057e6:	647a      	str	r2, [r7, #68]	@ 0x44
 80057e8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80057ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80057ee:	e841 2300 	strex	r3, r2, [r1]
 80057f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80057f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d1e5      	bne.n	80057c6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2220      	movs	r2, #32
 80057fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005818:	2b00      	cmp	r3, #0
 800581a:	d018      	beq.n	800584e <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005824:	e853 3f00 	ldrex	r3, [r3]
 8005828:	623b      	str	r3, [r7, #32]
   return(result);
 800582a:	6a3b      	ldr	r3, [r7, #32]
 800582c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005830:	663b      	str	r3, [r7, #96]	@ 0x60
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	461a      	mov	r2, r3
 8005838:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800583a:	633b      	str	r3, [r7, #48]	@ 0x30
 800583c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800583e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005840:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005842:	e841 2300 	strex	r3, r2, [r1]
 8005846:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800584a:	2b00      	cmp	r3, #0
 800584c:	d1e6      	bne.n	800581c <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005852:	2b01      	cmp	r3, #1
 8005854:	d12e      	bne.n	80058b4 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	e853 3f00 	ldrex	r3, [r3]
 8005868:	60fb      	str	r3, [r7, #12]
   return(result);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f023 0310 	bic.w	r3, r3, #16
 8005870:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	461a      	mov	r2, r3
 8005878:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800587a:	61fb      	str	r3, [r7, #28]
 800587c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587e:	69b9      	ldr	r1, [r7, #24]
 8005880:	69fa      	ldr	r2, [r7, #28]
 8005882:	e841 2300 	strex	r3, r2, [r1]
 8005886:	617b      	str	r3, [r7, #20]
   return(result);
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d1e6      	bne.n	800585c <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	69db      	ldr	r3, [r3, #28]
 8005894:	f003 0310 	and.w	r3, r3, #16
 8005898:	2b10      	cmp	r3, #16
 800589a:	d103      	bne.n	80058a4 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2210      	movs	r2, #16
 80058a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80058aa:	4619      	mov	r1, r3
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f7ff fad9 	bl	8004e64 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80058b2:	e00b      	b.n	80058cc <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f7ff fac1 	bl	8004e3c <HAL_UART_RxCpltCallback>
}
 80058ba:	e007      	b.n	80058cc <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	699a      	ldr	r2, [r3, #24]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f042 0208 	orr.w	r2, r2, #8
 80058ca:	619a      	str	r2, [r3, #24]
}
 80058cc:	bf00      	nop
 80058ce:	3770      	adds	r7, #112	@ 0x70
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b09c      	sub	sp, #112	@ 0x70
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80058e2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058ec:	2b22      	cmp	r3, #34	@ 0x22
 80058ee:	f040 80b9 	bne.w	8005a64 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80058f8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005900:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005902:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8005906:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800590a:	4013      	ands	r3, r2
 800590c:	b29a      	uxth	r2, r3
 800590e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005910:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005916:	1c9a      	adds	r2, r3, #2
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005922:	b29b      	uxth	r3, r3
 8005924:	3b01      	subs	r3, #1
 8005926:	b29a      	uxth	r2, r3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005934:	b29b      	uxth	r3, r3
 8005936:	2b00      	cmp	r3, #0
 8005938:	f040 809c 	bne.w	8005a74 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005942:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005944:	e853 3f00 	ldrex	r3, [r3]
 8005948:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800594a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800594c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005950:	667b      	str	r3, [r7, #100]	@ 0x64
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	461a      	mov	r2, r3
 8005958:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800595a:	657b      	str	r3, [r7, #84]	@ 0x54
 800595c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800595e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005960:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005962:	e841 2300 	strex	r3, r2, [r1]
 8005966:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005968:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800596a:	2b00      	cmp	r3, #0
 800596c:	d1e6      	bne.n	800593c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	3308      	adds	r3, #8
 8005974:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005978:	e853 3f00 	ldrex	r3, [r3]
 800597c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800597e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005980:	f023 0301 	bic.w	r3, r3, #1
 8005984:	663b      	str	r3, [r7, #96]	@ 0x60
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	3308      	adds	r3, #8
 800598c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800598e:	643a      	str	r2, [r7, #64]	@ 0x40
 8005990:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005992:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005994:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005996:	e841 2300 	strex	r3, r2, [r1]
 800599a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800599c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d1e5      	bne.n	800596e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2220      	movs	r2, #32
 80059a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d018      	beq.n	80059f6 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ca:	6a3b      	ldr	r3, [r7, #32]
 80059cc:	e853 3f00 	ldrex	r3, [r3]
 80059d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80059d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	461a      	mov	r2, r3
 80059e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80059e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059e4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80059e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059ea:	e841 2300 	strex	r3, r2, [r1]
 80059ee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80059f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d1e6      	bne.n	80059c4 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d12e      	bne.n	8005a5c <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	e853 3f00 	ldrex	r3, [r3]
 8005a10:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	f023 0310 	bic.w	r3, r3, #16
 8005a18:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	461a      	mov	r2, r3
 8005a20:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005a22:	61bb      	str	r3, [r7, #24]
 8005a24:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a26:	6979      	ldr	r1, [r7, #20]
 8005a28:	69ba      	ldr	r2, [r7, #24]
 8005a2a:	e841 2300 	strex	r3, r2, [r1]
 8005a2e:	613b      	str	r3, [r7, #16]
   return(result);
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1e6      	bne.n	8005a04 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	69db      	ldr	r3, [r3, #28]
 8005a3c:	f003 0310 	and.w	r3, r3, #16
 8005a40:	2b10      	cmp	r3, #16
 8005a42:	d103      	bne.n	8005a4c <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	2210      	movs	r2, #16
 8005a4a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005a52:	4619      	mov	r1, r3
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f7ff fa05 	bl	8004e64 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005a5a:	e00b      	b.n	8005a74 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f7ff f9ed 	bl	8004e3c <HAL_UART_RxCpltCallback>
}
 8005a62:	e007      	b.n	8005a74 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	699a      	ldr	r2, [r3, #24]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f042 0208 	orr.w	r2, r2, #8
 8005a72:	619a      	str	r2, [r3, #24]
}
 8005a74:	bf00      	nop
 8005a76:	3770      	adds	r7, #112	@ 0x70
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005a84:	bf00      	nop
 8005a86:	370c      	adds	r7, #12
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <memset>:
 8005a90:	4402      	add	r2, r0
 8005a92:	4603      	mov	r3, r0
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d100      	bne.n	8005a9a <memset+0xa>
 8005a98:	4770      	bx	lr
 8005a9a:	f803 1b01 	strb.w	r1, [r3], #1
 8005a9e:	e7f9      	b.n	8005a94 <memset+0x4>

08005aa0 <__libc_init_array>:
 8005aa0:	b570      	push	{r4, r5, r6, lr}
 8005aa2:	4d0d      	ldr	r5, [pc, #52]	@ (8005ad8 <__libc_init_array+0x38>)
 8005aa4:	4c0d      	ldr	r4, [pc, #52]	@ (8005adc <__libc_init_array+0x3c>)
 8005aa6:	1b64      	subs	r4, r4, r5
 8005aa8:	10a4      	asrs	r4, r4, #2
 8005aaa:	2600      	movs	r6, #0
 8005aac:	42a6      	cmp	r6, r4
 8005aae:	d109      	bne.n	8005ac4 <__libc_init_array+0x24>
 8005ab0:	4d0b      	ldr	r5, [pc, #44]	@ (8005ae0 <__libc_init_array+0x40>)
 8005ab2:	4c0c      	ldr	r4, [pc, #48]	@ (8005ae4 <__libc_init_array+0x44>)
 8005ab4:	f000 f818 	bl	8005ae8 <_init>
 8005ab8:	1b64      	subs	r4, r4, r5
 8005aba:	10a4      	asrs	r4, r4, #2
 8005abc:	2600      	movs	r6, #0
 8005abe:	42a6      	cmp	r6, r4
 8005ac0:	d105      	bne.n	8005ace <__libc_init_array+0x2e>
 8005ac2:	bd70      	pop	{r4, r5, r6, pc}
 8005ac4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ac8:	4798      	blx	r3
 8005aca:	3601      	adds	r6, #1
 8005acc:	e7ee      	b.n	8005aac <__libc_init_array+0xc>
 8005ace:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ad2:	4798      	blx	r3
 8005ad4:	3601      	adds	r6, #1
 8005ad6:	e7f2      	b.n	8005abe <__libc_init_array+0x1e>
 8005ad8:	08005ba0 	.word	0x08005ba0
 8005adc:	08005ba0 	.word	0x08005ba0
 8005ae0:	08005ba0 	.word	0x08005ba0
 8005ae4:	08005ba4 	.word	0x08005ba4

08005ae8 <_init>:
 8005ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aea:	bf00      	nop
 8005aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aee:	bc08      	pop	{r3}
 8005af0:	469e      	mov	lr, r3
 8005af2:	4770      	bx	lr

08005af4 <_fini>:
 8005af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005af6:	bf00      	nop
 8005af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005afa:	bc08      	pop	{r3}
 8005afc:	469e      	mov	lr, r3
 8005afe:	4770      	bx	lr
