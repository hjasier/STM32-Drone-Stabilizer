
FlightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008be0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000398  08008d70  08008d70  00009d70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009108  08009108  0000b078  2**0
                  CONTENTS
  4 .ARM          00000008  08009108  08009108  0000a108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009110  08009110  0000b078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009110  08009110  0000a110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009114  08009114  0000a114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08009118  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b078  2**0
                  CONTENTS
 10 .bss          000004d8  20000078  20000078  0000b078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000550  20000550  0000b078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014821  00000000  00000000  0000b0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ece  00000000  00000000  0001f8c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011c8  00000000  00000000  00022798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ded  00000000  00000000  00023960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d376  00000000  00000000  0002474d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000179b7  00000000  00000000  00041ac3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a85c8  00000000  00000000  0005947a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00101a42  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000055e0  00000000  00000000  00101a88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  00107068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008d58 	.word	0x08008d58

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08008d58 	.word	0x08008d58

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <receiveControlCommand>:
    snprintf(cmd_msg, sizeof(cmd_msg), "%s\r\n", command);  // Agregar salto de línea al final del comando
    HAL_UART_Transmit(&huart1, (uint8_t*)cmd_msg, strlen(cmd_msg), HAL_MAX_DELAY);
}

// Función para recibir comandos del ESP8266
void receiveControlCommand(uint8_t *rx_buffer, uint16_t length) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	460b      	mov	r3, r1
 8000c02:	807b      	strh	r3, [r7, #2]

	if (strncmp((char *)rx_buffer, "Dat", 3) == 0 || strncmp((char *)rx_buffer, "Men", 3) == 0) {
 8000c04:	2203      	movs	r2, #3
 8000c06:	4933      	ldr	r1, [pc, #204]	@ (8000cd4 <receiveControlCommand+0xdc>)
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	f006 ff10 	bl	8007a2e <strncmp>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d007      	beq.n	8000c24 <receiveControlCommand+0x2c>
 8000c14:	2203      	movs	r2, #3
 8000c16:	4930      	ldr	r1, [pc, #192]	@ (8000cd8 <receiveControlCommand+0xe0>)
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	f006 ff08 	bl	8007a2e <strncmp>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d106      	bne.n	8000c32 <receiveControlCommand+0x3a>
	    memset(rx_buffer, 0, length);  // Limpiar el buffer
 8000c24:	887b      	ldrh	r3, [r7, #2]
 8000c26:	461a      	mov	r2, r3
 8000c28:	2100      	movs	r1, #0
 8000c2a:	6878      	ldr	r0, [r7, #4]
 8000c2c:	f006 fef7 	bl	8007a1e <memset>
	    return;
 8000c30:	e04d      	b.n	8000cce <receiveControlCommand+0xd6>
	}

    printData("Comando recibido\n");
 8000c32:	482a      	ldr	r0, [pc, #168]	@ (8000cdc <receiveControlCommand+0xe4>)
 8000c34:	f001 f892 	bl	8001d5c <printData>

    if (strncmp((char *)rx_buffer, "LED_ON", 6) == 0) {
 8000c38:	2206      	movs	r2, #6
 8000c3a:	4929      	ldr	r1, [pc, #164]	@ (8000ce0 <receiveControlCommand+0xe8>)
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f006 fef6 	bl	8007a2e <strncmp>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d105      	bne.n	8000c54 <receiveControlCommand+0x5c>
        // Encender el LED (PB3)
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8000c48:	2201      	movs	r2, #1
 8000c4a:	2108      	movs	r1, #8
 8000c4c:	4825      	ldr	r0, [pc, #148]	@ (8000ce4 <receiveControlCommand+0xec>)
 8000c4e:	f001 ff59 	bl	8002b04 <HAL_GPIO_WritePin>
 8000c52:	e036      	b.n	8000cc2 <receiveControlCommand+0xca>
    } else if (strncmp((char *)rx_buffer, "LED_OFF", 7) == 0) {
 8000c54:	2207      	movs	r2, #7
 8000c56:	4924      	ldr	r1, [pc, #144]	@ (8000ce8 <receiveControlCommand+0xf0>)
 8000c58:	6878      	ldr	r0, [r7, #4]
 8000c5a:	f006 fee8 	bl	8007a2e <strncmp>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d105      	bne.n	8000c70 <receiveControlCommand+0x78>
        // Apagar el LED (PB3)
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000c64:	2200      	movs	r2, #0
 8000c66:	2108      	movs	r1, #8
 8000c68:	481e      	ldr	r0, [pc, #120]	@ (8000ce4 <receiveControlCommand+0xec>)
 8000c6a:	f001 ff4b 	bl	8002b04 <HAL_GPIO_WritePin>
 8000c6e:	e028      	b.n	8000cc2 <receiveControlCommand+0xca>
    }

    else if (strncmp((char*) rx_buffer, "ARM", 3) == 0) {
 8000c70:	2203      	movs	r2, #3
 8000c72:	491e      	ldr	r1, [pc, #120]	@ (8000cec <receiveControlCommand+0xf4>)
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f006 feda 	bl	8007a2e <strncmp>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d102      	bne.n	8000c86 <receiveControlCommand+0x8e>
		Control_ArmMotors();
 8000c80:	f000 f880 	bl	8000d84 <Control_ArmMotors>
 8000c84:	e01d      	b.n	8000cc2 <receiveControlCommand+0xca>
	} else if (strncmp((char*) rx_buffer, "STOP", 4) == 0) {
 8000c86:	2204      	movs	r2, #4
 8000c88:	4919      	ldr	r1, [pc, #100]	@ (8000cf0 <receiveControlCommand+0xf8>)
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f006 fecf 	bl	8007a2e <strncmp>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d102      	bne.n	8000c9c <receiveControlCommand+0xa4>
		Control_Stop();
 8000c96:	f000 fc2f 	bl	80014f8 <Control_Stop>
 8000c9a:	e012      	b.n	8000cc2 <receiveControlCommand+0xca>
	} else if (strncmp((char*) rx_buffer, "PWR", 3) == 0) {
 8000c9c:	2203      	movs	r2, #3
 8000c9e:	4915      	ldr	r1, [pc, #84]	@ (8000cf4 <receiveControlCommand+0xfc>)
 8000ca0:	6878      	ldr	r0, [r7, #4]
 8000ca2:	f006 fec4 	bl	8007a2e <strncmp>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d10a      	bne.n	8000cc2 <receiveControlCommand+0xca>
		uint8_t speed = atoi((char*) &rx_buffer[3]);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	3303      	adds	r3, #3
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f006 fd15 	bl	80076e0 <atoi>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	73fb      	strb	r3, [r7, #15]
		Control_SetMotorsPower(speed);
 8000cba:	7bfb      	ldrb	r3, [r7, #15]
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f000 fbed 	bl	800149c <Control_SetMotorsPower>
	}


    // Limpiar el buffer después de procesar
    memset(rx_buffer, 0, length);
 8000cc2:	887b      	ldrh	r3, [r7, #2]
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	f006 fea8 	bl	8007a1e <memset>
}
 8000cce:	3710      	adds	r7, #16
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	08008dc0 	.word	0x08008dc0
 8000cd8:	08008dc4 	.word	0x08008dc4
 8000cdc:	08008dc8 	.word	0x08008dc8
 8000ce0:	08008ddc 	.word	0x08008ddc
 8000ce4:	48000400 	.word	0x48000400
 8000ce8:	08008de4 	.word	0x08008de4
 8000cec:	08008dec 	.word	0x08008dec
 8000cf0:	08008df0 	.word	0x08008df0
 8000cf4:	08008df8 	.word	0x08008df8

08000cf8 <Control_Init>:
float mx_buffer[MOVING_AVG_SIZE] = {0};
float my_buffer[MOVING_AVG_SIZE] = {0};
float mz_buffer[MOVING_AVG_SIZE] = {0};
int buffer_index = 0;

void Control_Init(void) {
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
    Control.pid_roll.Kp = 1.0;
 8000cfc:	4b20      	ldr	r3, [pc, #128]	@ (8000d80 <Control_Init+0x88>)
 8000cfe:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000d02:	601a      	str	r2, [r3, #0]
    Control.pid_roll.Ki = 0.0;
 8000d04:	4b1e      	ldr	r3, [pc, #120]	@ (8000d80 <Control_Init+0x88>)
 8000d06:	f04f 0200 	mov.w	r2, #0
 8000d0a:	605a      	str	r2, [r3, #4]
    Control.pid_roll.Kd = 0.0;
 8000d0c:	4b1c      	ldr	r3, [pc, #112]	@ (8000d80 <Control_Init+0x88>)
 8000d0e:	f04f 0200 	mov.w	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
    Control.pid_roll.prev_error = 0.0;
 8000d14:	4b1a      	ldr	r3, [pc, #104]	@ (8000d80 <Control_Init+0x88>)
 8000d16:	f04f 0200 	mov.w	r2, #0
 8000d1a:	60da      	str	r2, [r3, #12]
    Control.pid_roll.integral = 0.0;
 8000d1c:	4b18      	ldr	r3, [pc, #96]	@ (8000d80 <Control_Init+0x88>)
 8000d1e:	f04f 0200 	mov.w	r2, #0
 8000d22:	611a      	str	r2, [r3, #16]

    Control.pid_pitch.Kp = 1.0;
 8000d24:	4b16      	ldr	r3, [pc, #88]	@ (8000d80 <Control_Init+0x88>)
 8000d26:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000d2a:	615a      	str	r2, [r3, #20]
    Control.pid_pitch.Ki = 0.0;
 8000d2c:	4b14      	ldr	r3, [pc, #80]	@ (8000d80 <Control_Init+0x88>)
 8000d2e:	f04f 0200 	mov.w	r2, #0
 8000d32:	619a      	str	r2, [r3, #24]
    Control.pid_pitch.Kd = 0.0;
 8000d34:	4b12      	ldr	r3, [pc, #72]	@ (8000d80 <Control_Init+0x88>)
 8000d36:	f04f 0200 	mov.w	r2, #0
 8000d3a:	61da      	str	r2, [r3, #28]
    Control.pid_pitch.prev_error = 0.0;
 8000d3c:	4b10      	ldr	r3, [pc, #64]	@ (8000d80 <Control_Init+0x88>)
 8000d3e:	f04f 0200 	mov.w	r2, #0
 8000d42:	621a      	str	r2, [r3, #32]
    Control.pid_pitch.integral = 0.0;
 8000d44:	4b0e      	ldr	r3, [pc, #56]	@ (8000d80 <Control_Init+0x88>)
 8000d46:	f04f 0200 	mov.w	r2, #0
 8000d4a:	625a      	str	r2, [r3, #36]	@ 0x24

    Control.pid_yaw.Kp = 1.0;
 8000d4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d80 <Control_Init+0x88>)
 8000d4e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000d52:	629a      	str	r2, [r3, #40]	@ 0x28
    Control.pid_yaw.Ki = 0.0;
 8000d54:	4b0a      	ldr	r3, [pc, #40]	@ (8000d80 <Control_Init+0x88>)
 8000d56:	f04f 0200 	mov.w	r2, #0
 8000d5a:	62da      	str	r2, [r3, #44]	@ 0x2c
    Control.pid_yaw.Kd = 0.0;
 8000d5c:	4b08      	ldr	r3, [pc, #32]	@ (8000d80 <Control_Init+0x88>)
 8000d5e:	f04f 0200 	mov.w	r2, #0
 8000d62:	631a      	str	r2, [r3, #48]	@ 0x30
    Control.pid_yaw.prev_error = 0.0;
 8000d64:	4b06      	ldr	r3, [pc, #24]	@ (8000d80 <Control_Init+0x88>)
 8000d66:	f04f 0200 	mov.w	r2, #0
 8000d6a:	635a      	str	r2, [r3, #52]	@ 0x34
    Control.pid_yaw.integral = 0.0;
 8000d6c:	4b04      	ldr	r3, [pc, #16]	@ (8000d80 <Control_Init+0x88>)
 8000d6e:	f04f 0200 	mov.w	r2, #0
 8000d72:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	20000094 	.word	0x20000094

08000d84 <Control_ArmMotors>:

void Control_ArmMotors() {
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
	printf("Hadoken");
 8000d88:	4815      	ldr	r0, [pc, #84]	@ (8000de0 <Control_ArmMotors+0x5c>)
 8000d8a:	f006 fdf3 	bl	8007974 <iprintf>
    Control.motor_control.motor1_speed = MOTOR_MAX_SPEED;
 8000d8e:	4b15      	ldr	r3, [pc, #84]	@ (8000de4 <Control_ArmMotors+0x60>)
 8000d90:	22c8      	movs	r2, #200	@ 0xc8
 8000d92:	63da      	str	r2, [r3, #60]	@ 0x3c
    Control.motor_control.motor2_speed = MOTOR_MAX_SPEED;
 8000d94:	4b13      	ldr	r3, [pc, #76]	@ (8000de4 <Control_ArmMotors+0x60>)
 8000d96:	22c8      	movs	r2, #200	@ 0xc8
 8000d98:	641a      	str	r2, [r3, #64]	@ 0x40
    Control.motor_control.motor3_speed = MOTOR_MAX_SPEED;
 8000d9a:	4b12      	ldr	r3, [pc, #72]	@ (8000de4 <Control_ArmMotors+0x60>)
 8000d9c:	22c8      	movs	r2, #200	@ 0xc8
 8000d9e:	645a      	str	r2, [r3, #68]	@ 0x44
    Control.motor_control.motor4_speed = MOTOR_MAX_SPEED;
 8000da0:	4b10      	ldr	r3, [pc, #64]	@ (8000de4 <Control_ArmMotors+0x60>)
 8000da2:	22c8      	movs	r2, #200	@ 0xc8
 8000da4:	649a      	str	r2, [r3, #72]	@ 0x48
    Control_SetMotorSpeeds();
 8000da6:	f000 fb25 	bl	80013f4 <Control_SetMotorSpeeds>
    HAL_Delay(3000);
 8000daa:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000dae:	f001 fb85 	bl	80024bc <HAL_Delay>
    Control.motor_control.motor1_speed = MOTOR_MIN_SPEED;
 8000db2:	4b0c      	ldr	r3, [pc, #48]	@ (8000de4 <Control_ArmMotors+0x60>)
 8000db4:	2264      	movs	r2, #100	@ 0x64
 8000db6:	63da      	str	r2, [r3, #60]	@ 0x3c
    Control.motor_control.motor2_speed = MOTOR_MIN_SPEED;
 8000db8:	4b0a      	ldr	r3, [pc, #40]	@ (8000de4 <Control_ArmMotors+0x60>)
 8000dba:	2264      	movs	r2, #100	@ 0x64
 8000dbc:	641a      	str	r2, [r3, #64]	@ 0x40
    Control.motor_control.motor3_speed = MOTOR_MIN_SPEED;
 8000dbe:	4b09      	ldr	r3, [pc, #36]	@ (8000de4 <Control_ArmMotors+0x60>)
 8000dc0:	2264      	movs	r2, #100	@ 0x64
 8000dc2:	645a      	str	r2, [r3, #68]	@ 0x44
    Control.motor_control.motor4_speed = MOTOR_MIN_SPEED;
 8000dc4:	4b07      	ldr	r3, [pc, #28]	@ (8000de4 <Control_ArmMotors+0x60>)
 8000dc6:	2264      	movs	r2, #100	@ 0x64
 8000dc8:	649a      	str	r2, [r3, #72]	@ 0x48
    Control_SetMotorSpeeds();
 8000dca:	f000 fb13 	bl	80013f4 <Control_SetMotorSpeeds>
    HAL_Delay(3000);
 8000dce:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000dd2:	f001 fb73 	bl	80024bc <HAL_Delay>

    printData("Motors armed\n");
 8000dd6:	4804      	ldr	r0, [pc, #16]	@ (8000de8 <Control_ArmMotors+0x64>)
 8000dd8:	f000 ffc0 	bl	8001d5c <printData>
}
 8000ddc:	bf00      	nop
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	08008dfc 	.word	0x08008dfc
 8000de4:	20000094 	.word	0x20000094
 8000de8:	08008e04 	.word	0x08008e04

08000dec <Control_Update>:

void Control_Update(void) {
 8000dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dee:	b08d      	sub	sp, #52	@ 0x34
 8000df0:	af06      	add	r7, sp, #24
	struct girodata_t giro;

	Sensor_Read(&giro);
 8000df2:	1d3b      	adds	r3, r7, #4
 8000df4:	4618      	mov	r0, r3
 8000df6:	f000 fc81 	bl	80016fc <Sensor_Read>
	printf("AX: %i, AY: %i, AZ: %i, GX: %i, GY: %i, GZ: %i, MX: %i, MY: %i, MZ: %i\n", giro.ax, giro.ay, giro.az, giro.gx, giro.gy, giro.gz, giro.mx, giro.my, giro.mz);
 8000dfa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000dfe:	461e      	mov	r6, r3
 8000e00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e04:	469c      	mov	ip, r3
 8000e06:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000e0a:	469e      	mov	lr, r3
 8000e0c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000e10:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000e14:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8000e18:	f9b7 0010 	ldrsh.w	r0, [r7, #16]
 8000e1c:	f9b7 4012 	ldrsh.w	r4, [r7, #18]
 8000e20:	f9b7 5014 	ldrsh.w	r5, [r7, #20]
 8000e24:	9505      	str	r5, [sp, #20]
 8000e26:	9404      	str	r4, [sp, #16]
 8000e28:	9003      	str	r0, [sp, #12]
 8000e2a:	9102      	str	r1, [sp, #8]
 8000e2c:	9201      	str	r2, [sp, #4]
 8000e2e:	9300      	str	r3, [sp, #0]
 8000e30:	4673      	mov	r3, lr
 8000e32:	4662      	mov	r2, ip
 8000e34:	4631      	mov	r1, r6
 8000e36:	4806      	ldr	r0, [pc, #24]	@ (8000e50 <Control_Update+0x64>)
 8000e38:	f006 fd9c 	bl	8007974 <iprintf>
    Control_Compute(&giro);
 8000e3c:	1d3b      	adds	r3, r7, #4
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f000 f80a 	bl	8000e58 <Control_Compute>

    Control_SetMotorSpeeds();
 8000e44:	f000 fad6 	bl	80013f4 <Control_SetMotorSpeeds>
}
 8000e48:	bf00      	nop
 8000e4a:	371c      	adds	r7, #28
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e50:	08008e14 	.word	0x08008e14
 8000e54:	00000000 	.word	0x00000000

08000e58 <Control_Compute>:

void Control_Compute(struct girodata_t* giro) {
 8000e58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000e5c:	b090      	sub	sp, #64	@ 0x40
 8000e5e:	af04      	add	r7, sp, #16
 8000e60:	6078      	str	r0, [r7, #4]
    // Filtro complementario para roll y pitch
    float roll_acc = atan2(giro->ay, giro->az) * 180.0 / M_PI;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff fb5b 	bl	8000524 <__aeabi_i2d>
 8000e6e:	4604      	mov	r4, r0
 8000e70:	460d      	mov	r5, r1
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff fb53 	bl	8000524 <__aeabi_i2d>
 8000e7e:	4602      	mov	r2, r0
 8000e80:	460b      	mov	r3, r1
 8000e82:	ec43 2b11 	vmov	d1, r2, r3
 8000e86:	ec45 4b10 	vmov	d0, r4, r5
 8000e8a:	f007 fbf3 	bl	8008674 <atan2>
 8000e8e:	ec51 0b10 	vmov	r0, r1, d0
 8000e92:	f04f 0200 	mov.w	r2, #0
 8000e96:	4b96      	ldr	r3, [pc, #600]	@ (80010f0 <Control_Compute+0x298>)
 8000e98:	f7ff fbae 	bl	80005f8 <__aeabi_dmul>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	4610      	mov	r0, r2
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	a38a      	add	r3, pc, #552	@ (adr r3, 80010d0 <Control_Compute+0x278>)
 8000ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eaa:	f7ff fccf 	bl	800084c <__aeabi_ddiv>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	4610      	mov	r0, r2
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	f7ff fe4f 	bl	8000b58 <__aeabi_d2f>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	61fb      	str	r3, [r7, #28]
    float pitch_acc = atan2(-giro->ax, sqrt(giro->ay * giro->ay + giro->az * giro->az)) * 180.0 / M_PI;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ec4:	425b      	negs	r3, r3
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff fb2c 	bl	8000524 <__aeabi_i2d>
 8000ecc:	4604      	mov	r4, r0
 8000ece:	460d      	mov	r5, r1
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000ede:	fb03 f202 	mul.w	r2, r3, r2
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000ee8:	4619      	mov	r1, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000ef0:	fb01 f303 	mul.w	r3, r1, r3
 8000ef4:	4413      	add	r3, r2
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff fb14 	bl	8000524 <__aeabi_i2d>
 8000efc:	4602      	mov	r2, r0
 8000efe:	460b      	mov	r3, r1
 8000f00:	ec43 2b10 	vmov	d0, r2, r3
 8000f04:	f007 fbb8 	bl	8008678 <sqrt>
 8000f08:	eeb0 7a40 	vmov.f32	s14, s0
 8000f0c:	eef0 7a60 	vmov.f32	s15, s1
 8000f10:	eeb0 1a47 	vmov.f32	s2, s14
 8000f14:	eef0 1a67 	vmov.f32	s3, s15
 8000f18:	ec45 4b10 	vmov	d0, r4, r5
 8000f1c:	f007 fbaa 	bl	8008674 <atan2>
 8000f20:	ec51 0b10 	vmov	r0, r1, d0
 8000f24:	f04f 0200 	mov.w	r2, #0
 8000f28:	4b71      	ldr	r3, [pc, #452]	@ (80010f0 <Control_Compute+0x298>)
 8000f2a:	f7ff fb65 	bl	80005f8 <__aeabi_dmul>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	460b      	mov	r3, r1
 8000f32:	4610      	mov	r0, r2
 8000f34:	4619      	mov	r1, r3
 8000f36:	a366      	add	r3, pc, #408	@ (adr r3, 80010d0 <Control_Compute+0x278>)
 8000f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f3c:	f7ff fc86 	bl	800084c <__aeabi_ddiv>
 8000f40:	4602      	mov	r2, r0
 8000f42:	460b      	mov	r3, r1
 8000f44:	4610      	mov	r0, r2
 8000f46:	4619      	mov	r1, r3
 8000f48:	f7ff fe06 	bl	8000b58 <__aeabi_d2f>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	61bb      	str	r3, [r7, #24]

    roll_filtered = ALPHA * (roll_filtered + giro->gx * 0.01) + (1 - ALPHA) * roll_acc;
 8000f50:	4b68      	ldr	r3, [pc, #416]	@ (80010f4 <Control_Compute+0x29c>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff faf7 	bl	8000548 <__aeabi_f2d>
 8000f5a:	4604      	mov	r4, r0
 8000f5c:	460d      	mov	r5, r1
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff fadd 	bl	8000524 <__aeabi_i2d>
 8000f6a:	a35b      	add	r3, pc, #364	@ (adr r3, 80010d8 <Control_Compute+0x280>)
 8000f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f70:	f7ff fb42 	bl	80005f8 <__aeabi_dmul>
 8000f74:	4602      	mov	r2, r0
 8000f76:	460b      	mov	r3, r1
 8000f78:	4620      	mov	r0, r4
 8000f7a:	4629      	mov	r1, r5
 8000f7c:	f7ff f986 	bl	800028c <__adddf3>
 8000f80:	4602      	mov	r2, r0
 8000f82:	460b      	mov	r3, r1
 8000f84:	4610      	mov	r0, r2
 8000f86:	4619      	mov	r1, r3
 8000f88:	a355      	add	r3, pc, #340	@ (adr r3, 80010e0 <Control_Compute+0x288>)
 8000f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f8e:	f7ff fb33 	bl	80005f8 <__aeabi_dmul>
 8000f92:	4602      	mov	r2, r0
 8000f94:	460b      	mov	r3, r1
 8000f96:	4614      	mov	r4, r2
 8000f98:	461d      	mov	r5, r3
 8000f9a:	69f8      	ldr	r0, [r7, #28]
 8000f9c:	f7ff fad4 	bl	8000548 <__aeabi_f2d>
 8000fa0:	a351      	add	r3, pc, #324	@ (adr r3, 80010e8 <Control_Compute+0x290>)
 8000fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa6:	f7ff fb27 	bl	80005f8 <__aeabi_dmul>
 8000faa:	4602      	mov	r2, r0
 8000fac:	460b      	mov	r3, r1
 8000fae:	4620      	mov	r0, r4
 8000fb0:	4629      	mov	r1, r5
 8000fb2:	f7ff f96b 	bl	800028c <__adddf3>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	460b      	mov	r3, r1
 8000fba:	4610      	mov	r0, r2
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	f7ff fdcb 	bl	8000b58 <__aeabi_d2f>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	4a4b      	ldr	r2, [pc, #300]	@ (80010f4 <Control_Compute+0x29c>)
 8000fc6:	6013      	str	r3, [r2, #0]
    pitch_filtered = ALPHA * (pitch_filtered + giro->gy * 0.01) + (1 - ALPHA) * pitch_acc;
 8000fc8:	4b4b      	ldr	r3, [pc, #300]	@ (80010f8 <Control_Compute+0x2a0>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff fabb 	bl	8000548 <__aeabi_f2d>
 8000fd2:	4604      	mov	r4, r0
 8000fd4:	460d      	mov	r5, r1
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff faa1 	bl	8000524 <__aeabi_i2d>
 8000fe2:	a33d      	add	r3, pc, #244	@ (adr r3, 80010d8 <Control_Compute+0x280>)
 8000fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe8:	f7ff fb06 	bl	80005f8 <__aeabi_dmul>
 8000fec:	4602      	mov	r2, r0
 8000fee:	460b      	mov	r3, r1
 8000ff0:	4620      	mov	r0, r4
 8000ff2:	4629      	mov	r1, r5
 8000ff4:	f7ff f94a 	bl	800028c <__adddf3>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	4610      	mov	r0, r2
 8000ffe:	4619      	mov	r1, r3
 8001000:	a337      	add	r3, pc, #220	@ (adr r3, 80010e0 <Control_Compute+0x288>)
 8001002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001006:	f7ff faf7 	bl	80005f8 <__aeabi_dmul>
 800100a:	4602      	mov	r2, r0
 800100c:	460b      	mov	r3, r1
 800100e:	4614      	mov	r4, r2
 8001010:	461d      	mov	r5, r3
 8001012:	69b8      	ldr	r0, [r7, #24]
 8001014:	f7ff fa98 	bl	8000548 <__aeabi_f2d>
 8001018:	a333      	add	r3, pc, #204	@ (adr r3, 80010e8 <Control_Compute+0x290>)
 800101a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101e:	f7ff faeb 	bl	80005f8 <__aeabi_dmul>
 8001022:	4602      	mov	r2, r0
 8001024:	460b      	mov	r3, r1
 8001026:	4620      	mov	r0, r4
 8001028:	4629      	mov	r1, r5
 800102a:	f7ff f92f 	bl	800028c <__adddf3>
 800102e:	4602      	mov	r2, r0
 8001030:	460b      	mov	r3, r1
 8001032:	4610      	mov	r0, r2
 8001034:	4619      	mov	r1, r3
 8001036:	f7ff fd8f 	bl	8000b58 <__aeabi_d2f>
 800103a:	4603      	mov	r3, r0
 800103c:	4a2e      	ldr	r2, [pc, #184]	@ (80010f8 <Control_Compute+0x2a0>)
 800103e:	6013      	str	r3, [r2, #0]

    // Filtro de promedio móvil para yaw (usando magnetómetro)
    mx_buffer[buffer_index] = giro->mx;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8001046:	4b2d      	ldr	r3, [pc, #180]	@ (80010fc <Control_Compute+0x2a4>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	ee07 2a90 	vmov	s15, r2
 800104e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001052:	4a2b      	ldr	r2, [pc, #172]	@ (8001100 <Control_Compute+0x2a8>)
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	4413      	add	r3, r2
 8001058:	edc3 7a00 	vstr	s15, [r3]
    my_buffer[buffer_index] = giro->my;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8001062:	4b26      	ldr	r3, [pc, #152]	@ (80010fc <Control_Compute+0x2a4>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	ee07 2a90 	vmov	s15, r2
 800106a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800106e:	4a25      	ldr	r2, [pc, #148]	@ (8001104 <Control_Compute+0x2ac>)
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	4413      	add	r3, r2
 8001074:	edc3 7a00 	vstr	s15, [r3]
    mz_buffer[buffer_index] = giro->mz;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 800107e:	4b1f      	ldr	r3, [pc, #124]	@ (80010fc <Control_Compute+0x2a4>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	ee07 2a90 	vmov	s15, r2
 8001086:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800108a:	4a1f      	ldr	r2, [pc, #124]	@ (8001108 <Control_Compute+0x2b0>)
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	4413      	add	r3, r2
 8001090:	edc3 7a00 	vstr	s15, [r3]
    buffer_index = (buffer_index + 1) % MOVING_AVG_SIZE;
 8001094:	4b19      	ldr	r3, [pc, #100]	@ (80010fc <Control_Compute+0x2a4>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	1c59      	adds	r1, r3, #1
 800109a:	4b1c      	ldr	r3, [pc, #112]	@ (800110c <Control_Compute+0x2b4>)
 800109c:	fb83 2301 	smull	r2, r3, r3, r1
 80010a0:	105a      	asrs	r2, r3, #1
 80010a2:	17cb      	asrs	r3, r1, #31
 80010a4:	1ad2      	subs	r2, r2, r3
 80010a6:	4613      	mov	r3, r2
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	4413      	add	r3, r2
 80010ac:	1aca      	subs	r2, r1, r3
 80010ae:	4b13      	ldr	r3, [pc, #76]	@ (80010fc <Control_Compute+0x2a4>)
 80010b0:	601a      	str	r2, [r3, #0]

    float mx_avg = 0, my_avg = 0, mz_avg = 0;
 80010b2:	f04f 0300 	mov.w	r3, #0
 80010b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80010b8:	f04f 0300 	mov.w	r3, #0
 80010bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80010be:	f04f 0300 	mov.w	r3, #0
 80010c2:	627b      	str	r3, [r7, #36]	@ 0x24
    for (int i = 0; i < MOVING_AVG_SIZE; i++) {
 80010c4:	2300      	movs	r3, #0
 80010c6:	623b      	str	r3, [r7, #32]
 80010c8:	e049      	b.n	800115e <Control_Compute+0x306>
 80010ca:	bf00      	nop
 80010cc:	f3af 8000 	nop.w
 80010d0:	54442d18 	.word	0x54442d18
 80010d4:	400921fb 	.word	0x400921fb
 80010d8:	47ae147b 	.word	0x47ae147b
 80010dc:	3f847ae1 	.word	0x3f847ae1
 80010e0:	f5c28f5c 	.word	0xf5c28f5c
 80010e4:	3fef5c28 	.word	0x3fef5c28
 80010e8:	47ae1480 	.word	0x47ae1480
 80010ec:	3f947ae1 	.word	0x3f947ae1
 80010f0:	40668000 	.word	0x40668000
 80010f4:	200000e0 	.word	0x200000e0
 80010f8:	200000e4 	.word	0x200000e4
 80010fc:	20000128 	.word	0x20000128
 8001100:	200000ec 	.word	0x200000ec
 8001104:	20000100 	.word	0x20000100
 8001108:	20000114 	.word	0x20000114
 800110c:	66666667 	.word	0x66666667
        mx_avg += mx_buffer[i];
 8001110:	4a79      	ldr	r2, [pc, #484]	@ (80012f8 <Control_Compute+0x4a0>)
 8001112:	6a3b      	ldr	r3, [r7, #32]
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	4413      	add	r3, r2
 8001118:	edd3 7a00 	vldr	s15, [r3]
 800111c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001120:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001124:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        my_avg += my_buffer[i];
 8001128:	4a74      	ldr	r2, [pc, #464]	@ (80012fc <Control_Compute+0x4a4>)
 800112a:	6a3b      	ldr	r3, [r7, #32]
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	4413      	add	r3, r2
 8001130:	edd3 7a00 	vldr	s15, [r3]
 8001134:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001138:	ee77 7a27 	vadd.f32	s15, s14, s15
 800113c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
        mz_avg += mz_buffer[i];
 8001140:	4a6f      	ldr	r2, [pc, #444]	@ (8001300 <Control_Compute+0x4a8>)
 8001142:	6a3b      	ldr	r3, [r7, #32]
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	4413      	add	r3, r2
 8001148:	edd3 7a00 	vldr	s15, [r3]
 800114c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001150:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001154:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    for (int i = 0; i < MOVING_AVG_SIZE; i++) {
 8001158:	6a3b      	ldr	r3, [r7, #32]
 800115a:	3301      	adds	r3, #1
 800115c:	623b      	str	r3, [r7, #32]
 800115e:	6a3b      	ldr	r3, [r7, #32]
 8001160:	2b04      	cmp	r3, #4
 8001162:	ddd5      	ble.n	8001110 <Control_Compute+0x2b8>
    }
    mx_avg /= MOVING_AVG_SIZE;
 8001164:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001168:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 800116c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001170:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    my_avg /= MOVING_AVG_SIZE;
 8001174:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001178:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 800117c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001180:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    mz_avg /= MOVING_AVG_SIZE;
 8001184:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001188:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 800118c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001190:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    yaw_filtered = atan2(my_avg, mx_avg) * 180.0 / M_PI;
 8001194:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001196:	f7ff f9d7 	bl	8000548 <__aeabi_f2d>
 800119a:	4604      	mov	r4, r0
 800119c:	460d      	mov	r5, r1
 800119e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80011a0:	f7ff f9d2 	bl	8000548 <__aeabi_f2d>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	ec43 2b11 	vmov	d1, r2, r3
 80011ac:	ec45 4b10 	vmov	d0, r4, r5
 80011b0:	f007 fa60 	bl	8008674 <atan2>
 80011b4:	ec51 0b10 	vmov	r0, r1, d0
 80011b8:	f04f 0200 	mov.w	r2, #0
 80011bc:	4b51      	ldr	r3, [pc, #324]	@ (8001304 <Control_Compute+0x4ac>)
 80011be:	f7ff fa1b 	bl	80005f8 <__aeabi_dmul>
 80011c2:	4602      	mov	r2, r0
 80011c4:	460b      	mov	r3, r1
 80011c6:	4610      	mov	r0, r2
 80011c8:	4619      	mov	r1, r3
 80011ca:	a349      	add	r3, pc, #292	@ (adr r3, 80012f0 <Control_Compute+0x498>)
 80011cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d0:	f7ff fb3c 	bl	800084c <__aeabi_ddiv>
 80011d4:	4602      	mov	r2, r0
 80011d6:	460b      	mov	r3, r1
 80011d8:	4610      	mov	r0, r2
 80011da:	4619      	mov	r1, r3
 80011dc:	f7ff fcbc 	bl	8000b58 <__aeabi_d2f>
 80011e0:	4603      	mov	r3, r0
 80011e2:	4a49      	ldr	r2, [pc, #292]	@ (8001308 <Control_Compute+0x4b0>)
 80011e4:	6013      	str	r3, [r2, #0]

    // Error de cada eje
    float roll_error = 0 - roll_filtered;
 80011e6:	4b49      	ldr	r3, [pc, #292]	@ (800130c <Control_Compute+0x4b4>)
 80011e8:	edd3 7a00 	vldr	s15, [r3]
 80011ec:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8001310 <Control_Compute+0x4b8>
 80011f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011f4:	edc7 7a05 	vstr	s15, [r7, #20]
    float pitch_error = 0 - pitch_filtered;
 80011f8:	4b46      	ldr	r3, [pc, #280]	@ (8001314 <Control_Compute+0x4bc>)
 80011fa:	edd3 7a00 	vldr	s15, [r3]
 80011fe:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8001310 <Control_Compute+0x4b8>
 8001202:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001206:	edc7 7a04 	vstr	s15, [r7, #16]
    float yaw_error = 0 - yaw_filtered;
 800120a:	4b3f      	ldr	r3, [pc, #252]	@ (8001308 <Control_Compute+0x4b0>)
 800120c:	edd3 7a00 	vldr	s15, [r3]
 8001210:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8001310 <Control_Compute+0x4b8>
 8001214:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001218:	edc7 7a03 	vstr	s15, [r7, #12]

    printf("Roll: %d, Pitch: %d, Yaw: %d\n", roll_filtered, pitch_filtered, yaw_filtered);
 800121c:	4b3b      	ldr	r3, [pc, #236]	@ (800130c <Control_Compute+0x4b4>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff f991 	bl	8000548 <__aeabi_f2d>
 8001226:	4680      	mov	r8, r0
 8001228:	4689      	mov	r9, r1
 800122a:	4b3a      	ldr	r3, [pc, #232]	@ (8001314 <Control_Compute+0x4bc>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff f98a 	bl	8000548 <__aeabi_f2d>
 8001234:	4604      	mov	r4, r0
 8001236:	460d      	mov	r5, r1
 8001238:	4b33      	ldr	r3, [pc, #204]	@ (8001308 <Control_Compute+0x4b0>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff f983 	bl	8000548 <__aeabi_f2d>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800124a:	e9cd 4500 	strd	r4, r5, [sp]
 800124e:	4642      	mov	r2, r8
 8001250:	464b      	mov	r3, r9
 8001252:	4831      	ldr	r0, [pc, #196]	@ (8001318 <Control_Compute+0x4c0>)
 8001254:	f006 fb8e 	bl	8007974 <iprintf>

    Control.motor_control.motor1_speed = pidCompute(&Control.pid_roll, roll_error);
 8001258:	ed97 0a05 	vldr	s0, [r7, #20]
 800125c:	482f      	ldr	r0, [pc, #188]	@ (800131c <Control_Compute+0x4c4>)
 800125e:	f000 f869 	bl	8001334 <pidCompute>
 8001262:	eef0 7a40 	vmov.f32	s15, s0
 8001266:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800126a:	ee17 2a90 	vmov	r2, s15
 800126e:	4b2b      	ldr	r3, [pc, #172]	@ (800131c <Control_Compute+0x4c4>)
 8001270:	63da      	str	r2, [r3, #60]	@ 0x3c
    Control.motor_control.motor2_speed = pidCompute(&Control.pid_pitch, pitch_error);
 8001272:	ed97 0a04 	vldr	s0, [r7, #16]
 8001276:	482a      	ldr	r0, [pc, #168]	@ (8001320 <Control_Compute+0x4c8>)
 8001278:	f000 f85c 	bl	8001334 <pidCompute>
 800127c:	eef0 7a40 	vmov.f32	s15, s0
 8001280:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001284:	ee17 2a90 	vmov	r2, s15
 8001288:	4b24      	ldr	r3, [pc, #144]	@ (800131c <Control_Compute+0x4c4>)
 800128a:	641a      	str	r2, [r3, #64]	@ 0x40
    Control.motor_control.motor3_speed = pidCompute(&Control.pid_yaw, yaw_error);
 800128c:	ed97 0a03 	vldr	s0, [r7, #12]
 8001290:	4824      	ldr	r0, [pc, #144]	@ (8001324 <Control_Compute+0x4cc>)
 8001292:	f000 f84f 	bl	8001334 <pidCompute>
 8001296:	eef0 7a40 	vmov.f32	s15, s0
 800129a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800129e:	ee17 2a90 	vmov	r2, s15
 80012a2:	4b1e      	ldr	r3, [pc, #120]	@ (800131c <Control_Compute+0x4c4>)
 80012a4:	645a      	str	r2, [r3, #68]	@ 0x44
    Control.motor_control.motor4_speed = pidCompute(&Control.pid_roll, roll_error);
 80012a6:	ed97 0a05 	vldr	s0, [r7, #20]
 80012aa:	481c      	ldr	r0, [pc, #112]	@ (800131c <Control_Compute+0x4c4>)
 80012ac:	f000 f842 	bl	8001334 <pidCompute>
 80012b0:	eef0 7a40 	vmov.f32	s15, s0
 80012b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012b8:	ee17 2a90 	vmov	r2, s15
 80012bc:	4b17      	ldr	r3, [pc, #92]	@ (800131c <Control_Compute+0x4c4>)
 80012be:	649a      	str	r2, [r3, #72]	@ 0x48

    printf("Motor 1 speed: %d\n", Control.motor_control.motor1_speed);
 80012c0:	4b16      	ldr	r3, [pc, #88]	@ (800131c <Control_Compute+0x4c4>)
 80012c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012c4:	4619      	mov	r1, r3
 80012c6:	4818      	ldr	r0, [pc, #96]	@ (8001328 <Control_Compute+0x4d0>)
 80012c8:	f006 fb54 	bl	8007974 <iprintf>
    printf("Motor 2 speed: %d\n", Control.motor_control.motor2_speed);
 80012cc:	4b13      	ldr	r3, [pc, #76]	@ (800131c <Control_Compute+0x4c4>)
 80012ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d0:	4619      	mov	r1, r3
 80012d2:	4816      	ldr	r0, [pc, #88]	@ (800132c <Control_Compute+0x4d4>)
 80012d4:	f006 fb4e 	bl	8007974 <iprintf>
    printf("Motor 3 speed: %d\n", Control.motor_control.motor3_speed);
 80012d8:	4b10      	ldr	r3, [pc, #64]	@ (800131c <Control_Compute+0x4c4>)
 80012da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012dc:	4619      	mov	r1, r3
 80012de:	4814      	ldr	r0, [pc, #80]	@ (8001330 <Control_Compute+0x4d8>)
 80012e0:	f006 fb48 	bl	8007974 <iprintf>

}
 80012e4:	bf00      	nop
 80012e6:	3730      	adds	r7, #48	@ 0x30
 80012e8:	46bd      	mov	sp, r7
 80012ea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80012ee:	bf00      	nop
 80012f0:	54442d18 	.word	0x54442d18
 80012f4:	400921fb 	.word	0x400921fb
 80012f8:	200000ec 	.word	0x200000ec
 80012fc:	20000100 	.word	0x20000100
 8001300:	20000114 	.word	0x20000114
 8001304:	40668000 	.word	0x40668000
 8001308:	200000e8 	.word	0x200000e8
 800130c:	200000e0 	.word	0x200000e0
 8001310:	00000000 	.word	0x00000000
 8001314:	200000e4 	.word	0x200000e4
 8001318:	08008e5c 	.word	0x08008e5c
 800131c:	20000094 	.word	0x20000094
 8001320:	200000a8 	.word	0x200000a8
 8001324:	200000bc 	.word	0x200000bc
 8001328:	08008e7c 	.word	0x08008e7c
 800132c:	08008e90 	.word	0x08008e90
 8001330:	08008ea4 	.word	0x08008ea4

08001334 <pidCompute>:

float pidCompute(PID* pid, float error) {
 8001334:	b480      	push	{r7}
 8001336:	b085      	sub	sp, #20
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	ed87 0a00 	vstr	s0, [r7]
    pid->integral += error;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	ed93 7a04 	vldr	s14, [r3, #16]
 8001346:	edd7 7a00 	vldr	s15, [r7]
 800134a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	edc3 7a04 	vstr	s15, [r3, #16]
    float derivative = error - pid->prev_error;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	edd3 7a03 	vldr	s15, [r3, #12]
 800135a:	ed97 7a00 	vldr	s14, [r7]
 800135e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001362:	edc7 7a02 	vstr	s15, [r7, #8]

    float output = pid->Kp * error + pid->Ki * pid->integral + pid->Kd * derivative;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	ed93 7a00 	vldr	s14, [r3]
 800136c:	edd7 7a00 	vldr	s15, [r7]
 8001370:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	edd3 6a01 	vldr	s13, [r3, #4]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001380:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001384:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	edd3 6a02 	vldr	s13, [r3, #8]
 800138e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001392:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001396:	ee77 7a27 	vadd.f32	s15, s14, s15
 800139a:	edc7 7a03 	vstr	s15, [r7, #12]

    pid->prev_error = error;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	683a      	ldr	r2, [r7, #0]
 80013a2:	60da      	str	r2, [r3, #12]

    if (output > MOTOR_MAX_SPEED) output = MOTOR_MAX_SPEED;
 80013a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80013a8:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80013e4 <pidCompute+0xb0>
 80013ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013b4:	dd01      	ble.n	80013ba <pidCompute+0x86>
 80013b6:	4b0c      	ldr	r3, [pc, #48]	@ (80013e8 <pidCompute+0xb4>)
 80013b8:	60fb      	str	r3, [r7, #12]
    if (output < MOTOR_MIN_SPEED) output = MOTOR_MIN_SPEED;
 80013ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80013be:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80013ec <pidCompute+0xb8>
 80013c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ca:	d501      	bpl.n	80013d0 <pidCompute+0x9c>
 80013cc:	4b08      	ldr	r3, [pc, #32]	@ (80013f0 <pidCompute+0xbc>)
 80013ce:	60fb      	str	r3, [r7, #12]

    return output;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	ee07 3a90 	vmov	s15, r3
}
 80013d6:	eeb0 0a67 	vmov.f32	s0, s15
 80013da:	3714      	adds	r7, #20
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	43480000 	.word	0x43480000
 80013e8:	43480000 	.word	0x43480000
 80013ec:	42c80000 	.word	0x42c80000
 80013f0:	42c80000 	.word	0x42c80000

080013f4 <Control_SetMotorSpeeds>:

void Control_SetMotorSpeeds(void) {
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af02      	add	r7, sp, #8
    int motor1_speed = (Control.motor_control.motor1_speed < 0) ? 0 : (Control.motor_control.motor1_speed > MOTOR_MAX_SPEED ? MOTOR_MAX_SPEED : Control.motor_control.motor1_speed);
 80013fa:	4b25      	ldr	r3, [pc, #148]	@ (8001490 <Control_SetMotorSpeeds+0x9c>)
 80013fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013fe:	2b00      	cmp	r3, #0
 8001400:	db05      	blt.n	800140e <Control_SetMotorSpeeds+0x1a>
 8001402:	4b23      	ldr	r3, [pc, #140]	@ (8001490 <Control_SetMotorSpeeds+0x9c>)
 8001404:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001406:	2bc8      	cmp	r3, #200	@ 0xc8
 8001408:	bfa8      	it	ge
 800140a:	23c8      	movge	r3, #200	@ 0xc8
 800140c:	e000      	b.n	8001410 <Control_SetMotorSpeeds+0x1c>
 800140e:	2300      	movs	r3, #0
 8001410:	60fb      	str	r3, [r7, #12]
    int motor2_speed = (Control.motor_control.motor2_speed < 0) ? 0 : (Control.motor_control.motor2_speed > MOTOR_MAX_SPEED ? MOTOR_MAX_SPEED : Control.motor_control.motor2_speed);
 8001412:	4b1f      	ldr	r3, [pc, #124]	@ (8001490 <Control_SetMotorSpeeds+0x9c>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001416:	2b00      	cmp	r3, #0
 8001418:	db05      	blt.n	8001426 <Control_SetMotorSpeeds+0x32>
 800141a:	4b1d      	ldr	r3, [pc, #116]	@ (8001490 <Control_SetMotorSpeeds+0x9c>)
 800141c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800141e:	2bc8      	cmp	r3, #200	@ 0xc8
 8001420:	bfa8      	it	ge
 8001422:	23c8      	movge	r3, #200	@ 0xc8
 8001424:	e000      	b.n	8001428 <Control_SetMotorSpeeds+0x34>
 8001426:	2300      	movs	r3, #0
 8001428:	60bb      	str	r3, [r7, #8]
    int motor3_speed = (Control.motor_control.motor3_speed < 0) ? 0 : (Control.motor_control.motor3_speed > MOTOR_MAX_SPEED ? MOTOR_MAX_SPEED : Control.motor_control.motor3_speed);
 800142a:	4b19      	ldr	r3, [pc, #100]	@ (8001490 <Control_SetMotorSpeeds+0x9c>)
 800142c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800142e:	2b00      	cmp	r3, #0
 8001430:	db05      	blt.n	800143e <Control_SetMotorSpeeds+0x4a>
 8001432:	4b17      	ldr	r3, [pc, #92]	@ (8001490 <Control_SetMotorSpeeds+0x9c>)
 8001434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001436:	2bc8      	cmp	r3, #200	@ 0xc8
 8001438:	bfa8      	it	ge
 800143a:	23c8      	movge	r3, #200	@ 0xc8
 800143c:	e000      	b.n	8001440 <Control_SetMotorSpeeds+0x4c>
 800143e:	2300      	movs	r3, #0
 8001440:	607b      	str	r3, [r7, #4]
    int motor4_speed = (Control.motor_control.motor4_speed < 0) ? 0 : (Control.motor_control.motor4_speed > MOTOR_MAX_SPEED ? MOTOR_MAX_SPEED : Control.motor_control.motor4_speed);
 8001442:	4b13      	ldr	r3, [pc, #76]	@ (8001490 <Control_SetMotorSpeeds+0x9c>)
 8001444:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001446:	2b00      	cmp	r3, #0
 8001448:	db05      	blt.n	8001456 <Control_SetMotorSpeeds+0x62>
 800144a:	4b11      	ldr	r3, [pc, #68]	@ (8001490 <Control_SetMotorSpeeds+0x9c>)
 800144c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800144e:	2bc8      	cmp	r3, #200	@ 0xc8
 8001450:	bfa8      	it	ge
 8001452:	23c8      	movge	r3, #200	@ 0xc8
 8001454:	e000      	b.n	8001458 <Control_SetMotorSpeeds+0x64>
 8001456:	2300      	movs	r3, #0
 8001458:	603b      	str	r3, [r7, #0]

    TIM1->CCR1 = motor1_speed;
 800145a:	4a0e      	ldr	r2, [pc, #56]	@ (8001494 <Control_SetMotorSpeeds+0xa0>)
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	6353      	str	r3, [r2, #52]	@ 0x34
    TIM1->CCR4 = motor2_speed;
 8001460:	4a0c      	ldr	r2, [pc, #48]	@ (8001494 <Control_SetMotorSpeeds+0xa0>)
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	6413      	str	r3, [r2, #64]	@ 0x40
    TIM2->CCR1 = motor3_speed;
 8001466:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6353      	str	r3, [r2, #52]	@ 0x34
    TIM2->CCR2 = motor4_speed;
 800146e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	6393      	str	r3, [r2, #56]	@ 0x38

    printf("Motor Speeds: %d, %d, %d, %d\n", motor1_speed, motor2_speed, motor3_speed, motor4_speed);
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	9300      	str	r3, [sp, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	68ba      	ldr	r2, [r7, #8]
 800147e:	68f9      	ldr	r1, [r7, #12]
 8001480:	4805      	ldr	r0, [pc, #20]	@ (8001498 <Control_SetMotorSpeeds+0xa4>)
 8001482:	f006 fa77 	bl	8007974 <iprintf>
}
 8001486:	bf00      	nop
 8001488:	3710      	adds	r7, #16
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20000094 	.word	0x20000094
 8001494:	40012c00 	.word	0x40012c00
 8001498:	08008eb8 	.word	0x08008eb8

0800149c <Control_SetMotorsPower>:

void Control_SetMotorsPower(uint8_t base_power_percentage) {
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	71fb      	strb	r3, [r7, #7]
    if (base_power_percentage < 0) base_power_percentage = 0;
    if (base_power_percentage > 100) base_power_percentage = 100;
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	2b64      	cmp	r3, #100	@ 0x64
 80014aa:	d901      	bls.n	80014b0 <Control_SetMotorsPower+0x14>
 80014ac:	2364      	movs	r3, #100	@ 0x64
 80014ae:	71fb      	strb	r3, [r7, #7]

    printf("Base power percentage: %d\n", base_power_percentage);
 80014b0:	79fb      	ldrb	r3, [r7, #7]
 80014b2:	4619      	mov	r1, r3
 80014b4:	480d      	ldr	r0, [pc, #52]	@ (80014ec <Control_SetMotorsPower+0x50>)
 80014b6:	f006 fa5d 	bl	8007974 <iprintf>

    int base_power = MOTOR_MIN_SPEED + ((MOTOR_MAX_SPEED - MOTOR_MIN_SPEED) * base_power_percentage) / 100;
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	3364      	adds	r3, #100	@ 0x64
 80014be:	60fb      	str	r3, [r7, #12]

    printf("Base power: %d\n", base_power);
 80014c0:	68f9      	ldr	r1, [r7, #12]
 80014c2:	480b      	ldr	r0, [pc, #44]	@ (80014f0 <Control_SetMotorsPower+0x54>)
 80014c4:	f006 fa56 	bl	8007974 <iprintf>
    Control.motor_control.motor1_speed = base_power;
 80014c8:	4a0a      	ldr	r2, [pc, #40]	@ (80014f4 <Control_SetMotorsPower+0x58>)
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	63d3      	str	r3, [r2, #60]	@ 0x3c
    Control.motor_control.motor2_speed = base_power;
 80014ce:	4a09      	ldr	r2, [pc, #36]	@ (80014f4 <Control_SetMotorsPower+0x58>)
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	6413      	str	r3, [r2, #64]	@ 0x40
    Control.motor_control.motor3_speed = base_power;
 80014d4:	4a07      	ldr	r2, [pc, #28]	@ (80014f4 <Control_SetMotorsPower+0x58>)
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	6453      	str	r3, [r2, #68]	@ 0x44
    Control.motor_control.motor4_speed = base_power;
 80014da:	4a06      	ldr	r2, [pc, #24]	@ (80014f4 <Control_SetMotorsPower+0x58>)
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	6493      	str	r3, [r2, #72]	@ 0x48

    Control_Update();
 80014e0:	f7ff fc84 	bl	8000dec <Control_Update>
}
 80014e4:	bf00      	nop
 80014e6:	3710      	adds	r7, #16
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	08008ed8 	.word	0x08008ed8
 80014f0:	08008ef4 	.word	0x08008ef4
 80014f4:	20000094 	.word	0x20000094

080014f8 <Control_Stop>:
    printf("Motor 2 speed: %d\n", Control.motor_control.motor2_speed);
    printf("Motor 3 speed: %d\n", Control.motor_control.motor3_speed);
    printf("Motor 4 speed: %d\n", Control.motor_control.motor4_speed);
}

void Control_Stop(void) {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
    Control.motor_control.motor1_speed = 0;
 80014fc:	4b09      	ldr	r3, [pc, #36]	@ (8001524 <Control_Stop+0x2c>)
 80014fe:	2200      	movs	r2, #0
 8001500:	63da      	str	r2, [r3, #60]	@ 0x3c
    Control.motor_control.motor2_speed = 0;
 8001502:	4b08      	ldr	r3, [pc, #32]	@ (8001524 <Control_Stop+0x2c>)
 8001504:	2200      	movs	r2, #0
 8001506:	641a      	str	r2, [r3, #64]	@ 0x40
    Control.motor_control.motor3_speed = 0;
 8001508:	4b06      	ldr	r3, [pc, #24]	@ (8001524 <Control_Stop+0x2c>)
 800150a:	2200      	movs	r2, #0
 800150c:	645a      	str	r2, [r3, #68]	@ 0x44
    Control.motor_control.motor4_speed = 0;
 800150e:	4b05      	ldr	r3, [pc, #20]	@ (8001524 <Control_Stop+0x2c>)
 8001510:	2200      	movs	r2, #0
 8001512:	649a      	str	r2, [r3, #72]	@ 0x48

    Control_Update();
 8001514:	f7ff fc6a 	bl	8000dec <Control_Update>
    printData("Motors stopped\n");
 8001518:	4803      	ldr	r0, [pc, #12]	@ (8001528 <Control_Stop+0x30>)
 800151a:	f000 fc1f 	bl	8001d5c <printData>
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20000094 	.word	0x20000094
 8001528:	08008f18 	.word	0x08008f18

0800152c <GY85_Init>:


extern I2C_HandleTypeDef hi2c1;


void GY85_Init() {
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af04      	add	r7, sp, #16
    uint8_t data;

    // Inicializar el acelerómetro (ADXL345)
    data = 0x08; // Encender el sensor
 8001532:	2308      	movs	r3, #8
 8001534:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, (ADXL345_ADDR << 1), 0x2D, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8001536:	f04f 33ff 	mov.w	r3, #4294967295
 800153a:	9302      	str	r3, [sp, #8]
 800153c:	2301      	movs	r3, #1
 800153e:	9301      	str	r3, [sp, #4]
 8001540:	1dfb      	adds	r3, r7, #7
 8001542:	9300      	str	r3, [sp, #0]
 8001544:	2301      	movs	r3, #1
 8001546:	222d      	movs	r2, #45	@ 0x2d
 8001548:	21a6      	movs	r1, #166	@ 0xa6
 800154a:	481a      	ldr	r0, [pc, #104]	@ (80015b4 <GY85_Init+0x88>)
 800154c:	f001 fb8e 	bl	8002c6c <HAL_I2C_Mem_Write>

    // Inicializar el magnetómetro (HMC5883L)
    // Configurar el Configuration Register A (0x00)
    data = 0x70; // 8 muestras promedio, salida a 15 Hz
 8001550:	2370      	movs	r3, #112	@ 0x70
 8001552:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, (HMC5883L_ADDR << 1), 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8001554:	f04f 33ff 	mov.w	r3, #4294967295
 8001558:	9302      	str	r3, [sp, #8]
 800155a:	2301      	movs	r3, #1
 800155c:	9301      	str	r3, [sp, #4]
 800155e:	1dfb      	adds	r3, r7, #7
 8001560:	9300      	str	r3, [sp, #0]
 8001562:	2301      	movs	r3, #1
 8001564:	2200      	movs	r2, #0
 8001566:	213c      	movs	r1, #60	@ 0x3c
 8001568:	4812      	ldr	r0, [pc, #72]	@ (80015b4 <GY85_Init+0x88>)
 800156a:	f001 fb7f 	bl	8002c6c <HAL_I2C_Mem_Write>

    // Configurar el Mode Register (0x02) para modo continuo
    data = 0x00; // Modo continuo
 800156e:	2300      	movs	r3, #0
 8001570:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, (HMC5883L_ADDR << 1), 0x02, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8001572:	f04f 33ff 	mov.w	r3, #4294967295
 8001576:	9302      	str	r3, [sp, #8]
 8001578:	2301      	movs	r3, #1
 800157a:	9301      	str	r3, [sp, #4]
 800157c:	1dfb      	adds	r3, r7, #7
 800157e:	9300      	str	r3, [sp, #0]
 8001580:	2301      	movs	r3, #1
 8001582:	2202      	movs	r2, #2
 8001584:	213c      	movs	r1, #60	@ 0x3c
 8001586:	480b      	ldr	r0, [pc, #44]	@ (80015b4 <GY85_Init+0x88>)
 8001588:	f001 fb70 	bl	8002c6c <HAL_I2C_Mem_Write>

    // Inicializar el giroscopio (ITG-3205)
    data = 0x00; // Configuración estándar
 800158c:	2300      	movs	r3, #0
 800158e:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, (ITG3205_ADDR << 1), 0x3E, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8001590:	f04f 33ff 	mov.w	r3, #4294967295
 8001594:	9302      	str	r3, [sp, #8]
 8001596:	2301      	movs	r3, #1
 8001598:	9301      	str	r3, [sp, #4]
 800159a:	1dfb      	adds	r3, r7, #7
 800159c:	9300      	str	r3, [sp, #0]
 800159e:	2301      	movs	r3, #1
 80015a0:	223e      	movs	r2, #62	@ 0x3e
 80015a2:	21d0      	movs	r1, #208	@ 0xd0
 80015a4:	4803      	ldr	r0, [pc, #12]	@ (80015b4 <GY85_Init+0x88>)
 80015a6:	f001 fb61 	bl	8002c6c <HAL_I2C_Mem_Write>
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	2000012c 	.word	0x2000012c

080015b8 <ADXL345_ReadData>:


void ADXL345_ReadData(int16_t *x, int16_t *y, int16_t *z) {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b08a      	sub	sp, #40	@ 0x28
 80015bc:	af04      	add	r7, sp, #16
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
    uint8_t buffer[6];
    HAL_I2C_Mem_Read(&hi2c1, (ADXL345_ADDR << 1), 0x32, I2C_MEMADD_SIZE_8BIT, buffer, 6, HAL_MAX_DELAY);
 80015c4:	f04f 33ff 	mov.w	r3, #4294967295
 80015c8:	9302      	str	r3, [sp, #8]
 80015ca:	2306      	movs	r3, #6
 80015cc:	9301      	str	r3, [sp, #4]
 80015ce:	f107 0310 	add.w	r3, r7, #16
 80015d2:	9300      	str	r3, [sp, #0]
 80015d4:	2301      	movs	r3, #1
 80015d6:	2232      	movs	r2, #50	@ 0x32
 80015d8:	21a6      	movs	r1, #166	@ 0xa6
 80015da:	4811      	ldr	r0, [pc, #68]	@ (8001620 <ADXL345_ReadData+0x68>)
 80015dc:	f001 fc5a 	bl	8002e94 <HAL_I2C_Mem_Read>
    *x = (int16_t)((buffer[1] << 8) | buffer[0]);
 80015e0:	7c7b      	ldrb	r3, [r7, #17]
 80015e2:	021b      	lsls	r3, r3, #8
 80015e4:	b21a      	sxth	r2, r3
 80015e6:	7c3b      	ldrb	r3, [r7, #16]
 80015e8:	b21b      	sxth	r3, r3
 80015ea:	4313      	orrs	r3, r2
 80015ec:	b21a      	sxth	r2, r3
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	801a      	strh	r2, [r3, #0]
    *y = (int16_t)((buffer[3] << 8) | buffer[2]);
 80015f2:	7cfb      	ldrb	r3, [r7, #19]
 80015f4:	021b      	lsls	r3, r3, #8
 80015f6:	b21a      	sxth	r2, r3
 80015f8:	7cbb      	ldrb	r3, [r7, #18]
 80015fa:	b21b      	sxth	r3, r3
 80015fc:	4313      	orrs	r3, r2
 80015fe:	b21a      	sxth	r2, r3
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	801a      	strh	r2, [r3, #0]
    *z = (int16_t)((buffer[5] << 8) | buffer[4]);
 8001604:	7d7b      	ldrb	r3, [r7, #21]
 8001606:	021b      	lsls	r3, r3, #8
 8001608:	b21a      	sxth	r2, r3
 800160a:	7d3b      	ldrb	r3, [r7, #20]
 800160c:	b21b      	sxth	r3, r3
 800160e:	4313      	orrs	r3, r2
 8001610:	b21a      	sxth	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	801a      	strh	r2, [r3, #0]
}
 8001616:	bf00      	nop
 8001618:	3718      	adds	r7, #24
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	2000012c 	.word	0x2000012c

08001624 <HMC5883L_ReadData>:

void HMC5883L_ReadData(int16_t *x, int16_t *y, int16_t *z) {
 8001624:	b580      	push	{r7, lr}
 8001626:	b08a      	sub	sp, #40	@ 0x28
 8001628:	af04      	add	r7, sp, #16
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
    uint8_t buffer[6];
    HAL_I2C_Mem_Read(&hi2c1, (HMC5883L_ADDR << 1), 0x03, I2C_MEMADD_SIZE_8BIT, buffer, 6, HAL_MAX_DELAY);
 8001630:	f04f 33ff 	mov.w	r3, #4294967295
 8001634:	9302      	str	r3, [sp, #8]
 8001636:	2306      	movs	r3, #6
 8001638:	9301      	str	r3, [sp, #4]
 800163a:	f107 0310 	add.w	r3, r7, #16
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	2301      	movs	r3, #1
 8001642:	2203      	movs	r2, #3
 8001644:	213c      	movs	r1, #60	@ 0x3c
 8001646:	4811      	ldr	r0, [pc, #68]	@ (800168c <HMC5883L_ReadData+0x68>)
 8001648:	f001 fc24 	bl	8002e94 <HAL_I2C_Mem_Read>
    *x = (int16_t)((buffer[0] << 8) | buffer[1]);
 800164c:	7c3b      	ldrb	r3, [r7, #16]
 800164e:	021b      	lsls	r3, r3, #8
 8001650:	b21a      	sxth	r2, r3
 8001652:	7c7b      	ldrb	r3, [r7, #17]
 8001654:	b21b      	sxth	r3, r3
 8001656:	4313      	orrs	r3, r2
 8001658:	b21a      	sxth	r2, r3
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	801a      	strh	r2, [r3, #0]
    *z = (int16_t)((buffer[2] << 8) | buffer[3]);
 800165e:	7cbb      	ldrb	r3, [r7, #18]
 8001660:	021b      	lsls	r3, r3, #8
 8001662:	b21a      	sxth	r2, r3
 8001664:	7cfb      	ldrb	r3, [r7, #19]
 8001666:	b21b      	sxth	r3, r3
 8001668:	4313      	orrs	r3, r2
 800166a:	b21a      	sxth	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	801a      	strh	r2, [r3, #0]
    *y = (int16_t)((buffer[4] << 8) | buffer[5]);
 8001670:	7d3b      	ldrb	r3, [r7, #20]
 8001672:	021b      	lsls	r3, r3, #8
 8001674:	b21a      	sxth	r2, r3
 8001676:	7d7b      	ldrb	r3, [r7, #21]
 8001678:	b21b      	sxth	r3, r3
 800167a:	4313      	orrs	r3, r2
 800167c:	b21a      	sxth	r2, r3
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	801a      	strh	r2, [r3, #0]
}
 8001682:	bf00      	nop
 8001684:	3718      	adds	r7, #24
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	2000012c 	.word	0x2000012c

08001690 <ITG3205_ReadData>:

void ITG3205_ReadData(int16_t *x, int16_t *y, int16_t *z) {
 8001690:	b580      	push	{r7, lr}
 8001692:	b08a      	sub	sp, #40	@ 0x28
 8001694:	af04      	add	r7, sp, #16
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	60b9      	str	r1, [r7, #8]
 800169a:	607a      	str	r2, [r7, #4]
    uint8_t buffer[6];
    HAL_I2C_Mem_Read(&hi2c1, (ITG3205_ADDR << 1), 0x1D, I2C_MEMADD_SIZE_8BIT, buffer, 6, HAL_MAX_DELAY);
 800169c:	f04f 33ff 	mov.w	r3, #4294967295
 80016a0:	9302      	str	r3, [sp, #8]
 80016a2:	2306      	movs	r3, #6
 80016a4:	9301      	str	r3, [sp, #4]
 80016a6:	f107 0310 	add.w	r3, r7, #16
 80016aa:	9300      	str	r3, [sp, #0]
 80016ac:	2301      	movs	r3, #1
 80016ae:	221d      	movs	r2, #29
 80016b0:	21d0      	movs	r1, #208	@ 0xd0
 80016b2:	4811      	ldr	r0, [pc, #68]	@ (80016f8 <ITG3205_ReadData+0x68>)
 80016b4:	f001 fbee 	bl	8002e94 <HAL_I2C_Mem_Read>
    *x = (int16_t)((buffer[0] << 8) | buffer[1]);
 80016b8:	7c3b      	ldrb	r3, [r7, #16]
 80016ba:	021b      	lsls	r3, r3, #8
 80016bc:	b21a      	sxth	r2, r3
 80016be:	7c7b      	ldrb	r3, [r7, #17]
 80016c0:	b21b      	sxth	r3, r3
 80016c2:	4313      	orrs	r3, r2
 80016c4:	b21a      	sxth	r2, r3
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	801a      	strh	r2, [r3, #0]
    *y = (int16_t)((buffer[2] << 8) | buffer[3]);
 80016ca:	7cbb      	ldrb	r3, [r7, #18]
 80016cc:	021b      	lsls	r3, r3, #8
 80016ce:	b21a      	sxth	r2, r3
 80016d0:	7cfb      	ldrb	r3, [r7, #19]
 80016d2:	b21b      	sxth	r3, r3
 80016d4:	4313      	orrs	r3, r2
 80016d6:	b21a      	sxth	r2, r3
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	801a      	strh	r2, [r3, #0]
    *z = (int16_t)((buffer[4] << 8) | buffer[5]);
 80016dc:	7d3b      	ldrb	r3, [r7, #20]
 80016de:	021b      	lsls	r3, r3, #8
 80016e0:	b21a      	sxth	r2, r3
 80016e2:	7d7b      	ldrb	r3, [r7, #21]
 80016e4:	b21b      	sxth	r3, r3
 80016e6:	4313      	orrs	r3, r2
 80016e8:	b21a      	sxth	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	801a      	strh	r2, [r3, #0]
}
 80016ee:	bf00      	nop
 80016f0:	3718      	adds	r7, #24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	2000012c 	.word	0x2000012c

080016fc <Sensor_Read>:


void Sensor_Read(struct girodata_t* giro) {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
    ADXL345_ReadData(&giro->ax, &giro->ay, &giro->az);  // Acelerómetro
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	1c99      	adds	r1, r3, #2
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	3304      	adds	r3, #4
 800170e:	461a      	mov	r2, r3
 8001710:	f7ff ff52 	bl	80015b8 <ADXL345_ReadData>
    ITG3205_ReadData(&giro->gx, &giro->gy, &giro->gz);  // Giroscopio
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	1d98      	adds	r0, r3, #6
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f103 0108 	add.w	r1, r3, #8
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	330a      	adds	r3, #10
 8001722:	461a      	mov	r2, r3
 8001724:	f7ff ffb4 	bl	8001690 <ITG3205_ReadData>
    HMC5883L_ReadData(&giro->mx, &giro->my, &giro->mz);  // Magnetómetro
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f103 000c 	add.w	r0, r3, #12
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f103 010e 	add.w	r1, r3, #14
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3310      	adds	r3, #16
 8001738:	461a      	mov	r2, r3
 800173a:	f7ff ff73 	bl	8001624 <HMC5883L_ReadData>
}
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
	...

08001748 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800174c:	f000 fe50 	bl	80023f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001750:	f000 f838 	bl	80017c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001754:	f000 fab8 	bl	8001cc8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001758:	f000 fa86 	bl	8001c68 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800175c:	f000 fa54 	bl	8001c08 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001760:	f000 f88a 	bl	8001878 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001764:	f000 f8c8 	bl	80018f8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001768:	f000 f97e 	bl	8001a68 <MX_TIM2_Init>
  MX_TIM3_Init();
 800176c:	f000 f9fe 	bl	8001b6c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  // Inicializar el sensor GY-85
  GY85_Init();
 8001770:	f7ff fedc 	bl	800152c <GY85_Init>

  Control_Init();
 8001774:	f7ff fac0 	bl	8000cf8 <Control_Init>

  HAL_UART_Receive_IT(&huart1, rx_buffer, sizeof(rx_buffer));
 8001778:	2280      	movs	r2, #128	@ 0x80
 800177a:	490d      	ldr	r1, [pc, #52]	@ (80017b0 <main+0x68>)
 800177c:	480d      	ldr	r0, [pc, #52]	@ (80017b4 <main+0x6c>)
 800177e:	f004 fe5a 	bl	8006436 <HAL_UART_Receive_IT>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001782:	2100      	movs	r1, #0
 8001784:	480c      	ldr	r0, [pc, #48]	@ (80017b8 <main+0x70>)
 8001786:	f003 fc93 	bl	80050b0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800178a:	210c      	movs	r1, #12
 800178c:	480a      	ldr	r0, [pc, #40]	@ (80017b8 <main+0x70>)
 800178e:	f003 fc8f 	bl	80050b0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001792:	2100      	movs	r1, #0
 8001794:	4809      	ldr	r0, [pc, #36]	@ (80017bc <main+0x74>)
 8001796:	f003 fc8b 	bl	80050b0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800179a:	2104      	movs	r1, #4
 800179c:	4807      	ldr	r0, [pc, #28]	@ (80017bc <main+0x74>)
 800179e:	f003 fc87 	bl	80050b0 <HAL_TIM_PWM_Start>

#if Calibrate
  Control_ArmMotors();
 80017a2:	f7ff faef 	bl	8000d84 <Control_ArmMotors>
//  Control_SetMotorsPower(100);
//  HAL_Delay(3000);
//  Control_SetMotorsPower(0);

#endif
  HAL_TIM_Base_Start_IT(&htim3);
 80017a6:	4806      	ldr	r0, [pc, #24]	@ (80017c0 <main+0x78>)
 80017a8:	f003 fbc4 	bl	8004f34 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80017ac:	bf00      	nop
 80017ae:	e7fd      	b.n	80017ac <main+0x64>
 80017b0:	20000374 	.word	0x20000374
 80017b4:	20000264 	.word	0x20000264
 80017b8:	20000180 	.word	0x20000180
 80017bc:	200001cc 	.word	0x200001cc
 80017c0:	20000218 	.word	0x20000218

080017c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b096      	sub	sp, #88	@ 0x58
 80017c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ca:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80017ce:	2228      	movs	r2, #40	@ 0x28
 80017d0:	2100      	movs	r1, #0
 80017d2:	4618      	mov	r0, r3
 80017d4:	f006 f923 	bl	8007a1e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017d8:	f107 031c 	add.w	r3, r7, #28
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	60da      	str	r2, [r3, #12]
 80017e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017e8:	1d3b      	adds	r3, r7, #4
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	605a      	str	r2, [r3, #4]
 80017f0:	609a      	str	r2, [r3, #8]
 80017f2:	60da      	str	r2, [r3, #12]
 80017f4:	611a      	str	r2, [r3, #16]
 80017f6:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017f8:	2302      	movs	r3, #2
 80017fa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017fc:	2301      	movs	r3, #1
 80017fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001800:	2310      	movs	r3, #16
 8001802:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001804:	2300      	movs	r3, #0
 8001806:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001808:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800180c:	4618      	mov	r0, r3
 800180e:	f001 ffb5 	bl	800377c <HAL_RCC_OscConfig>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001818:	f000 fb2c 	bl	8001e74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800181c:	230f      	movs	r3, #15
 800181e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001820:	2300      	movs	r3, #0
 8001822:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001824:	2300      	movs	r3, #0
 8001826:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001828:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800182c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800182e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001832:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001834:	f107 031c 	add.w	r3, r7, #28
 8001838:	2100      	movs	r1, #0
 800183a:	4618      	mov	r0, r3
 800183c:	f002 ffdc 	bl	80047f8 <HAL_RCC_ClockConfig>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8001846:	f000 fb15 	bl	8001e74 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 800184a:	f241 0321 	movw	r3, #4129	@ 0x1021
 800184e:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001850:	2300      	movs	r3, #0
 8001852:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001854:	2300      	movs	r3, #0
 8001856:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001858:	2300      	movs	r3, #0
 800185a:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800185c:	1d3b      	adds	r3, r7, #4
 800185e:	4618      	mov	r0, r3
 8001860:	f003 f9ea 	bl	8004c38 <HAL_RCCEx_PeriphCLKConfig>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800186a:	f000 fb03 	bl	8001e74 <Error_Handler>
  }
}
 800186e:	bf00      	nop
 8001870:	3758      	adds	r7, #88	@ 0x58
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
	...

08001878 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800187c:	4b1b      	ldr	r3, [pc, #108]	@ (80018ec <MX_I2C1_Init+0x74>)
 800187e:	4a1c      	ldr	r2, [pc, #112]	@ (80018f0 <MX_I2C1_Init+0x78>)
 8001880:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 8001882:	4b1a      	ldr	r3, [pc, #104]	@ (80018ec <MX_I2C1_Init+0x74>)
 8001884:	4a1b      	ldr	r2, [pc, #108]	@ (80018f4 <MX_I2C1_Init+0x7c>)
 8001886:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001888:	4b18      	ldr	r3, [pc, #96]	@ (80018ec <MX_I2C1_Init+0x74>)
 800188a:	2200      	movs	r2, #0
 800188c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800188e:	4b17      	ldr	r3, [pc, #92]	@ (80018ec <MX_I2C1_Init+0x74>)
 8001890:	2201      	movs	r2, #1
 8001892:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001894:	4b15      	ldr	r3, [pc, #84]	@ (80018ec <MX_I2C1_Init+0x74>)
 8001896:	2200      	movs	r2, #0
 8001898:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800189a:	4b14      	ldr	r3, [pc, #80]	@ (80018ec <MX_I2C1_Init+0x74>)
 800189c:	2200      	movs	r2, #0
 800189e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80018a0:	4b12      	ldr	r3, [pc, #72]	@ (80018ec <MX_I2C1_Init+0x74>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018a6:	4b11      	ldr	r3, [pc, #68]	@ (80018ec <MX_I2C1_Init+0x74>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018ac:	4b0f      	ldr	r3, [pc, #60]	@ (80018ec <MX_I2C1_Init+0x74>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018b2:	480e      	ldr	r0, [pc, #56]	@ (80018ec <MX_I2C1_Init+0x74>)
 80018b4:	f001 f93e 	bl	8002b34 <HAL_I2C_Init>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80018be:	f000 fad9 	bl	8001e74 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018c2:	2100      	movs	r1, #0
 80018c4:	4809      	ldr	r0, [pc, #36]	@ (80018ec <MX_I2C1_Init+0x74>)
 80018c6:	f001 fec1 	bl	800364c <HAL_I2CEx_ConfigAnalogFilter>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80018d0:	f000 fad0 	bl	8001e74 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80018d4:	2100      	movs	r1, #0
 80018d6:	4805      	ldr	r0, [pc, #20]	@ (80018ec <MX_I2C1_Init+0x74>)
 80018d8:	f001 ff03 	bl	80036e2 <HAL_I2CEx_ConfigDigitalFilter>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80018e2:	f000 fac7 	bl	8001e74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	2000012c 	.word	0x2000012c
 80018f0:	40005400 	.word	0x40005400
 80018f4:	00201d2b 	.word	0x00201d2b

080018f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b09a      	sub	sp, #104	@ 0x68
 80018fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018fe:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	605a      	str	r2, [r3, #4]
 8001908:	609a      	str	r2, [r3, #8]
 800190a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800190c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	605a      	str	r2, [r3, #4]
 8001916:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001918:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	60da      	str	r2, [r3, #12]
 8001926:	611a      	str	r2, [r3, #16]
 8001928:	615a      	str	r2, [r3, #20]
 800192a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800192c:	1d3b      	adds	r3, r7, #4
 800192e:	222c      	movs	r2, #44	@ 0x2c
 8001930:	2100      	movs	r1, #0
 8001932:	4618      	mov	r0, r3
 8001934:	f006 f873 	bl	8007a1e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001938:	4b49      	ldr	r3, [pc, #292]	@ (8001a60 <MX_TIM1_Init+0x168>)
 800193a:	4a4a      	ldr	r2, [pc, #296]	@ (8001a64 <MX_TIM1_Init+0x16c>)
 800193c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 800193e:	4b48      	ldr	r3, [pc, #288]	@ (8001a60 <MX_TIM1_Init+0x168>)
 8001940:	224f      	movs	r2, #79	@ 0x4f
 8001942:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001944:	4b46      	ldr	r3, [pc, #280]	@ (8001a60 <MX_TIM1_Init+0x168>)
 8001946:	2200      	movs	r2, #0
 8001948:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000-1;
 800194a:	4b45      	ldr	r3, [pc, #276]	@ (8001a60 <MX_TIM1_Init+0x168>)
 800194c:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001950:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001952:	4b43      	ldr	r3, [pc, #268]	@ (8001a60 <MX_TIM1_Init+0x168>)
 8001954:	2200      	movs	r2, #0
 8001956:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001958:	4b41      	ldr	r3, [pc, #260]	@ (8001a60 <MX_TIM1_Init+0x168>)
 800195a:	2200      	movs	r2, #0
 800195c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800195e:	4b40      	ldr	r3, [pc, #256]	@ (8001a60 <MX_TIM1_Init+0x168>)
 8001960:	2200      	movs	r2, #0
 8001962:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001964:	483e      	ldr	r0, [pc, #248]	@ (8001a60 <MX_TIM1_Init+0x168>)
 8001966:	f003 fa8d 	bl	8004e84 <HAL_TIM_Base_Init>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001970:	f000 fa80 	bl	8001e74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001974:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001978:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800197a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800197e:	4619      	mov	r1, r3
 8001980:	4837      	ldr	r0, [pc, #220]	@ (8001a60 <MX_TIM1_Init+0x168>)
 8001982:	f003 fe97 	bl	80056b4 <HAL_TIM_ConfigClockSource>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800198c:	f000 fa72 	bl	8001e74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001990:	4833      	ldr	r0, [pc, #204]	@ (8001a60 <MX_TIM1_Init+0x168>)
 8001992:	f003 fb2b 	bl	8004fec <HAL_TIM_PWM_Init>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800199c:	f000 fa6a 	bl	8001e74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019a0:	2300      	movs	r3, #0
 80019a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80019a4:	2300      	movs	r3, #0
 80019a6:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019a8:	2300      	movs	r3, #0
 80019aa:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019ac:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80019b0:	4619      	mov	r1, r3
 80019b2:	482b      	ldr	r0, [pc, #172]	@ (8001a60 <MX_TIM1_Init+0x168>)
 80019b4:	f004 fb64 	bl	8006080 <HAL_TIMEx_MasterConfigSynchronization>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80019be:	f000 fa59 	bl	8001e74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019c2:	2360      	movs	r3, #96	@ 0x60
 80019c4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80019c6:	2300      	movs	r3, #0
 80019c8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019ca:	2300      	movs	r3, #0
 80019cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019ce:	2300      	movs	r3, #0
 80019d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019d2:	2300      	movs	r3, #0
 80019d4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019d6:	2300      	movs	r3, #0
 80019d8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019da:	2300      	movs	r3, #0
 80019dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019de:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80019e2:	2200      	movs	r2, #0
 80019e4:	4619      	mov	r1, r3
 80019e6:	481e      	ldr	r0, [pc, #120]	@ (8001a60 <MX_TIM1_Init+0x168>)
 80019e8:	f003 fd50 	bl	800548c <HAL_TIM_PWM_ConfigChannel>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80019f2:	f000 fa3f 	bl	8001e74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019f6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80019fa:	220c      	movs	r2, #12
 80019fc:	4619      	mov	r1, r3
 80019fe:	4818      	ldr	r0, [pc, #96]	@ (8001a60 <MX_TIM1_Init+0x168>)
 8001a00:	f003 fd44 	bl	800548c <HAL_TIM_PWM_ConfigChannel>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001a0a:	f000 fa33 	bl	8001e74 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a12:	2300      	movs	r3, #0
 8001a14:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a16:	2300      	movs	r3, #0
 8001a18:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a22:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a26:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a30:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a34:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a3e:	1d3b      	adds	r3, r7, #4
 8001a40:	4619      	mov	r1, r3
 8001a42:	4807      	ldr	r0, [pc, #28]	@ (8001a60 <MX_TIM1_Init+0x168>)
 8001a44:	f004 fb8a 	bl	800615c <HAL_TIMEx_ConfigBreakDeadTime>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8001a4e:	f000 fa11 	bl	8001e74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a52:	4803      	ldr	r0, [pc, #12]	@ (8001a60 <MX_TIM1_Init+0x168>)
 8001a54:	f000 fac8 	bl	8001fe8 <HAL_TIM_MspPostInit>

}
 8001a58:	bf00      	nop
 8001a5a:	3768      	adds	r7, #104	@ 0x68
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	20000180 	.word	0x20000180
 8001a64:	40012c00 	.word	0x40012c00

08001a68 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b08e      	sub	sp, #56	@ 0x38
 8001a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a6e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	605a      	str	r2, [r3, #4]
 8001a78:	609a      	str	r2, [r3, #8]
 8001a7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a7c:	f107 031c 	add.w	r3, r7, #28
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a88:	463b      	mov	r3, r7
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	605a      	str	r2, [r3, #4]
 8001a90:	609a      	str	r2, [r3, #8]
 8001a92:	60da      	str	r2, [r3, #12]
 8001a94:	611a      	str	r2, [r3, #16]
 8001a96:	615a      	str	r2, [r3, #20]
 8001a98:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a9a:	4b33      	ldr	r3, [pc, #204]	@ (8001b68 <MX_TIM2_Init+0x100>)
 8001a9c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001aa0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 8001aa2:	4b31      	ldr	r3, [pc, #196]	@ (8001b68 <MX_TIM2_Init+0x100>)
 8001aa4:	224f      	movs	r2, #79	@ 0x4f
 8001aa6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aa8:	4b2f      	ldr	r3, [pc, #188]	@ (8001b68 <MX_TIM2_Init+0x100>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 8001aae:	4b2e      	ldr	r3, [pc, #184]	@ (8001b68 <MX_TIM2_Init+0x100>)
 8001ab0:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001ab4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ab6:	4b2c      	ldr	r3, [pc, #176]	@ (8001b68 <MX_TIM2_Init+0x100>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001abc:	4b2a      	ldr	r3, [pc, #168]	@ (8001b68 <MX_TIM2_Init+0x100>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ac2:	4829      	ldr	r0, [pc, #164]	@ (8001b68 <MX_TIM2_Init+0x100>)
 8001ac4:	f003 f9de 	bl	8004e84 <HAL_TIM_Base_Init>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001ace:	f000 f9d1 	bl	8001e74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ad2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ad6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ad8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001adc:	4619      	mov	r1, r3
 8001ade:	4822      	ldr	r0, [pc, #136]	@ (8001b68 <MX_TIM2_Init+0x100>)
 8001ae0:	f003 fde8 	bl	80056b4 <HAL_TIM_ConfigClockSource>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001aea:	f000 f9c3 	bl	8001e74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001aee:	481e      	ldr	r0, [pc, #120]	@ (8001b68 <MX_TIM2_Init+0x100>)
 8001af0:	f003 fa7c 	bl	8004fec <HAL_TIM_PWM_Init>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001afa:	f000 f9bb 	bl	8001e74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001afe:	2300      	movs	r3, #0
 8001b00:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b02:	2300      	movs	r3, #0
 8001b04:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b06:	f107 031c 	add.w	r3, r7, #28
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4816      	ldr	r0, [pc, #88]	@ (8001b68 <MX_TIM2_Init+0x100>)
 8001b0e:	f004 fab7 	bl	8006080 <HAL_TIMEx_MasterConfigSynchronization>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001b18:	f000 f9ac 	bl	8001e74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b1c:	2360      	movs	r3, #96	@ 0x60
 8001b1e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001b20:	2300      	movs	r3, #0
 8001b22:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b24:	2300      	movs	r3, #0
 8001b26:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b2c:	463b      	mov	r3, r7
 8001b2e:	2200      	movs	r2, #0
 8001b30:	4619      	mov	r1, r3
 8001b32:	480d      	ldr	r0, [pc, #52]	@ (8001b68 <MX_TIM2_Init+0x100>)
 8001b34:	f003 fcaa 	bl	800548c <HAL_TIM_PWM_ConfigChannel>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001b3e:	f000 f999 	bl	8001e74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b42:	463b      	mov	r3, r7
 8001b44:	2204      	movs	r2, #4
 8001b46:	4619      	mov	r1, r3
 8001b48:	4807      	ldr	r0, [pc, #28]	@ (8001b68 <MX_TIM2_Init+0x100>)
 8001b4a:	f003 fc9f 	bl	800548c <HAL_TIM_PWM_ConfigChannel>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8001b54:	f000 f98e 	bl	8001e74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001b58:	4803      	ldr	r0, [pc, #12]	@ (8001b68 <MX_TIM2_Init+0x100>)
 8001b5a:	f000 fa45 	bl	8001fe8 <HAL_TIM_MspPostInit>

}
 8001b5e:	bf00      	nop
 8001b60:	3738      	adds	r7, #56	@ 0x38
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	200001cc 	.word	0x200001cc

08001b6c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b088      	sub	sp, #32
 8001b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b72:	f107 0310 	add.w	r3, r7, #16
 8001b76:	2200      	movs	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	605a      	str	r2, [r3, #4]
 8001b7c:	609a      	str	r2, [r3, #8]
 8001b7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b80:	1d3b      	adds	r3, r7, #4
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	605a      	str	r2, [r3, #4]
 8001b88:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b8a:	4b1d      	ldr	r3, [pc, #116]	@ (8001c00 <MX_TIM3_Init+0x94>)
 8001b8c:	4a1d      	ldr	r2, [pc, #116]	@ (8001c04 <MX_TIM3_Init+0x98>)
 8001b8e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8-1;
 8001b90:	4b1b      	ldr	r3, [pc, #108]	@ (8001c00 <MX_TIM3_Init+0x94>)
 8001b92:	2207      	movs	r2, #7
 8001b94:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b96:	4b1a      	ldr	r3, [pc, #104]	@ (8001c00 <MX_TIM3_Init+0x94>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001b9c:	4b18      	ldr	r3, [pc, #96]	@ (8001c00 <MX_TIM3_Init+0x94>)
 8001b9e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001ba2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ba4:	4b16      	ldr	r3, [pc, #88]	@ (8001c00 <MX_TIM3_Init+0x94>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001baa:	4b15      	ldr	r3, [pc, #84]	@ (8001c00 <MX_TIM3_Init+0x94>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001bb0:	4813      	ldr	r0, [pc, #76]	@ (8001c00 <MX_TIM3_Init+0x94>)
 8001bb2:	f003 f967 	bl	8004e84 <HAL_TIM_Base_Init>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001bbc:	f000 f95a 	bl	8001e74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bc0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bc4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001bc6:	f107 0310 	add.w	r3, r7, #16
 8001bca:	4619      	mov	r1, r3
 8001bcc:	480c      	ldr	r0, [pc, #48]	@ (8001c00 <MX_TIM3_Init+0x94>)
 8001bce:	f003 fd71 	bl	80056b4 <HAL_TIM_ConfigClockSource>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001bd8:	f000 f94c 	bl	8001e74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001be0:	2300      	movs	r3, #0
 8001be2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001be4:	1d3b      	adds	r3, r7, #4
 8001be6:	4619      	mov	r1, r3
 8001be8:	4805      	ldr	r0, [pc, #20]	@ (8001c00 <MX_TIM3_Init+0x94>)
 8001bea:	f004 fa49 	bl	8006080 <HAL_TIMEx_MasterConfigSynchronization>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001bf4:	f000 f93e 	bl	8001e74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001bf8:	bf00      	nop
 8001bfa:	3720      	adds	r7, #32
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	20000218 	.word	0x20000218
 8001c04:	40000400 	.word	0x40000400

08001c08 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c0c:	4b14      	ldr	r3, [pc, #80]	@ (8001c60 <MX_USART1_UART_Init+0x58>)
 8001c0e:	4a15      	ldr	r2, [pc, #84]	@ (8001c64 <MX_USART1_UART_Init+0x5c>)
 8001c10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001c12:	4b13      	ldr	r3, [pc, #76]	@ (8001c60 <MX_USART1_UART_Init+0x58>)
 8001c14:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001c18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c1a:	4b11      	ldr	r3, [pc, #68]	@ (8001c60 <MX_USART1_UART_Init+0x58>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c20:	4b0f      	ldr	r3, [pc, #60]	@ (8001c60 <MX_USART1_UART_Init+0x58>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c26:	4b0e      	ldr	r3, [pc, #56]	@ (8001c60 <MX_USART1_UART_Init+0x58>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c60 <MX_USART1_UART_Init+0x58>)
 8001c2e:	220c      	movs	r2, #12
 8001c30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c32:	4b0b      	ldr	r3, [pc, #44]	@ (8001c60 <MX_USART1_UART_Init+0x58>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c38:	4b09      	ldr	r3, [pc, #36]	@ (8001c60 <MX_USART1_UART_Init+0x58>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c3e:	4b08      	ldr	r3, [pc, #32]	@ (8001c60 <MX_USART1_UART_Init+0x58>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c44:	4b06      	ldr	r3, [pc, #24]	@ (8001c60 <MX_USART1_UART_Init+0x58>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c4a:	4805      	ldr	r0, [pc, #20]	@ (8001c60 <MX_USART1_UART_Init+0x58>)
 8001c4c:	f004 fb1c 	bl	8006288 <HAL_UART_Init>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001c56:	f000 f90d 	bl	8001e74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	20000264 	.word	0x20000264
 8001c64:	40013800 	.word	0x40013800

08001c68 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c6c:	4b14      	ldr	r3, [pc, #80]	@ (8001cc0 <MX_USART2_UART_Init+0x58>)
 8001c6e:	4a15      	ldr	r2, [pc, #84]	@ (8001cc4 <MX_USART2_UART_Init+0x5c>)
 8001c70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c72:	4b13      	ldr	r3, [pc, #76]	@ (8001cc0 <MX_USART2_UART_Init+0x58>)
 8001c74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c7a:	4b11      	ldr	r3, [pc, #68]	@ (8001cc0 <MX_USART2_UART_Init+0x58>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c80:	4b0f      	ldr	r3, [pc, #60]	@ (8001cc0 <MX_USART2_UART_Init+0x58>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c86:	4b0e      	ldr	r3, [pc, #56]	@ (8001cc0 <MX_USART2_UART_Init+0x58>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc0 <MX_USART2_UART_Init+0x58>)
 8001c8e:	220c      	movs	r2, #12
 8001c90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c92:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc0 <MX_USART2_UART_Init+0x58>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c98:	4b09      	ldr	r3, [pc, #36]	@ (8001cc0 <MX_USART2_UART_Init+0x58>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c9e:	4b08      	ldr	r3, [pc, #32]	@ (8001cc0 <MX_USART2_UART_Init+0x58>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ca4:	4b06      	ldr	r3, [pc, #24]	@ (8001cc0 <MX_USART2_UART_Init+0x58>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001caa:	4805      	ldr	r0, [pc, #20]	@ (8001cc0 <MX_USART2_UART_Init+0x58>)
 8001cac:	f004 faec 	bl	8006288 <HAL_UART_Init>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001cb6:	f000 f8dd 	bl	8001e74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cba:	bf00      	nop
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	200002ec 	.word	0x200002ec
 8001cc4:	40004400 	.word	0x40004400

08001cc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b088      	sub	sp, #32
 8001ccc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cce:	f107 030c 	add.w	r3, r7, #12
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	605a      	str	r2, [r3, #4]
 8001cd8:	609a      	str	r2, [r3, #8]
 8001cda:	60da      	str	r2, [r3, #12]
 8001cdc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cde:	4b1d      	ldr	r3, [pc, #116]	@ (8001d54 <MX_GPIO_Init+0x8c>)
 8001ce0:	695b      	ldr	r3, [r3, #20]
 8001ce2:	4a1c      	ldr	r2, [pc, #112]	@ (8001d54 <MX_GPIO_Init+0x8c>)
 8001ce4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001ce8:	6153      	str	r3, [r2, #20]
 8001cea:	4b1a      	ldr	r3, [pc, #104]	@ (8001d54 <MX_GPIO_Init+0x8c>)
 8001cec:	695b      	ldr	r3, [r3, #20]
 8001cee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cf2:	60bb      	str	r3, [r7, #8]
 8001cf4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf6:	4b17      	ldr	r3, [pc, #92]	@ (8001d54 <MX_GPIO_Init+0x8c>)
 8001cf8:	695b      	ldr	r3, [r3, #20]
 8001cfa:	4a16      	ldr	r2, [pc, #88]	@ (8001d54 <MX_GPIO_Init+0x8c>)
 8001cfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d00:	6153      	str	r3, [r2, #20]
 8001d02:	4b14      	ldr	r3, [pc, #80]	@ (8001d54 <MX_GPIO_Init+0x8c>)
 8001d04:	695b      	ldr	r3, [r3, #20]
 8001d06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d0a:	607b      	str	r3, [r7, #4]
 8001d0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d0e:	4b11      	ldr	r3, [pc, #68]	@ (8001d54 <MX_GPIO_Init+0x8c>)
 8001d10:	695b      	ldr	r3, [r3, #20]
 8001d12:	4a10      	ldr	r2, [pc, #64]	@ (8001d54 <MX_GPIO_Init+0x8c>)
 8001d14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d18:	6153      	str	r3, [r2, #20]
 8001d1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d54 <MX_GPIO_Init+0x8c>)
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d22:	603b      	str	r3, [r7, #0]
 8001d24:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8001d26:	2200      	movs	r2, #0
 8001d28:	2108      	movs	r1, #8
 8001d2a:	480b      	ldr	r0, [pc, #44]	@ (8001d58 <MX_GPIO_Init+0x90>)
 8001d2c:	f000 feea 	bl	8002b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d30:	2308      	movs	r3, #8
 8001d32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d34:	2301      	movs	r3, #1
 8001d36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d40:	f107 030c 	add.w	r3, r7, #12
 8001d44:	4619      	mov	r1, r3
 8001d46:	4804      	ldr	r0, [pc, #16]	@ (8001d58 <MX_GPIO_Init+0x90>)
 8001d48:	f000 fd6a 	bl	8002820 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d4c:	bf00      	nop
 8001d4e:	3720      	adds	r7, #32
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40021000 	.word	0x40021000
 8001d58:	48000400 	.word	0x48000400

08001d5c <printData>:
/* USER CODE BEGIN 4 */




void printData(char* data) {
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)data, strlen(data), 100);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f7fe fa33 	bl	80001d0 <strlen>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	b29a      	uxth	r2, r3
 8001d6e:	2364      	movs	r3, #100	@ 0x64
 8001d70:	6879      	ldr	r1, [r7, #4]
 8001d72:	4803      	ldr	r0, [pc, #12]	@ (8001d80 <printData+0x24>)
 8001d74:	f004 fad6 	bl	8006324 <HAL_UART_Transmit>
}
 8001d78:	bf00      	nop
 8001d7a:	3708      	adds	r7, #8
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	200002ec 	.word	0x200002ec

08001d84 <_write>:

void sendData(char* data) {
  HAL_UART_Transmit(&huart1, (uint8_t*)data, strlen(data), 100);
}

int _write(int file, char *data, int len) {
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)data, len, HAL_MAX_DELAY);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	f04f 33ff 	mov.w	r3, #4294967295
 8001d98:	68b9      	ldr	r1, [r7, #8]
 8001d9a:	4804      	ldr	r0, [pc, #16]	@ (8001dac <_write+0x28>)
 8001d9c:	f004 fac2 	bl	8006324 <HAL_UART_Transmit>
    return len;
 8001da0:	687b      	ldr	r3, [r7, #4]
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	200002ec 	.word	0x200002ec

08001db0 <HAL_UART_RxCpltCallback>:


// Función que se llama cuando un byte es recibido
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
	//Control_Update();// por probar
    if (huart->Instance == USART1) {
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a27      	ldr	r2, [pc, #156]	@ (8001e5c <HAL_UART_RxCpltCallback+0xac>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d148      	bne.n	8001e54 <HAL_UART_RxCpltCallback+0xa4>
        // Almacenar el byte recibido en el buffer circular
        rx_buffer[write_index++] = temp_byte;
 8001dc2:	4b27      	ldr	r3, [pc, #156]	@ (8001e60 <HAL_UART_RxCpltCallback+0xb0>)
 8001dc4:	881b      	ldrh	r3, [r3, #0]
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	1c5a      	adds	r2, r3, #1
 8001dca:	b291      	uxth	r1, r2
 8001dcc:	4a24      	ldr	r2, [pc, #144]	@ (8001e60 <HAL_UART_RxCpltCallback+0xb0>)
 8001dce:	8011      	strh	r1, [r2, #0]
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	4b24      	ldr	r3, [pc, #144]	@ (8001e64 <HAL_UART_RxCpltCallback+0xb4>)
 8001dd4:	7819      	ldrb	r1, [r3, #0]
 8001dd6:	4b24      	ldr	r3, [pc, #144]	@ (8001e68 <HAL_UART_RxCpltCallback+0xb8>)
 8001dd8:	5499      	strb	r1, [r3, r2]

        // Asegurar que el índice no se desborde
        if (write_index >= RX_BUFFER_SIZE) {
 8001dda:	4b21      	ldr	r3, [pc, #132]	@ (8001e60 <HAL_UART_RxCpltCallback+0xb0>)
 8001ddc:	881b      	ldrh	r3, [r3, #0]
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	2b7f      	cmp	r3, #127	@ 0x7f
 8001de2:	d902      	bls.n	8001dea <HAL_UART_RxCpltCallback+0x3a>
            write_index = 0;
 8001de4:	4b1e      	ldr	r3, [pc, #120]	@ (8001e60 <HAL_UART_RxCpltCallback+0xb0>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	801a      	strh	r2, [r3, #0]
        }

        // Si el byte recibido es un delimitador (por ejemplo, '\n'), procesamos el mensaje
        if (temp_byte == '\n') {
 8001dea:	4b1e      	ldr	r3, [pc, #120]	@ (8001e64 <HAL_UART_RxCpltCallback+0xb4>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	2b0a      	cmp	r3, #10
 8001df0:	d12b      	bne.n	8001e4a <HAL_UART_RxCpltCallback+0x9a>
            // Procesar el buffer hasta la posición de lectura
            uint16_t length = (write_index > read_index) ? (write_index - read_index) : (RX_BUFFER_SIZE - read_index + write_index);
 8001df2:	4b1b      	ldr	r3, [pc, #108]	@ (8001e60 <HAL_UART_RxCpltCallback+0xb0>)
 8001df4:	881b      	ldrh	r3, [r3, #0]
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	4b1c      	ldr	r3, [pc, #112]	@ (8001e6c <HAL_UART_RxCpltCallback+0xbc>)
 8001dfa:	881b      	ldrh	r3, [r3, #0]
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d908      	bls.n	8001e14 <HAL_UART_RxCpltCallback+0x64>
 8001e02:	4b17      	ldr	r3, [pc, #92]	@ (8001e60 <HAL_UART_RxCpltCallback+0xb0>)
 8001e04:	881b      	ldrh	r3, [r3, #0]
 8001e06:	b29a      	uxth	r2, r3
 8001e08:	4b18      	ldr	r3, [pc, #96]	@ (8001e6c <HAL_UART_RxCpltCallback+0xbc>)
 8001e0a:	881b      	ldrh	r3, [r3, #0]
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	e009      	b.n	8001e28 <HAL_UART_RxCpltCallback+0x78>
 8001e14:	4b12      	ldr	r3, [pc, #72]	@ (8001e60 <HAL_UART_RxCpltCallback+0xb0>)
 8001e16:	881b      	ldrh	r3, [r3, #0]
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	4b14      	ldr	r3, [pc, #80]	@ (8001e6c <HAL_UART_RxCpltCallback+0xbc>)
 8001e1c:	881b      	ldrh	r3, [r3, #0]
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	3380      	adds	r3, #128	@ 0x80
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	81fb      	strh	r3, [r7, #14]
            receiveControlCommand(&rx_buffer[read_index], length);
 8001e2a:	4b10      	ldr	r3, [pc, #64]	@ (8001e6c <HAL_UART_RxCpltCallback+0xbc>)
 8001e2c:	881b      	ldrh	r3, [r3, #0]
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	461a      	mov	r2, r3
 8001e32:	4b0d      	ldr	r3, [pc, #52]	@ (8001e68 <HAL_UART_RxCpltCallback+0xb8>)
 8001e34:	4413      	add	r3, r2
 8001e36:	89fa      	ldrh	r2, [r7, #14]
 8001e38:	4611      	mov	r1, r2
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7fe fedc 	bl	8000bf8 <receiveControlCommand>

            // Avanzar el índice de lectura
            read_index = write_index;
 8001e40:	4b07      	ldr	r3, [pc, #28]	@ (8001e60 <HAL_UART_RxCpltCallback+0xb0>)
 8001e42:	881b      	ldrh	r3, [r3, #0]
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	4b09      	ldr	r3, [pc, #36]	@ (8001e6c <HAL_UART_RxCpltCallback+0xbc>)
 8001e48:	801a      	strh	r2, [r3, #0]
        }

        // Continuar recibiendo el siguiente byte
        HAL_UART_Receive_IT(&huart1, &temp_byte, 1);
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	4905      	ldr	r1, [pc, #20]	@ (8001e64 <HAL_UART_RxCpltCallback+0xb4>)
 8001e4e:	4808      	ldr	r0, [pc, #32]	@ (8001e70 <HAL_UART_RxCpltCallback+0xc0>)
 8001e50:	f004 faf1 	bl	8006436 <HAL_UART_Receive_IT>
    }
}
 8001e54:	bf00      	nop
 8001e56:	3710      	adds	r7, #16
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40013800 	.word	0x40013800
 8001e60:	200003f6 	.word	0x200003f6
 8001e64:	200003f4 	.word	0x200003f4
 8001e68:	20000374 	.word	0x20000374
 8001e6c:	200003f8 	.word	0x200003f8
 8001e70:	20000264 	.word	0x20000264

08001e74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e78:	b672      	cpsid	i
}
 8001e7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e7c:	bf00      	nop
 8001e7e:	e7fd      	b.n	8001e7c <Error_Handler+0x8>

08001e80 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e86:	4b0f      	ldr	r3, [pc, #60]	@ (8001ec4 <HAL_MspInit+0x44>)
 8001e88:	699b      	ldr	r3, [r3, #24]
 8001e8a:	4a0e      	ldr	r2, [pc, #56]	@ (8001ec4 <HAL_MspInit+0x44>)
 8001e8c:	f043 0301 	orr.w	r3, r3, #1
 8001e90:	6193      	str	r3, [r2, #24]
 8001e92:	4b0c      	ldr	r3, [pc, #48]	@ (8001ec4 <HAL_MspInit+0x44>)
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	607b      	str	r3, [r7, #4]
 8001e9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e9e:	4b09      	ldr	r3, [pc, #36]	@ (8001ec4 <HAL_MspInit+0x44>)
 8001ea0:	69db      	ldr	r3, [r3, #28]
 8001ea2:	4a08      	ldr	r2, [pc, #32]	@ (8001ec4 <HAL_MspInit+0x44>)
 8001ea4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ea8:	61d3      	str	r3, [r2, #28]
 8001eaa:	4b06      	ldr	r3, [pc, #24]	@ (8001ec4 <HAL_MspInit+0x44>)
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eb2:	603b      	str	r3, [r7, #0]
 8001eb4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eb6:	bf00      	nop
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	40021000 	.word	0x40021000

08001ec8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b08a      	sub	sp, #40	@ 0x28
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed0:	f107 0314 	add.w	r3, r7, #20
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	605a      	str	r2, [r3, #4]
 8001eda:	609a      	str	r2, [r3, #8]
 8001edc:	60da      	str	r2, [r3, #12]
 8001ede:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a17      	ldr	r2, [pc, #92]	@ (8001f44 <HAL_I2C_MspInit+0x7c>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d127      	bne.n	8001f3a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eea:	4b17      	ldr	r3, [pc, #92]	@ (8001f48 <HAL_I2C_MspInit+0x80>)
 8001eec:	695b      	ldr	r3, [r3, #20]
 8001eee:	4a16      	ldr	r2, [pc, #88]	@ (8001f48 <HAL_I2C_MspInit+0x80>)
 8001ef0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ef4:	6153      	str	r3, [r2, #20]
 8001ef6:	4b14      	ldr	r3, [pc, #80]	@ (8001f48 <HAL_I2C_MspInit+0x80>)
 8001ef8:	695b      	ldr	r3, [r3, #20]
 8001efa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001efe:	613b      	str	r3, [r7, #16]
 8001f00:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f02:	23c0      	movs	r3, #192	@ 0xc0
 8001f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f06:	2312      	movs	r3, #18
 8001f08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f12:	2304      	movs	r3, #4
 8001f14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f16:	f107 0314 	add.w	r3, r7, #20
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	480b      	ldr	r0, [pc, #44]	@ (8001f4c <HAL_I2C_MspInit+0x84>)
 8001f1e:	f000 fc7f 	bl	8002820 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f22:	4b09      	ldr	r3, [pc, #36]	@ (8001f48 <HAL_I2C_MspInit+0x80>)
 8001f24:	69db      	ldr	r3, [r3, #28]
 8001f26:	4a08      	ldr	r2, [pc, #32]	@ (8001f48 <HAL_I2C_MspInit+0x80>)
 8001f28:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001f2c:	61d3      	str	r3, [r2, #28]
 8001f2e:	4b06      	ldr	r3, [pc, #24]	@ (8001f48 <HAL_I2C_MspInit+0x80>)
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001f3a:	bf00      	nop
 8001f3c:	3728      	adds	r7, #40	@ 0x28
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	40005400 	.word	0x40005400
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	48000400 	.word	0x48000400

08001f50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a1f      	ldr	r2, [pc, #124]	@ (8001fdc <HAL_TIM_Base_MspInit+0x8c>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d10c      	bne.n	8001f7c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f62:	4b1f      	ldr	r3, [pc, #124]	@ (8001fe0 <HAL_TIM_Base_MspInit+0x90>)
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	4a1e      	ldr	r2, [pc, #120]	@ (8001fe0 <HAL_TIM_Base_MspInit+0x90>)
 8001f68:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001f6c:	6193      	str	r3, [r2, #24]
 8001f6e:	4b1c      	ldr	r3, [pc, #112]	@ (8001fe0 <HAL_TIM_Base_MspInit+0x90>)
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f76:	617b      	str	r3, [r7, #20]
 8001f78:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001f7a:	e02a      	b.n	8001fd2 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM2)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f84:	d10c      	bne.n	8001fa0 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f86:	4b16      	ldr	r3, [pc, #88]	@ (8001fe0 <HAL_TIM_Base_MspInit+0x90>)
 8001f88:	69db      	ldr	r3, [r3, #28]
 8001f8a:	4a15      	ldr	r2, [pc, #84]	@ (8001fe0 <HAL_TIM_Base_MspInit+0x90>)
 8001f8c:	f043 0301 	orr.w	r3, r3, #1
 8001f90:	61d3      	str	r3, [r2, #28]
 8001f92:	4b13      	ldr	r3, [pc, #76]	@ (8001fe0 <HAL_TIM_Base_MspInit+0x90>)
 8001f94:	69db      	ldr	r3, [r3, #28]
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	613b      	str	r3, [r7, #16]
 8001f9c:	693b      	ldr	r3, [r7, #16]
}
 8001f9e:	e018      	b.n	8001fd2 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a0f      	ldr	r2, [pc, #60]	@ (8001fe4 <HAL_TIM_Base_MspInit+0x94>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d113      	bne.n	8001fd2 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001faa:	4b0d      	ldr	r3, [pc, #52]	@ (8001fe0 <HAL_TIM_Base_MspInit+0x90>)
 8001fac:	69db      	ldr	r3, [r3, #28]
 8001fae:	4a0c      	ldr	r2, [pc, #48]	@ (8001fe0 <HAL_TIM_Base_MspInit+0x90>)
 8001fb0:	f043 0302 	orr.w	r3, r3, #2
 8001fb4:	61d3      	str	r3, [r2, #28]
 8001fb6:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe0 <HAL_TIM_Base_MspInit+0x90>)
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	201d      	movs	r0, #29
 8001fc8:	f000 fb77 	bl	80026ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001fcc:	201d      	movs	r0, #29
 8001fce:	f000 fb90 	bl	80026f2 <HAL_NVIC_EnableIRQ>
}
 8001fd2:	bf00      	nop
 8001fd4:	3718      	adds	r7, #24
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	40012c00 	.word	0x40012c00
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	40000400 	.word	0x40000400

08001fe8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b08a      	sub	sp, #40	@ 0x28
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff0:	f107 0314 	add.w	r3, r7, #20
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	605a      	str	r2, [r3, #4]
 8001ffa:	609a      	str	r2, [r3, #8]
 8001ffc:	60da      	str	r2, [r3, #12]
 8001ffe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a2c      	ldr	r2, [pc, #176]	@ (80020b8 <HAL_TIM_MspPostInit+0xd0>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d130      	bne.n	800206c <HAL_TIM_MspPostInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800200a:	4b2c      	ldr	r3, [pc, #176]	@ (80020bc <HAL_TIM_MspPostInit+0xd4>)
 800200c:	695b      	ldr	r3, [r3, #20]
 800200e:	4a2b      	ldr	r2, [pc, #172]	@ (80020bc <HAL_TIM_MspPostInit+0xd4>)
 8002010:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002014:	6153      	str	r3, [r2, #20]
 8002016:	4b29      	ldr	r3, [pc, #164]	@ (80020bc <HAL_TIM_MspPostInit+0xd4>)
 8002018:	695b      	ldr	r3, [r3, #20]
 800201a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800201e:	613b      	str	r3, [r7, #16]
 8002020:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002022:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002026:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002028:	2302      	movs	r3, #2
 800202a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202c:	2300      	movs	r3, #0
 800202e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002030:	2300      	movs	r3, #0
 8002032:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002034:	2306      	movs	r3, #6
 8002036:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002038:	f107 0314 	add.w	r3, r7, #20
 800203c:	4619      	mov	r1, r3
 800203e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002042:	f000 fbed 	bl	8002820 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002046:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800204a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204c:	2302      	movs	r3, #2
 800204e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002050:	2300      	movs	r3, #0
 8002052:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002054:	2300      	movs	r3, #0
 8002056:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 8002058:	230b      	movs	r3, #11
 800205a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800205c:	f107 0314 	add.w	r3, r7, #20
 8002060:	4619      	mov	r1, r3
 8002062:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002066:	f000 fbdb 	bl	8002820 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800206a:	e021      	b.n	80020b0 <HAL_TIM_MspPostInit+0xc8>
  else if(htim->Instance==TIM2)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002074:	d11c      	bne.n	80020b0 <HAL_TIM_MspPostInit+0xc8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002076:	4b11      	ldr	r3, [pc, #68]	@ (80020bc <HAL_TIM_MspPostInit+0xd4>)
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	4a10      	ldr	r2, [pc, #64]	@ (80020bc <HAL_TIM_MspPostInit+0xd4>)
 800207c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002080:	6153      	str	r3, [r2, #20]
 8002082:	4b0e      	ldr	r3, [pc, #56]	@ (80020bc <HAL_TIM_MspPostInit+0xd4>)
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800208a:	60fb      	str	r3, [r7, #12]
 800208c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800208e:	2303      	movs	r3, #3
 8002090:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002092:	2302      	movs	r3, #2
 8002094:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002096:	2300      	movs	r3, #0
 8002098:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209a:	2300      	movs	r3, #0
 800209c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800209e:	2301      	movs	r3, #1
 80020a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a2:	f107 0314 	add.w	r3, r7, #20
 80020a6:	4619      	mov	r1, r3
 80020a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020ac:	f000 fbb8 	bl	8002820 <HAL_GPIO_Init>
}
 80020b0:	bf00      	nop
 80020b2:	3728      	adds	r7, #40	@ 0x28
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40012c00 	.word	0x40012c00
 80020bc:	40021000 	.word	0x40021000

080020c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b08c      	sub	sp, #48	@ 0x30
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c8:	f107 031c 	add.w	r3, r7, #28
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	605a      	str	r2, [r3, #4]
 80020d2:	609a      	str	r2, [r3, #8]
 80020d4:	60da      	str	r2, [r3, #12]
 80020d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a37      	ldr	r2, [pc, #220]	@ (80021bc <HAL_UART_MspInit+0xfc>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d132      	bne.n	8002148 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020e2:	4b37      	ldr	r3, [pc, #220]	@ (80021c0 <HAL_UART_MspInit+0x100>)
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	4a36      	ldr	r2, [pc, #216]	@ (80021c0 <HAL_UART_MspInit+0x100>)
 80020e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020ec:	6193      	str	r3, [r2, #24]
 80020ee:	4b34      	ldr	r3, [pc, #208]	@ (80021c0 <HAL_UART_MspInit+0x100>)
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020f6:	61bb      	str	r3, [r7, #24]
 80020f8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020fa:	4b31      	ldr	r3, [pc, #196]	@ (80021c0 <HAL_UART_MspInit+0x100>)
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	4a30      	ldr	r2, [pc, #192]	@ (80021c0 <HAL_UART_MspInit+0x100>)
 8002100:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002104:	6153      	str	r3, [r2, #20]
 8002106:	4b2e      	ldr	r3, [pc, #184]	@ (80021c0 <HAL_UART_MspInit+0x100>)
 8002108:	695b      	ldr	r3, [r3, #20]
 800210a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800210e:	617b      	str	r3, [r7, #20]
 8002110:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002112:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002116:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002118:	2302      	movs	r3, #2
 800211a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211c:	2300      	movs	r3, #0
 800211e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002120:	2303      	movs	r3, #3
 8002122:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002124:	2307      	movs	r3, #7
 8002126:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002128:	f107 031c 	add.w	r3, r7, #28
 800212c:	4619      	mov	r1, r3
 800212e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002132:	f000 fb75 	bl	8002820 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002136:	2200      	movs	r2, #0
 8002138:	2100      	movs	r1, #0
 800213a:	2025      	movs	r0, #37	@ 0x25
 800213c:	f000 fabd 	bl	80026ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002140:	2025      	movs	r0, #37	@ 0x25
 8002142:	f000 fad6 	bl	80026f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002146:	e035      	b.n	80021b4 <HAL_UART_MspInit+0xf4>
  else if(huart->Instance==USART2)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a1d      	ldr	r2, [pc, #116]	@ (80021c4 <HAL_UART_MspInit+0x104>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d130      	bne.n	80021b4 <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002152:	4b1b      	ldr	r3, [pc, #108]	@ (80021c0 <HAL_UART_MspInit+0x100>)
 8002154:	69db      	ldr	r3, [r3, #28]
 8002156:	4a1a      	ldr	r2, [pc, #104]	@ (80021c0 <HAL_UART_MspInit+0x100>)
 8002158:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800215c:	61d3      	str	r3, [r2, #28]
 800215e:	4b18      	ldr	r3, [pc, #96]	@ (80021c0 <HAL_UART_MspInit+0x100>)
 8002160:	69db      	ldr	r3, [r3, #28]
 8002162:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002166:	613b      	str	r3, [r7, #16]
 8002168:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800216a:	4b15      	ldr	r3, [pc, #84]	@ (80021c0 <HAL_UART_MspInit+0x100>)
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	4a14      	ldr	r2, [pc, #80]	@ (80021c0 <HAL_UART_MspInit+0x100>)
 8002170:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002174:	6153      	str	r3, [r2, #20]
 8002176:	4b12      	ldr	r3, [pc, #72]	@ (80021c0 <HAL_UART_MspInit+0x100>)
 8002178:	695b      	ldr	r3, [r3, #20]
 800217a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8002182:	230c      	movs	r3, #12
 8002184:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002186:	2302      	movs	r3, #2
 8002188:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218a:	2300      	movs	r3, #0
 800218c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800218e:	2303      	movs	r3, #3
 8002190:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002192:	2307      	movs	r3, #7
 8002194:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002196:	f107 031c 	add.w	r3, r7, #28
 800219a:	4619      	mov	r1, r3
 800219c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021a0:	f000 fb3e 	bl	8002820 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80021a4:	2200      	movs	r2, #0
 80021a6:	2100      	movs	r1, #0
 80021a8:	2026      	movs	r0, #38	@ 0x26
 80021aa:	f000 fa86 	bl	80026ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80021ae:	2026      	movs	r0, #38	@ 0x26
 80021b0:	f000 fa9f 	bl	80026f2 <HAL_NVIC_EnableIRQ>
}
 80021b4:	bf00      	nop
 80021b6:	3730      	adds	r7, #48	@ 0x30
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40013800 	.word	0x40013800
 80021c0:	40021000 	.word	0x40021000
 80021c4:	40004400 	.word	0x40004400

080021c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021cc:	bf00      	nop
 80021ce:	e7fd      	b.n	80021cc <NMI_Handler+0x4>

080021d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021d4:	bf00      	nop
 80021d6:	e7fd      	b.n	80021d4 <HardFault_Handler+0x4>

080021d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021dc:	bf00      	nop
 80021de:	e7fd      	b.n	80021dc <MemManage_Handler+0x4>

080021e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021e4:	bf00      	nop
 80021e6:	e7fd      	b.n	80021e4 <BusFault_Handler+0x4>

080021e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021ec:	bf00      	nop
 80021ee:	e7fd      	b.n	80021ec <UsageFault_Handler+0x4>

080021f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021f4:	bf00      	nop
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021fe:	b480      	push	{r7}
 8002200:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002202:	bf00      	nop
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002210:	bf00      	nop
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr

0800221a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800221e:	f000 f92d 	bl	800247c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002222:	bf00      	nop
 8002224:	bd80      	pop	{r7, pc}
	...

08002228 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800222c:	4803      	ldr	r0, [pc, #12]	@ (800223c <TIM3_IRQHandler+0x14>)
 800222e:	f003 f82b 	bl	8005288 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  Control_Update();
 8002232:	f7fe fddb 	bl	8000dec <Control_Update>
  /* USER CODE END TIM3_IRQn 1 */
}
 8002236:	bf00      	nop
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	20000218 	.word	0x20000218

08002240 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002244:	4802      	ldr	r0, [pc, #8]	@ (8002250 <USART1_IRQHandler+0x10>)
 8002246:	f004 f93b 	bl	80064c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800224a:	bf00      	nop
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	20000264 	.word	0x20000264

08002254 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002258:	4802      	ldr	r0, [pc, #8]	@ (8002264 <USART2_IRQHandler+0x10>)
 800225a:	f004 f931 	bl	80064c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800225e:	bf00      	nop
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	200002ec 	.word	0x200002ec

08002268 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b086      	sub	sp, #24
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002274:	2300      	movs	r3, #0
 8002276:	617b      	str	r3, [r7, #20]
 8002278:	e00a      	b.n	8002290 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800227a:	f3af 8000 	nop.w
 800227e:	4601      	mov	r1, r0
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	1c5a      	adds	r2, r3, #1
 8002284:	60ba      	str	r2, [r7, #8]
 8002286:	b2ca      	uxtb	r2, r1
 8002288:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	3301      	adds	r3, #1
 800228e:	617b      	str	r3, [r7, #20]
 8002290:	697a      	ldr	r2, [r7, #20]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	429a      	cmp	r2, r3
 8002296:	dbf0      	blt.n	800227a <_read+0x12>
  }

  return len;
 8002298:	687b      	ldr	r3, [r7, #4]
}
 800229a:	4618      	mov	r0, r3
 800229c:	3718      	adds	r7, #24
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80022a2:	b480      	push	{r7}
 80022a4:	b083      	sub	sp, #12
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80022aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr

080022ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022ba:	b480      	push	{r7}
 80022bc:	b083      	sub	sp, #12
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
 80022c2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80022ca:	605a      	str	r2, [r3, #4]
  return 0;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <_isatty>:

int _isatty(int file)
{
 80022da:	b480      	push	{r7}
 80022dc:	b083      	sub	sp, #12
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022e2:	2301      	movs	r3, #1
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3714      	adds	r7, #20
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
	...

0800230c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b086      	sub	sp, #24
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002314:	4a14      	ldr	r2, [pc, #80]	@ (8002368 <_sbrk+0x5c>)
 8002316:	4b15      	ldr	r3, [pc, #84]	@ (800236c <_sbrk+0x60>)
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002320:	4b13      	ldr	r3, [pc, #76]	@ (8002370 <_sbrk+0x64>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d102      	bne.n	800232e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002328:	4b11      	ldr	r3, [pc, #68]	@ (8002370 <_sbrk+0x64>)
 800232a:	4a12      	ldr	r2, [pc, #72]	@ (8002374 <_sbrk+0x68>)
 800232c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800232e:	4b10      	ldr	r3, [pc, #64]	@ (8002370 <_sbrk+0x64>)
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4413      	add	r3, r2
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	429a      	cmp	r2, r3
 800233a:	d207      	bcs.n	800234c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800233c:	f005 fbd0 	bl	8007ae0 <__errno>
 8002340:	4603      	mov	r3, r0
 8002342:	220c      	movs	r2, #12
 8002344:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002346:	f04f 33ff 	mov.w	r3, #4294967295
 800234a:	e009      	b.n	8002360 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800234c:	4b08      	ldr	r3, [pc, #32]	@ (8002370 <_sbrk+0x64>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002352:	4b07      	ldr	r3, [pc, #28]	@ (8002370 <_sbrk+0x64>)
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4413      	add	r3, r2
 800235a:	4a05      	ldr	r2, [pc, #20]	@ (8002370 <_sbrk+0x64>)
 800235c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800235e:	68fb      	ldr	r3, [r7, #12]
}
 8002360:	4618      	mov	r0, r3
 8002362:	3718      	adds	r7, #24
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	20003000 	.word	0x20003000
 800236c:	00000400 	.word	0x00000400
 8002370:	200003fc 	.word	0x200003fc
 8002374:	20000550 	.word	0x20000550

08002378 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800237c:	4b06      	ldr	r3, [pc, #24]	@ (8002398 <SystemInit+0x20>)
 800237e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002382:	4a05      	ldr	r2, [pc, #20]	@ (8002398 <SystemInit+0x20>)
 8002384:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002388:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800238c:	bf00      	nop
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	e000ed00 	.word	0xe000ed00

0800239c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800239c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80023d4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80023a0:	f7ff ffea 	bl	8002378 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023a4:	480c      	ldr	r0, [pc, #48]	@ (80023d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80023a6:	490d      	ldr	r1, [pc, #52]	@ (80023dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80023a8:	4a0d      	ldr	r2, [pc, #52]	@ (80023e0 <LoopForever+0xe>)
  movs r3, #0
 80023aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023ac:	e002      	b.n	80023b4 <LoopCopyDataInit>

080023ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023b2:	3304      	adds	r3, #4

080023b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023b8:	d3f9      	bcc.n	80023ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023ba:	4a0a      	ldr	r2, [pc, #40]	@ (80023e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80023bc:	4c0a      	ldr	r4, [pc, #40]	@ (80023e8 <LoopForever+0x16>)
  movs r3, #0
 80023be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023c0:	e001      	b.n	80023c6 <LoopFillZerobss>

080023c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023c4:	3204      	adds	r2, #4

080023c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023c8:	d3fb      	bcc.n	80023c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023ca:	f005 fb8f 	bl	8007aec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023ce:	f7ff f9bb 	bl	8001748 <main>

080023d2 <LoopForever>:

LoopForever:
    b LoopForever
 80023d2:	e7fe      	b.n	80023d2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80023d4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80023d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023dc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80023e0:	08009118 	.word	0x08009118
  ldr r2, =_sbss
 80023e4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80023e8:	20000550 	.word	0x20000550

080023ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023ec:	e7fe      	b.n	80023ec <ADC1_2_IRQHandler>
	...

080023f0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023f4:	4b08      	ldr	r3, [pc, #32]	@ (8002418 <HAL_Init+0x28>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a07      	ldr	r2, [pc, #28]	@ (8002418 <HAL_Init+0x28>)
 80023fa:	f043 0310 	orr.w	r3, r3, #16
 80023fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002400:	2003      	movs	r0, #3
 8002402:	f000 f94f 	bl	80026a4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002406:	2000      	movs	r0, #0
 8002408:	f000 f808 	bl	800241c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800240c:	f7ff fd38 	bl	8001e80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	40022000 	.word	0x40022000

0800241c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002424:	4b12      	ldr	r3, [pc, #72]	@ (8002470 <HAL_InitTick+0x54>)
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	4b12      	ldr	r3, [pc, #72]	@ (8002474 <HAL_InitTick+0x58>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	4619      	mov	r1, r3
 800242e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002432:	fbb3 f3f1 	udiv	r3, r3, r1
 8002436:	fbb2 f3f3 	udiv	r3, r2, r3
 800243a:	4618      	mov	r0, r3
 800243c:	f000 f967 	bl	800270e <HAL_SYSTICK_Config>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e00e      	b.n	8002468 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2b0f      	cmp	r3, #15
 800244e:	d80a      	bhi.n	8002466 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002450:	2200      	movs	r2, #0
 8002452:	6879      	ldr	r1, [r7, #4]
 8002454:	f04f 30ff 	mov.w	r0, #4294967295
 8002458:	f000 f92f 	bl	80026ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800245c:	4a06      	ldr	r2, [pc, #24]	@ (8002478 <HAL_InitTick+0x5c>)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002462:	2300      	movs	r3, #0
 8002464:	e000      	b.n	8002468 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
}
 8002468:	4618      	mov	r0, r3
 800246a:	3708      	adds	r7, #8
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	20000000 	.word	0x20000000
 8002474:	20000008 	.word	0x20000008
 8002478:	20000004 	.word	0x20000004

0800247c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002480:	4b06      	ldr	r3, [pc, #24]	@ (800249c <HAL_IncTick+0x20>)
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	461a      	mov	r2, r3
 8002486:	4b06      	ldr	r3, [pc, #24]	@ (80024a0 <HAL_IncTick+0x24>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4413      	add	r3, r2
 800248c:	4a04      	ldr	r2, [pc, #16]	@ (80024a0 <HAL_IncTick+0x24>)
 800248e:	6013      	str	r3, [r2, #0]
}
 8002490:	bf00      	nop
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	20000008 	.word	0x20000008
 80024a0:	20000400 	.word	0x20000400

080024a4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  return uwTick;  
 80024a8:	4b03      	ldr	r3, [pc, #12]	@ (80024b8 <HAL_GetTick+0x14>)
 80024aa:	681b      	ldr	r3, [r3, #0]
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	20000400 	.word	0x20000400

080024bc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024c4:	f7ff ffee 	bl	80024a4 <HAL_GetTick>
 80024c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d4:	d005      	beq.n	80024e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002500 <HAL_Delay+0x44>)
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	461a      	mov	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	4413      	add	r3, r2
 80024e0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80024e2:	bf00      	nop
 80024e4:	f7ff ffde 	bl	80024a4 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d8f7      	bhi.n	80024e4 <HAL_Delay+0x28>
  {
  }
}
 80024f4:	bf00      	nop
 80024f6:	bf00      	nop
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	20000008 	.word	0x20000008

08002504 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f003 0307 	and.w	r3, r3, #7
 8002512:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002514:	4b0c      	ldr	r3, [pc, #48]	@ (8002548 <__NVIC_SetPriorityGrouping+0x44>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800251a:	68ba      	ldr	r2, [r7, #8]
 800251c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002520:	4013      	ands	r3, r2
 8002522:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800252c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002530:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002534:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002536:	4a04      	ldr	r2, [pc, #16]	@ (8002548 <__NVIC_SetPriorityGrouping+0x44>)
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	60d3      	str	r3, [r2, #12]
}
 800253c:	bf00      	nop
 800253e:	3714      	adds	r7, #20
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr
 8002548:	e000ed00 	.word	0xe000ed00

0800254c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002550:	4b04      	ldr	r3, [pc, #16]	@ (8002564 <__NVIC_GetPriorityGrouping+0x18>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	0a1b      	lsrs	r3, r3, #8
 8002556:	f003 0307 	and.w	r3, r3, #7
}
 800255a:	4618      	mov	r0, r3
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr
 8002564:	e000ed00 	.word	0xe000ed00

08002568 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	4603      	mov	r3, r0
 8002570:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002576:	2b00      	cmp	r3, #0
 8002578:	db0b      	blt.n	8002592 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800257a:	79fb      	ldrb	r3, [r7, #7]
 800257c:	f003 021f 	and.w	r2, r3, #31
 8002580:	4907      	ldr	r1, [pc, #28]	@ (80025a0 <__NVIC_EnableIRQ+0x38>)
 8002582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002586:	095b      	lsrs	r3, r3, #5
 8002588:	2001      	movs	r0, #1
 800258a:	fa00 f202 	lsl.w	r2, r0, r2
 800258e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002592:	bf00      	nop
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	e000e100 	.word	0xe000e100

080025a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	4603      	mov	r3, r0
 80025ac:	6039      	str	r1, [r7, #0]
 80025ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	db0a      	blt.n	80025ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	b2da      	uxtb	r2, r3
 80025bc:	490c      	ldr	r1, [pc, #48]	@ (80025f0 <__NVIC_SetPriority+0x4c>)
 80025be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c2:	0112      	lsls	r2, r2, #4
 80025c4:	b2d2      	uxtb	r2, r2
 80025c6:	440b      	add	r3, r1
 80025c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025cc:	e00a      	b.n	80025e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	b2da      	uxtb	r2, r3
 80025d2:	4908      	ldr	r1, [pc, #32]	@ (80025f4 <__NVIC_SetPriority+0x50>)
 80025d4:	79fb      	ldrb	r3, [r7, #7]
 80025d6:	f003 030f 	and.w	r3, r3, #15
 80025da:	3b04      	subs	r3, #4
 80025dc:	0112      	lsls	r2, r2, #4
 80025de:	b2d2      	uxtb	r2, r2
 80025e0:	440b      	add	r3, r1
 80025e2:	761a      	strb	r2, [r3, #24]
}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr
 80025f0:	e000e100 	.word	0xe000e100
 80025f4:	e000ed00 	.word	0xe000ed00

080025f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b089      	sub	sp, #36	@ 0x24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f003 0307 	and.w	r3, r3, #7
 800260a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	f1c3 0307 	rsb	r3, r3, #7
 8002612:	2b04      	cmp	r3, #4
 8002614:	bf28      	it	cs
 8002616:	2304      	movcs	r3, #4
 8002618:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	3304      	adds	r3, #4
 800261e:	2b06      	cmp	r3, #6
 8002620:	d902      	bls.n	8002628 <NVIC_EncodePriority+0x30>
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	3b03      	subs	r3, #3
 8002626:	e000      	b.n	800262a <NVIC_EncodePriority+0x32>
 8002628:	2300      	movs	r3, #0
 800262a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800262c:	f04f 32ff 	mov.w	r2, #4294967295
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	43da      	mvns	r2, r3
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	401a      	ands	r2, r3
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002640:	f04f 31ff 	mov.w	r1, #4294967295
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	fa01 f303 	lsl.w	r3, r1, r3
 800264a:	43d9      	mvns	r1, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002650:	4313      	orrs	r3, r2
         );
}
 8002652:	4618      	mov	r0, r3
 8002654:	3724      	adds	r7, #36	@ 0x24
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
	...

08002660 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	3b01      	subs	r3, #1
 800266c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002670:	d301      	bcc.n	8002676 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002672:	2301      	movs	r3, #1
 8002674:	e00f      	b.n	8002696 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002676:	4a0a      	ldr	r2, [pc, #40]	@ (80026a0 <SysTick_Config+0x40>)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	3b01      	subs	r3, #1
 800267c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800267e:	210f      	movs	r1, #15
 8002680:	f04f 30ff 	mov.w	r0, #4294967295
 8002684:	f7ff ff8e 	bl	80025a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002688:	4b05      	ldr	r3, [pc, #20]	@ (80026a0 <SysTick_Config+0x40>)
 800268a:	2200      	movs	r2, #0
 800268c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800268e:	4b04      	ldr	r3, [pc, #16]	@ (80026a0 <SysTick_Config+0x40>)
 8002690:	2207      	movs	r2, #7
 8002692:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	e000e010 	.word	0xe000e010

080026a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f7ff ff29 	bl	8002504 <__NVIC_SetPriorityGrouping>
}
 80026b2:	bf00      	nop
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b086      	sub	sp, #24
 80026be:	af00      	add	r7, sp, #0
 80026c0:	4603      	mov	r3, r0
 80026c2:	60b9      	str	r1, [r7, #8]
 80026c4:	607a      	str	r2, [r7, #4]
 80026c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026c8:	2300      	movs	r3, #0
 80026ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026cc:	f7ff ff3e 	bl	800254c <__NVIC_GetPriorityGrouping>
 80026d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	68b9      	ldr	r1, [r7, #8]
 80026d6:	6978      	ldr	r0, [r7, #20]
 80026d8:	f7ff ff8e 	bl	80025f8 <NVIC_EncodePriority>
 80026dc:	4602      	mov	r2, r0
 80026de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026e2:	4611      	mov	r1, r2
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7ff ff5d 	bl	80025a4 <__NVIC_SetPriority>
}
 80026ea:	bf00      	nop
 80026ec:	3718      	adds	r7, #24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b082      	sub	sp, #8
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	4603      	mov	r3, r0
 80026fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff ff31 	bl	8002568 <__NVIC_EnableIRQ>
}
 8002706:	bf00      	nop
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b082      	sub	sp, #8
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f7ff ffa2 	bl	8002660 <SysTick_Config>
 800271c:	4603      	mov	r3, r0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002726:	b480      	push	{r7}
 8002728:	b083      	sub	sp, #12
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d101      	bne.n	8002738 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e02e      	b.n	8002796 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800273e:	2b02      	cmp	r3, #2
 8002740:	d008      	beq.n	8002754 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2204      	movs	r2, #4
 8002746:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e020      	b.n	8002796 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f022 020e 	bic.w	r2, r2, #14
 8002762:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f022 0201 	bic.w	r2, r2, #1
 8002772:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800277c:	2101      	movs	r1, #1
 800277e:	fa01 f202 	lsl.w	r2, r1, r2
 8002782:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr

080027a2 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b084      	sub	sp, #16
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027aa:	2300      	movs	r3, #0
 80027ac:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d005      	beq.n	80027c4 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2204      	movs	r2, #4
 80027bc:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	73fb      	strb	r3, [r7, #15]
 80027c2:	e027      	b.n	8002814 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f022 020e 	bic.w	r2, r2, #14
 80027d2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f022 0201 	bic.w	r2, r2, #1
 80027e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027ec:	2101      	movs	r1, #1
 80027ee:	fa01 f202 	lsl.w	r2, r1, r2
 80027f2:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002808:	2b00      	cmp	r3, #0
 800280a:	d003      	beq.n	8002814 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	4798      	blx	r3
    }
  }
  return status;
 8002814:	7bfb      	ldrb	r3, [r7, #15]
}
 8002816:	4618      	mov	r0, r3
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
	...

08002820 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002820:	b480      	push	{r7}
 8002822:	b087      	sub	sp, #28
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800282a:	2300      	movs	r3, #0
 800282c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800282e:	e14e      	b.n	8002ace <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	2101      	movs	r1, #1
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	fa01 f303 	lsl.w	r3, r1, r3
 800283c:	4013      	ands	r3, r2
 800283e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2b00      	cmp	r3, #0
 8002844:	f000 8140 	beq.w	8002ac8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f003 0303 	and.w	r3, r3, #3
 8002850:	2b01      	cmp	r3, #1
 8002852:	d005      	beq.n	8002860 <HAL_GPIO_Init+0x40>
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f003 0303 	and.w	r3, r3, #3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d130      	bne.n	80028c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	2203      	movs	r2, #3
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	43db      	mvns	r3, r3
 8002872:	693a      	ldr	r2, [r7, #16]
 8002874:	4013      	ands	r3, r2
 8002876:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	68da      	ldr	r2, [r3, #12]
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	4313      	orrs	r3, r2
 8002888:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	693a      	ldr	r2, [r7, #16]
 800288e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002896:	2201      	movs	r2, #1
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	43db      	mvns	r3, r3
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	4013      	ands	r3, r2
 80028a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	091b      	lsrs	r3, r3, #4
 80028ac:	f003 0201 	and.w	r2, r3, #1
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	fa02 f303 	lsl.w	r3, r2, r3
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f003 0303 	and.w	r3, r3, #3
 80028ca:	2b03      	cmp	r3, #3
 80028cc:	d017      	beq.n	80028fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	005b      	lsls	r3, r3, #1
 80028d8:	2203      	movs	r2, #3
 80028da:	fa02 f303 	lsl.w	r3, r2, r3
 80028de:	43db      	mvns	r3, r3
 80028e0:	693a      	ldr	r2, [r7, #16]
 80028e2:	4013      	ands	r3, r2
 80028e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	689a      	ldr	r2, [r3, #8]
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	fa02 f303 	lsl.w	r3, r2, r3
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f003 0303 	and.w	r3, r3, #3
 8002906:	2b02      	cmp	r3, #2
 8002908:	d123      	bne.n	8002952 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	08da      	lsrs	r2, r3, #3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	3208      	adds	r2, #8
 8002912:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002916:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	f003 0307 	and.w	r3, r3, #7
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	220f      	movs	r2, #15
 8002922:	fa02 f303 	lsl.w	r3, r2, r3
 8002926:	43db      	mvns	r3, r3
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	4013      	ands	r3, r2
 800292c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	691a      	ldr	r2, [r3, #16]
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	f003 0307 	and.w	r3, r3, #7
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	fa02 f303 	lsl.w	r3, r2, r3
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	4313      	orrs	r3, r2
 8002942:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	08da      	lsrs	r2, r3, #3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	3208      	adds	r2, #8
 800294c:	6939      	ldr	r1, [r7, #16]
 800294e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	2203      	movs	r2, #3
 800295e:	fa02 f303 	lsl.w	r3, r2, r3
 8002962:	43db      	mvns	r3, r3
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	4013      	ands	r3, r2
 8002968:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f003 0203 	and.w	r2, r3, #3
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	fa02 f303 	lsl.w	r3, r2, r3
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	4313      	orrs	r3, r2
 800297e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800298e:	2b00      	cmp	r3, #0
 8002990:	f000 809a 	beq.w	8002ac8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002994:	4b55      	ldr	r3, [pc, #340]	@ (8002aec <HAL_GPIO_Init+0x2cc>)
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	4a54      	ldr	r2, [pc, #336]	@ (8002aec <HAL_GPIO_Init+0x2cc>)
 800299a:	f043 0301 	orr.w	r3, r3, #1
 800299e:	6193      	str	r3, [r2, #24]
 80029a0:	4b52      	ldr	r3, [pc, #328]	@ (8002aec <HAL_GPIO_Init+0x2cc>)
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	60bb      	str	r3, [r7, #8]
 80029aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80029ac:	4a50      	ldr	r2, [pc, #320]	@ (8002af0 <HAL_GPIO_Init+0x2d0>)
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	089b      	lsrs	r3, r3, #2
 80029b2:	3302      	adds	r3, #2
 80029b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	f003 0303 	and.w	r3, r3, #3
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	220f      	movs	r2, #15
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	43db      	mvns	r3, r3
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	4013      	ands	r3, r2
 80029ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80029d6:	d013      	beq.n	8002a00 <HAL_GPIO_Init+0x1e0>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a46      	ldr	r2, [pc, #280]	@ (8002af4 <HAL_GPIO_Init+0x2d4>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d00d      	beq.n	80029fc <HAL_GPIO_Init+0x1dc>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a45      	ldr	r2, [pc, #276]	@ (8002af8 <HAL_GPIO_Init+0x2d8>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d007      	beq.n	80029f8 <HAL_GPIO_Init+0x1d8>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a44      	ldr	r2, [pc, #272]	@ (8002afc <HAL_GPIO_Init+0x2dc>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d101      	bne.n	80029f4 <HAL_GPIO_Init+0x1d4>
 80029f0:	2303      	movs	r3, #3
 80029f2:	e006      	b.n	8002a02 <HAL_GPIO_Init+0x1e2>
 80029f4:	2305      	movs	r3, #5
 80029f6:	e004      	b.n	8002a02 <HAL_GPIO_Init+0x1e2>
 80029f8:	2302      	movs	r3, #2
 80029fa:	e002      	b.n	8002a02 <HAL_GPIO_Init+0x1e2>
 80029fc:	2301      	movs	r3, #1
 80029fe:	e000      	b.n	8002a02 <HAL_GPIO_Init+0x1e2>
 8002a00:	2300      	movs	r3, #0
 8002a02:	697a      	ldr	r2, [r7, #20]
 8002a04:	f002 0203 	and.w	r2, r2, #3
 8002a08:	0092      	lsls	r2, r2, #2
 8002a0a:	4093      	lsls	r3, r2
 8002a0c:	693a      	ldr	r2, [r7, #16]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a12:	4937      	ldr	r1, [pc, #220]	@ (8002af0 <HAL_GPIO_Init+0x2d0>)
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	089b      	lsrs	r3, r3, #2
 8002a18:	3302      	adds	r3, #2
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a20:	4b37      	ldr	r3, [pc, #220]	@ (8002b00 <HAL_GPIO_Init+0x2e0>)
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	43db      	mvns	r3, r3
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d003      	beq.n	8002a44 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002a3c:	693a      	ldr	r2, [r7, #16]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002a44:	4a2e      	ldr	r2, [pc, #184]	@ (8002b00 <HAL_GPIO_Init+0x2e0>)
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a4a:	4b2d      	ldr	r3, [pc, #180]	@ (8002b00 <HAL_GPIO_Init+0x2e0>)
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	43db      	mvns	r3, r3
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	4013      	ands	r3, r2
 8002a58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d003      	beq.n	8002a6e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002a66:	693a      	ldr	r2, [r7, #16]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002a6e:	4a24      	ldr	r2, [pc, #144]	@ (8002b00 <HAL_GPIO_Init+0x2e0>)
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a74:	4b22      	ldr	r3, [pc, #136]	@ (8002b00 <HAL_GPIO_Init+0x2e0>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	43db      	mvns	r3, r3
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	4013      	ands	r3, r2
 8002a82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d003      	beq.n	8002a98 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002a98:	4a19      	ldr	r2, [pc, #100]	@ (8002b00 <HAL_GPIO_Init+0x2e0>)
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a9e:	4b18      	ldr	r3, [pc, #96]	@ (8002b00 <HAL_GPIO_Init+0x2e0>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	43db      	mvns	r3, r3
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d003      	beq.n	8002ac2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002ac2:	4a0f      	ldr	r2, [pc, #60]	@ (8002b00 <HAL_GPIO_Init+0x2e0>)
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	3301      	adds	r3, #1
 8002acc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f47f aea9 	bne.w	8002830 <HAL_GPIO_Init+0x10>
  }
}
 8002ade:	bf00      	nop
 8002ae0:	bf00      	nop
 8002ae2:	371c      	adds	r7, #28
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr
 8002aec:	40021000 	.word	0x40021000
 8002af0:	40010000 	.word	0x40010000
 8002af4:	48000400 	.word	0x48000400
 8002af8:	48000800 	.word	0x48000800
 8002afc:	48000c00 	.word	0x48000c00
 8002b00:	40010400 	.word	0x40010400

08002b04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	807b      	strh	r3, [r7, #2]
 8002b10:	4613      	mov	r3, r2
 8002b12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b14:	787b      	ldrb	r3, [r7, #1]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d003      	beq.n	8002b22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b1a:	887a      	ldrh	r2, [r7, #2]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b20:	e002      	b.n	8002b28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b22:	887a      	ldrh	r2, [r7, #2]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002b28:	bf00      	nop
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e08d      	b.n	8002c62 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d106      	bne.n	8002b60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f7ff f9b4 	bl	8001ec8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2224      	movs	r2, #36	@ 0x24
 8002b64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f022 0201 	bic.w	r2, r2, #1
 8002b76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685a      	ldr	r2, [r3, #4]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002b84:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	689a      	ldr	r2, [r3, #8]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b94:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d107      	bne.n	8002bae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	689a      	ldr	r2, [r3, #8]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002baa:	609a      	str	r2, [r3, #8]
 8002bac:	e006      	b.n	8002bbc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	689a      	ldr	r2, [r3, #8]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002bba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d108      	bne.n	8002bd6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	685a      	ldr	r2, [r3, #4]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002bd2:	605a      	str	r2, [r3, #4]
 8002bd4:	e007      	b.n	8002be6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	685a      	ldr	r2, [r3, #4]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002be4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	6812      	ldr	r2, [r2, #0]
 8002bf0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002bf4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002bf8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68da      	ldr	r2, [r3, #12]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c08:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	691a      	ldr	r2, [r3, #16]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	430a      	orrs	r2, r1
 8002c22:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	69d9      	ldr	r1, [r3, #28]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a1a      	ldr	r2, [r3, #32]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	430a      	orrs	r2, r1
 8002c32:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f042 0201 	orr.w	r2, r2, #1
 8002c42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2220      	movs	r2, #32
 8002c4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
	...

08002c6c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b088      	sub	sp, #32
 8002c70:	af02      	add	r7, sp, #8
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	4608      	mov	r0, r1
 8002c76:	4611      	mov	r1, r2
 8002c78:	461a      	mov	r2, r3
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	817b      	strh	r3, [r7, #10]
 8002c7e:	460b      	mov	r3, r1
 8002c80:	813b      	strh	r3, [r7, #8]
 8002c82:	4613      	mov	r3, r2
 8002c84:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b20      	cmp	r3, #32
 8002c90:	f040 80f9 	bne.w	8002e86 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c94:	6a3b      	ldr	r3, [r7, #32]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d002      	beq.n	8002ca0 <HAL_I2C_Mem_Write+0x34>
 8002c9a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d105      	bne.n	8002cac <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ca6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e0ed      	b.n	8002e88 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d101      	bne.n	8002cba <HAL_I2C_Mem_Write+0x4e>
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	e0e6      	b.n	8002e88 <HAL_I2C_Mem_Write+0x21c>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002cc2:	f7ff fbef 	bl	80024a4 <HAL_GetTick>
 8002cc6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	9300      	str	r3, [sp, #0]
 8002ccc:	2319      	movs	r3, #25
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f000 fac3 	bl	8003260 <I2C_WaitOnFlagUntilTimeout>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e0d1      	b.n	8002e88 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2221      	movs	r2, #33	@ 0x21
 8002ce8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2240      	movs	r2, #64	@ 0x40
 8002cf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6a3a      	ldr	r2, [r7, #32]
 8002cfe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002d04:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d0c:	88f8      	ldrh	r0, [r7, #6]
 8002d0e:	893a      	ldrh	r2, [r7, #8]
 8002d10:	8979      	ldrh	r1, [r7, #10]
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	9301      	str	r3, [sp, #4]
 8002d16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d18:	9300      	str	r3, [sp, #0]
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	f000 f9d3 	bl	80030c8 <I2C_RequestMemoryWrite>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d005      	beq.n	8002d34 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e0a9      	b.n	8002e88 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	2bff      	cmp	r3, #255	@ 0xff
 8002d3c:	d90e      	bls.n	8002d5c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	22ff      	movs	r2, #255	@ 0xff
 8002d42:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d48:	b2da      	uxtb	r2, r3
 8002d4a:	8979      	ldrh	r1, [r7, #10]
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	9300      	str	r3, [sp, #0]
 8002d50:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d54:	68f8      	ldr	r0, [r7, #12]
 8002d56:	f000 fc47 	bl	80035e8 <I2C_TransferConfig>
 8002d5a:	e00f      	b.n	8002d7c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d60:	b29a      	uxth	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d6a:	b2da      	uxtb	r2, r3
 8002d6c:	8979      	ldrh	r1, [r7, #10]
 8002d6e:	2300      	movs	r3, #0
 8002d70:	9300      	str	r3, [sp, #0]
 8002d72:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d76:	68f8      	ldr	r0, [r7, #12]
 8002d78:	f000 fc36 	bl	80035e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d7c:	697a      	ldr	r2, [r7, #20]
 8002d7e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d80:	68f8      	ldr	r0, [r7, #12]
 8002d82:	f000 fac6 	bl	8003312 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d001      	beq.n	8002d90 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e07b      	b.n	8002e88 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d94:	781a      	ldrb	r2, [r3, #0]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da0:	1c5a      	adds	r2, r3, #1
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	3b01      	subs	r3, #1
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002db8:	3b01      	subs	r3, #1
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d034      	beq.n	8002e34 <HAL_I2C_Mem_Write+0x1c8>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d130      	bne.n	8002e34 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	9300      	str	r3, [sp, #0]
 8002dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dd8:	2200      	movs	r2, #0
 8002dda:	2180      	movs	r1, #128	@ 0x80
 8002ddc:	68f8      	ldr	r0, [r7, #12]
 8002dde:	f000 fa3f 	bl	8003260 <I2C_WaitOnFlagUntilTimeout>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d001      	beq.n	8002dec <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e04d      	b.n	8002e88 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	2bff      	cmp	r3, #255	@ 0xff
 8002df4:	d90e      	bls.n	8002e14 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	22ff      	movs	r2, #255	@ 0xff
 8002dfa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e00:	b2da      	uxtb	r2, r3
 8002e02:	8979      	ldrh	r1, [r7, #10]
 8002e04:	2300      	movs	r3, #0
 8002e06:	9300      	str	r3, [sp, #0]
 8002e08:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f000 fbeb 	bl	80035e8 <I2C_TransferConfig>
 8002e12:	e00f      	b.n	8002e34 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e22:	b2da      	uxtb	r2, r3
 8002e24:	8979      	ldrh	r1, [r7, #10]
 8002e26:	2300      	movs	r3, #0
 8002e28:	9300      	str	r3, [sp, #0]
 8002e2a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e2e:	68f8      	ldr	r0, [r7, #12]
 8002e30:	f000 fbda 	bl	80035e8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d19e      	bne.n	8002d7c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f000 faac 	bl	80033a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e01a      	b.n	8002e88 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2220      	movs	r2, #32
 8002e58:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	6859      	ldr	r1, [r3, #4]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	4b0a      	ldr	r3, [pc, #40]	@ (8002e90 <HAL_I2C_Mem_Write+0x224>)
 8002e66:	400b      	ands	r3, r1
 8002e68:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2220      	movs	r2, #32
 8002e6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002e82:	2300      	movs	r3, #0
 8002e84:	e000      	b.n	8002e88 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002e86:	2302      	movs	r3, #2
  }
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3718      	adds	r7, #24
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	fe00e800 	.word	0xfe00e800

08002e94 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b088      	sub	sp, #32
 8002e98:	af02      	add	r7, sp, #8
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	4608      	mov	r0, r1
 8002e9e:	4611      	mov	r1, r2
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	817b      	strh	r3, [r7, #10]
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	813b      	strh	r3, [r7, #8]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2b20      	cmp	r3, #32
 8002eb8:	f040 80fd 	bne.w	80030b6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ebc:	6a3b      	ldr	r3, [r7, #32]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d002      	beq.n	8002ec8 <HAL_I2C_Mem_Read+0x34>
 8002ec2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d105      	bne.n	8002ed4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ece:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e0f1      	b.n	80030b8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d101      	bne.n	8002ee2 <HAL_I2C_Mem_Read+0x4e>
 8002ede:	2302      	movs	r3, #2
 8002ee0:	e0ea      	b.n	80030b8 <HAL_I2C_Mem_Read+0x224>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002eea:	f7ff fadb 	bl	80024a4 <HAL_GetTick>
 8002eee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	9300      	str	r3, [sp, #0]
 8002ef4:	2319      	movs	r3, #25
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002efc:	68f8      	ldr	r0, [r7, #12]
 8002efe:	f000 f9af 	bl	8003260 <I2C_WaitOnFlagUntilTimeout>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e0d5      	b.n	80030b8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2222      	movs	r2, #34	@ 0x22
 8002f10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2240      	movs	r2, #64	@ 0x40
 8002f18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6a3a      	ldr	r2, [r7, #32]
 8002f26:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002f2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f34:	88f8      	ldrh	r0, [r7, #6]
 8002f36:	893a      	ldrh	r2, [r7, #8]
 8002f38:	8979      	ldrh	r1, [r7, #10]
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	9301      	str	r3, [sp, #4]
 8002f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f40:	9300      	str	r3, [sp, #0]
 8002f42:	4603      	mov	r3, r0
 8002f44:	68f8      	ldr	r0, [r7, #12]
 8002f46:	f000 f913 	bl	8003170 <I2C_RequestMemoryRead>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d005      	beq.n	8002f5c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e0ad      	b.n	80030b8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	2bff      	cmp	r3, #255	@ 0xff
 8002f64:	d90e      	bls.n	8002f84 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f70:	b2da      	uxtb	r2, r3
 8002f72:	8979      	ldrh	r1, [r7, #10]
 8002f74:	4b52      	ldr	r3, [pc, #328]	@ (80030c0 <HAL_I2C_Mem_Read+0x22c>)
 8002f76:	9300      	str	r3, [sp, #0]
 8002f78:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002f7c:	68f8      	ldr	r0, [r7, #12]
 8002f7e:	f000 fb33 	bl	80035e8 <I2C_TransferConfig>
 8002f82:	e00f      	b.n	8002fa4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f88:	b29a      	uxth	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f92:	b2da      	uxtb	r2, r3
 8002f94:	8979      	ldrh	r1, [r7, #10]
 8002f96:	4b4a      	ldr	r3, [pc, #296]	@ (80030c0 <HAL_I2C_Mem_Read+0x22c>)
 8002f98:	9300      	str	r3, [sp, #0]
 8002f9a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f9e:	68f8      	ldr	r0, [r7, #12]
 8002fa0:	f000 fb22 	bl	80035e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	9300      	str	r3, [sp, #0]
 8002fa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002faa:	2200      	movs	r2, #0
 8002fac:	2104      	movs	r1, #4
 8002fae:	68f8      	ldr	r0, [r7, #12]
 8002fb0:	f000 f956 	bl	8003260 <I2C_WaitOnFlagUntilTimeout>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e07c      	b.n	80030b8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc8:	b2d2      	uxtb	r2, r2
 8002fca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd0:	1c5a      	adds	r2, r3, #1
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	b29a      	uxth	r2, r3
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	b29a      	uxth	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d034      	beq.n	8003064 <HAL_I2C_Mem_Read+0x1d0>
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d130      	bne.n	8003064 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	9300      	str	r3, [sp, #0]
 8003006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003008:	2200      	movs	r2, #0
 800300a:	2180      	movs	r1, #128	@ 0x80
 800300c:	68f8      	ldr	r0, [r7, #12]
 800300e:	f000 f927 	bl	8003260 <I2C_WaitOnFlagUntilTimeout>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d001      	beq.n	800301c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e04d      	b.n	80030b8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003020:	b29b      	uxth	r3, r3
 8003022:	2bff      	cmp	r3, #255	@ 0xff
 8003024:	d90e      	bls.n	8003044 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2201      	movs	r2, #1
 800302a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003030:	b2da      	uxtb	r2, r3
 8003032:	8979      	ldrh	r1, [r7, #10]
 8003034:	2300      	movs	r3, #0
 8003036:	9300      	str	r3, [sp, #0]
 8003038:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800303c:	68f8      	ldr	r0, [r7, #12]
 800303e:	f000 fad3 	bl	80035e8 <I2C_TransferConfig>
 8003042:	e00f      	b.n	8003064 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003048:	b29a      	uxth	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003052:	b2da      	uxtb	r2, r3
 8003054:	8979      	ldrh	r1, [r7, #10]
 8003056:	2300      	movs	r3, #0
 8003058:	9300      	str	r3, [sp, #0]
 800305a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f000 fac2 	bl	80035e8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003068:	b29b      	uxth	r3, r3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d19a      	bne.n	8002fa4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800306e:	697a      	ldr	r2, [r7, #20]
 8003070:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003072:	68f8      	ldr	r0, [r7, #12]
 8003074:	f000 f994 	bl	80033a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e01a      	b.n	80030b8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2220      	movs	r2, #32
 8003088:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	6859      	ldr	r1, [r3, #4]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	4b0b      	ldr	r3, [pc, #44]	@ (80030c4 <HAL_I2C_Mem_Read+0x230>)
 8003096:	400b      	ands	r3, r1
 8003098:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2220      	movs	r2, #32
 800309e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80030b2:	2300      	movs	r3, #0
 80030b4:	e000      	b.n	80030b8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80030b6:	2302      	movs	r3, #2
  }
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3718      	adds	r7, #24
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	80002400 	.word	0x80002400
 80030c4:	fe00e800 	.word	0xfe00e800

080030c8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b086      	sub	sp, #24
 80030cc:	af02      	add	r7, sp, #8
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	4608      	mov	r0, r1
 80030d2:	4611      	mov	r1, r2
 80030d4:	461a      	mov	r2, r3
 80030d6:	4603      	mov	r3, r0
 80030d8:	817b      	strh	r3, [r7, #10]
 80030da:	460b      	mov	r3, r1
 80030dc:	813b      	strh	r3, [r7, #8]
 80030de:	4613      	mov	r3, r2
 80030e0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80030e2:	88fb      	ldrh	r3, [r7, #6]
 80030e4:	b2da      	uxtb	r2, r3
 80030e6:	8979      	ldrh	r1, [r7, #10]
 80030e8:	4b20      	ldr	r3, [pc, #128]	@ (800316c <I2C_RequestMemoryWrite+0xa4>)
 80030ea:	9300      	str	r3, [sp, #0]
 80030ec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	f000 fa79 	bl	80035e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030f6:	69fa      	ldr	r2, [r7, #28]
 80030f8:	69b9      	ldr	r1, [r7, #24]
 80030fa:	68f8      	ldr	r0, [r7, #12]
 80030fc:	f000 f909 	bl	8003312 <I2C_WaitOnTXISFlagUntilTimeout>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d001      	beq.n	800310a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e02c      	b.n	8003164 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800310a:	88fb      	ldrh	r3, [r7, #6]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d105      	bne.n	800311c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003110:	893b      	ldrh	r3, [r7, #8]
 8003112:	b2da      	uxtb	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	629a      	str	r2, [r3, #40]	@ 0x28
 800311a:	e015      	b.n	8003148 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800311c:	893b      	ldrh	r3, [r7, #8]
 800311e:	0a1b      	lsrs	r3, r3, #8
 8003120:	b29b      	uxth	r3, r3
 8003122:	b2da      	uxtb	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800312a:	69fa      	ldr	r2, [r7, #28]
 800312c:	69b9      	ldr	r1, [r7, #24]
 800312e:	68f8      	ldr	r0, [r7, #12]
 8003130:	f000 f8ef 	bl	8003312 <I2C_WaitOnTXISFlagUntilTimeout>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d001      	beq.n	800313e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e012      	b.n	8003164 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800313e:	893b      	ldrh	r3, [r7, #8]
 8003140:	b2da      	uxtb	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	9300      	str	r3, [sp, #0]
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	2200      	movs	r2, #0
 8003150:	2180      	movs	r1, #128	@ 0x80
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f000 f884 	bl	8003260 <I2C_WaitOnFlagUntilTimeout>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e000      	b.n	8003164 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	3710      	adds	r7, #16
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	80002000 	.word	0x80002000

08003170 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b086      	sub	sp, #24
 8003174:	af02      	add	r7, sp, #8
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	4608      	mov	r0, r1
 800317a:	4611      	mov	r1, r2
 800317c:	461a      	mov	r2, r3
 800317e:	4603      	mov	r3, r0
 8003180:	817b      	strh	r3, [r7, #10]
 8003182:	460b      	mov	r3, r1
 8003184:	813b      	strh	r3, [r7, #8]
 8003186:	4613      	mov	r3, r2
 8003188:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800318a:	88fb      	ldrh	r3, [r7, #6]
 800318c:	b2da      	uxtb	r2, r3
 800318e:	8979      	ldrh	r1, [r7, #10]
 8003190:	4b20      	ldr	r3, [pc, #128]	@ (8003214 <I2C_RequestMemoryRead+0xa4>)
 8003192:	9300      	str	r3, [sp, #0]
 8003194:	2300      	movs	r3, #0
 8003196:	68f8      	ldr	r0, [r7, #12]
 8003198:	f000 fa26 	bl	80035e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800319c:	69fa      	ldr	r2, [r7, #28]
 800319e:	69b9      	ldr	r1, [r7, #24]
 80031a0:	68f8      	ldr	r0, [r7, #12]
 80031a2:	f000 f8b6 	bl	8003312 <I2C_WaitOnTXISFlagUntilTimeout>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d001      	beq.n	80031b0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e02c      	b.n	800320a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80031b0:	88fb      	ldrh	r3, [r7, #6]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d105      	bne.n	80031c2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80031b6:	893b      	ldrh	r3, [r7, #8]
 80031b8:	b2da      	uxtb	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	629a      	str	r2, [r3, #40]	@ 0x28
 80031c0:	e015      	b.n	80031ee <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80031c2:	893b      	ldrh	r3, [r7, #8]
 80031c4:	0a1b      	lsrs	r3, r3, #8
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	b2da      	uxtb	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031d0:	69fa      	ldr	r2, [r7, #28]
 80031d2:	69b9      	ldr	r1, [r7, #24]
 80031d4:	68f8      	ldr	r0, [r7, #12]
 80031d6:	f000 f89c 	bl	8003312 <I2C_WaitOnTXISFlagUntilTimeout>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d001      	beq.n	80031e4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e012      	b.n	800320a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80031e4:	893b      	ldrh	r3, [r7, #8]
 80031e6:	b2da      	uxtb	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	9300      	str	r3, [sp, #0]
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	2200      	movs	r2, #0
 80031f6:	2140      	movs	r1, #64	@ 0x40
 80031f8:	68f8      	ldr	r0, [r7, #12]
 80031fa:	f000 f831 	bl	8003260 <I2C_WaitOnFlagUntilTimeout>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d001      	beq.n	8003208 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e000      	b.n	800320a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	80002000 	.word	0x80002000

08003218 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	f003 0302 	and.w	r3, r3, #2
 800322a:	2b02      	cmp	r3, #2
 800322c:	d103      	bne.n	8003236 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2200      	movs	r2, #0
 8003234:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	699b      	ldr	r3, [r3, #24]
 800323c:	f003 0301 	and.w	r3, r3, #1
 8003240:	2b01      	cmp	r3, #1
 8003242:	d007      	beq.n	8003254 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	699a      	ldr	r2, [r3, #24]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f042 0201 	orr.w	r2, r2, #1
 8003252:	619a      	str	r2, [r3, #24]
  }
}
 8003254:	bf00      	nop
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	603b      	str	r3, [r7, #0]
 800326c:	4613      	mov	r3, r2
 800326e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003270:	e03b      	b.n	80032ea <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	6839      	ldr	r1, [r7, #0]
 8003276:	68f8      	ldr	r0, [r7, #12]
 8003278:	f000 f8d6 	bl	8003428 <I2C_IsErrorOccurred>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d001      	beq.n	8003286 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e041      	b.n	800330a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800328c:	d02d      	beq.n	80032ea <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800328e:	f7ff f909 	bl	80024a4 <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	683a      	ldr	r2, [r7, #0]
 800329a:	429a      	cmp	r2, r3
 800329c:	d302      	bcc.n	80032a4 <I2C_WaitOnFlagUntilTimeout+0x44>
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d122      	bne.n	80032ea <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	699a      	ldr	r2, [r3, #24]
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	4013      	ands	r3, r2
 80032ae:	68ba      	ldr	r2, [r7, #8]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	bf0c      	ite	eq
 80032b4:	2301      	moveq	r3, #1
 80032b6:	2300      	movne	r3, #0
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	461a      	mov	r2, r3
 80032bc:	79fb      	ldrb	r3, [r7, #7]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d113      	bne.n	80032ea <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032c6:	f043 0220 	orr.w	r2, r3, #32
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2220      	movs	r2, #32
 80032d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e00f      	b.n	800330a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	699a      	ldr	r2, [r3, #24]
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	4013      	ands	r3, r2
 80032f4:	68ba      	ldr	r2, [r7, #8]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	bf0c      	ite	eq
 80032fa:	2301      	moveq	r3, #1
 80032fc:	2300      	movne	r3, #0
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	461a      	mov	r2, r3
 8003302:	79fb      	ldrb	r3, [r7, #7]
 8003304:	429a      	cmp	r2, r3
 8003306:	d0b4      	beq.n	8003272 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3710      	adds	r7, #16
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b084      	sub	sp, #16
 8003316:	af00      	add	r7, sp, #0
 8003318:	60f8      	str	r0, [r7, #12]
 800331a:	60b9      	str	r1, [r7, #8]
 800331c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800331e:	e033      	b.n	8003388 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	68b9      	ldr	r1, [r7, #8]
 8003324:	68f8      	ldr	r0, [r7, #12]
 8003326:	f000 f87f 	bl	8003428 <I2C_IsErrorOccurred>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d001      	beq.n	8003334 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e031      	b.n	8003398 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800333a:	d025      	beq.n	8003388 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800333c:	f7ff f8b2 	bl	80024a4 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	68ba      	ldr	r2, [r7, #8]
 8003348:	429a      	cmp	r2, r3
 800334a:	d302      	bcc.n	8003352 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d11a      	bne.n	8003388 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	f003 0302 	and.w	r3, r3, #2
 800335c:	2b02      	cmp	r3, #2
 800335e:	d013      	beq.n	8003388 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003364:	f043 0220 	orr.w	r2, r3, #32
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2220      	movs	r2, #32
 8003370:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e007      	b.n	8003398 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b02      	cmp	r3, #2
 8003394:	d1c4      	bne.n	8003320 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003396:	2300      	movs	r3, #0
}
 8003398:	4618      	mov	r0, r3
 800339a:	3710      	adds	r7, #16
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033ac:	e02f      	b.n	800340e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	68b9      	ldr	r1, [r7, #8]
 80033b2:	68f8      	ldr	r0, [r7, #12]
 80033b4:	f000 f838 	bl	8003428 <I2C_IsErrorOccurred>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d001      	beq.n	80033c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e02d      	b.n	800341e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033c2:	f7ff f86f 	bl	80024a4 <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	68ba      	ldr	r2, [r7, #8]
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d302      	bcc.n	80033d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d11a      	bne.n	800340e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	f003 0320 	and.w	r3, r3, #32
 80033e2:	2b20      	cmp	r3, #32
 80033e4:	d013      	beq.n	800340e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ea:	f043 0220 	orr.w	r2, r3, #32
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2220      	movs	r2, #32
 80033f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e007      	b.n	800341e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	f003 0320 	and.w	r3, r3, #32
 8003418:	2b20      	cmp	r3, #32
 800341a:	d1c8      	bne.n	80033ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3710      	adds	r7, #16
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
	...

08003428 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b08a      	sub	sp, #40	@ 0x28
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003434:	2300      	movs	r3, #0
 8003436:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003442:	2300      	movs	r3, #0
 8003444:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	f003 0310 	and.w	r3, r3, #16
 8003450:	2b00      	cmp	r3, #0
 8003452:	d068      	beq.n	8003526 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2210      	movs	r2, #16
 800345a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800345c:	e049      	b.n	80034f2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003464:	d045      	beq.n	80034f2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003466:	f7ff f81d 	bl	80024a4 <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	68ba      	ldr	r2, [r7, #8]
 8003472:	429a      	cmp	r2, r3
 8003474:	d302      	bcc.n	800347c <I2C_IsErrorOccurred+0x54>
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d13a      	bne.n	80034f2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003486:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800348e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800349a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800349e:	d121      	bne.n	80034e4 <I2C_IsErrorOccurred+0xbc>
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80034a6:	d01d      	beq.n	80034e4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80034a8:	7cfb      	ldrb	r3, [r7, #19]
 80034aa:	2b20      	cmp	r3, #32
 80034ac:	d01a      	beq.n	80034e4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	685a      	ldr	r2, [r3, #4]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80034bc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80034be:	f7fe fff1 	bl	80024a4 <HAL_GetTick>
 80034c2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034c4:	e00e      	b.n	80034e4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80034c6:	f7fe ffed 	bl	80024a4 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	2b19      	cmp	r3, #25
 80034d2:	d907      	bls.n	80034e4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80034d4:	6a3b      	ldr	r3, [r7, #32]
 80034d6:	f043 0320 	orr.w	r3, r3, #32
 80034da:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80034e2:	e006      	b.n	80034f2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	699b      	ldr	r3, [r3, #24]
 80034ea:	f003 0320 	and.w	r3, r3, #32
 80034ee:	2b20      	cmp	r3, #32
 80034f0:	d1e9      	bne.n	80034c6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	699b      	ldr	r3, [r3, #24]
 80034f8:	f003 0320 	and.w	r3, r3, #32
 80034fc:	2b20      	cmp	r3, #32
 80034fe:	d003      	beq.n	8003508 <I2C_IsErrorOccurred+0xe0>
 8003500:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003504:	2b00      	cmp	r3, #0
 8003506:	d0aa      	beq.n	800345e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003508:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800350c:	2b00      	cmp	r3, #0
 800350e:	d103      	bne.n	8003518 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2220      	movs	r2, #32
 8003516:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003518:	6a3b      	ldr	r3, [r7, #32]
 800351a:	f043 0304 	orr.w	r3, r3, #4
 800351e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00b      	beq.n	8003550 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003538:	6a3b      	ldr	r3, [r7, #32]
 800353a:	f043 0301 	orr.w	r3, r3, #1
 800353e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003548:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00b      	beq.n	8003572 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800355a:	6a3b      	ldr	r3, [r7, #32]
 800355c:	f043 0308 	orr.w	r3, r3, #8
 8003560:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800356a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00b      	beq.n	8003594 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800357c:	6a3b      	ldr	r3, [r7, #32]
 800357e:	f043 0302 	orr.w	r3, r3, #2
 8003582:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800358c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003594:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003598:	2b00      	cmp	r3, #0
 800359a:	d01c      	beq.n	80035d6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800359c:	68f8      	ldr	r0, [r7, #12]
 800359e:	f7ff fe3b 	bl	8003218 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	6859      	ldr	r1, [r3, #4]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	4b0d      	ldr	r3, [pc, #52]	@ (80035e4 <I2C_IsErrorOccurred+0x1bc>)
 80035ae:	400b      	ands	r3, r1
 80035b0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80035b6:	6a3b      	ldr	r3, [r7, #32]
 80035b8:	431a      	orrs	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2220      	movs	r2, #32
 80035c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80035d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3728      	adds	r7, #40	@ 0x28
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	fe00e800 	.word	0xfe00e800

080035e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b087      	sub	sp, #28
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	607b      	str	r3, [r7, #4]
 80035f2:	460b      	mov	r3, r1
 80035f4:	817b      	strh	r3, [r7, #10]
 80035f6:	4613      	mov	r3, r2
 80035f8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035fa:	897b      	ldrh	r3, [r7, #10]
 80035fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003600:	7a7b      	ldrb	r3, [r7, #9]
 8003602:	041b      	lsls	r3, r3, #16
 8003604:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003608:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800360e:	6a3b      	ldr	r3, [r7, #32]
 8003610:	4313      	orrs	r3, r2
 8003612:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003616:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	685a      	ldr	r2, [r3, #4]
 800361e:	6a3b      	ldr	r3, [r7, #32]
 8003620:	0d5b      	lsrs	r3, r3, #21
 8003622:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003626:	4b08      	ldr	r3, [pc, #32]	@ (8003648 <I2C_TransferConfig+0x60>)
 8003628:	430b      	orrs	r3, r1
 800362a:	43db      	mvns	r3, r3
 800362c:	ea02 0103 	and.w	r1, r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	697a      	ldr	r2, [r7, #20]
 8003636:	430a      	orrs	r2, r1
 8003638:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800363a:	bf00      	nop
 800363c:	371c      	adds	r7, #28
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	03ff63ff 	.word	0x03ff63ff

0800364c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b20      	cmp	r3, #32
 8003660:	d138      	bne.n	80036d4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003668:	2b01      	cmp	r3, #1
 800366a:	d101      	bne.n	8003670 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800366c:	2302      	movs	r3, #2
 800366e:	e032      	b.n	80036d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2224      	movs	r2, #36	@ 0x24
 800367c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f022 0201 	bic.w	r2, r2, #1
 800368e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800369e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	6819      	ldr	r1, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	430a      	orrs	r2, r1
 80036ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f042 0201 	orr.w	r2, r2, #1
 80036be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2220      	movs	r2, #32
 80036c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80036d0:	2300      	movs	r3, #0
 80036d2:	e000      	b.n	80036d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80036d4:	2302      	movs	r3, #2
  }
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr

080036e2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80036e2:	b480      	push	{r7}
 80036e4:	b085      	sub	sp, #20
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
 80036ea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	2b20      	cmp	r3, #32
 80036f6:	d139      	bne.n	800376c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d101      	bne.n	8003706 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003702:	2302      	movs	r3, #2
 8003704:	e033      	b.n	800376e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2201      	movs	r2, #1
 800370a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2224      	movs	r2, #36	@ 0x24
 8003712:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 0201 	bic.w	r2, r2, #1
 8003724:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003734:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	021b      	lsls	r3, r3, #8
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	4313      	orrs	r3, r2
 800373e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68fa      	ldr	r2, [r7, #12]
 8003746:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f042 0201 	orr.w	r2, r2, #1
 8003756:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2220      	movs	r2, #32
 800375c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003768:	2300      	movs	r3, #0
 800376a:	e000      	b.n	800376e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800376c:	2302      	movs	r3, #2
  }
}
 800376e:	4618      	mov	r0, r3
 8003770:	3714      	adds	r7, #20
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
	...

0800377c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8003782:	af00      	add	r7, sp, #0
 8003784:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003788:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800378c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800378e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003792:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d102      	bne.n	80037a2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	f001 b823 	b.w	80047e8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037a6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	f000 817d 	beq.w	8003ab2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80037b8:	4bbc      	ldr	r3, [pc, #752]	@ (8003aac <HAL_RCC_OscConfig+0x330>)
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f003 030c 	and.w	r3, r3, #12
 80037c0:	2b04      	cmp	r3, #4
 80037c2:	d00c      	beq.n	80037de <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80037c4:	4bb9      	ldr	r3, [pc, #740]	@ (8003aac <HAL_RCC_OscConfig+0x330>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f003 030c 	and.w	r3, r3, #12
 80037cc:	2b08      	cmp	r3, #8
 80037ce:	d15c      	bne.n	800388a <HAL_RCC_OscConfig+0x10e>
 80037d0:	4bb6      	ldr	r3, [pc, #728]	@ (8003aac <HAL_RCC_OscConfig+0x330>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037dc:	d155      	bne.n	800388a <HAL_RCC_OscConfig+0x10e>
 80037de:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80037e2:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80037ea:	fa93 f3a3 	rbit	r3, r3
 80037ee:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80037f2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037f6:	fab3 f383 	clz	r3, r3
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	095b      	lsrs	r3, r3, #5
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	f043 0301 	orr.w	r3, r3, #1
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b01      	cmp	r3, #1
 8003808:	d102      	bne.n	8003810 <HAL_RCC_OscConfig+0x94>
 800380a:	4ba8      	ldr	r3, [pc, #672]	@ (8003aac <HAL_RCC_OscConfig+0x330>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	e015      	b.n	800383c <HAL_RCC_OscConfig+0xc0>
 8003810:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003814:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003818:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800381c:	fa93 f3a3 	rbit	r3, r3
 8003820:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8003824:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003828:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800382c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8003830:	fa93 f3a3 	rbit	r3, r3
 8003834:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8003838:	4b9c      	ldr	r3, [pc, #624]	@ (8003aac <HAL_RCC_OscConfig+0x330>)
 800383a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800383c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003840:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8003844:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8003848:	fa92 f2a2 	rbit	r2, r2
 800384c:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8003850:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8003854:	fab2 f282 	clz	r2, r2
 8003858:	b2d2      	uxtb	r2, r2
 800385a:	f042 0220 	orr.w	r2, r2, #32
 800385e:	b2d2      	uxtb	r2, r2
 8003860:	f002 021f 	and.w	r2, r2, #31
 8003864:	2101      	movs	r1, #1
 8003866:	fa01 f202 	lsl.w	r2, r1, r2
 800386a:	4013      	ands	r3, r2
 800386c:	2b00      	cmp	r3, #0
 800386e:	f000 811f 	beq.w	8003ab0 <HAL_RCC_OscConfig+0x334>
 8003872:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003876:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	2b00      	cmp	r3, #0
 8003880:	f040 8116 	bne.w	8003ab0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	f000 bfaf 	b.w	80047e8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800388a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800388e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800389a:	d106      	bne.n	80038aa <HAL_RCC_OscConfig+0x12e>
 800389c:	4b83      	ldr	r3, [pc, #524]	@ (8003aac <HAL_RCC_OscConfig+0x330>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a82      	ldr	r2, [pc, #520]	@ (8003aac <HAL_RCC_OscConfig+0x330>)
 80038a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038a6:	6013      	str	r3, [r2, #0]
 80038a8:	e036      	b.n	8003918 <HAL_RCC_OscConfig+0x19c>
 80038aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038ae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d10c      	bne.n	80038d4 <HAL_RCC_OscConfig+0x158>
 80038ba:	4b7c      	ldr	r3, [pc, #496]	@ (8003aac <HAL_RCC_OscConfig+0x330>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a7b      	ldr	r2, [pc, #492]	@ (8003aac <HAL_RCC_OscConfig+0x330>)
 80038c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038c4:	6013      	str	r3, [r2, #0]
 80038c6:	4b79      	ldr	r3, [pc, #484]	@ (8003aac <HAL_RCC_OscConfig+0x330>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a78      	ldr	r2, [pc, #480]	@ (8003aac <HAL_RCC_OscConfig+0x330>)
 80038cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038d0:	6013      	str	r3, [r2, #0]
 80038d2:	e021      	b.n	8003918 <HAL_RCC_OscConfig+0x19c>
 80038d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038d8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038e4:	d10c      	bne.n	8003900 <HAL_RCC_OscConfig+0x184>
 80038e6:	4b71      	ldr	r3, [pc, #452]	@ (8003aac <HAL_RCC_OscConfig+0x330>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a70      	ldr	r2, [pc, #448]	@ (8003aac <HAL_RCC_OscConfig+0x330>)
 80038ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038f0:	6013      	str	r3, [r2, #0]
 80038f2:	4b6e      	ldr	r3, [pc, #440]	@ (8003aac <HAL_RCC_OscConfig+0x330>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a6d      	ldr	r2, [pc, #436]	@ (8003aac <HAL_RCC_OscConfig+0x330>)
 80038f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038fc:	6013      	str	r3, [r2, #0]
 80038fe:	e00b      	b.n	8003918 <HAL_RCC_OscConfig+0x19c>
 8003900:	4b6a      	ldr	r3, [pc, #424]	@ (8003aac <HAL_RCC_OscConfig+0x330>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a69      	ldr	r2, [pc, #420]	@ (8003aac <HAL_RCC_OscConfig+0x330>)
 8003906:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800390a:	6013      	str	r3, [r2, #0]
 800390c:	4b67      	ldr	r3, [pc, #412]	@ (8003aac <HAL_RCC_OscConfig+0x330>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a66      	ldr	r2, [pc, #408]	@ (8003aac <HAL_RCC_OscConfig+0x330>)
 8003912:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003916:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003918:	4b64      	ldr	r3, [pc, #400]	@ (8003aac <HAL_RCC_OscConfig+0x330>)
 800391a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800391c:	f023 020f 	bic.w	r2, r3, #15
 8003920:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003924:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	495f      	ldr	r1, [pc, #380]	@ (8003aac <HAL_RCC_OscConfig+0x330>)
 800392e:	4313      	orrs	r3, r2
 8003930:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003932:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003936:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d059      	beq.n	80039f6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003942:	f7fe fdaf 	bl	80024a4 <HAL_GetTick>
 8003946:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800394a:	e00a      	b.n	8003962 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800394c:	f7fe fdaa 	bl	80024a4 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	2b64      	cmp	r3, #100	@ 0x64
 800395a:	d902      	bls.n	8003962 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	f000 bf43 	b.w	80047e8 <HAL_RCC_OscConfig+0x106c>
 8003962:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003966:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800396a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800396e:	fa93 f3a3 	rbit	r3, r3
 8003972:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8003976:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800397a:	fab3 f383 	clz	r3, r3
 800397e:	b2db      	uxtb	r3, r3
 8003980:	095b      	lsrs	r3, r3, #5
 8003982:	b2db      	uxtb	r3, r3
 8003984:	f043 0301 	orr.w	r3, r3, #1
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b01      	cmp	r3, #1
 800398c:	d102      	bne.n	8003994 <HAL_RCC_OscConfig+0x218>
 800398e:	4b47      	ldr	r3, [pc, #284]	@ (8003aac <HAL_RCC_OscConfig+0x330>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	e015      	b.n	80039c0 <HAL_RCC_OscConfig+0x244>
 8003994:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003998:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800399c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80039a0:	fa93 f3a3 	rbit	r3, r3
 80039a4:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80039a8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80039ac:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80039b0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80039b4:	fa93 f3a3 	rbit	r3, r3
 80039b8:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80039bc:	4b3b      	ldr	r3, [pc, #236]	@ (8003aac <HAL_RCC_OscConfig+0x330>)
 80039be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80039c4:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80039c8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80039cc:	fa92 f2a2 	rbit	r2, r2
 80039d0:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80039d4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80039d8:	fab2 f282 	clz	r2, r2
 80039dc:	b2d2      	uxtb	r2, r2
 80039de:	f042 0220 	orr.w	r2, r2, #32
 80039e2:	b2d2      	uxtb	r2, r2
 80039e4:	f002 021f 	and.w	r2, r2, #31
 80039e8:	2101      	movs	r1, #1
 80039ea:	fa01 f202 	lsl.w	r2, r1, r2
 80039ee:	4013      	ands	r3, r2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d0ab      	beq.n	800394c <HAL_RCC_OscConfig+0x1d0>
 80039f4:	e05d      	b.n	8003ab2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f6:	f7fe fd55 	bl	80024a4 <HAL_GetTick>
 80039fa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039fe:	e00a      	b.n	8003a16 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a00:	f7fe fd50 	bl	80024a4 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	2b64      	cmp	r3, #100	@ 0x64
 8003a0e:	d902      	bls.n	8003a16 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	f000 bee9 	b.w	80047e8 <HAL_RCC_OscConfig+0x106c>
 8003a16:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003a1a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a1e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8003a22:	fa93 f3a3 	rbit	r3, r3
 8003a26:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8003a2a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a2e:	fab3 f383 	clz	r3, r3
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	095b      	lsrs	r3, r3, #5
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	f043 0301 	orr.w	r3, r3, #1
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d102      	bne.n	8003a48 <HAL_RCC_OscConfig+0x2cc>
 8003a42:	4b1a      	ldr	r3, [pc, #104]	@ (8003aac <HAL_RCC_OscConfig+0x330>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	e015      	b.n	8003a74 <HAL_RCC_OscConfig+0x2f8>
 8003a48:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003a4c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a50:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003a54:	fa93 f3a3 	rbit	r3, r3
 8003a58:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003a5c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003a60:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003a64:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003a68:	fa93 f3a3 	rbit	r3, r3
 8003a6c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003a70:	4b0e      	ldr	r3, [pc, #56]	@ (8003aac <HAL_RCC_OscConfig+0x330>)
 8003a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a74:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003a78:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8003a7c:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003a80:	fa92 f2a2 	rbit	r2, r2
 8003a84:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8003a88:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8003a8c:	fab2 f282 	clz	r2, r2
 8003a90:	b2d2      	uxtb	r2, r2
 8003a92:	f042 0220 	orr.w	r2, r2, #32
 8003a96:	b2d2      	uxtb	r2, r2
 8003a98:	f002 021f 	and.w	r2, r2, #31
 8003a9c:	2101      	movs	r1, #1
 8003a9e:	fa01 f202 	lsl.w	r2, r1, r2
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d1ab      	bne.n	8003a00 <HAL_RCC_OscConfig+0x284>
 8003aa8:	e003      	b.n	8003ab2 <HAL_RCC_OscConfig+0x336>
 8003aaa:	bf00      	nop
 8003aac:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ab0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ab2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ab6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	f000 817d 	beq.w	8003dc2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003ac8:	4ba6      	ldr	r3, [pc, #664]	@ (8003d64 <HAL_RCC_OscConfig+0x5e8>)
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f003 030c 	and.w	r3, r3, #12
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00b      	beq.n	8003aec <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003ad4:	4ba3      	ldr	r3, [pc, #652]	@ (8003d64 <HAL_RCC_OscConfig+0x5e8>)
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f003 030c 	and.w	r3, r3, #12
 8003adc:	2b08      	cmp	r3, #8
 8003ade:	d172      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x44a>
 8003ae0:	4ba0      	ldr	r3, [pc, #640]	@ (8003d64 <HAL_RCC_OscConfig+0x5e8>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d16c      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x44a>
 8003aec:	2302      	movs	r3, #2
 8003aee:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8003af6:	fa93 f3a3 	rbit	r3, r3
 8003afa:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8003afe:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b02:	fab3 f383 	clz	r3, r3
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	095b      	lsrs	r3, r3, #5
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	f043 0301 	orr.w	r3, r3, #1
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d102      	bne.n	8003b1c <HAL_RCC_OscConfig+0x3a0>
 8003b16:	4b93      	ldr	r3, [pc, #588]	@ (8003d64 <HAL_RCC_OscConfig+0x5e8>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	e013      	b.n	8003b44 <HAL_RCC_OscConfig+0x3c8>
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b22:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8003b26:	fa93 f3a3 	rbit	r3, r3
 8003b2a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8003b2e:	2302      	movs	r3, #2
 8003b30:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8003b34:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003b38:	fa93 f3a3 	rbit	r3, r3
 8003b3c:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8003b40:	4b88      	ldr	r3, [pc, #544]	@ (8003d64 <HAL_RCC_OscConfig+0x5e8>)
 8003b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b44:	2202      	movs	r2, #2
 8003b46:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8003b4a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8003b4e:	fa92 f2a2 	rbit	r2, r2
 8003b52:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8003b56:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8003b5a:	fab2 f282 	clz	r2, r2
 8003b5e:	b2d2      	uxtb	r2, r2
 8003b60:	f042 0220 	orr.w	r2, r2, #32
 8003b64:	b2d2      	uxtb	r2, r2
 8003b66:	f002 021f 	and.w	r2, r2, #31
 8003b6a:	2101      	movs	r1, #1
 8003b6c:	fa01 f202 	lsl.w	r2, r1, r2
 8003b70:	4013      	ands	r3, r2
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00a      	beq.n	8003b8c <HAL_RCC_OscConfig+0x410>
 8003b76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b7a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d002      	beq.n	8003b8c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	f000 be2e 	b.w	80047e8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b8c:	4b75      	ldr	r3, [pc, #468]	@ (8003d64 <HAL_RCC_OscConfig+0x5e8>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b98:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	695b      	ldr	r3, [r3, #20]
 8003ba0:	21f8      	movs	r1, #248	@ 0xf8
 8003ba2:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba6:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8003baa:	fa91 f1a1 	rbit	r1, r1
 8003bae:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8003bb2:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8003bb6:	fab1 f181 	clz	r1, r1
 8003bba:	b2c9      	uxtb	r1, r1
 8003bbc:	408b      	lsls	r3, r1
 8003bbe:	4969      	ldr	r1, [pc, #420]	@ (8003d64 <HAL_RCC_OscConfig+0x5e8>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bc4:	e0fd      	b.n	8003dc2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	f000 8088 	beq.w	8003ce8 <HAL_RCC_OscConfig+0x56c>
 8003bd8:	2301      	movs	r3, #1
 8003bda:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bde:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8003be2:	fa93 f3a3 	rbit	r3, r3
 8003be6:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8003bea:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bee:	fab3 f383 	clz	r3, r3
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003bf8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	461a      	mov	r2, r3
 8003c00:	2301      	movs	r3, #1
 8003c02:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c04:	f7fe fc4e 	bl	80024a4 <HAL_GetTick>
 8003c08:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c0c:	e00a      	b.n	8003c24 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c0e:	f7fe fc49 	bl	80024a4 <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d902      	bls.n	8003c24 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	f000 bde2 	b.w	80047e8 <HAL_RCC_OscConfig+0x106c>
 8003c24:	2302      	movs	r3, #2
 8003c26:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c2a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8003c2e:	fa93 f3a3 	rbit	r3, r3
 8003c32:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8003c36:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c3a:	fab3 f383 	clz	r3, r3
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	095b      	lsrs	r3, r3, #5
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	f043 0301 	orr.w	r3, r3, #1
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d102      	bne.n	8003c54 <HAL_RCC_OscConfig+0x4d8>
 8003c4e:	4b45      	ldr	r3, [pc, #276]	@ (8003d64 <HAL_RCC_OscConfig+0x5e8>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	e013      	b.n	8003c7c <HAL_RCC_OscConfig+0x500>
 8003c54:	2302      	movs	r3, #2
 8003c56:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8003c5e:	fa93 f3a3 	rbit	r3, r3
 8003c62:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8003c66:	2302      	movs	r3, #2
 8003c68:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003c6c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8003c70:	fa93 f3a3 	rbit	r3, r3
 8003c74:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8003c78:	4b3a      	ldr	r3, [pc, #232]	@ (8003d64 <HAL_RCC_OscConfig+0x5e8>)
 8003c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c7c:	2202      	movs	r2, #2
 8003c7e:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8003c82:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8003c86:	fa92 f2a2 	rbit	r2, r2
 8003c8a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8003c8e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8003c92:	fab2 f282 	clz	r2, r2
 8003c96:	b2d2      	uxtb	r2, r2
 8003c98:	f042 0220 	orr.w	r2, r2, #32
 8003c9c:	b2d2      	uxtb	r2, r2
 8003c9e:	f002 021f 	and.w	r2, r2, #31
 8003ca2:	2101      	movs	r1, #1
 8003ca4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ca8:	4013      	ands	r3, r2
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d0af      	beq.n	8003c0e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cae:	4b2d      	ldr	r3, [pc, #180]	@ (8003d64 <HAL_RCC_OscConfig+0x5e8>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003cb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	695b      	ldr	r3, [r3, #20]
 8003cc2:	21f8      	movs	r1, #248	@ 0xf8
 8003cc4:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cc8:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8003ccc:	fa91 f1a1 	rbit	r1, r1
 8003cd0:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8003cd4:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8003cd8:	fab1 f181 	clz	r1, r1
 8003cdc:	b2c9      	uxtb	r1, r1
 8003cde:	408b      	lsls	r3, r1
 8003ce0:	4920      	ldr	r1, [pc, #128]	@ (8003d64 <HAL_RCC_OscConfig+0x5e8>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	600b      	str	r3, [r1, #0]
 8003ce6:	e06c      	b.n	8003dc2 <HAL_RCC_OscConfig+0x646>
 8003ce8:	2301      	movs	r3, #1
 8003cea:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cee:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003cf2:	fa93 f3a3 	rbit	r3, r3
 8003cf6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8003cfa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cfe:	fab3 f383 	clz	r3, r3
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003d08:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	461a      	mov	r2, r3
 8003d10:	2300      	movs	r3, #0
 8003d12:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d14:	f7fe fbc6 	bl	80024a4 <HAL_GetTick>
 8003d18:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d1c:	e00a      	b.n	8003d34 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d1e:	f7fe fbc1 	bl	80024a4 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d902      	bls.n	8003d34 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	f000 bd5a 	b.w	80047e8 <HAL_RCC_OscConfig+0x106c>
 8003d34:	2302      	movs	r3, #2
 8003d36:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d3a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8003d3e:	fa93 f3a3 	rbit	r3, r3
 8003d42:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8003d46:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d4a:	fab3 f383 	clz	r3, r3
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	095b      	lsrs	r3, r3, #5
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	f043 0301 	orr.w	r3, r3, #1
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d104      	bne.n	8003d68 <HAL_RCC_OscConfig+0x5ec>
 8003d5e:	4b01      	ldr	r3, [pc, #4]	@ (8003d64 <HAL_RCC_OscConfig+0x5e8>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	e015      	b.n	8003d90 <HAL_RCC_OscConfig+0x614>
 8003d64:	40021000 	.word	0x40021000
 8003d68:	2302      	movs	r3, #2
 8003d6a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003d72:	fa93 f3a3 	rbit	r3, r3
 8003d76:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003d7a:	2302      	movs	r3, #2
 8003d7c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003d80:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003d84:	fa93 f3a3 	rbit	r3, r3
 8003d88:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8003d8c:	4bc8      	ldr	r3, [pc, #800]	@ (80040b0 <HAL_RCC_OscConfig+0x934>)
 8003d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d90:	2202      	movs	r2, #2
 8003d92:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8003d96:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003d9a:	fa92 f2a2 	rbit	r2, r2
 8003d9e:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8003da2:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8003da6:	fab2 f282 	clz	r2, r2
 8003daa:	b2d2      	uxtb	r2, r2
 8003dac:	f042 0220 	orr.w	r2, r2, #32
 8003db0:	b2d2      	uxtb	r2, r2
 8003db2:	f002 021f 	and.w	r2, r2, #31
 8003db6:	2101      	movs	r1, #1
 8003db8:	fa01 f202 	lsl.w	r2, r1, r2
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1ad      	bne.n	8003d1e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dc6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0308 	and.w	r3, r3, #8
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	f000 8110 	beq.w	8003ff8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003dd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ddc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	699b      	ldr	r3, [r3, #24]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d079      	beq.n	8003edc <HAL_RCC_OscConfig+0x760>
 8003de8:	2301      	movs	r3, #1
 8003dea:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dee:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003df2:	fa93 f3a3 	rbit	r3, r3
 8003df6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8003dfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dfe:	fab3 f383 	clz	r3, r3
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	461a      	mov	r2, r3
 8003e06:	4bab      	ldr	r3, [pc, #684]	@ (80040b4 <HAL_RCC_OscConfig+0x938>)
 8003e08:	4413      	add	r3, r2
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	2301      	movs	r3, #1
 8003e10:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e12:	f7fe fb47 	bl	80024a4 <HAL_GetTick>
 8003e16:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e1a:	e00a      	b.n	8003e32 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e1c:	f7fe fb42 	bl	80024a4 <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d902      	bls.n	8003e32 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	f000 bcdb 	b.w	80047e8 <HAL_RCC_OscConfig+0x106c>
 8003e32:	2302      	movs	r3, #2
 8003e34:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e38:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003e3c:	fa93 f3a3 	rbit	r3, r3
 8003e40:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003e44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e48:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003e4c:	2202      	movs	r2, #2
 8003e4e:	601a      	str	r2, [r3, #0]
 8003e50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e54:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	fa93 f2a3 	rbit	r2, r3
 8003e5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003e66:	601a      	str	r2, [r3, #0]
 8003e68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003e70:	2202      	movs	r2, #2
 8003e72:	601a      	str	r2, [r3, #0]
 8003e74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	fa93 f2a3 	rbit	r2, r3
 8003e82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e86:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003e8a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e8c:	4b88      	ldr	r3, [pc, #544]	@ (80040b0 <HAL_RCC_OscConfig+0x934>)
 8003e8e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e94:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003e98:	2102      	movs	r1, #2
 8003e9a:	6019      	str	r1, [r3, #0]
 8003e9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ea0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	fa93 f1a3 	rbit	r1, r3
 8003eaa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003eae:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003eb2:	6019      	str	r1, [r3, #0]
  return result;
 8003eb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003eb8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	fab3 f383 	clz	r3, r3
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	f003 031f 	and.w	r3, r3, #31
 8003ece:	2101      	movs	r1, #1
 8003ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d0a0      	beq.n	8003e1c <HAL_RCC_OscConfig+0x6a0>
 8003eda:	e08d      	b.n	8003ff8 <HAL_RCC_OscConfig+0x87c>
 8003edc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ee0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003eec:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	fa93 f2a3 	rbit	r2, r3
 8003ef6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003efa:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003efe:	601a      	str	r2, [r3, #0]
  return result;
 8003f00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f04:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003f08:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f0a:	fab3 f383 	clz	r3, r3
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	461a      	mov	r2, r3
 8003f12:	4b68      	ldr	r3, [pc, #416]	@ (80040b4 <HAL_RCC_OscConfig+0x938>)
 8003f14:	4413      	add	r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	461a      	mov	r2, r3
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f1e:	f7fe fac1 	bl	80024a4 <HAL_GetTick>
 8003f22:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f26:	e00a      	b.n	8003f3e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f28:	f7fe fabc 	bl	80024a4 <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	d902      	bls.n	8003f3e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	f000 bc55 	b.w	80047e8 <HAL_RCC_OscConfig+0x106c>
 8003f3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f42:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003f46:	2202      	movs	r2, #2
 8003f48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f4e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	fa93 f2a3 	rbit	r2, r3
 8003f58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f5c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003f60:	601a      	str	r2, [r3, #0]
 8003f62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f66:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003f6a:	2202      	movs	r2, #2
 8003f6c:	601a      	str	r2, [r3, #0]
 8003f6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f72:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	fa93 f2a3 	rbit	r2, r3
 8003f7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f80:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003f84:	601a      	str	r2, [r3, #0]
 8003f86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f8a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003f8e:	2202      	movs	r2, #2
 8003f90:	601a      	str	r2, [r3, #0]
 8003f92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f96:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	fa93 f2a3 	rbit	r2, r3
 8003fa0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fa4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003fa8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003faa:	4b41      	ldr	r3, [pc, #260]	@ (80040b0 <HAL_RCC_OscConfig+0x934>)
 8003fac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003fae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fb2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003fb6:	2102      	movs	r1, #2
 8003fb8:	6019      	str	r1, [r3, #0]
 8003fba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fbe:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	fa93 f1a3 	rbit	r1, r3
 8003fc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fcc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003fd0:	6019      	str	r1, [r3, #0]
  return result;
 8003fd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fd6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	fab3 f383 	clz	r3, r3
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	f003 031f 	and.w	r3, r3, #31
 8003fec:	2101      	movs	r1, #1
 8003fee:	fa01 f303 	lsl.w	r3, r1, r3
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d197      	bne.n	8003f28 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ff8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ffc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0304 	and.w	r3, r3, #4
 8004008:	2b00      	cmp	r3, #0
 800400a:	f000 81a1 	beq.w	8004350 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800400e:	2300      	movs	r3, #0
 8004010:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004014:	4b26      	ldr	r3, [pc, #152]	@ (80040b0 <HAL_RCC_OscConfig+0x934>)
 8004016:	69db      	ldr	r3, [r3, #28]
 8004018:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d116      	bne.n	800404e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004020:	4b23      	ldr	r3, [pc, #140]	@ (80040b0 <HAL_RCC_OscConfig+0x934>)
 8004022:	69db      	ldr	r3, [r3, #28]
 8004024:	4a22      	ldr	r2, [pc, #136]	@ (80040b0 <HAL_RCC_OscConfig+0x934>)
 8004026:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800402a:	61d3      	str	r3, [r2, #28]
 800402c:	4b20      	ldr	r3, [pc, #128]	@ (80040b0 <HAL_RCC_OscConfig+0x934>)
 800402e:	69db      	ldr	r3, [r3, #28]
 8004030:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8004034:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004038:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800403c:	601a      	str	r2, [r3, #0]
 800403e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004042:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8004046:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004048:	2301      	movs	r3, #1
 800404a:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800404e:	4b1a      	ldr	r3, [pc, #104]	@ (80040b8 <HAL_RCC_OscConfig+0x93c>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004056:	2b00      	cmp	r3, #0
 8004058:	d11a      	bne.n	8004090 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800405a:	4b17      	ldr	r3, [pc, #92]	@ (80040b8 <HAL_RCC_OscConfig+0x93c>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a16      	ldr	r2, [pc, #88]	@ (80040b8 <HAL_RCC_OscConfig+0x93c>)
 8004060:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004064:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004066:	f7fe fa1d 	bl	80024a4 <HAL_GetTick>
 800406a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800406e:	e009      	b.n	8004084 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004070:	f7fe fa18 	bl	80024a4 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	2b64      	cmp	r3, #100	@ 0x64
 800407e:	d901      	bls.n	8004084 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e3b1      	b.n	80047e8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004084:	4b0c      	ldr	r3, [pc, #48]	@ (80040b8 <HAL_RCC_OscConfig+0x93c>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800408c:	2b00      	cmp	r3, #0
 800408e:	d0ef      	beq.n	8004070 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004090:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004094:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	2b01      	cmp	r3, #1
 800409e:	d10d      	bne.n	80040bc <HAL_RCC_OscConfig+0x940>
 80040a0:	4b03      	ldr	r3, [pc, #12]	@ (80040b0 <HAL_RCC_OscConfig+0x934>)
 80040a2:	6a1b      	ldr	r3, [r3, #32]
 80040a4:	4a02      	ldr	r2, [pc, #8]	@ (80040b0 <HAL_RCC_OscConfig+0x934>)
 80040a6:	f043 0301 	orr.w	r3, r3, #1
 80040aa:	6213      	str	r3, [r2, #32]
 80040ac:	e03c      	b.n	8004128 <HAL_RCC_OscConfig+0x9ac>
 80040ae:	bf00      	nop
 80040b0:	40021000 	.word	0x40021000
 80040b4:	10908120 	.word	0x10908120
 80040b8:	40007000 	.word	0x40007000
 80040bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040c0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d10c      	bne.n	80040e6 <HAL_RCC_OscConfig+0x96a>
 80040cc:	4bc1      	ldr	r3, [pc, #772]	@ (80043d4 <HAL_RCC_OscConfig+0xc58>)
 80040ce:	6a1b      	ldr	r3, [r3, #32]
 80040d0:	4ac0      	ldr	r2, [pc, #768]	@ (80043d4 <HAL_RCC_OscConfig+0xc58>)
 80040d2:	f023 0301 	bic.w	r3, r3, #1
 80040d6:	6213      	str	r3, [r2, #32]
 80040d8:	4bbe      	ldr	r3, [pc, #760]	@ (80043d4 <HAL_RCC_OscConfig+0xc58>)
 80040da:	6a1b      	ldr	r3, [r3, #32]
 80040dc:	4abd      	ldr	r2, [pc, #756]	@ (80043d4 <HAL_RCC_OscConfig+0xc58>)
 80040de:	f023 0304 	bic.w	r3, r3, #4
 80040e2:	6213      	str	r3, [r2, #32]
 80040e4:	e020      	b.n	8004128 <HAL_RCC_OscConfig+0x9ac>
 80040e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040ea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	2b05      	cmp	r3, #5
 80040f4:	d10c      	bne.n	8004110 <HAL_RCC_OscConfig+0x994>
 80040f6:	4bb7      	ldr	r3, [pc, #732]	@ (80043d4 <HAL_RCC_OscConfig+0xc58>)
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	4ab6      	ldr	r2, [pc, #728]	@ (80043d4 <HAL_RCC_OscConfig+0xc58>)
 80040fc:	f043 0304 	orr.w	r3, r3, #4
 8004100:	6213      	str	r3, [r2, #32]
 8004102:	4bb4      	ldr	r3, [pc, #720]	@ (80043d4 <HAL_RCC_OscConfig+0xc58>)
 8004104:	6a1b      	ldr	r3, [r3, #32]
 8004106:	4ab3      	ldr	r2, [pc, #716]	@ (80043d4 <HAL_RCC_OscConfig+0xc58>)
 8004108:	f043 0301 	orr.w	r3, r3, #1
 800410c:	6213      	str	r3, [r2, #32]
 800410e:	e00b      	b.n	8004128 <HAL_RCC_OscConfig+0x9ac>
 8004110:	4bb0      	ldr	r3, [pc, #704]	@ (80043d4 <HAL_RCC_OscConfig+0xc58>)
 8004112:	6a1b      	ldr	r3, [r3, #32]
 8004114:	4aaf      	ldr	r2, [pc, #700]	@ (80043d4 <HAL_RCC_OscConfig+0xc58>)
 8004116:	f023 0301 	bic.w	r3, r3, #1
 800411a:	6213      	str	r3, [r2, #32]
 800411c:	4bad      	ldr	r3, [pc, #692]	@ (80043d4 <HAL_RCC_OscConfig+0xc58>)
 800411e:	6a1b      	ldr	r3, [r3, #32]
 8004120:	4aac      	ldr	r2, [pc, #688]	@ (80043d4 <HAL_RCC_OscConfig+0xc58>)
 8004122:	f023 0304 	bic.w	r3, r3, #4
 8004126:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004128:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800412c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	2b00      	cmp	r3, #0
 8004136:	f000 8081 	beq.w	800423c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800413a:	f7fe f9b3 	bl	80024a4 <HAL_GetTick>
 800413e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004142:	e00b      	b.n	800415c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004144:	f7fe f9ae 	bl	80024a4 <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004154:	4293      	cmp	r3, r2
 8004156:	d901      	bls.n	800415c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e345      	b.n	80047e8 <HAL_RCC_OscConfig+0x106c>
 800415c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004160:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004164:	2202      	movs	r2, #2
 8004166:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004168:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800416c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	fa93 f2a3 	rbit	r2, r3
 8004176:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800417a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800417e:	601a      	str	r2, [r3, #0]
 8004180:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004184:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004188:	2202      	movs	r2, #2
 800418a:	601a      	str	r2, [r3, #0]
 800418c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004190:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	fa93 f2a3 	rbit	r2, r3
 800419a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800419e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80041a2:	601a      	str	r2, [r3, #0]
  return result;
 80041a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041a8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80041ac:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041ae:	fab3 f383 	clz	r3, r3
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	095b      	lsrs	r3, r3, #5
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	f043 0302 	orr.w	r3, r3, #2
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d102      	bne.n	80041c8 <HAL_RCC_OscConfig+0xa4c>
 80041c2:	4b84      	ldr	r3, [pc, #528]	@ (80043d4 <HAL_RCC_OscConfig+0xc58>)
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	e013      	b.n	80041f0 <HAL_RCC_OscConfig+0xa74>
 80041c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041cc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80041d0:	2202      	movs	r2, #2
 80041d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041d8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	fa93 f2a3 	rbit	r2, r3
 80041e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041e6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80041ea:	601a      	str	r2, [r3, #0]
 80041ec:	4b79      	ldr	r3, [pc, #484]	@ (80043d4 <HAL_RCC_OscConfig+0xc58>)
 80041ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80041f4:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80041f8:	2102      	movs	r1, #2
 80041fa:	6011      	str	r1, [r2, #0]
 80041fc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004200:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8004204:	6812      	ldr	r2, [r2, #0]
 8004206:	fa92 f1a2 	rbit	r1, r2
 800420a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800420e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004212:	6011      	str	r1, [r2, #0]
  return result;
 8004214:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004218:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800421c:	6812      	ldr	r2, [r2, #0]
 800421e:	fab2 f282 	clz	r2, r2
 8004222:	b2d2      	uxtb	r2, r2
 8004224:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004228:	b2d2      	uxtb	r2, r2
 800422a:	f002 021f 	and.w	r2, r2, #31
 800422e:	2101      	movs	r1, #1
 8004230:	fa01 f202 	lsl.w	r2, r1, r2
 8004234:	4013      	ands	r3, r2
 8004236:	2b00      	cmp	r3, #0
 8004238:	d084      	beq.n	8004144 <HAL_RCC_OscConfig+0x9c8>
 800423a:	e07f      	b.n	800433c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800423c:	f7fe f932 	bl	80024a4 <HAL_GetTick>
 8004240:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004244:	e00b      	b.n	800425e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004246:	f7fe f92d 	bl	80024a4 <HAL_GetTick>
 800424a:	4602      	mov	r2, r0
 800424c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004256:	4293      	cmp	r3, r2
 8004258:	d901      	bls.n	800425e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e2c4      	b.n	80047e8 <HAL_RCC_OscConfig+0x106c>
 800425e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004262:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004266:	2202      	movs	r2, #2
 8004268:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800426a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800426e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	fa93 f2a3 	rbit	r2, r3
 8004278:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800427c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004280:	601a      	str	r2, [r3, #0]
 8004282:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004286:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800428a:	2202      	movs	r2, #2
 800428c:	601a      	str	r2, [r3, #0]
 800428e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004292:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	fa93 f2a3 	rbit	r2, r3
 800429c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042a0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80042a4:	601a      	str	r2, [r3, #0]
  return result;
 80042a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042aa:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80042ae:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042b0:	fab3 f383 	clz	r3, r3
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	095b      	lsrs	r3, r3, #5
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	f043 0302 	orr.w	r3, r3, #2
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d102      	bne.n	80042ca <HAL_RCC_OscConfig+0xb4e>
 80042c4:	4b43      	ldr	r3, [pc, #268]	@ (80043d4 <HAL_RCC_OscConfig+0xc58>)
 80042c6:	6a1b      	ldr	r3, [r3, #32]
 80042c8:	e013      	b.n	80042f2 <HAL_RCC_OscConfig+0xb76>
 80042ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042ce:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80042d2:	2202      	movs	r2, #2
 80042d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042da:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	fa93 f2a3 	rbit	r2, r3
 80042e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042e8:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80042ec:	601a      	str	r2, [r3, #0]
 80042ee:	4b39      	ldr	r3, [pc, #228]	@ (80043d4 <HAL_RCC_OscConfig+0xc58>)
 80042f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80042f6:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80042fa:	2102      	movs	r1, #2
 80042fc:	6011      	str	r1, [r2, #0]
 80042fe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004302:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8004306:	6812      	ldr	r2, [r2, #0]
 8004308:	fa92 f1a2 	rbit	r1, r2
 800430c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004310:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004314:	6011      	str	r1, [r2, #0]
  return result;
 8004316:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800431a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800431e:	6812      	ldr	r2, [r2, #0]
 8004320:	fab2 f282 	clz	r2, r2
 8004324:	b2d2      	uxtb	r2, r2
 8004326:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800432a:	b2d2      	uxtb	r2, r2
 800432c:	f002 021f 	and.w	r2, r2, #31
 8004330:	2101      	movs	r1, #1
 8004332:	fa01 f202 	lsl.w	r2, r1, r2
 8004336:	4013      	ands	r3, r2
 8004338:	2b00      	cmp	r3, #0
 800433a:	d184      	bne.n	8004246 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800433c:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8004340:	2b01      	cmp	r3, #1
 8004342:	d105      	bne.n	8004350 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004344:	4b23      	ldr	r3, [pc, #140]	@ (80043d4 <HAL_RCC_OscConfig+0xc58>)
 8004346:	69db      	ldr	r3, [r3, #28]
 8004348:	4a22      	ldr	r2, [pc, #136]	@ (80043d4 <HAL_RCC_OscConfig+0xc58>)
 800434a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800434e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004350:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004354:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	69db      	ldr	r3, [r3, #28]
 800435c:	2b00      	cmp	r3, #0
 800435e:	f000 8242 	beq.w	80047e6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004362:	4b1c      	ldr	r3, [pc, #112]	@ (80043d4 <HAL_RCC_OscConfig+0xc58>)
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f003 030c 	and.w	r3, r3, #12
 800436a:	2b08      	cmp	r3, #8
 800436c:	f000 8213 	beq.w	8004796 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004370:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004374:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	69db      	ldr	r3, [r3, #28]
 800437c:	2b02      	cmp	r3, #2
 800437e:	f040 8162 	bne.w	8004646 <HAL_RCC_OscConfig+0xeca>
 8004382:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004386:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800438a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800438e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004390:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004394:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	fa93 f2a3 	rbit	r2, r3
 800439e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043a2:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80043a6:	601a      	str	r2, [r3, #0]
  return result;
 80043a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043ac:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80043b0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043b2:	fab3 f383 	clz	r3, r3
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80043bc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	461a      	mov	r2, r3
 80043c4:	2300      	movs	r3, #0
 80043c6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043c8:	f7fe f86c 	bl	80024a4 <HAL_GetTick>
 80043cc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043d0:	e00c      	b.n	80043ec <HAL_RCC_OscConfig+0xc70>
 80043d2:	bf00      	nop
 80043d4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043d8:	f7fe f864 	bl	80024a4 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d901      	bls.n	80043ec <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e1fd      	b.n	80047e8 <HAL_RCC_OscConfig+0x106c>
 80043ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043f0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80043f4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80043f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043fe:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	fa93 f2a3 	rbit	r2, r3
 8004408:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800440c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004410:	601a      	str	r2, [r3, #0]
  return result;
 8004412:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004416:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800441a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800441c:	fab3 f383 	clz	r3, r3
 8004420:	b2db      	uxtb	r3, r3
 8004422:	095b      	lsrs	r3, r3, #5
 8004424:	b2db      	uxtb	r3, r3
 8004426:	f043 0301 	orr.w	r3, r3, #1
 800442a:	b2db      	uxtb	r3, r3
 800442c:	2b01      	cmp	r3, #1
 800442e:	d102      	bne.n	8004436 <HAL_RCC_OscConfig+0xcba>
 8004430:	4bb0      	ldr	r3, [pc, #704]	@ (80046f4 <HAL_RCC_OscConfig+0xf78>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	e027      	b.n	8004486 <HAL_RCC_OscConfig+0xd0a>
 8004436:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800443a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800443e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004442:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004444:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004448:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	fa93 f2a3 	rbit	r2, r3
 8004452:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004456:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800445a:	601a      	str	r2, [r3, #0]
 800445c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004460:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004464:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004468:	601a      	str	r2, [r3, #0]
 800446a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800446e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	fa93 f2a3 	rbit	r2, r3
 8004478:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800447c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8004480:	601a      	str	r2, [r3, #0]
 8004482:	4b9c      	ldr	r3, [pc, #624]	@ (80046f4 <HAL_RCC_OscConfig+0xf78>)
 8004484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004486:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800448a:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800448e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004492:	6011      	str	r1, [r2, #0]
 8004494:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004498:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800449c:	6812      	ldr	r2, [r2, #0]
 800449e:	fa92 f1a2 	rbit	r1, r2
 80044a2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80044a6:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80044aa:	6011      	str	r1, [r2, #0]
  return result;
 80044ac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80044b0:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80044b4:	6812      	ldr	r2, [r2, #0]
 80044b6:	fab2 f282 	clz	r2, r2
 80044ba:	b2d2      	uxtb	r2, r2
 80044bc:	f042 0220 	orr.w	r2, r2, #32
 80044c0:	b2d2      	uxtb	r2, r2
 80044c2:	f002 021f 	and.w	r2, r2, #31
 80044c6:	2101      	movs	r1, #1
 80044c8:	fa01 f202 	lsl.w	r2, r1, r2
 80044cc:	4013      	ands	r3, r2
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d182      	bne.n	80043d8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044d2:	4b88      	ldr	r3, [pc, #544]	@ (80046f4 <HAL_RCC_OscConfig+0xf78>)
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80044da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044de:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80044e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044ea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	6a1b      	ldr	r3, [r3, #32]
 80044f2:	430b      	orrs	r3, r1
 80044f4:	497f      	ldr	r1, [pc, #508]	@ (80046f4 <HAL_RCC_OscConfig+0xf78>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	604b      	str	r3, [r1, #4]
 80044fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044fe:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8004502:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004506:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004508:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800450c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	fa93 f2a3 	rbit	r2, r3
 8004516:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800451a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800451e:	601a      	str	r2, [r3, #0]
  return result;
 8004520:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004524:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004528:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800452a:	fab3 f383 	clz	r3, r3
 800452e:	b2db      	uxtb	r3, r3
 8004530:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004534:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	461a      	mov	r2, r3
 800453c:	2301      	movs	r3, #1
 800453e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004540:	f7fd ffb0 	bl	80024a4 <HAL_GetTick>
 8004544:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004548:	e009      	b.n	800455e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800454a:	f7fd ffab 	bl	80024a4 <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	2b02      	cmp	r3, #2
 8004558:	d901      	bls.n	800455e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e144      	b.n	80047e8 <HAL_RCC_OscConfig+0x106c>
 800455e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004562:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004566:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800456a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800456c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004570:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	fa93 f2a3 	rbit	r2, r3
 800457a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800457e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004582:	601a      	str	r2, [r3, #0]
  return result;
 8004584:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004588:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800458c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800458e:	fab3 f383 	clz	r3, r3
 8004592:	b2db      	uxtb	r3, r3
 8004594:	095b      	lsrs	r3, r3, #5
 8004596:	b2db      	uxtb	r3, r3
 8004598:	f043 0301 	orr.w	r3, r3, #1
 800459c:	b2db      	uxtb	r3, r3
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d102      	bne.n	80045a8 <HAL_RCC_OscConfig+0xe2c>
 80045a2:	4b54      	ldr	r3, [pc, #336]	@ (80046f4 <HAL_RCC_OscConfig+0xf78>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	e027      	b.n	80045f8 <HAL_RCC_OscConfig+0xe7c>
 80045a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045ac:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80045b0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80045b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045ba:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	fa93 f2a3 	rbit	r2, r3
 80045c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045c8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80045cc:	601a      	str	r2, [r3, #0]
 80045ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045d2:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80045d6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80045da:	601a      	str	r2, [r3, #0]
 80045dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045e0:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	fa93 f2a3 	rbit	r2, r3
 80045ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045ee:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80045f2:	601a      	str	r2, [r3, #0]
 80045f4:	4b3f      	ldr	r3, [pc, #252]	@ (80046f4 <HAL_RCC_OscConfig+0xf78>)
 80045f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80045fc:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004600:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004604:	6011      	str	r1, [r2, #0]
 8004606:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800460a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800460e:	6812      	ldr	r2, [r2, #0]
 8004610:	fa92 f1a2 	rbit	r1, r2
 8004614:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004618:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800461c:	6011      	str	r1, [r2, #0]
  return result;
 800461e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004622:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004626:	6812      	ldr	r2, [r2, #0]
 8004628:	fab2 f282 	clz	r2, r2
 800462c:	b2d2      	uxtb	r2, r2
 800462e:	f042 0220 	orr.w	r2, r2, #32
 8004632:	b2d2      	uxtb	r2, r2
 8004634:	f002 021f 	and.w	r2, r2, #31
 8004638:	2101      	movs	r1, #1
 800463a:	fa01 f202 	lsl.w	r2, r1, r2
 800463e:	4013      	ands	r3, r2
 8004640:	2b00      	cmp	r3, #0
 8004642:	d082      	beq.n	800454a <HAL_RCC_OscConfig+0xdce>
 8004644:	e0cf      	b.n	80047e6 <HAL_RCC_OscConfig+0x106a>
 8004646:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800464a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800464e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004652:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004654:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004658:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	fa93 f2a3 	rbit	r2, r3
 8004662:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004666:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800466a:	601a      	str	r2, [r3, #0]
  return result;
 800466c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004670:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004674:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004676:	fab3 f383 	clz	r3, r3
 800467a:	b2db      	uxtb	r3, r3
 800467c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004680:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	461a      	mov	r2, r3
 8004688:	2300      	movs	r3, #0
 800468a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800468c:	f7fd ff0a 	bl	80024a4 <HAL_GetTick>
 8004690:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004694:	e009      	b.n	80046aa <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004696:	f7fd ff05 	bl	80024a4 <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d901      	bls.n	80046aa <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e09e      	b.n	80047e8 <HAL_RCC_OscConfig+0x106c>
 80046aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046ae:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80046b2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80046b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046bc:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	fa93 f2a3 	rbit	r2, r3
 80046c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046ca:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80046ce:	601a      	str	r2, [r3, #0]
  return result;
 80046d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046d4:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80046d8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046da:	fab3 f383 	clz	r3, r3
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	095b      	lsrs	r3, r3, #5
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	f043 0301 	orr.w	r3, r3, #1
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d104      	bne.n	80046f8 <HAL_RCC_OscConfig+0xf7c>
 80046ee:	4b01      	ldr	r3, [pc, #4]	@ (80046f4 <HAL_RCC_OscConfig+0xf78>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	e029      	b.n	8004748 <HAL_RCC_OscConfig+0xfcc>
 80046f4:	40021000 	.word	0x40021000
 80046f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046fc:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004700:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004704:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004706:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800470a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	fa93 f2a3 	rbit	r2, r3
 8004714:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004718:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800471c:	601a      	str	r2, [r3, #0]
 800471e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004722:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004726:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800472a:	601a      	str	r2, [r3, #0]
 800472c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004730:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	fa93 f2a3 	rbit	r2, r3
 800473a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800473e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8004742:	601a      	str	r2, [r3, #0]
 8004744:	4b2b      	ldr	r3, [pc, #172]	@ (80047f4 <HAL_RCC_OscConfig+0x1078>)
 8004746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004748:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800474c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004750:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004754:	6011      	str	r1, [r2, #0]
 8004756:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800475a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800475e:	6812      	ldr	r2, [r2, #0]
 8004760:	fa92 f1a2 	rbit	r1, r2
 8004764:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004768:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800476c:	6011      	str	r1, [r2, #0]
  return result;
 800476e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004772:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004776:	6812      	ldr	r2, [r2, #0]
 8004778:	fab2 f282 	clz	r2, r2
 800477c:	b2d2      	uxtb	r2, r2
 800477e:	f042 0220 	orr.w	r2, r2, #32
 8004782:	b2d2      	uxtb	r2, r2
 8004784:	f002 021f 	and.w	r2, r2, #31
 8004788:	2101      	movs	r1, #1
 800478a:	fa01 f202 	lsl.w	r2, r1, r2
 800478e:	4013      	ands	r3, r2
 8004790:	2b00      	cmp	r3, #0
 8004792:	d180      	bne.n	8004696 <HAL_RCC_OscConfig+0xf1a>
 8004794:	e027      	b.n	80047e6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004796:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800479a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	69db      	ldr	r3, [r3, #28]
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d101      	bne.n	80047aa <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e01e      	b.n	80047e8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80047aa:	4b12      	ldr	r3, [pc, #72]	@ (80047f4 <HAL_RCC_OscConfig+0x1078>)
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80047b2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80047b6:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80047ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047be:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	6a1b      	ldr	r3, [r3, #32]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d10b      	bne.n	80047e2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80047ca:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80047ce:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80047d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047d6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80047de:	429a      	cmp	r2, r3
 80047e0:	d001      	beq.n	80047e6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e000      	b.n	80047e8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	40021000 	.word	0x40021000

080047f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b09e      	sub	sp, #120	@ 0x78
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004802:	2300      	movs	r3, #0
 8004804:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d101      	bne.n	8004810 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e162      	b.n	8004ad6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004810:	4b90      	ldr	r3, [pc, #576]	@ (8004a54 <HAL_RCC_ClockConfig+0x25c>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0307 	and.w	r3, r3, #7
 8004818:	683a      	ldr	r2, [r7, #0]
 800481a:	429a      	cmp	r2, r3
 800481c:	d910      	bls.n	8004840 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800481e:	4b8d      	ldr	r3, [pc, #564]	@ (8004a54 <HAL_RCC_ClockConfig+0x25c>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f023 0207 	bic.w	r2, r3, #7
 8004826:	498b      	ldr	r1, [pc, #556]	@ (8004a54 <HAL_RCC_ClockConfig+0x25c>)
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	4313      	orrs	r3, r2
 800482c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800482e:	4b89      	ldr	r3, [pc, #548]	@ (8004a54 <HAL_RCC_ClockConfig+0x25c>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0307 	and.w	r3, r3, #7
 8004836:	683a      	ldr	r2, [r7, #0]
 8004838:	429a      	cmp	r2, r3
 800483a:	d001      	beq.n	8004840 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e14a      	b.n	8004ad6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0302 	and.w	r3, r3, #2
 8004848:	2b00      	cmp	r3, #0
 800484a:	d008      	beq.n	800485e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800484c:	4b82      	ldr	r3, [pc, #520]	@ (8004a58 <HAL_RCC_ClockConfig+0x260>)
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	497f      	ldr	r1, [pc, #508]	@ (8004a58 <HAL_RCC_ClockConfig+0x260>)
 800485a:	4313      	orrs	r3, r2
 800485c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0301 	and.w	r3, r3, #1
 8004866:	2b00      	cmp	r3, #0
 8004868:	f000 80dc 	beq.w	8004a24 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d13c      	bne.n	80048ee <HAL_RCC_ClockConfig+0xf6>
 8004874:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004878:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800487a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800487c:	fa93 f3a3 	rbit	r3, r3
 8004880:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004882:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004884:	fab3 f383 	clz	r3, r3
 8004888:	b2db      	uxtb	r3, r3
 800488a:	095b      	lsrs	r3, r3, #5
 800488c:	b2db      	uxtb	r3, r3
 800488e:	f043 0301 	orr.w	r3, r3, #1
 8004892:	b2db      	uxtb	r3, r3
 8004894:	2b01      	cmp	r3, #1
 8004896:	d102      	bne.n	800489e <HAL_RCC_ClockConfig+0xa6>
 8004898:	4b6f      	ldr	r3, [pc, #444]	@ (8004a58 <HAL_RCC_ClockConfig+0x260>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	e00f      	b.n	80048be <HAL_RCC_ClockConfig+0xc6>
 800489e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80048a2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80048a6:	fa93 f3a3 	rbit	r3, r3
 80048aa:	667b      	str	r3, [r7, #100]	@ 0x64
 80048ac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80048b0:	663b      	str	r3, [r7, #96]	@ 0x60
 80048b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80048b4:	fa93 f3a3 	rbit	r3, r3
 80048b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80048ba:	4b67      	ldr	r3, [pc, #412]	@ (8004a58 <HAL_RCC_ClockConfig+0x260>)
 80048bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048be:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80048c2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80048c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80048c6:	fa92 f2a2 	rbit	r2, r2
 80048ca:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80048cc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80048ce:	fab2 f282 	clz	r2, r2
 80048d2:	b2d2      	uxtb	r2, r2
 80048d4:	f042 0220 	orr.w	r2, r2, #32
 80048d8:	b2d2      	uxtb	r2, r2
 80048da:	f002 021f 	and.w	r2, r2, #31
 80048de:	2101      	movs	r1, #1
 80048e0:	fa01 f202 	lsl.w	r2, r1, r2
 80048e4:	4013      	ands	r3, r2
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d17b      	bne.n	80049e2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e0f3      	b.n	8004ad6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d13c      	bne.n	8004970 <HAL_RCC_ClockConfig+0x178>
 80048f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80048fa:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048fe:	fa93 f3a3 	rbit	r3, r3
 8004902:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004904:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004906:	fab3 f383 	clz	r3, r3
 800490a:	b2db      	uxtb	r3, r3
 800490c:	095b      	lsrs	r3, r3, #5
 800490e:	b2db      	uxtb	r3, r3
 8004910:	f043 0301 	orr.w	r3, r3, #1
 8004914:	b2db      	uxtb	r3, r3
 8004916:	2b01      	cmp	r3, #1
 8004918:	d102      	bne.n	8004920 <HAL_RCC_ClockConfig+0x128>
 800491a:	4b4f      	ldr	r3, [pc, #316]	@ (8004a58 <HAL_RCC_ClockConfig+0x260>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	e00f      	b.n	8004940 <HAL_RCC_ClockConfig+0x148>
 8004920:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004924:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004926:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004928:	fa93 f3a3 	rbit	r3, r3
 800492c:	647b      	str	r3, [r7, #68]	@ 0x44
 800492e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004932:	643b      	str	r3, [r7, #64]	@ 0x40
 8004934:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004936:	fa93 f3a3 	rbit	r3, r3
 800493a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800493c:	4b46      	ldr	r3, [pc, #280]	@ (8004a58 <HAL_RCC_ClockConfig+0x260>)
 800493e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004940:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004944:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004946:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004948:	fa92 f2a2 	rbit	r2, r2
 800494c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800494e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004950:	fab2 f282 	clz	r2, r2
 8004954:	b2d2      	uxtb	r2, r2
 8004956:	f042 0220 	orr.w	r2, r2, #32
 800495a:	b2d2      	uxtb	r2, r2
 800495c:	f002 021f 	and.w	r2, r2, #31
 8004960:	2101      	movs	r1, #1
 8004962:	fa01 f202 	lsl.w	r2, r1, r2
 8004966:	4013      	ands	r3, r2
 8004968:	2b00      	cmp	r3, #0
 800496a:	d13a      	bne.n	80049e2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e0b2      	b.n	8004ad6 <HAL_RCC_ClockConfig+0x2de>
 8004970:	2302      	movs	r3, #2
 8004972:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004976:	fa93 f3a3 	rbit	r3, r3
 800497a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800497c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800497e:	fab3 f383 	clz	r3, r3
 8004982:	b2db      	uxtb	r3, r3
 8004984:	095b      	lsrs	r3, r3, #5
 8004986:	b2db      	uxtb	r3, r3
 8004988:	f043 0301 	orr.w	r3, r3, #1
 800498c:	b2db      	uxtb	r3, r3
 800498e:	2b01      	cmp	r3, #1
 8004990:	d102      	bne.n	8004998 <HAL_RCC_ClockConfig+0x1a0>
 8004992:	4b31      	ldr	r3, [pc, #196]	@ (8004a58 <HAL_RCC_ClockConfig+0x260>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	e00d      	b.n	80049b4 <HAL_RCC_ClockConfig+0x1bc>
 8004998:	2302      	movs	r3, #2
 800499a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800499c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800499e:	fa93 f3a3 	rbit	r3, r3
 80049a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80049a4:	2302      	movs	r3, #2
 80049a6:	623b      	str	r3, [r7, #32]
 80049a8:	6a3b      	ldr	r3, [r7, #32]
 80049aa:	fa93 f3a3 	rbit	r3, r3
 80049ae:	61fb      	str	r3, [r7, #28]
 80049b0:	4b29      	ldr	r3, [pc, #164]	@ (8004a58 <HAL_RCC_ClockConfig+0x260>)
 80049b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b4:	2202      	movs	r2, #2
 80049b6:	61ba      	str	r2, [r7, #24]
 80049b8:	69ba      	ldr	r2, [r7, #24]
 80049ba:	fa92 f2a2 	rbit	r2, r2
 80049be:	617a      	str	r2, [r7, #20]
  return result;
 80049c0:	697a      	ldr	r2, [r7, #20]
 80049c2:	fab2 f282 	clz	r2, r2
 80049c6:	b2d2      	uxtb	r2, r2
 80049c8:	f042 0220 	orr.w	r2, r2, #32
 80049cc:	b2d2      	uxtb	r2, r2
 80049ce:	f002 021f 	and.w	r2, r2, #31
 80049d2:	2101      	movs	r1, #1
 80049d4:	fa01 f202 	lsl.w	r2, r1, r2
 80049d8:	4013      	ands	r3, r2
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d101      	bne.n	80049e2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e079      	b.n	8004ad6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049e2:	4b1d      	ldr	r3, [pc, #116]	@ (8004a58 <HAL_RCC_ClockConfig+0x260>)
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	f023 0203 	bic.w	r2, r3, #3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	491a      	ldr	r1, [pc, #104]	@ (8004a58 <HAL_RCC_ClockConfig+0x260>)
 80049f0:	4313      	orrs	r3, r2
 80049f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049f4:	f7fd fd56 	bl	80024a4 <HAL_GetTick>
 80049f8:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049fa:	e00a      	b.n	8004a12 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049fc:	f7fd fd52 	bl	80024a4 <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d901      	bls.n	8004a12 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e061      	b.n	8004ad6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a12:	4b11      	ldr	r3, [pc, #68]	@ (8004a58 <HAL_RCC_ClockConfig+0x260>)
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f003 020c 	and.w	r2, r3, #12
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d1eb      	bne.n	80049fc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a24:	4b0b      	ldr	r3, [pc, #44]	@ (8004a54 <HAL_RCC_ClockConfig+0x25c>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 0307 	and.w	r3, r3, #7
 8004a2c:	683a      	ldr	r2, [r7, #0]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d214      	bcs.n	8004a5c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a32:	4b08      	ldr	r3, [pc, #32]	@ (8004a54 <HAL_RCC_ClockConfig+0x25c>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f023 0207 	bic.w	r2, r3, #7
 8004a3a:	4906      	ldr	r1, [pc, #24]	@ (8004a54 <HAL_RCC_ClockConfig+0x25c>)
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a42:	4b04      	ldr	r3, [pc, #16]	@ (8004a54 <HAL_RCC_ClockConfig+0x25c>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0307 	and.w	r3, r3, #7
 8004a4a:	683a      	ldr	r2, [r7, #0]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d005      	beq.n	8004a5c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e040      	b.n	8004ad6 <HAL_RCC_ClockConfig+0x2de>
 8004a54:	40022000 	.word	0x40022000
 8004a58:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0304 	and.w	r3, r3, #4
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d008      	beq.n	8004a7a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a68:	4b1d      	ldr	r3, [pc, #116]	@ (8004ae0 <HAL_RCC_ClockConfig+0x2e8>)
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	491a      	ldr	r1, [pc, #104]	@ (8004ae0 <HAL_RCC_ClockConfig+0x2e8>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0308 	and.w	r3, r3, #8
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d009      	beq.n	8004a9a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a86:	4b16      	ldr	r3, [pc, #88]	@ (8004ae0 <HAL_RCC_ClockConfig+0x2e8>)
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	00db      	lsls	r3, r3, #3
 8004a94:	4912      	ldr	r1, [pc, #72]	@ (8004ae0 <HAL_RCC_ClockConfig+0x2e8>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004a9a:	f000 f829 	bl	8004af0 <HAL_RCC_GetSysClockFreq>
 8004a9e:	4601      	mov	r1, r0
 8004aa0:	4b0f      	ldr	r3, [pc, #60]	@ (8004ae0 <HAL_RCC_ClockConfig+0x2e8>)
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004aa8:	22f0      	movs	r2, #240	@ 0xf0
 8004aaa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aac:	693a      	ldr	r2, [r7, #16]
 8004aae:	fa92 f2a2 	rbit	r2, r2
 8004ab2:	60fa      	str	r2, [r7, #12]
  return result;
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	fab2 f282 	clz	r2, r2
 8004aba:	b2d2      	uxtb	r2, r2
 8004abc:	40d3      	lsrs	r3, r2
 8004abe:	4a09      	ldr	r2, [pc, #36]	@ (8004ae4 <HAL_RCC_ClockConfig+0x2ec>)
 8004ac0:	5cd3      	ldrb	r3, [r2, r3]
 8004ac2:	fa21 f303 	lsr.w	r3, r1, r3
 8004ac6:	4a08      	ldr	r2, [pc, #32]	@ (8004ae8 <HAL_RCC_ClockConfig+0x2f0>)
 8004ac8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004aca:	4b08      	ldr	r3, [pc, #32]	@ (8004aec <HAL_RCC_ClockConfig+0x2f4>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f7fd fca4 	bl	800241c <HAL_InitTick>
  
  return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3778      	adds	r7, #120	@ 0x78
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	40021000 	.word	0x40021000
 8004ae4:	08008f28 	.word	0x08008f28
 8004ae8:	20000000 	.word	0x20000000
 8004aec:	20000004 	.word	0x20000004

08004af0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b087      	sub	sp, #28
 8004af4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004af6:	2300      	movs	r3, #0
 8004af8:	60fb      	str	r3, [r7, #12]
 8004afa:	2300      	movs	r3, #0
 8004afc:	60bb      	str	r3, [r7, #8]
 8004afe:	2300      	movs	r3, #0
 8004b00:	617b      	str	r3, [r7, #20]
 8004b02:	2300      	movs	r3, #0
 8004b04:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004b06:	2300      	movs	r3, #0
 8004b08:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004b0a:	4b1e      	ldr	r3, [pc, #120]	@ (8004b84 <HAL_RCC_GetSysClockFreq+0x94>)
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f003 030c 	and.w	r3, r3, #12
 8004b16:	2b04      	cmp	r3, #4
 8004b18:	d002      	beq.n	8004b20 <HAL_RCC_GetSysClockFreq+0x30>
 8004b1a:	2b08      	cmp	r3, #8
 8004b1c:	d003      	beq.n	8004b26 <HAL_RCC_GetSysClockFreq+0x36>
 8004b1e:	e026      	b.n	8004b6e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b20:	4b19      	ldr	r3, [pc, #100]	@ (8004b88 <HAL_RCC_GetSysClockFreq+0x98>)
 8004b22:	613b      	str	r3, [r7, #16]
      break;
 8004b24:	e026      	b.n	8004b74 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	0c9b      	lsrs	r3, r3, #18
 8004b2a:	f003 030f 	and.w	r3, r3, #15
 8004b2e:	4a17      	ldr	r2, [pc, #92]	@ (8004b8c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004b30:	5cd3      	ldrb	r3, [r2, r3]
 8004b32:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8004b34:	4b13      	ldr	r3, [pc, #76]	@ (8004b84 <HAL_RCC_GetSysClockFreq+0x94>)
 8004b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b38:	f003 030f 	and.w	r3, r3, #15
 8004b3c:	4a14      	ldr	r2, [pc, #80]	@ (8004b90 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004b3e:	5cd3      	ldrb	r3, [r2, r3]
 8004b40:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d008      	beq.n	8004b5e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004b4c:	4a0e      	ldr	r2, [pc, #56]	@ (8004b88 <HAL_RCC_GetSysClockFreq+0x98>)
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	fb02 f303 	mul.w	r3, r2, r3
 8004b5a:	617b      	str	r3, [r7, #20]
 8004b5c:	e004      	b.n	8004b68 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a0c      	ldr	r2, [pc, #48]	@ (8004b94 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004b62:	fb02 f303 	mul.w	r3, r2, r3
 8004b66:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	613b      	str	r3, [r7, #16]
      break;
 8004b6c:	e002      	b.n	8004b74 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004b6e:	4b06      	ldr	r3, [pc, #24]	@ (8004b88 <HAL_RCC_GetSysClockFreq+0x98>)
 8004b70:	613b      	str	r3, [r7, #16]
      break;
 8004b72:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b74:	693b      	ldr	r3, [r7, #16]
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	371c      	adds	r7, #28
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	40021000 	.word	0x40021000
 8004b88:	007a1200 	.word	0x007a1200
 8004b8c:	08008f40 	.word	0x08008f40
 8004b90:	08008f50 	.word	0x08008f50
 8004b94:	003d0900 	.word	0x003d0900

08004b98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b9c:	4b03      	ldr	r3, [pc, #12]	@ (8004bac <HAL_RCC_GetHCLKFreq+0x14>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	20000000 	.word	0x20000000

08004bb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004bb6:	f7ff ffef 	bl	8004b98 <HAL_RCC_GetHCLKFreq>
 8004bba:	4601      	mov	r1, r0
 8004bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8004bec <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004bc4:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004bc8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	fa92 f2a2 	rbit	r2, r2
 8004bd0:	603a      	str	r2, [r7, #0]
  return result;
 8004bd2:	683a      	ldr	r2, [r7, #0]
 8004bd4:	fab2 f282 	clz	r2, r2
 8004bd8:	b2d2      	uxtb	r2, r2
 8004bda:	40d3      	lsrs	r3, r2
 8004bdc:	4a04      	ldr	r2, [pc, #16]	@ (8004bf0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004bde:	5cd3      	ldrb	r3, [r2, r3]
 8004be0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004be4:	4618      	mov	r0, r3
 8004be6:	3708      	adds	r7, #8
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	40021000 	.word	0x40021000
 8004bf0:	08008f38 	.word	0x08008f38

08004bf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004bfa:	f7ff ffcd 	bl	8004b98 <HAL_RCC_GetHCLKFreq>
 8004bfe:	4601      	mov	r1, r0
 8004c00:	4b0b      	ldr	r3, [pc, #44]	@ (8004c30 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8004c08:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8004c0c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	fa92 f2a2 	rbit	r2, r2
 8004c14:	603a      	str	r2, [r7, #0]
  return result;
 8004c16:	683a      	ldr	r2, [r7, #0]
 8004c18:	fab2 f282 	clz	r2, r2
 8004c1c:	b2d2      	uxtb	r2, r2
 8004c1e:	40d3      	lsrs	r3, r2
 8004c20:	4a04      	ldr	r2, [pc, #16]	@ (8004c34 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004c22:	5cd3      	ldrb	r3, [r2, r3]
 8004c24:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3708      	adds	r7, #8
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	40021000 	.word	0x40021000
 8004c34:	08008f38 	.word	0x08008f38

08004c38 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b092      	sub	sp, #72	@ 0x48
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c40:	2300      	movs	r3, #0
 8004c42:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8004c44:	2300      	movs	r3, #0
 8004c46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	f000 80cd 	beq.w	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c5c:	4b86      	ldr	r3, [pc, #536]	@ (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004c5e:	69db      	ldr	r3, [r3, #28]
 8004c60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d10e      	bne.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c68:	4b83      	ldr	r3, [pc, #524]	@ (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004c6a:	69db      	ldr	r3, [r3, #28]
 8004c6c:	4a82      	ldr	r2, [pc, #520]	@ (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004c6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c72:	61d3      	str	r3, [r2, #28]
 8004c74:	4b80      	ldr	r3, [pc, #512]	@ (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004c76:	69db      	ldr	r3, [r3, #28]
 8004c78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c7c:	60bb      	str	r3, [r7, #8]
 8004c7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c80:	2301      	movs	r3, #1
 8004c82:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c86:	4b7d      	ldr	r3, [pc, #500]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d118      	bne.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c92:	4b7a      	ldr	r3, [pc, #488]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a79      	ldr	r2, [pc, #484]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004c98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c9c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c9e:	f7fd fc01 	bl	80024a4 <HAL_GetTick>
 8004ca2:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ca4:	e008      	b.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ca6:	f7fd fbfd 	bl	80024a4 <HAL_GetTick>
 8004caa:	4602      	mov	r2, r0
 8004cac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	2b64      	cmp	r3, #100	@ 0x64
 8004cb2:	d901      	bls.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	e0db      	b.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cb8:	4b70      	ldr	r3, [pc, #448]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d0f0      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004cc4:	4b6c      	ldr	r3, [pc, #432]	@ (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004cc6:	6a1b      	ldr	r3, [r3, #32]
 8004cc8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ccc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004cce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d07d      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cdc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d076      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ce2:	4b65      	ldr	r3, [pc, #404]	@ (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004ce4:	6a1b      	ldr	r3, [r3, #32]
 8004ce6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004cec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004cf0:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cf4:	fa93 f3a3 	rbit	r3, r3
 8004cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004cfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004cfc:	fab3 f383 	clz	r3, r3
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	461a      	mov	r2, r3
 8004d04:	4b5e      	ldr	r3, [pc, #376]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004d06:	4413      	add	r3, r2
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	6013      	str	r3, [r2, #0]
 8004d10:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004d14:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d18:	fa93 f3a3 	rbit	r3, r3
 8004d1c:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004d1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d20:	fab3 f383 	clz	r3, r3
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	461a      	mov	r2, r3
 8004d28:	4b55      	ldr	r3, [pc, #340]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004d2a:	4413      	add	r3, r2
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	461a      	mov	r2, r3
 8004d30:	2300      	movs	r3, #0
 8004d32:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004d34:	4a50      	ldr	r2, [pc, #320]	@ (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004d36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d38:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004d3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d3c:	f003 0301 	and.w	r3, r3, #1
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d045      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d44:	f7fd fbae 	bl	80024a4 <HAL_GetTick>
 8004d48:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d4a:	e00a      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d4c:	f7fd fbaa 	bl	80024a4 <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d901      	bls.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e086      	b.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8004d62:	2302      	movs	r3, #2
 8004d64:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d68:	fa93 f3a3 	rbit	r3, r3
 8004d6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d6e:	2302      	movs	r3, #2
 8004d70:	623b      	str	r3, [r7, #32]
 8004d72:	6a3b      	ldr	r3, [r7, #32]
 8004d74:	fa93 f3a3 	rbit	r3, r3
 8004d78:	61fb      	str	r3, [r7, #28]
  return result;
 8004d7a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d7c:	fab3 f383 	clz	r3, r3
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	095b      	lsrs	r3, r3, #5
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	f043 0302 	orr.w	r3, r3, #2
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d102      	bne.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004d90:	4b39      	ldr	r3, [pc, #228]	@ (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004d92:	6a1b      	ldr	r3, [r3, #32]
 8004d94:	e007      	b.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004d96:	2302      	movs	r3, #2
 8004d98:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	fa93 f3a3 	rbit	r3, r3
 8004da0:	617b      	str	r3, [r7, #20]
 8004da2:	4b35      	ldr	r3, [pc, #212]	@ (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da6:	2202      	movs	r2, #2
 8004da8:	613a      	str	r2, [r7, #16]
 8004daa:	693a      	ldr	r2, [r7, #16]
 8004dac:	fa92 f2a2 	rbit	r2, r2
 8004db0:	60fa      	str	r2, [r7, #12]
  return result;
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	fab2 f282 	clz	r2, r2
 8004db8:	b2d2      	uxtb	r2, r2
 8004dba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004dbe:	b2d2      	uxtb	r2, r2
 8004dc0:	f002 021f 	and.w	r2, r2, #31
 8004dc4:	2101      	movs	r1, #1
 8004dc6:	fa01 f202 	lsl.w	r2, r1, r2
 8004dca:	4013      	ands	r3, r2
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d0bd      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004dd0:	4b29      	ldr	r3, [pc, #164]	@ (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004dd2:	6a1b      	ldr	r3, [r3, #32]
 8004dd4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	4926      	ldr	r1, [pc, #152]	@ (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004de2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d105      	bne.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dea:	4b23      	ldr	r3, [pc, #140]	@ (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004dec:	69db      	ldr	r3, [r3, #28]
 8004dee:	4a22      	ldr	r2, [pc, #136]	@ (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004df0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004df4:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0301 	and.w	r3, r3, #1
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d008      	beq.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e02:	4b1d      	ldr	r3, [pc, #116]	@ (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e06:	f023 0203 	bic.w	r2, r3, #3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	491a      	ldr	r1, [pc, #104]	@ (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004e10:	4313      	orrs	r3, r2
 8004e12:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0320 	and.w	r3, r3, #32
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d008      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e20:	4b15      	ldr	r3, [pc, #84]	@ (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e24:	f023 0210 	bic.w	r2, r3, #16
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	4912      	ldr	r1, [pc, #72]	@ (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d008      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004e3e:	4b0e      	ldr	r3, [pc, #56]	@ (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e42:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	490b      	ldr	r1, [pc, #44]	@ (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d008      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004e5c:	4b06      	ldr	r3, [pc, #24]	@ (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e60:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	695b      	ldr	r3, [r3, #20]
 8004e68:	4903      	ldr	r1, [pc, #12]	@ (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004e6e:	2300      	movs	r3, #0
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3748      	adds	r7, #72	@ 0x48
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	40021000 	.word	0x40021000
 8004e7c:	40007000 	.word	0x40007000
 8004e80:	10908100 	.word	0x10908100

08004e84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b082      	sub	sp, #8
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d101      	bne.n	8004e96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e049      	b.n	8004f2a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d106      	bne.n	8004eb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f7fd f850 	bl	8001f50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2202      	movs	r2, #2
 8004eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	3304      	adds	r3, #4
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	4610      	mov	r0, r2
 8004ec4:	f000 fcf2 	bl	80058ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3708      	adds	r7, #8
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
	...

08004f34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b085      	sub	sp, #20
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d001      	beq.n	8004f4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e040      	b.n	8004fce <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2202      	movs	r2, #2
 8004f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68da      	ldr	r2, [r3, #12]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f042 0201 	orr.w	r2, r2, #1
 8004f62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a1c      	ldr	r2, [pc, #112]	@ (8004fdc <HAL_TIM_Base_Start_IT+0xa8>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d00e      	beq.n	8004f8c <HAL_TIM_Base_Start_IT+0x58>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f76:	d009      	beq.n	8004f8c <HAL_TIM_Base_Start_IT+0x58>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a18      	ldr	r2, [pc, #96]	@ (8004fe0 <HAL_TIM_Base_Start_IT+0xac>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d004      	beq.n	8004f8c <HAL_TIM_Base_Start_IT+0x58>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a17      	ldr	r2, [pc, #92]	@ (8004fe4 <HAL_TIM_Base_Start_IT+0xb0>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d115      	bne.n	8004fb8 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	689a      	ldr	r2, [r3, #8]
 8004f92:	4b15      	ldr	r3, [pc, #84]	@ (8004fe8 <HAL_TIM_Base_Start_IT+0xb4>)
 8004f94:	4013      	ands	r3, r2
 8004f96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2b06      	cmp	r3, #6
 8004f9c:	d015      	beq.n	8004fca <HAL_TIM_Base_Start_IT+0x96>
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fa4:	d011      	beq.n	8004fca <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f042 0201 	orr.w	r2, r2, #1
 8004fb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fb6:	e008      	b.n	8004fca <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f042 0201 	orr.w	r2, r2, #1
 8004fc6:	601a      	str	r2, [r3, #0]
 8004fc8:	e000      	b.n	8004fcc <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3714      	adds	r7, #20
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	40012c00 	.word	0x40012c00
 8004fe0:	40000400 	.word	0x40000400
 8004fe4:	40014000 	.word	0x40014000
 8004fe8:	00010007 	.word	0x00010007

08004fec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b082      	sub	sp, #8
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d101      	bne.n	8004ffe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e049      	b.n	8005092 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005004:	b2db      	uxtb	r3, r3
 8005006:	2b00      	cmp	r3, #0
 8005008:	d106      	bne.n	8005018 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 f841 	bl	800509a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2202      	movs	r2, #2
 800501c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	3304      	adds	r3, #4
 8005028:	4619      	mov	r1, r3
 800502a:	4610      	mov	r0, r2
 800502c:	f000 fc3e 	bl	80058ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	3708      	adds	r7, #8
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}

0800509a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800509a:	b480      	push	{r7}
 800509c:	b083      	sub	sp, #12
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80050a2:	bf00      	nop
 80050a4:	370c      	adds	r7, #12
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr
	...

080050b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d109      	bne.n	80050d4 <HAL_TIM_PWM_Start+0x24>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	bf14      	ite	ne
 80050cc:	2301      	movne	r3, #1
 80050ce:	2300      	moveq	r3, #0
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	e03c      	b.n	800514e <HAL_TIM_PWM_Start+0x9e>
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	2b04      	cmp	r3, #4
 80050d8:	d109      	bne.n	80050ee <HAL_TIM_PWM_Start+0x3e>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	bf14      	ite	ne
 80050e6:	2301      	movne	r3, #1
 80050e8:	2300      	moveq	r3, #0
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	e02f      	b.n	800514e <HAL_TIM_PWM_Start+0x9e>
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	2b08      	cmp	r3, #8
 80050f2:	d109      	bne.n	8005108 <HAL_TIM_PWM_Start+0x58>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	bf14      	ite	ne
 8005100:	2301      	movne	r3, #1
 8005102:	2300      	moveq	r3, #0
 8005104:	b2db      	uxtb	r3, r3
 8005106:	e022      	b.n	800514e <HAL_TIM_PWM_Start+0x9e>
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	2b0c      	cmp	r3, #12
 800510c:	d109      	bne.n	8005122 <HAL_TIM_PWM_Start+0x72>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005114:	b2db      	uxtb	r3, r3
 8005116:	2b01      	cmp	r3, #1
 8005118:	bf14      	ite	ne
 800511a:	2301      	movne	r3, #1
 800511c:	2300      	moveq	r3, #0
 800511e:	b2db      	uxtb	r3, r3
 8005120:	e015      	b.n	800514e <HAL_TIM_PWM_Start+0x9e>
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	2b10      	cmp	r3, #16
 8005126:	d109      	bne.n	800513c <HAL_TIM_PWM_Start+0x8c>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800512e:	b2db      	uxtb	r3, r3
 8005130:	2b01      	cmp	r3, #1
 8005132:	bf14      	ite	ne
 8005134:	2301      	movne	r3, #1
 8005136:	2300      	moveq	r3, #0
 8005138:	b2db      	uxtb	r3, r3
 800513a:	e008      	b.n	800514e <HAL_TIM_PWM_Start+0x9e>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005142:	b2db      	uxtb	r3, r3
 8005144:	2b01      	cmp	r3, #1
 8005146:	bf14      	ite	ne
 8005148:	2301      	movne	r3, #1
 800514a:	2300      	moveq	r3, #0
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b00      	cmp	r3, #0
 8005150:	d001      	beq.n	8005156 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e088      	b.n	8005268 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d104      	bne.n	8005166 <HAL_TIM_PWM_Start+0xb6>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2202      	movs	r2, #2
 8005160:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005164:	e023      	b.n	80051ae <HAL_TIM_PWM_Start+0xfe>
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	2b04      	cmp	r3, #4
 800516a:	d104      	bne.n	8005176 <HAL_TIM_PWM_Start+0xc6>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2202      	movs	r2, #2
 8005170:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005174:	e01b      	b.n	80051ae <HAL_TIM_PWM_Start+0xfe>
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	2b08      	cmp	r3, #8
 800517a:	d104      	bne.n	8005186 <HAL_TIM_PWM_Start+0xd6>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2202      	movs	r2, #2
 8005180:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005184:	e013      	b.n	80051ae <HAL_TIM_PWM_Start+0xfe>
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	2b0c      	cmp	r3, #12
 800518a:	d104      	bne.n	8005196 <HAL_TIM_PWM_Start+0xe6>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2202      	movs	r2, #2
 8005190:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005194:	e00b      	b.n	80051ae <HAL_TIM_PWM_Start+0xfe>
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	2b10      	cmp	r3, #16
 800519a:	d104      	bne.n	80051a6 <HAL_TIM_PWM_Start+0xf6>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2202      	movs	r2, #2
 80051a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051a4:	e003      	b.n	80051ae <HAL_TIM_PWM_Start+0xfe>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2202      	movs	r2, #2
 80051aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2201      	movs	r2, #1
 80051b4:	6839      	ldr	r1, [r7, #0]
 80051b6:	4618      	mov	r0, r3
 80051b8:	f000 ff3c 	bl	8006034 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a2b      	ldr	r2, [pc, #172]	@ (8005270 <HAL_TIM_PWM_Start+0x1c0>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d00e      	beq.n	80051e4 <HAL_TIM_PWM_Start+0x134>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a2a      	ldr	r2, [pc, #168]	@ (8005274 <HAL_TIM_PWM_Start+0x1c4>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d009      	beq.n	80051e4 <HAL_TIM_PWM_Start+0x134>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a28      	ldr	r2, [pc, #160]	@ (8005278 <HAL_TIM_PWM_Start+0x1c8>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d004      	beq.n	80051e4 <HAL_TIM_PWM_Start+0x134>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a27      	ldr	r2, [pc, #156]	@ (800527c <HAL_TIM_PWM_Start+0x1cc>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d101      	bne.n	80051e8 <HAL_TIM_PWM_Start+0x138>
 80051e4:	2301      	movs	r3, #1
 80051e6:	e000      	b.n	80051ea <HAL_TIM_PWM_Start+0x13a>
 80051e8:	2300      	movs	r3, #0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d007      	beq.n	80051fe <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80051fc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a1b      	ldr	r2, [pc, #108]	@ (8005270 <HAL_TIM_PWM_Start+0x1c0>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d00e      	beq.n	8005226 <HAL_TIM_PWM_Start+0x176>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005210:	d009      	beq.n	8005226 <HAL_TIM_PWM_Start+0x176>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a1a      	ldr	r2, [pc, #104]	@ (8005280 <HAL_TIM_PWM_Start+0x1d0>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d004      	beq.n	8005226 <HAL_TIM_PWM_Start+0x176>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a14      	ldr	r2, [pc, #80]	@ (8005274 <HAL_TIM_PWM_Start+0x1c4>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d115      	bne.n	8005252 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	689a      	ldr	r2, [r3, #8]
 800522c:	4b15      	ldr	r3, [pc, #84]	@ (8005284 <HAL_TIM_PWM_Start+0x1d4>)
 800522e:	4013      	ands	r3, r2
 8005230:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2b06      	cmp	r3, #6
 8005236:	d015      	beq.n	8005264 <HAL_TIM_PWM_Start+0x1b4>
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800523e:	d011      	beq.n	8005264 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f042 0201 	orr.w	r2, r2, #1
 800524e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005250:	e008      	b.n	8005264 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f042 0201 	orr.w	r2, r2, #1
 8005260:	601a      	str	r2, [r3, #0]
 8005262:	e000      	b.n	8005266 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005264:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005266:	2300      	movs	r3, #0
}
 8005268:	4618      	mov	r0, r3
 800526a:	3710      	adds	r7, #16
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}
 8005270:	40012c00 	.word	0x40012c00
 8005274:	40014000 	.word	0x40014000
 8005278:	40014400 	.word	0x40014400
 800527c:	40014800 	.word	0x40014800
 8005280:	40000400 	.word	0x40000400
 8005284:	00010007 	.word	0x00010007

08005288 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	f003 0302 	and.w	r3, r3, #2
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d020      	beq.n	80052ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f003 0302 	and.w	r3, r3, #2
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d01b      	beq.n	80052ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f06f 0202 	mvn.w	r2, #2
 80052bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2201      	movs	r2, #1
 80052c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	699b      	ldr	r3, [r3, #24]
 80052ca:	f003 0303 	and.w	r3, r3, #3
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d003      	beq.n	80052da <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 facb 	bl	800586e <HAL_TIM_IC_CaptureCallback>
 80052d8:	e005      	b.n	80052e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 fabd 	bl	800585a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f000 face 	bl	8005882 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	f003 0304 	and.w	r3, r3, #4
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d020      	beq.n	8005338 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f003 0304 	and.w	r3, r3, #4
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d01b      	beq.n	8005338 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f06f 0204 	mvn.w	r2, #4
 8005308:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2202      	movs	r2, #2
 800530e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800531a:	2b00      	cmp	r3, #0
 800531c:	d003      	beq.n	8005326 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 faa5 	bl	800586e <HAL_TIM_IC_CaptureCallback>
 8005324:	e005      	b.n	8005332 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 fa97 	bl	800585a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f000 faa8 	bl	8005882 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	f003 0308 	and.w	r3, r3, #8
 800533e:	2b00      	cmp	r3, #0
 8005340:	d020      	beq.n	8005384 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f003 0308 	and.w	r3, r3, #8
 8005348:	2b00      	cmp	r3, #0
 800534a:	d01b      	beq.n	8005384 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f06f 0208 	mvn.w	r2, #8
 8005354:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2204      	movs	r2, #4
 800535a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	69db      	ldr	r3, [r3, #28]
 8005362:	f003 0303 	and.w	r3, r3, #3
 8005366:	2b00      	cmp	r3, #0
 8005368:	d003      	beq.n	8005372 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 fa7f 	bl	800586e <HAL_TIM_IC_CaptureCallback>
 8005370:	e005      	b.n	800537e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 fa71 	bl	800585a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f000 fa82 	bl	8005882 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	f003 0310 	and.w	r3, r3, #16
 800538a:	2b00      	cmp	r3, #0
 800538c:	d020      	beq.n	80053d0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f003 0310 	and.w	r3, r3, #16
 8005394:	2b00      	cmp	r3, #0
 8005396:	d01b      	beq.n	80053d0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f06f 0210 	mvn.w	r2, #16
 80053a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2208      	movs	r2, #8
 80053a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	69db      	ldr	r3, [r3, #28]
 80053ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d003      	beq.n	80053be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 fa59 	bl	800586e <HAL_TIM_IC_CaptureCallback>
 80053bc:	e005      	b.n	80053ca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 fa4b 	bl	800585a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f000 fa5c 	bl	8005882 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	f003 0301 	and.w	r3, r3, #1
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00c      	beq.n	80053f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f003 0301 	and.w	r3, r3, #1
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d007      	beq.n	80053f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f06f 0201 	mvn.w	r2, #1
 80053ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 fa29 	bl	8005846 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00c      	beq.n	8005418 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005404:	2b00      	cmp	r3, #0
 8005406:	d007      	beq.n	8005418 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 ff24 	bl	8006260 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800541e:	2b00      	cmp	r3, #0
 8005420:	d00c      	beq.n	800543c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005428:	2b00      	cmp	r3, #0
 800542a:	d007      	beq.n	800543c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005434:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 ff1c 	bl	8006274 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005442:	2b00      	cmp	r3, #0
 8005444:	d00c      	beq.n	8005460 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800544c:	2b00      	cmp	r3, #0
 800544e:	d007      	beq.n	8005460 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 fa1b 	bl	8005896 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	f003 0320 	and.w	r3, r3, #32
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00c      	beq.n	8005484 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f003 0320 	and.w	r3, r3, #32
 8005470:	2b00      	cmp	r3, #0
 8005472:	d007      	beq.n	8005484 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f06f 0220 	mvn.w	r2, #32
 800547c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 fee4 	bl	800624c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005484:	bf00      	nop
 8005486:	3710      	adds	r7, #16
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b086      	sub	sp, #24
 8005490:	af00      	add	r7, sp, #0
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005498:	2300      	movs	r3, #0
 800549a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d101      	bne.n	80054aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80054a6:	2302      	movs	r3, #2
 80054a8:	e0ff      	b.n	80056aa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2201      	movs	r2, #1
 80054ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2b14      	cmp	r3, #20
 80054b6:	f200 80f0 	bhi.w	800569a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80054ba:	a201      	add	r2, pc, #4	@ (adr r2, 80054c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80054bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054c0:	08005515 	.word	0x08005515
 80054c4:	0800569b 	.word	0x0800569b
 80054c8:	0800569b 	.word	0x0800569b
 80054cc:	0800569b 	.word	0x0800569b
 80054d0:	08005555 	.word	0x08005555
 80054d4:	0800569b 	.word	0x0800569b
 80054d8:	0800569b 	.word	0x0800569b
 80054dc:	0800569b 	.word	0x0800569b
 80054e0:	08005597 	.word	0x08005597
 80054e4:	0800569b 	.word	0x0800569b
 80054e8:	0800569b 	.word	0x0800569b
 80054ec:	0800569b 	.word	0x0800569b
 80054f0:	080055d7 	.word	0x080055d7
 80054f4:	0800569b 	.word	0x0800569b
 80054f8:	0800569b 	.word	0x0800569b
 80054fc:	0800569b 	.word	0x0800569b
 8005500:	08005619 	.word	0x08005619
 8005504:	0800569b 	.word	0x0800569b
 8005508:	0800569b 	.word	0x0800569b
 800550c:	0800569b 	.word	0x0800569b
 8005510:	08005659 	.word	0x08005659
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	68b9      	ldr	r1, [r7, #8]
 800551a:	4618      	mov	r0, r3
 800551c:	f000 fa4a 	bl	80059b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	699a      	ldr	r2, [r3, #24]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f042 0208 	orr.w	r2, r2, #8
 800552e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	699a      	ldr	r2, [r3, #24]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f022 0204 	bic.w	r2, r2, #4
 800553e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	6999      	ldr	r1, [r3, #24]
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	691a      	ldr	r2, [r3, #16]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	430a      	orrs	r2, r1
 8005550:	619a      	str	r2, [r3, #24]
      break;
 8005552:	e0a5      	b.n	80056a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68b9      	ldr	r1, [r7, #8]
 800555a:	4618      	mov	r0, r3
 800555c:	f000 fab0 	bl	8005ac0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	699a      	ldr	r2, [r3, #24]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800556e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	699a      	ldr	r2, [r3, #24]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800557e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	6999      	ldr	r1, [r3, #24]
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	021a      	lsls	r2, r3, #8
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	430a      	orrs	r2, r1
 8005592:	619a      	str	r2, [r3, #24]
      break;
 8005594:	e084      	b.n	80056a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	68b9      	ldr	r1, [r7, #8]
 800559c:	4618      	mov	r0, r3
 800559e:	f000 fb0f 	bl	8005bc0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	69da      	ldr	r2, [r3, #28]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f042 0208 	orr.w	r2, r2, #8
 80055b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	69da      	ldr	r2, [r3, #28]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f022 0204 	bic.w	r2, r2, #4
 80055c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	69d9      	ldr	r1, [r3, #28]
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	691a      	ldr	r2, [r3, #16]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	430a      	orrs	r2, r1
 80055d2:	61da      	str	r2, [r3, #28]
      break;
 80055d4:	e064      	b.n	80056a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	68b9      	ldr	r1, [r7, #8]
 80055dc:	4618      	mov	r0, r3
 80055de:	f000 fb6d 	bl	8005cbc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	69da      	ldr	r2, [r3, #28]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80055f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	69da      	ldr	r2, [r3, #28]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005600:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	69d9      	ldr	r1, [r3, #28]
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	691b      	ldr	r3, [r3, #16]
 800560c:	021a      	lsls	r2, r3, #8
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	430a      	orrs	r2, r1
 8005614:	61da      	str	r2, [r3, #28]
      break;
 8005616:	e043      	b.n	80056a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68b9      	ldr	r1, [r7, #8]
 800561e:	4618      	mov	r0, r3
 8005620:	f000 fbb0 	bl	8005d84 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f042 0208 	orr.w	r2, r2, #8
 8005632:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f022 0204 	bic.w	r2, r2, #4
 8005642:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	691a      	ldr	r2, [r3, #16]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	430a      	orrs	r2, r1
 8005654:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005656:	e023      	b.n	80056a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68b9      	ldr	r1, [r7, #8]
 800565e:	4618      	mov	r0, r3
 8005660:	f000 fbee 	bl	8005e40 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005672:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005682:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	021a      	lsls	r2, r3, #8
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	430a      	orrs	r2, r1
 8005696:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005698:	e002      	b.n	80056a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	75fb      	strb	r3, [r7, #23]
      break;
 800569e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80056a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3718      	adds	r7, #24
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop

080056b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b084      	sub	sp, #16
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056be:	2300      	movs	r3, #0
 80056c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d101      	bne.n	80056d0 <HAL_TIM_ConfigClockSource+0x1c>
 80056cc:	2302      	movs	r3, #2
 80056ce:	e0b6      	b.n	800583e <HAL_TIM_ConfigClockSource+0x18a>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2202      	movs	r2, #2
 80056dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056ee:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80056f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80056fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	68ba      	ldr	r2, [r7, #8]
 8005702:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800570c:	d03e      	beq.n	800578c <HAL_TIM_ConfigClockSource+0xd8>
 800570e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005712:	f200 8087 	bhi.w	8005824 <HAL_TIM_ConfigClockSource+0x170>
 8005716:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800571a:	f000 8086 	beq.w	800582a <HAL_TIM_ConfigClockSource+0x176>
 800571e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005722:	d87f      	bhi.n	8005824 <HAL_TIM_ConfigClockSource+0x170>
 8005724:	2b70      	cmp	r3, #112	@ 0x70
 8005726:	d01a      	beq.n	800575e <HAL_TIM_ConfigClockSource+0xaa>
 8005728:	2b70      	cmp	r3, #112	@ 0x70
 800572a:	d87b      	bhi.n	8005824 <HAL_TIM_ConfigClockSource+0x170>
 800572c:	2b60      	cmp	r3, #96	@ 0x60
 800572e:	d050      	beq.n	80057d2 <HAL_TIM_ConfigClockSource+0x11e>
 8005730:	2b60      	cmp	r3, #96	@ 0x60
 8005732:	d877      	bhi.n	8005824 <HAL_TIM_ConfigClockSource+0x170>
 8005734:	2b50      	cmp	r3, #80	@ 0x50
 8005736:	d03c      	beq.n	80057b2 <HAL_TIM_ConfigClockSource+0xfe>
 8005738:	2b50      	cmp	r3, #80	@ 0x50
 800573a:	d873      	bhi.n	8005824 <HAL_TIM_ConfigClockSource+0x170>
 800573c:	2b40      	cmp	r3, #64	@ 0x40
 800573e:	d058      	beq.n	80057f2 <HAL_TIM_ConfigClockSource+0x13e>
 8005740:	2b40      	cmp	r3, #64	@ 0x40
 8005742:	d86f      	bhi.n	8005824 <HAL_TIM_ConfigClockSource+0x170>
 8005744:	2b30      	cmp	r3, #48	@ 0x30
 8005746:	d064      	beq.n	8005812 <HAL_TIM_ConfigClockSource+0x15e>
 8005748:	2b30      	cmp	r3, #48	@ 0x30
 800574a:	d86b      	bhi.n	8005824 <HAL_TIM_ConfigClockSource+0x170>
 800574c:	2b20      	cmp	r3, #32
 800574e:	d060      	beq.n	8005812 <HAL_TIM_ConfigClockSource+0x15e>
 8005750:	2b20      	cmp	r3, #32
 8005752:	d867      	bhi.n	8005824 <HAL_TIM_ConfigClockSource+0x170>
 8005754:	2b00      	cmp	r3, #0
 8005756:	d05c      	beq.n	8005812 <HAL_TIM_ConfigClockSource+0x15e>
 8005758:	2b10      	cmp	r3, #16
 800575a:	d05a      	beq.n	8005812 <HAL_TIM_ConfigClockSource+0x15e>
 800575c:	e062      	b.n	8005824 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800576e:	f000 fc41 	bl	8005ff4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005780:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68ba      	ldr	r2, [r7, #8]
 8005788:	609a      	str	r2, [r3, #8]
      break;
 800578a:	e04f      	b.n	800582c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800579c:	f000 fc2a 	bl	8005ff4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	689a      	ldr	r2, [r3, #8]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80057ae:	609a      	str	r2, [r3, #8]
      break;
 80057b0:	e03c      	b.n	800582c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057be:	461a      	mov	r2, r3
 80057c0:	f000 fb9e 	bl	8005f00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2150      	movs	r1, #80	@ 0x50
 80057ca:	4618      	mov	r0, r3
 80057cc:	f000 fbf7 	bl	8005fbe <TIM_ITRx_SetConfig>
      break;
 80057d0:	e02c      	b.n	800582c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80057de:	461a      	mov	r2, r3
 80057e0:	f000 fbbd 	bl	8005f5e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2160      	movs	r1, #96	@ 0x60
 80057ea:	4618      	mov	r0, r3
 80057ec:	f000 fbe7 	bl	8005fbe <TIM_ITRx_SetConfig>
      break;
 80057f0:	e01c      	b.n	800582c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057fe:	461a      	mov	r2, r3
 8005800:	f000 fb7e 	bl	8005f00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2140      	movs	r1, #64	@ 0x40
 800580a:	4618      	mov	r0, r3
 800580c:	f000 fbd7 	bl	8005fbe <TIM_ITRx_SetConfig>
      break;
 8005810:	e00c      	b.n	800582c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4619      	mov	r1, r3
 800581c:	4610      	mov	r0, r2
 800581e:	f000 fbce 	bl	8005fbe <TIM_ITRx_SetConfig>
      break;
 8005822:	e003      	b.n	800582c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	73fb      	strb	r3, [r7, #15]
      break;
 8005828:	e000      	b.n	800582c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800582a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800583c:	7bfb      	ldrb	r3, [r7, #15]
}
 800583e:	4618      	mov	r0, r3
 8005840:	3710      	adds	r7, #16
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}

08005846 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005846:	b480      	push	{r7}
 8005848:	b083      	sub	sp, #12
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800584e:	bf00      	nop
 8005850:	370c      	adds	r7, #12
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr

0800585a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800585a:	b480      	push	{r7}
 800585c:	b083      	sub	sp, #12
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005862:	bf00      	nop
 8005864:	370c      	adds	r7, #12
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr

0800586e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800586e:	b480      	push	{r7}
 8005870:	b083      	sub	sp, #12
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005876:	bf00      	nop
 8005878:	370c      	adds	r7, #12
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr

08005882 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005882:	b480      	push	{r7}
 8005884:	b083      	sub	sp, #12
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800588a:	bf00      	nop
 800588c:	370c      	adds	r7, #12
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr

08005896 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005896:	b480      	push	{r7}
 8005898:	b083      	sub	sp, #12
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800589e:	bf00      	nop
 80058a0:	370c      	adds	r7, #12
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
	...

080058ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b085      	sub	sp, #20
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a38      	ldr	r2, [pc, #224]	@ (80059a0 <TIM_Base_SetConfig+0xf4>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d007      	beq.n	80058d4 <TIM_Base_SetConfig+0x28>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058ca:	d003      	beq.n	80058d4 <TIM_Base_SetConfig+0x28>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a35      	ldr	r2, [pc, #212]	@ (80059a4 <TIM_Base_SetConfig+0xf8>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d108      	bne.n	80058e6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	68fa      	ldr	r2, [r7, #12]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a2d      	ldr	r2, [pc, #180]	@ (80059a0 <TIM_Base_SetConfig+0xf4>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d013      	beq.n	8005916 <TIM_Base_SetConfig+0x6a>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058f4:	d00f      	beq.n	8005916 <TIM_Base_SetConfig+0x6a>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a2a      	ldr	r2, [pc, #168]	@ (80059a4 <TIM_Base_SetConfig+0xf8>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d00b      	beq.n	8005916 <TIM_Base_SetConfig+0x6a>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a29      	ldr	r2, [pc, #164]	@ (80059a8 <TIM_Base_SetConfig+0xfc>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d007      	beq.n	8005916 <TIM_Base_SetConfig+0x6a>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a28      	ldr	r2, [pc, #160]	@ (80059ac <TIM_Base_SetConfig+0x100>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d003      	beq.n	8005916 <TIM_Base_SetConfig+0x6a>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a27      	ldr	r2, [pc, #156]	@ (80059b0 <TIM_Base_SetConfig+0x104>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d108      	bne.n	8005928 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800591c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	4313      	orrs	r3, r2
 8005926:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	695b      	ldr	r3, [r3, #20]
 8005932:	4313      	orrs	r3, r2
 8005934:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	689a      	ldr	r2, [r3, #8]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4a14      	ldr	r2, [pc, #80]	@ (80059a0 <TIM_Base_SetConfig+0xf4>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d00b      	beq.n	800596c <TIM_Base_SetConfig+0xc0>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a14      	ldr	r2, [pc, #80]	@ (80059a8 <TIM_Base_SetConfig+0xfc>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d007      	beq.n	800596c <TIM_Base_SetConfig+0xc0>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a13      	ldr	r2, [pc, #76]	@ (80059ac <TIM_Base_SetConfig+0x100>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d003      	beq.n	800596c <TIM_Base_SetConfig+0xc0>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4a12      	ldr	r2, [pc, #72]	@ (80059b0 <TIM_Base_SetConfig+0x104>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d103      	bne.n	8005974 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	691a      	ldr	r2, [r3, #16]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	f003 0301 	and.w	r3, r3, #1
 8005982:	2b01      	cmp	r3, #1
 8005984:	d105      	bne.n	8005992 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	f023 0201 	bic.w	r2, r3, #1
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	611a      	str	r2, [r3, #16]
  }
}
 8005992:	bf00      	nop
 8005994:	3714      	adds	r7, #20
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr
 800599e:	bf00      	nop
 80059a0:	40012c00 	.word	0x40012c00
 80059a4:	40000400 	.word	0x40000400
 80059a8:	40014000 	.word	0x40014000
 80059ac:	40014400 	.word	0x40014400
 80059b0:	40014800 	.word	0x40014800

080059b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b087      	sub	sp, #28
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a1b      	ldr	r3, [r3, #32]
 80059c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6a1b      	ldr	r3, [r3, #32]
 80059c8:	f023 0201 	bic.w	r2, r3, #1
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	699b      	ldr	r3, [r3, #24]
 80059da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f023 0303 	bic.w	r3, r3, #3
 80059ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	f023 0302 	bic.w	r3, r3, #2
 8005a00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	697a      	ldr	r2, [r7, #20]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a28      	ldr	r2, [pc, #160]	@ (8005ab0 <TIM_OC1_SetConfig+0xfc>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d00b      	beq.n	8005a2c <TIM_OC1_SetConfig+0x78>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	4a27      	ldr	r2, [pc, #156]	@ (8005ab4 <TIM_OC1_SetConfig+0x100>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d007      	beq.n	8005a2c <TIM_OC1_SetConfig+0x78>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4a26      	ldr	r2, [pc, #152]	@ (8005ab8 <TIM_OC1_SetConfig+0x104>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d003      	beq.n	8005a2c <TIM_OC1_SetConfig+0x78>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a25      	ldr	r2, [pc, #148]	@ (8005abc <TIM_OC1_SetConfig+0x108>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d10c      	bne.n	8005a46 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	f023 0308 	bic.w	r3, r3, #8
 8005a32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	697a      	ldr	r2, [r7, #20]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	f023 0304 	bic.w	r3, r3, #4
 8005a44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a19      	ldr	r2, [pc, #100]	@ (8005ab0 <TIM_OC1_SetConfig+0xfc>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d00b      	beq.n	8005a66 <TIM_OC1_SetConfig+0xb2>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a18      	ldr	r2, [pc, #96]	@ (8005ab4 <TIM_OC1_SetConfig+0x100>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d007      	beq.n	8005a66 <TIM_OC1_SetConfig+0xb2>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a17      	ldr	r2, [pc, #92]	@ (8005ab8 <TIM_OC1_SetConfig+0x104>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d003      	beq.n	8005a66 <TIM_OC1_SetConfig+0xb2>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a16      	ldr	r2, [pc, #88]	@ (8005abc <TIM_OC1_SetConfig+0x108>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d111      	bne.n	8005a8a <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005a74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	695b      	ldr	r3, [r3, #20]
 8005a7a:	693a      	ldr	r2, [r7, #16]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	699b      	ldr	r3, [r3, #24]
 8005a84:	693a      	ldr	r2, [r7, #16]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	693a      	ldr	r2, [r7, #16]
 8005a8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	68fa      	ldr	r2, [r7, #12]
 8005a94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	685a      	ldr	r2, [r3, #4]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	697a      	ldr	r2, [r7, #20]
 8005aa2:	621a      	str	r2, [r3, #32]
}
 8005aa4:	bf00      	nop
 8005aa6:	371c      	adds	r7, #28
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr
 8005ab0:	40012c00 	.word	0x40012c00
 8005ab4:	40014000 	.word	0x40014000
 8005ab8:	40014400 	.word	0x40014400
 8005abc:	40014800 	.word	0x40014800

08005ac0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b087      	sub	sp, #28
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a1b      	ldr	r3, [r3, #32]
 8005ace:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6a1b      	ldr	r3, [r3, #32]
 8005ad4:	f023 0210 	bic.w	r2, r3, #16
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	699b      	ldr	r3, [r3, #24]
 8005ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005aee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005af2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005afa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	021b      	lsls	r3, r3, #8
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	f023 0320 	bic.w	r3, r3, #32
 8005b0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	011b      	lsls	r3, r3, #4
 8005b16:	697a      	ldr	r2, [r7, #20]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a24      	ldr	r2, [pc, #144]	@ (8005bb0 <TIM_OC2_SetConfig+0xf0>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d10d      	bne.n	8005b40 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	011b      	lsls	r3, r3, #4
 8005b32:	697a      	ldr	r2, [r7, #20]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b3e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4a1b      	ldr	r2, [pc, #108]	@ (8005bb0 <TIM_OC2_SetConfig+0xf0>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d00b      	beq.n	8005b60 <TIM_OC2_SetConfig+0xa0>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4a1a      	ldr	r2, [pc, #104]	@ (8005bb4 <TIM_OC2_SetConfig+0xf4>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d007      	beq.n	8005b60 <TIM_OC2_SetConfig+0xa0>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a19      	ldr	r2, [pc, #100]	@ (8005bb8 <TIM_OC2_SetConfig+0xf8>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d003      	beq.n	8005b60 <TIM_OC2_SetConfig+0xa0>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a18      	ldr	r2, [pc, #96]	@ (8005bbc <TIM_OC2_SetConfig+0xfc>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d113      	bne.n	8005b88 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005b66:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005b6e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	695b      	ldr	r3, [r3, #20]
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	693a      	ldr	r2, [r7, #16]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	699b      	ldr	r3, [r3, #24]
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	693a      	ldr	r2, [r7, #16]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	693a      	ldr	r2, [r7, #16]
 8005b8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	68fa      	ldr	r2, [r7, #12]
 8005b92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	685a      	ldr	r2, [r3, #4]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	697a      	ldr	r2, [r7, #20]
 8005ba0:	621a      	str	r2, [r3, #32]
}
 8005ba2:	bf00      	nop
 8005ba4:	371c      	adds	r7, #28
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr
 8005bae:	bf00      	nop
 8005bb0:	40012c00 	.word	0x40012c00
 8005bb4:	40014000 	.word	0x40014000
 8005bb8:	40014400 	.word	0x40014400
 8005bbc:	40014800 	.word	0x40014800

08005bc0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b087      	sub	sp, #28
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6a1b      	ldr	r3, [r3, #32]
 8005bce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6a1b      	ldr	r3, [r3, #32]
 8005bd4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	69db      	ldr	r3, [r3, #28]
 8005be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005bee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f023 0303 	bic.w	r3, r3, #3
 8005bfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	68fa      	ldr	r2, [r7, #12]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	021b      	lsls	r3, r3, #8
 8005c14:	697a      	ldr	r2, [r7, #20]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a23      	ldr	r2, [pc, #140]	@ (8005cac <TIM_OC3_SetConfig+0xec>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d10d      	bne.n	8005c3e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	021b      	lsls	r3, r3, #8
 8005c30:	697a      	ldr	r2, [r7, #20]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c3c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a1a      	ldr	r2, [pc, #104]	@ (8005cac <TIM_OC3_SetConfig+0xec>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d00b      	beq.n	8005c5e <TIM_OC3_SetConfig+0x9e>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a19      	ldr	r2, [pc, #100]	@ (8005cb0 <TIM_OC3_SetConfig+0xf0>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d007      	beq.n	8005c5e <TIM_OC3_SetConfig+0x9e>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a18      	ldr	r2, [pc, #96]	@ (8005cb4 <TIM_OC3_SetConfig+0xf4>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d003      	beq.n	8005c5e <TIM_OC3_SetConfig+0x9e>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a17      	ldr	r2, [pc, #92]	@ (8005cb8 <TIM_OC3_SetConfig+0xf8>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d113      	bne.n	8005c86 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005c6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	695b      	ldr	r3, [r3, #20]
 8005c72:	011b      	lsls	r3, r3, #4
 8005c74:	693a      	ldr	r2, [r7, #16]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	699b      	ldr	r3, [r3, #24]
 8005c7e:	011b      	lsls	r3, r3, #4
 8005c80:	693a      	ldr	r2, [r7, #16]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	693a      	ldr	r2, [r7, #16]
 8005c8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	68fa      	ldr	r2, [r7, #12]
 8005c90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	685a      	ldr	r2, [r3, #4]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	697a      	ldr	r2, [r7, #20]
 8005c9e:	621a      	str	r2, [r3, #32]
}
 8005ca0:	bf00      	nop
 8005ca2:	371c      	adds	r7, #28
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr
 8005cac:	40012c00 	.word	0x40012c00
 8005cb0:	40014000 	.word	0x40014000
 8005cb4:	40014400 	.word	0x40014400
 8005cb8:	40014800 	.word	0x40014800

08005cbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b087      	sub	sp, #28
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a1b      	ldr	r3, [r3, #32]
 8005cca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6a1b      	ldr	r3, [r3, #32]
 8005cd0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	69db      	ldr	r3, [r3, #28]
 8005ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005cea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	021b      	lsls	r3, r3, #8
 8005cfe:	68fa      	ldr	r2, [r7, #12]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005d0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	031b      	lsls	r3, r3, #12
 8005d12:	693a      	ldr	r2, [r7, #16]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4a16      	ldr	r2, [pc, #88]	@ (8005d74 <TIM_OC4_SetConfig+0xb8>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d00b      	beq.n	8005d38 <TIM_OC4_SetConfig+0x7c>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a15      	ldr	r2, [pc, #84]	@ (8005d78 <TIM_OC4_SetConfig+0xbc>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d007      	beq.n	8005d38 <TIM_OC4_SetConfig+0x7c>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a14      	ldr	r2, [pc, #80]	@ (8005d7c <TIM_OC4_SetConfig+0xc0>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d003      	beq.n	8005d38 <TIM_OC4_SetConfig+0x7c>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a13      	ldr	r2, [pc, #76]	@ (8005d80 <TIM_OC4_SetConfig+0xc4>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d109      	bne.n	8005d4c <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	695b      	ldr	r3, [r3, #20]
 8005d44:	019b      	lsls	r3, r3, #6
 8005d46:	697a      	ldr	r2, [r7, #20]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	697a      	ldr	r2, [r7, #20]
 8005d50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	685a      	ldr	r2, [r3, #4]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	693a      	ldr	r2, [r7, #16]
 8005d64:	621a      	str	r2, [r3, #32]
}
 8005d66:	bf00      	nop
 8005d68:	371c      	adds	r7, #28
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop
 8005d74:	40012c00 	.word	0x40012c00
 8005d78:	40014000 	.word	0x40014000
 8005d7c:	40014400 	.word	0x40014400
 8005d80:	40014800 	.word	0x40014800

08005d84 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b087      	sub	sp, #28
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6a1b      	ldr	r3, [r3, #32]
 8005d92:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6a1b      	ldr	r3, [r3, #32]
 8005d98:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005db2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005db6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005dc8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	041b      	lsls	r3, r3, #16
 8005dd0:	693a      	ldr	r2, [r7, #16]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a15      	ldr	r2, [pc, #84]	@ (8005e30 <TIM_OC5_SetConfig+0xac>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d00b      	beq.n	8005df6 <TIM_OC5_SetConfig+0x72>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a14      	ldr	r2, [pc, #80]	@ (8005e34 <TIM_OC5_SetConfig+0xb0>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d007      	beq.n	8005df6 <TIM_OC5_SetConfig+0x72>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a13      	ldr	r2, [pc, #76]	@ (8005e38 <TIM_OC5_SetConfig+0xb4>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d003      	beq.n	8005df6 <TIM_OC5_SetConfig+0x72>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4a12      	ldr	r2, [pc, #72]	@ (8005e3c <TIM_OC5_SetConfig+0xb8>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d109      	bne.n	8005e0a <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005dfc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	695b      	ldr	r3, [r3, #20]
 8005e02:	021b      	lsls	r3, r3, #8
 8005e04:	697a      	ldr	r2, [r7, #20]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	697a      	ldr	r2, [r7, #20]
 8005e0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	68fa      	ldr	r2, [r7, #12]
 8005e14:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	685a      	ldr	r2, [r3, #4]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	693a      	ldr	r2, [r7, #16]
 8005e22:	621a      	str	r2, [r3, #32]
}
 8005e24:	bf00      	nop
 8005e26:	371c      	adds	r7, #28
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr
 8005e30:	40012c00 	.word	0x40012c00
 8005e34:	40014000 	.word	0x40014000
 8005e38:	40014400 	.word	0x40014400
 8005e3c:	40014800 	.word	0x40014800

08005e40 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b087      	sub	sp, #28
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a1b      	ldr	r3, [r3, #32]
 8005e4e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6a1b      	ldr	r3, [r3, #32]
 8005e54:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	021b      	lsls	r3, r3, #8
 8005e7a:	68fa      	ldr	r2, [r7, #12]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005e86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	051b      	lsls	r3, r3, #20
 8005e8e:	693a      	ldr	r2, [r7, #16]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a16      	ldr	r2, [pc, #88]	@ (8005ef0 <TIM_OC6_SetConfig+0xb0>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d00b      	beq.n	8005eb4 <TIM_OC6_SetConfig+0x74>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a15      	ldr	r2, [pc, #84]	@ (8005ef4 <TIM_OC6_SetConfig+0xb4>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d007      	beq.n	8005eb4 <TIM_OC6_SetConfig+0x74>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4a14      	ldr	r2, [pc, #80]	@ (8005ef8 <TIM_OC6_SetConfig+0xb8>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d003      	beq.n	8005eb4 <TIM_OC6_SetConfig+0x74>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4a13      	ldr	r2, [pc, #76]	@ (8005efc <TIM_OC6_SetConfig+0xbc>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d109      	bne.n	8005ec8 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005eba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	695b      	ldr	r3, [r3, #20]
 8005ec0:	029b      	lsls	r3, r3, #10
 8005ec2:	697a      	ldr	r2, [r7, #20]
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	697a      	ldr	r2, [r7, #20]
 8005ecc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	68fa      	ldr	r2, [r7, #12]
 8005ed2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	685a      	ldr	r2, [r3, #4]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	693a      	ldr	r2, [r7, #16]
 8005ee0:	621a      	str	r2, [r3, #32]
}
 8005ee2:	bf00      	nop
 8005ee4:	371c      	adds	r7, #28
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr
 8005eee:	bf00      	nop
 8005ef0:	40012c00 	.word	0x40012c00
 8005ef4:	40014000 	.word	0x40014000
 8005ef8:	40014400 	.word	0x40014400
 8005efc:	40014800 	.word	0x40014800

08005f00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b087      	sub	sp, #28
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	60f8      	str	r0, [r7, #12]
 8005f08:	60b9      	str	r1, [r7, #8]
 8005f0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6a1b      	ldr	r3, [r3, #32]
 8005f10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	6a1b      	ldr	r3, [r3, #32]
 8005f16:	f023 0201 	bic.w	r2, r3, #1
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	699b      	ldr	r3, [r3, #24]
 8005f22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	011b      	lsls	r3, r3, #4
 8005f30:	693a      	ldr	r2, [r7, #16]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	f023 030a 	bic.w	r3, r3, #10
 8005f3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f3e:	697a      	ldr	r2, [r7, #20]
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	697a      	ldr	r2, [r7, #20]
 8005f50:	621a      	str	r2, [r3, #32]
}
 8005f52:	bf00      	nop
 8005f54:	371c      	adds	r7, #28
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr

08005f5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f5e:	b480      	push	{r7}
 8005f60:	b087      	sub	sp, #28
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	60f8      	str	r0, [r7, #12]
 8005f66:	60b9      	str	r1, [r7, #8]
 8005f68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6a1b      	ldr	r3, [r3, #32]
 8005f6e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6a1b      	ldr	r3, [r3, #32]
 8005f74:	f023 0210 	bic.w	r2, r3, #16
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	699b      	ldr	r3, [r3, #24]
 8005f80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005f88:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	031b      	lsls	r3, r3, #12
 8005f8e:	693a      	ldr	r2, [r7, #16]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005f9a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	011b      	lsls	r3, r3, #4
 8005fa0:	697a      	ldr	r2, [r7, #20]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	693a      	ldr	r2, [r7, #16]
 8005faa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	697a      	ldr	r2, [r7, #20]
 8005fb0:	621a      	str	r2, [r3, #32]
}
 8005fb2:	bf00      	nop
 8005fb4:	371c      	adds	r7, #28
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr

08005fbe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005fbe:	b480      	push	{r7}
 8005fc0:	b085      	sub	sp, #20
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
 8005fc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fd4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005fd6:	683a      	ldr	r2, [r7, #0]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	f043 0307 	orr.w	r3, r3, #7
 8005fe0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	68fa      	ldr	r2, [r7, #12]
 8005fe6:	609a      	str	r2, [r3, #8]
}
 8005fe8:	bf00      	nop
 8005fea:	3714      	adds	r7, #20
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr

08005ff4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b087      	sub	sp, #28
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	60b9      	str	r1, [r7, #8]
 8005ffe:	607a      	str	r2, [r7, #4]
 8006000:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800600e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	021a      	lsls	r2, r3, #8
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	431a      	orrs	r2, r3
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	4313      	orrs	r3, r2
 800601c:	697a      	ldr	r2, [r7, #20]
 800601e:	4313      	orrs	r3, r2
 8006020:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	697a      	ldr	r2, [r7, #20]
 8006026:	609a      	str	r2, [r3, #8]
}
 8006028:	bf00      	nop
 800602a:	371c      	adds	r7, #28
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006034:	b480      	push	{r7}
 8006036:	b087      	sub	sp, #28
 8006038:	af00      	add	r7, sp, #0
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	f003 031f 	and.w	r3, r3, #31
 8006046:	2201      	movs	r2, #1
 8006048:	fa02 f303 	lsl.w	r3, r2, r3
 800604c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6a1a      	ldr	r2, [r3, #32]
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	43db      	mvns	r3, r3
 8006056:	401a      	ands	r2, r3
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6a1a      	ldr	r2, [r3, #32]
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	f003 031f 	and.w	r3, r3, #31
 8006066:	6879      	ldr	r1, [r7, #4]
 8006068:	fa01 f303 	lsl.w	r3, r1, r3
 800606c:	431a      	orrs	r2, r3
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	621a      	str	r2, [r3, #32]
}
 8006072:	bf00      	nop
 8006074:	371c      	adds	r7, #28
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr
	...

08006080 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006080:	b480      	push	{r7}
 8006082:	b085      	sub	sp, #20
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006090:	2b01      	cmp	r3, #1
 8006092:	d101      	bne.n	8006098 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006094:	2302      	movs	r3, #2
 8006096:	e054      	b.n	8006142 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2202      	movs	r2, #2
 80060a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a24      	ldr	r2, [pc, #144]	@ (8006150 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d108      	bne.n	80060d4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80060c8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	68fa      	ldr	r2, [r7, #12]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68fa      	ldr	r2, [r7, #12]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	68fa      	ldr	r2, [r7, #12]
 80060ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a17      	ldr	r2, [pc, #92]	@ (8006150 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d00e      	beq.n	8006116 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006100:	d009      	beq.n	8006116 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a13      	ldr	r2, [pc, #76]	@ (8006154 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d004      	beq.n	8006116 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a11      	ldr	r2, [pc, #68]	@ (8006158 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d10c      	bne.n	8006130 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800611c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	68ba      	ldr	r2, [r7, #8]
 8006124:	4313      	orrs	r3, r2
 8006126:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	68ba      	ldr	r2, [r7, #8]
 800612e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	3714      	adds	r7, #20
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop
 8006150:	40012c00 	.word	0x40012c00
 8006154:	40000400 	.word	0x40000400
 8006158:	40014000 	.word	0x40014000

0800615c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800615c:	b480      	push	{r7}
 800615e:	b085      	sub	sp, #20
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006166:	2300      	movs	r3, #0
 8006168:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006170:	2b01      	cmp	r3, #1
 8006172:	d101      	bne.n	8006178 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006174:	2302      	movs	r3, #2
 8006176:	e060      	b.n	800623a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	4313      	orrs	r3, r2
 800618c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	4313      	orrs	r3, r2
 800619a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4313      	orrs	r3, r2
 80061b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	695b      	ldr	r3, [r3, #20]
 80061d0:	4313      	orrs	r3, r2
 80061d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061de:	4313      	orrs	r3, r2
 80061e0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	699b      	ldr	r3, [r3, #24]
 80061ec:	041b      	lsls	r3, r3, #16
 80061ee:	4313      	orrs	r3, r2
 80061f0:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a14      	ldr	r2, [pc, #80]	@ (8006248 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d115      	bne.n	8006228 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006206:	051b      	lsls	r3, r3, #20
 8006208:	4313      	orrs	r3, r2
 800620a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	69db      	ldr	r3, [r3, #28]
 8006216:	4313      	orrs	r3, r2
 8006218:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	6a1b      	ldr	r3, [r3, #32]
 8006224:	4313      	orrs	r3, r2
 8006226:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006238:	2300      	movs	r3, #0
}
 800623a:	4618      	mov	r0, r3
 800623c:	3714      	adds	r7, #20
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr
 8006246:	bf00      	nop
 8006248:	40012c00 	.word	0x40012c00

0800624c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800624c:	b480      	push	{r7}
 800624e:	b083      	sub	sp, #12
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006254:	bf00      	nop
 8006256:	370c      	adds	r7, #12
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr

08006260 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006268:	bf00      	nop
 800626a:	370c      	adds	r7, #12
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr

08006274 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006274:	b480      	push	{r7}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800627c:	bf00      	nop
 800627e:	370c      	adds	r7, #12
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr

08006288 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b082      	sub	sp, #8
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d101      	bne.n	800629a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	e040      	b.n	800631c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d106      	bne.n	80062b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f7fb ff08 	bl	80020c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2224      	movs	r2, #36	@ 0x24
 80062b4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f022 0201 	bic.w	r2, r2, #1
 80062c4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d002      	beq.n	80062d4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 fd32 	bl	8006d38 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f000 fbf9 	bl	8006acc <UART_SetConfig>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d101      	bne.n	80062e4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	e01b      	b.n	800631c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	685a      	ldr	r2, [r3, #4]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80062f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	689a      	ldr	r2, [r3, #8]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006302:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f042 0201 	orr.w	r2, r2, #1
 8006312:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f000 fdb1 	bl	8006e7c <UART_CheckIdleState>
 800631a:	4603      	mov	r3, r0
}
 800631c:	4618      	mov	r0, r3
 800631e:	3708      	adds	r7, #8
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b08a      	sub	sp, #40	@ 0x28
 8006328:	af02      	add	r7, sp, #8
 800632a:	60f8      	str	r0, [r7, #12]
 800632c:	60b9      	str	r1, [r7, #8]
 800632e:	603b      	str	r3, [r7, #0]
 8006330:	4613      	mov	r3, r2
 8006332:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006338:	2b20      	cmp	r3, #32
 800633a:	d177      	bne.n	800642c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d002      	beq.n	8006348 <HAL_UART_Transmit+0x24>
 8006342:	88fb      	ldrh	r3, [r7, #6]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d101      	bne.n	800634c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	e070      	b.n	800642e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2200      	movs	r2, #0
 8006350:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2221      	movs	r2, #33	@ 0x21
 8006358:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800635a:	f7fc f8a3 	bl	80024a4 <HAL_GetTick>
 800635e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	88fa      	ldrh	r2, [r7, #6]
 8006364:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	88fa      	ldrh	r2, [r7, #6]
 800636c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006378:	d108      	bne.n	800638c <HAL_UART_Transmit+0x68>
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d104      	bne.n	800638c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006382:	2300      	movs	r3, #0
 8006384:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	61bb      	str	r3, [r7, #24]
 800638a:	e003      	b.n	8006394 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006390:	2300      	movs	r3, #0
 8006392:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006394:	e02f      	b.n	80063f6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	9300      	str	r3, [sp, #0]
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	2200      	movs	r2, #0
 800639e:	2180      	movs	r1, #128	@ 0x80
 80063a0:	68f8      	ldr	r0, [r7, #12]
 80063a2:	f000 fe13 	bl	8006fcc <UART_WaitOnFlagUntilTimeout>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d004      	beq.n	80063b6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2220      	movs	r2, #32
 80063b0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80063b2:	2303      	movs	r3, #3
 80063b4:	e03b      	b.n	800642e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80063b6:	69fb      	ldr	r3, [r7, #28]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d10b      	bne.n	80063d4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80063bc:	69bb      	ldr	r3, [r7, #24]
 80063be:	881a      	ldrh	r2, [r3, #0]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063c8:	b292      	uxth	r2, r2
 80063ca:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80063cc:	69bb      	ldr	r3, [r7, #24]
 80063ce:	3302      	adds	r3, #2
 80063d0:	61bb      	str	r3, [r7, #24]
 80063d2:	e007      	b.n	80063e4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80063d4:	69fb      	ldr	r3, [r7, #28]
 80063d6:	781a      	ldrb	r2, [r3, #0]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80063de:	69fb      	ldr	r3, [r7, #28]
 80063e0:	3301      	adds	r3, #1
 80063e2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	3b01      	subs	r3, #1
 80063ee:	b29a      	uxth	r2, r3
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d1c9      	bne.n	8006396 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	9300      	str	r3, [sp, #0]
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	2200      	movs	r2, #0
 800640a:	2140      	movs	r1, #64	@ 0x40
 800640c:	68f8      	ldr	r0, [r7, #12]
 800640e:	f000 fddd 	bl	8006fcc <UART_WaitOnFlagUntilTimeout>
 8006412:	4603      	mov	r3, r0
 8006414:	2b00      	cmp	r3, #0
 8006416:	d004      	beq.n	8006422 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2220      	movs	r2, #32
 800641c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800641e:	2303      	movs	r3, #3
 8006420:	e005      	b.n	800642e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2220      	movs	r2, #32
 8006426:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006428:	2300      	movs	r3, #0
 800642a:	e000      	b.n	800642e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800642c:	2302      	movs	r3, #2
  }
}
 800642e:	4618      	mov	r0, r3
 8006430:	3720      	adds	r7, #32
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}

08006436 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006436:	b580      	push	{r7, lr}
 8006438:	b08a      	sub	sp, #40	@ 0x28
 800643a:	af00      	add	r7, sp, #0
 800643c:	60f8      	str	r0, [r7, #12]
 800643e:	60b9      	str	r1, [r7, #8]
 8006440:	4613      	mov	r3, r2
 8006442:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800644a:	2b20      	cmp	r3, #32
 800644c:	d132      	bne.n	80064b4 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d002      	beq.n	800645a <HAL_UART_Receive_IT+0x24>
 8006454:	88fb      	ldrh	r3, [r7, #6]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d101      	bne.n	800645e <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	e02b      	b.n	80064b6 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2200      	movs	r2, #0
 8006462:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800646e:	2b00      	cmp	r3, #0
 8006470:	d018      	beq.n	80064a4 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	e853 3f00 	ldrex	r3, [r3]
 800647e:	613b      	str	r3, [r7, #16]
   return(result);
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006486:	627b      	str	r3, [r7, #36]	@ 0x24
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	461a      	mov	r2, r3
 800648e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006490:	623b      	str	r3, [r7, #32]
 8006492:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006494:	69f9      	ldr	r1, [r7, #28]
 8006496:	6a3a      	ldr	r2, [r7, #32]
 8006498:	e841 2300 	strex	r3, r2, [r1]
 800649c:	61bb      	str	r3, [r7, #24]
   return(result);
 800649e:	69bb      	ldr	r3, [r7, #24]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d1e6      	bne.n	8006472 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80064a4:	88fb      	ldrh	r3, [r7, #6]
 80064a6:	461a      	mov	r2, r3
 80064a8:	68b9      	ldr	r1, [r7, #8]
 80064aa:	68f8      	ldr	r0, [r7, #12]
 80064ac:	f000 fdfc 	bl	80070a8 <UART_Start_Receive_IT>
 80064b0:	4603      	mov	r3, r0
 80064b2:	e000      	b.n	80064b6 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80064b4:	2302      	movs	r3, #2
  }
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3728      	adds	r7, #40	@ 0x28
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
	...

080064c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b0ba      	sub	sp, #232	@ 0xe8
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	69db      	ldr	r3, [r3, #28]
 80064ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80064e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80064ea:	f640 030f 	movw	r3, #2063	@ 0x80f
 80064ee:	4013      	ands	r3, r2
 80064f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80064f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d115      	bne.n	8006528 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80064fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006500:	f003 0320 	and.w	r3, r3, #32
 8006504:	2b00      	cmp	r3, #0
 8006506:	d00f      	beq.n	8006528 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800650c:	f003 0320 	and.w	r3, r3, #32
 8006510:	2b00      	cmp	r3, #0
 8006512:	d009      	beq.n	8006528 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006518:	2b00      	cmp	r3, #0
 800651a:	f000 82ab 	beq.w	8006a74 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	4798      	blx	r3
      }
      return;
 8006526:	e2a5      	b.n	8006a74 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006528:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800652c:	2b00      	cmp	r3, #0
 800652e:	f000 8117 	beq.w	8006760 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006532:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006536:	f003 0301 	and.w	r3, r3, #1
 800653a:	2b00      	cmp	r3, #0
 800653c:	d106      	bne.n	800654c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800653e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006542:	4b85      	ldr	r3, [pc, #532]	@ (8006758 <HAL_UART_IRQHandler+0x298>)
 8006544:	4013      	ands	r3, r2
 8006546:	2b00      	cmp	r3, #0
 8006548:	f000 810a 	beq.w	8006760 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800654c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006550:	f003 0301 	and.w	r3, r3, #1
 8006554:	2b00      	cmp	r3, #0
 8006556:	d011      	beq.n	800657c <HAL_UART_IRQHandler+0xbc>
 8006558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800655c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006560:	2b00      	cmp	r3, #0
 8006562:	d00b      	beq.n	800657c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	2201      	movs	r2, #1
 800656a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006572:	f043 0201 	orr.w	r2, r3, #1
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800657c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006580:	f003 0302 	and.w	r3, r3, #2
 8006584:	2b00      	cmp	r3, #0
 8006586:	d011      	beq.n	80065ac <HAL_UART_IRQHandler+0xec>
 8006588:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800658c:	f003 0301 	and.w	r3, r3, #1
 8006590:	2b00      	cmp	r3, #0
 8006592:	d00b      	beq.n	80065ac <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	2202      	movs	r2, #2
 800659a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80065a2:	f043 0204 	orr.w	r2, r3, #4
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80065ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065b0:	f003 0304 	and.w	r3, r3, #4
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d011      	beq.n	80065dc <HAL_UART_IRQHandler+0x11c>
 80065b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065bc:	f003 0301 	and.w	r3, r3, #1
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d00b      	beq.n	80065dc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	2204      	movs	r2, #4
 80065ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80065d2:	f043 0202 	orr.w	r2, r3, #2
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80065dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065e0:	f003 0308 	and.w	r3, r3, #8
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d017      	beq.n	8006618 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80065e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065ec:	f003 0320 	and.w	r3, r3, #32
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d105      	bne.n	8006600 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80065f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065f8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d00b      	beq.n	8006618 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	2208      	movs	r2, #8
 8006606:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800660e:	f043 0208 	orr.w	r2, r3, #8
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006618:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800661c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006620:	2b00      	cmp	r3, #0
 8006622:	d012      	beq.n	800664a <HAL_UART_IRQHandler+0x18a>
 8006624:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006628:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800662c:	2b00      	cmp	r3, #0
 800662e:	d00c      	beq.n	800664a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006638:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006640:	f043 0220 	orr.w	r2, r3, #32
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006650:	2b00      	cmp	r3, #0
 8006652:	f000 8211 	beq.w	8006a78 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800665a:	f003 0320 	and.w	r3, r3, #32
 800665e:	2b00      	cmp	r3, #0
 8006660:	d00d      	beq.n	800667e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006662:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006666:	f003 0320 	and.w	r3, r3, #32
 800666a:	2b00      	cmp	r3, #0
 800666c:	d007      	beq.n	800667e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006672:	2b00      	cmp	r3, #0
 8006674:	d003      	beq.n	800667e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006684:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006692:	2b40      	cmp	r3, #64	@ 0x40
 8006694:	d005      	beq.n	80066a2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006696:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800669a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d04f      	beq.n	8006742 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 fdc6 	bl	8007234 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066b2:	2b40      	cmp	r3, #64	@ 0x40
 80066b4:	d141      	bne.n	800673a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	3308      	adds	r3, #8
 80066bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80066c4:	e853 3f00 	ldrex	r3, [r3]
 80066c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80066cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80066d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	3308      	adds	r3, #8
 80066de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80066e2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80066e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80066ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80066f2:	e841 2300 	strex	r3, r2, [r1]
 80066f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80066fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d1d9      	bne.n	80066b6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006706:	2b00      	cmp	r3, #0
 8006708:	d013      	beq.n	8006732 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800670e:	4a13      	ldr	r2, [pc, #76]	@ (800675c <HAL_UART_IRQHandler+0x29c>)
 8006710:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006716:	4618      	mov	r0, r3
 8006718:	f7fc f843 	bl	80027a2 <HAL_DMA_Abort_IT>
 800671c:	4603      	mov	r3, r0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d017      	beq.n	8006752 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006726:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800672c:	4610      	mov	r0, r2
 800672e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006730:	e00f      	b.n	8006752 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 f9b4 	bl	8006aa0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006738:	e00b      	b.n	8006752 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 f9b0 	bl	8006aa0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006740:	e007      	b.n	8006752 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f000 f9ac 	bl	8006aa0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2200      	movs	r2, #0
 800674c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006750:	e192      	b.n	8006a78 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006752:	bf00      	nop
    return;
 8006754:	e190      	b.n	8006a78 <HAL_UART_IRQHandler+0x5b8>
 8006756:	bf00      	nop
 8006758:	04000120 	.word	0x04000120
 800675c:	080072fd 	.word	0x080072fd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006764:	2b01      	cmp	r3, #1
 8006766:	f040 814b 	bne.w	8006a00 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800676a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800676e:	f003 0310 	and.w	r3, r3, #16
 8006772:	2b00      	cmp	r3, #0
 8006774:	f000 8144 	beq.w	8006a00 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800677c:	f003 0310 	and.w	r3, r3, #16
 8006780:	2b00      	cmp	r3, #0
 8006782:	f000 813d 	beq.w	8006a00 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	2210      	movs	r2, #16
 800678c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006798:	2b40      	cmp	r3, #64	@ 0x40
 800679a:	f040 80b5 	bne.w	8006908 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80067aa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	f000 8164 	beq.w	8006a7c <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80067ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80067be:	429a      	cmp	r2, r3
 80067c0:	f080 815c 	bcs.w	8006a7c <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80067ca:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067d2:	699b      	ldr	r3, [r3, #24]
 80067d4:	2b20      	cmp	r3, #32
 80067d6:	f000 8086 	beq.w	80068e6 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80067e6:	e853 3f00 	ldrex	r3, [r3]
 80067ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80067ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80067f2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80067f6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	461a      	mov	r2, r3
 8006800:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006804:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006808:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800680c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006810:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006814:	e841 2300 	strex	r3, r2, [r1]
 8006818:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800681c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006820:	2b00      	cmp	r3, #0
 8006822:	d1da      	bne.n	80067da <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	3308      	adds	r3, #8
 800682a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800682c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800682e:	e853 3f00 	ldrex	r3, [r3]
 8006832:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006834:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006836:	f023 0301 	bic.w	r3, r3, #1
 800683a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	3308      	adds	r3, #8
 8006844:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006848:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800684c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800684e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006850:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006854:	e841 2300 	strex	r3, r2, [r1]
 8006858:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800685a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800685c:	2b00      	cmp	r3, #0
 800685e:	d1e1      	bne.n	8006824 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	3308      	adds	r3, #8
 8006866:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006868:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800686a:	e853 3f00 	ldrex	r3, [r3]
 800686e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006870:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006872:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006876:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	3308      	adds	r3, #8
 8006880:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006884:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006886:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006888:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800688a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800688c:	e841 2300 	strex	r3, r2, [r1]
 8006890:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006892:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006894:	2b00      	cmp	r3, #0
 8006896:	d1e3      	bne.n	8006860 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2220      	movs	r2, #32
 800689c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80068ae:	e853 3f00 	ldrex	r3, [r3]
 80068b2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80068b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80068b6:	f023 0310 	bic.w	r3, r3, #16
 80068ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	461a      	mov	r2, r3
 80068c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80068c8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80068ca:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068cc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80068ce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80068d0:	e841 2300 	strex	r3, r2, [r1]
 80068d4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80068d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d1e4      	bne.n	80068a6 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068e0:	4618      	mov	r0, r3
 80068e2:	f7fb ff20 	bl	8002726 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2202      	movs	r2, #2
 80068ea:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	1ad3      	subs	r3, r2, r3
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	4619      	mov	r1, r3
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f000 f8d7 	bl	8006ab4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006906:	e0b9      	b.n	8006a7c <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006914:	b29b      	uxth	r3, r3
 8006916:	1ad3      	subs	r3, r2, r3
 8006918:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006922:	b29b      	uxth	r3, r3
 8006924:	2b00      	cmp	r3, #0
 8006926:	f000 80ab 	beq.w	8006a80 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800692a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800692e:	2b00      	cmp	r3, #0
 8006930:	f000 80a6 	beq.w	8006a80 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800693a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800693c:	e853 3f00 	ldrex	r3, [r3]
 8006940:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006942:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006944:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006948:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	461a      	mov	r2, r3
 8006952:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006956:	647b      	str	r3, [r7, #68]	@ 0x44
 8006958:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800695a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800695c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800695e:	e841 2300 	strex	r3, r2, [r1]
 8006962:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006964:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006966:	2b00      	cmp	r3, #0
 8006968:	d1e4      	bne.n	8006934 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	3308      	adds	r3, #8
 8006970:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006974:	e853 3f00 	ldrex	r3, [r3]
 8006978:	623b      	str	r3, [r7, #32]
   return(result);
 800697a:	6a3b      	ldr	r3, [r7, #32]
 800697c:	f023 0301 	bic.w	r3, r3, #1
 8006980:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	3308      	adds	r3, #8
 800698a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800698e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006990:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006992:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006994:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006996:	e841 2300 	strex	r3, r2, [r1]
 800699a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800699c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d1e3      	bne.n	800696a <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2220      	movs	r2, #32
 80069a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	e853 3f00 	ldrex	r3, [r3]
 80069c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f023 0310 	bic.w	r3, r3, #16
 80069ca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	461a      	mov	r2, r3
 80069d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80069d8:	61fb      	str	r3, [r7, #28]
 80069da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069dc:	69b9      	ldr	r1, [r7, #24]
 80069de:	69fa      	ldr	r2, [r7, #28]
 80069e0:	e841 2300 	strex	r3, r2, [r1]
 80069e4:	617b      	str	r3, [r7, #20]
   return(result);
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d1e4      	bne.n	80069b6 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2202      	movs	r2, #2
 80069f0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80069f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80069f6:	4619      	mov	r1, r3
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 f85b 	bl	8006ab4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80069fe:	e03f      	b.n	8006a80 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006a00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a04:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d00e      	beq.n	8006a2a <HAL_UART_IRQHandler+0x56a>
 8006a0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a10:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d008      	beq.n	8006a2a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006a20:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 fe52 	bl	80076cc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006a28:	e02d      	b.n	8006a86 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d00e      	beq.n	8006a54 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006a36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d008      	beq.n	8006a54 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d01c      	beq.n	8006a84 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	4798      	blx	r3
    }
    return;
 8006a52:	e017      	b.n	8006a84 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006a54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d012      	beq.n	8006a86 <HAL_UART_IRQHandler+0x5c6>
 8006a60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d00c      	beq.n	8006a86 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f000 fc5b 	bl	8007328 <UART_EndTransmit_IT>
    return;
 8006a72:	e008      	b.n	8006a86 <HAL_UART_IRQHandler+0x5c6>
      return;
 8006a74:	bf00      	nop
 8006a76:	e006      	b.n	8006a86 <HAL_UART_IRQHandler+0x5c6>
    return;
 8006a78:	bf00      	nop
 8006a7a:	e004      	b.n	8006a86 <HAL_UART_IRQHandler+0x5c6>
      return;
 8006a7c:	bf00      	nop
 8006a7e:	e002      	b.n	8006a86 <HAL_UART_IRQHandler+0x5c6>
      return;
 8006a80:	bf00      	nop
 8006a82:	e000      	b.n	8006a86 <HAL_UART_IRQHandler+0x5c6>
    return;
 8006a84:	bf00      	nop
  }

}
 8006a86:	37e8      	adds	r7, #232	@ 0xe8
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006a94:	bf00      	nop
 8006a96:	370c      	adds	r7, #12
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr

08006aa0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b083      	sub	sp, #12
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006aa8:	bf00      	nop
 8006aaa:	370c      	adds	r7, #12
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr

08006ab4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b083      	sub	sp, #12
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	460b      	mov	r3, r1
 8006abe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006ac0:	bf00      	nop
 8006ac2:	370c      	adds	r7, #12
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr

08006acc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b088      	sub	sp, #32
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	689a      	ldr	r2, [r3, #8]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	691b      	ldr	r3, [r3, #16]
 8006ae0:	431a      	orrs	r2, r3
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	695b      	ldr	r3, [r3, #20]
 8006ae6:	431a      	orrs	r2, r3
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	69db      	ldr	r3, [r3, #28]
 8006aec:	4313      	orrs	r3, r2
 8006aee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	681a      	ldr	r2, [r3, #0]
 8006af6:	4b8a      	ldr	r3, [pc, #552]	@ (8006d20 <UART_SetConfig+0x254>)
 8006af8:	4013      	ands	r3, r2
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	6812      	ldr	r2, [r2, #0]
 8006afe:	6979      	ldr	r1, [r7, #20]
 8006b00:	430b      	orrs	r3, r1
 8006b02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	68da      	ldr	r2, [r3, #12]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	430a      	orrs	r2, r1
 8006b18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	699b      	ldr	r3, [r3, #24]
 8006b1e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6a1b      	ldr	r3, [r3, #32]
 8006b24:	697a      	ldr	r2, [r7, #20]
 8006b26:	4313      	orrs	r3, r2
 8006b28:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	697a      	ldr	r2, [r7, #20]
 8006b3a:	430a      	orrs	r2, r1
 8006b3c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a78      	ldr	r2, [pc, #480]	@ (8006d24 <UART_SetConfig+0x258>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d120      	bne.n	8006b8a <UART_SetConfig+0xbe>
 8006b48:	4b77      	ldr	r3, [pc, #476]	@ (8006d28 <UART_SetConfig+0x25c>)
 8006b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b4c:	f003 0303 	and.w	r3, r3, #3
 8006b50:	2b03      	cmp	r3, #3
 8006b52:	d817      	bhi.n	8006b84 <UART_SetConfig+0xb8>
 8006b54:	a201      	add	r2, pc, #4	@ (adr r2, 8006b5c <UART_SetConfig+0x90>)
 8006b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b5a:	bf00      	nop
 8006b5c:	08006b6d 	.word	0x08006b6d
 8006b60:	08006b79 	.word	0x08006b79
 8006b64:	08006b7f 	.word	0x08006b7f
 8006b68:	08006b73 	.word	0x08006b73
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	77fb      	strb	r3, [r7, #31]
 8006b70:	e01d      	b.n	8006bae <UART_SetConfig+0xe2>
 8006b72:	2302      	movs	r3, #2
 8006b74:	77fb      	strb	r3, [r7, #31]
 8006b76:	e01a      	b.n	8006bae <UART_SetConfig+0xe2>
 8006b78:	2304      	movs	r3, #4
 8006b7a:	77fb      	strb	r3, [r7, #31]
 8006b7c:	e017      	b.n	8006bae <UART_SetConfig+0xe2>
 8006b7e:	2308      	movs	r3, #8
 8006b80:	77fb      	strb	r3, [r7, #31]
 8006b82:	e014      	b.n	8006bae <UART_SetConfig+0xe2>
 8006b84:	2310      	movs	r3, #16
 8006b86:	77fb      	strb	r3, [r7, #31]
 8006b88:	e011      	b.n	8006bae <UART_SetConfig+0xe2>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a67      	ldr	r2, [pc, #412]	@ (8006d2c <UART_SetConfig+0x260>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d102      	bne.n	8006b9a <UART_SetConfig+0xce>
 8006b94:	2300      	movs	r3, #0
 8006b96:	77fb      	strb	r3, [r7, #31]
 8006b98:	e009      	b.n	8006bae <UART_SetConfig+0xe2>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a64      	ldr	r2, [pc, #400]	@ (8006d30 <UART_SetConfig+0x264>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d102      	bne.n	8006baa <UART_SetConfig+0xde>
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	77fb      	strb	r3, [r7, #31]
 8006ba8:	e001      	b.n	8006bae <UART_SetConfig+0xe2>
 8006baa:	2310      	movs	r3, #16
 8006bac:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	69db      	ldr	r3, [r3, #28]
 8006bb2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006bb6:	d15a      	bne.n	8006c6e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8006bb8:	7ffb      	ldrb	r3, [r7, #31]
 8006bba:	2b08      	cmp	r3, #8
 8006bbc:	d827      	bhi.n	8006c0e <UART_SetConfig+0x142>
 8006bbe:	a201      	add	r2, pc, #4	@ (adr r2, 8006bc4 <UART_SetConfig+0xf8>)
 8006bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc4:	08006be9 	.word	0x08006be9
 8006bc8:	08006bf1 	.word	0x08006bf1
 8006bcc:	08006bf9 	.word	0x08006bf9
 8006bd0:	08006c0f 	.word	0x08006c0f
 8006bd4:	08006bff 	.word	0x08006bff
 8006bd8:	08006c0f 	.word	0x08006c0f
 8006bdc:	08006c0f 	.word	0x08006c0f
 8006be0:	08006c0f 	.word	0x08006c0f
 8006be4:	08006c07 	.word	0x08006c07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006be8:	f7fd ffe2 	bl	8004bb0 <HAL_RCC_GetPCLK1Freq>
 8006bec:	61b8      	str	r0, [r7, #24]
        break;
 8006bee:	e013      	b.n	8006c18 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006bf0:	f7fe f800 	bl	8004bf4 <HAL_RCC_GetPCLK2Freq>
 8006bf4:	61b8      	str	r0, [r7, #24]
        break;
 8006bf6:	e00f      	b.n	8006c18 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006bf8:	4b4e      	ldr	r3, [pc, #312]	@ (8006d34 <UART_SetConfig+0x268>)
 8006bfa:	61bb      	str	r3, [r7, #24]
        break;
 8006bfc:	e00c      	b.n	8006c18 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bfe:	f7fd ff77 	bl	8004af0 <HAL_RCC_GetSysClockFreq>
 8006c02:	61b8      	str	r0, [r7, #24]
        break;
 8006c04:	e008      	b.n	8006c18 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c0a:	61bb      	str	r3, [r7, #24]
        break;
 8006c0c:	e004      	b.n	8006c18 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	77bb      	strb	r3, [r7, #30]
        break;
 8006c16:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c18:	69bb      	ldr	r3, [r7, #24]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d074      	beq.n	8006d08 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006c1e:	69bb      	ldr	r3, [r7, #24]
 8006c20:	005a      	lsls	r2, r3, #1
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	085b      	lsrs	r3, r3, #1
 8006c28:	441a      	add	r2, r3
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c32:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	2b0f      	cmp	r3, #15
 8006c38:	d916      	bls.n	8006c68 <UART_SetConfig+0x19c>
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c40:	d212      	bcs.n	8006c68 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	f023 030f 	bic.w	r3, r3, #15
 8006c4a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	085b      	lsrs	r3, r3, #1
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	f003 0307 	and.w	r3, r3, #7
 8006c56:	b29a      	uxth	r2, r3
 8006c58:	89fb      	ldrh	r3, [r7, #14]
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	89fa      	ldrh	r2, [r7, #14]
 8006c64:	60da      	str	r2, [r3, #12]
 8006c66:	e04f      	b.n	8006d08 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	77bb      	strb	r3, [r7, #30]
 8006c6c:	e04c      	b.n	8006d08 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c6e:	7ffb      	ldrb	r3, [r7, #31]
 8006c70:	2b08      	cmp	r3, #8
 8006c72:	d828      	bhi.n	8006cc6 <UART_SetConfig+0x1fa>
 8006c74:	a201      	add	r2, pc, #4	@ (adr r2, 8006c7c <UART_SetConfig+0x1b0>)
 8006c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c7a:	bf00      	nop
 8006c7c:	08006ca1 	.word	0x08006ca1
 8006c80:	08006ca9 	.word	0x08006ca9
 8006c84:	08006cb1 	.word	0x08006cb1
 8006c88:	08006cc7 	.word	0x08006cc7
 8006c8c:	08006cb7 	.word	0x08006cb7
 8006c90:	08006cc7 	.word	0x08006cc7
 8006c94:	08006cc7 	.word	0x08006cc7
 8006c98:	08006cc7 	.word	0x08006cc7
 8006c9c:	08006cbf 	.word	0x08006cbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ca0:	f7fd ff86 	bl	8004bb0 <HAL_RCC_GetPCLK1Freq>
 8006ca4:	61b8      	str	r0, [r7, #24]
        break;
 8006ca6:	e013      	b.n	8006cd0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ca8:	f7fd ffa4 	bl	8004bf4 <HAL_RCC_GetPCLK2Freq>
 8006cac:	61b8      	str	r0, [r7, #24]
        break;
 8006cae:	e00f      	b.n	8006cd0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cb0:	4b20      	ldr	r3, [pc, #128]	@ (8006d34 <UART_SetConfig+0x268>)
 8006cb2:	61bb      	str	r3, [r7, #24]
        break;
 8006cb4:	e00c      	b.n	8006cd0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cb6:	f7fd ff1b 	bl	8004af0 <HAL_RCC_GetSysClockFreq>
 8006cba:	61b8      	str	r0, [r7, #24]
        break;
 8006cbc:	e008      	b.n	8006cd0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006cc2:	61bb      	str	r3, [r7, #24]
        break;
 8006cc4:	e004      	b.n	8006cd0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	77bb      	strb	r3, [r7, #30]
        break;
 8006cce:	bf00      	nop
    }

    if (pclk != 0U)
 8006cd0:	69bb      	ldr	r3, [r7, #24]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d018      	beq.n	8006d08 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	085a      	lsrs	r2, r3, #1
 8006cdc:	69bb      	ldr	r3, [r7, #24]
 8006cde:	441a      	add	r2, r3
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ce8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	2b0f      	cmp	r3, #15
 8006cee:	d909      	bls.n	8006d04 <UART_SetConfig+0x238>
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006cf6:	d205      	bcs.n	8006d04 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	b29a      	uxth	r2, r3
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	60da      	str	r2, [r3, #12]
 8006d02:	e001      	b.n	8006d08 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2200      	movs	r2, #0
 8006d12:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006d14:	7fbb      	ldrb	r3, [r7, #30]
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3720      	adds	r7, #32
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}
 8006d1e:	bf00      	nop
 8006d20:	efff69f3 	.word	0xefff69f3
 8006d24:	40013800 	.word	0x40013800
 8006d28:	40021000 	.word	0x40021000
 8006d2c:	40004400 	.word	0x40004400
 8006d30:	40004800 	.word	0x40004800
 8006d34:	007a1200 	.word	0x007a1200

08006d38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b083      	sub	sp, #12
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d44:	f003 0308 	and.w	r3, r3, #8
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d00a      	beq.n	8006d62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	430a      	orrs	r2, r1
 8006d60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d66:	f003 0301 	and.w	r3, r3, #1
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d00a      	beq.n	8006d84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	430a      	orrs	r2, r1
 8006d82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d88:	f003 0302 	and.w	r3, r3, #2
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d00a      	beq.n	8006da6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	430a      	orrs	r2, r1
 8006da4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006daa:	f003 0304 	and.w	r3, r3, #4
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d00a      	beq.n	8006dc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	430a      	orrs	r2, r1
 8006dc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dcc:	f003 0310 	and.w	r3, r3, #16
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d00a      	beq.n	8006dea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	430a      	orrs	r2, r1
 8006de8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dee:	f003 0320 	and.w	r3, r3, #32
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d00a      	beq.n	8006e0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	430a      	orrs	r2, r1
 8006e0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d01a      	beq.n	8006e4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	430a      	orrs	r2, r1
 8006e2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e36:	d10a      	bne.n	8006e4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	430a      	orrs	r2, r1
 8006e4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d00a      	beq.n	8006e70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	430a      	orrs	r2, r1
 8006e6e:	605a      	str	r2, [r3, #4]
  }
}
 8006e70:	bf00      	nop
 8006e72:	370c      	adds	r7, #12
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr

08006e7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b098      	sub	sp, #96	@ 0x60
 8006e80:	af02      	add	r7, sp, #8
 8006e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2200      	movs	r2, #0
 8006e88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e8c:	f7fb fb0a 	bl	80024a4 <HAL_GetTick>
 8006e90:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f003 0308 	and.w	r3, r3, #8
 8006e9c:	2b08      	cmp	r3, #8
 8006e9e:	d12e      	bne.n	8006efe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ea0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006ea4:	9300      	str	r3, [sp, #0]
 8006ea6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f000 f88c 	bl	8006fcc <UART_WaitOnFlagUntilTimeout>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d021      	beq.n	8006efe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ec2:	e853 3f00 	ldrex	r3, [r3]
 8006ec6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006ec8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ece:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ed8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006eda:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006edc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006ede:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ee0:	e841 2300 	strex	r3, r2, [r1]
 8006ee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006ee6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d1e6      	bne.n	8006eba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2220      	movs	r2, #32
 8006ef0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006efa:	2303      	movs	r3, #3
 8006efc:	e062      	b.n	8006fc4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f003 0304 	and.w	r3, r3, #4
 8006f08:	2b04      	cmp	r3, #4
 8006f0a:	d149      	bne.n	8006fa0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f0c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006f10:	9300      	str	r3, [sp, #0]
 8006f12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f14:	2200      	movs	r2, #0
 8006f16:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f000 f856 	bl	8006fcc <UART_WaitOnFlagUntilTimeout>
 8006f20:	4603      	mov	r3, r0
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d03c      	beq.n	8006fa0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f2e:	e853 3f00 	ldrex	r3, [r3]
 8006f32:	623b      	str	r3, [r7, #32]
   return(result);
 8006f34:	6a3b      	ldr	r3, [r7, #32]
 8006f36:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	461a      	mov	r2, r3
 8006f42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f44:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f46:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f48:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f4c:	e841 2300 	strex	r3, r2, [r1]
 8006f50:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d1e6      	bne.n	8006f26 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	3308      	adds	r3, #8
 8006f5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	e853 3f00 	ldrex	r3, [r3]
 8006f66:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f023 0301 	bic.w	r3, r3, #1
 8006f6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	3308      	adds	r3, #8
 8006f76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f78:	61fa      	str	r2, [r7, #28]
 8006f7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f7c:	69b9      	ldr	r1, [r7, #24]
 8006f7e:	69fa      	ldr	r2, [r7, #28]
 8006f80:	e841 2300 	strex	r3, r2, [r1]
 8006f84:	617b      	str	r3, [r7, #20]
   return(result);
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d1e5      	bne.n	8006f58 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2220      	movs	r2, #32
 8006f90:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2200      	movs	r2, #0
 8006f98:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f9c:	2303      	movs	r3, #3
 8006f9e:	e011      	b.n	8006fc4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2220      	movs	r2, #32
 8006fa4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2220      	movs	r2, #32
 8006faa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006fc2:	2300      	movs	r3, #0
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3758      	adds	r7, #88	@ 0x58
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	60f8      	str	r0, [r7, #12]
 8006fd4:	60b9      	str	r1, [r7, #8]
 8006fd6:	603b      	str	r3, [r7, #0]
 8006fd8:	4613      	mov	r3, r2
 8006fda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fdc:	e04f      	b.n	800707e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fde:	69bb      	ldr	r3, [r7, #24]
 8006fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fe4:	d04b      	beq.n	800707e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fe6:	f7fb fa5d 	bl	80024a4 <HAL_GetTick>
 8006fea:	4602      	mov	r2, r0
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	1ad3      	subs	r3, r2, r3
 8006ff0:	69ba      	ldr	r2, [r7, #24]
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d302      	bcc.n	8006ffc <UART_WaitOnFlagUntilTimeout+0x30>
 8006ff6:	69bb      	ldr	r3, [r7, #24]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d101      	bne.n	8007000 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006ffc:	2303      	movs	r3, #3
 8006ffe:	e04e      	b.n	800709e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f003 0304 	and.w	r3, r3, #4
 800700a:	2b00      	cmp	r3, #0
 800700c:	d037      	beq.n	800707e <UART_WaitOnFlagUntilTimeout+0xb2>
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	2b80      	cmp	r3, #128	@ 0x80
 8007012:	d034      	beq.n	800707e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	2b40      	cmp	r3, #64	@ 0x40
 8007018:	d031      	beq.n	800707e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	69db      	ldr	r3, [r3, #28]
 8007020:	f003 0308 	and.w	r3, r3, #8
 8007024:	2b08      	cmp	r3, #8
 8007026:	d110      	bne.n	800704a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	2208      	movs	r2, #8
 800702e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007030:	68f8      	ldr	r0, [r7, #12]
 8007032:	f000 f8ff 	bl	8007234 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2208      	movs	r2, #8
 800703a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2200      	movs	r2, #0
 8007042:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	e029      	b.n	800709e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	69db      	ldr	r3, [r3, #28]
 8007050:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007054:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007058:	d111      	bne.n	800707e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007062:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007064:	68f8      	ldr	r0, [r7, #12]
 8007066:	f000 f8e5 	bl	8007234 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2220      	movs	r2, #32
 800706e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2200      	movs	r2, #0
 8007076:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800707a:	2303      	movs	r3, #3
 800707c:	e00f      	b.n	800709e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	69da      	ldr	r2, [r3, #28]
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	4013      	ands	r3, r2
 8007088:	68ba      	ldr	r2, [r7, #8]
 800708a:	429a      	cmp	r2, r3
 800708c:	bf0c      	ite	eq
 800708e:	2301      	moveq	r3, #1
 8007090:	2300      	movne	r3, #0
 8007092:	b2db      	uxtb	r3, r3
 8007094:	461a      	mov	r2, r3
 8007096:	79fb      	ldrb	r3, [r7, #7]
 8007098:	429a      	cmp	r2, r3
 800709a:	d0a0      	beq.n	8006fde <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800709c:	2300      	movs	r3, #0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3710      	adds	r7, #16
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
	...

080070a8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b097      	sub	sp, #92	@ 0x5c
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	60f8      	str	r0, [r7, #12]
 80070b0:	60b9      	str	r1, [r7, #8]
 80070b2:	4613      	mov	r3, r2
 80070b4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	68ba      	ldr	r2, [r7, #8]
 80070ba:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	88fa      	ldrh	r2, [r7, #6]
 80070c0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	88fa      	ldrh	r2, [r7, #6]
 80070c8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2200      	movs	r2, #0
 80070d0:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070da:	d10e      	bne.n	80070fa <UART_Start_Receive_IT+0x52>
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	691b      	ldr	r3, [r3, #16]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d105      	bne.n	80070f0 <UART_Start_Receive_IT+0x48>
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80070ea:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80070ee:	e02d      	b.n	800714c <UART_Start_Receive_IT+0xa4>
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	22ff      	movs	r2, #255	@ 0xff
 80070f4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80070f8:	e028      	b.n	800714c <UART_Start_Receive_IT+0xa4>
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d10d      	bne.n	800711e <UART_Start_Receive_IT+0x76>
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	691b      	ldr	r3, [r3, #16]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d104      	bne.n	8007114 <UART_Start_Receive_IT+0x6c>
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	22ff      	movs	r2, #255	@ 0xff
 800710e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007112:	e01b      	b.n	800714c <UART_Start_Receive_IT+0xa4>
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	227f      	movs	r2, #127	@ 0x7f
 8007118:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800711c:	e016      	b.n	800714c <UART_Start_Receive_IT+0xa4>
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007126:	d10d      	bne.n	8007144 <UART_Start_Receive_IT+0x9c>
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	691b      	ldr	r3, [r3, #16]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d104      	bne.n	800713a <UART_Start_Receive_IT+0x92>
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	227f      	movs	r2, #127	@ 0x7f
 8007134:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007138:	e008      	b.n	800714c <UART_Start_Receive_IT+0xa4>
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	223f      	movs	r2, #63	@ 0x3f
 800713e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007142:	e003      	b.n	800714c <UART_Start_Receive_IT+0xa4>
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2200      	movs	r2, #0
 8007148:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2200      	movs	r2, #0
 8007150:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2222      	movs	r2, #34	@ 0x22
 8007158:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	3308      	adds	r3, #8
 8007162:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007164:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007166:	e853 3f00 	ldrex	r3, [r3]
 800716a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800716c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800716e:	f043 0301 	orr.w	r3, r3, #1
 8007172:	657b      	str	r3, [r7, #84]	@ 0x54
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	3308      	adds	r3, #8
 800717a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800717c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800717e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007180:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007182:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007184:	e841 2300 	strex	r3, r2, [r1]
 8007188:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800718a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800718c:	2b00      	cmp	r3, #0
 800718e:	d1e5      	bne.n	800715c <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	689b      	ldr	r3, [r3, #8]
 8007194:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007198:	d107      	bne.n	80071aa <UART_Start_Receive_IT+0x102>
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	691b      	ldr	r3, [r3, #16]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d103      	bne.n	80071aa <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	4a21      	ldr	r2, [pc, #132]	@ (800722c <UART_Start_Receive_IT+0x184>)
 80071a6:	669a      	str	r2, [r3, #104]	@ 0x68
 80071a8:	e002      	b.n	80071b0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	4a20      	ldr	r2, [pc, #128]	@ (8007230 <UART_Start_Receive_IT+0x188>)
 80071ae:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	691b      	ldr	r3, [r3, #16]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d019      	beq.n	80071ec <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071c0:	e853 3f00 	ldrex	r3, [r3]
 80071c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80071c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c8:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80071cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	461a      	mov	r2, r3
 80071d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80071d8:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071da:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80071dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80071de:	e841 2300 	strex	r3, r2, [r1]
 80071e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80071e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d1e6      	bne.n	80071b8 <UART_Start_Receive_IT+0x110>
 80071ea:	e018      	b.n	800721e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	e853 3f00 	ldrex	r3, [r3]
 80071f8:	613b      	str	r3, [r7, #16]
   return(result);
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	f043 0320 	orr.w	r3, r3, #32
 8007200:	653b      	str	r3, [r7, #80]	@ 0x50
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	461a      	mov	r2, r3
 8007208:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800720a:	623b      	str	r3, [r7, #32]
 800720c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800720e:	69f9      	ldr	r1, [r7, #28]
 8007210:	6a3a      	ldr	r2, [r7, #32]
 8007212:	e841 2300 	strex	r3, r2, [r1]
 8007216:	61bb      	str	r3, [r7, #24]
   return(result);
 8007218:	69bb      	ldr	r3, [r7, #24]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d1e6      	bne.n	80071ec <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800721e:	2300      	movs	r3, #0
}
 8007220:	4618      	mov	r0, r3
 8007222:	375c      	adds	r7, #92	@ 0x5c
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr
 800722c:	08007525 	.word	0x08007525
 8007230:	0800737d 	.word	0x0800737d

08007234 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007234:	b480      	push	{r7}
 8007236:	b095      	sub	sp, #84	@ 0x54
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007242:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007244:	e853 3f00 	ldrex	r3, [r3]
 8007248:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800724a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800724c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007250:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	461a      	mov	r2, r3
 8007258:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800725a:	643b      	str	r3, [r7, #64]	@ 0x40
 800725c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800725e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007260:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007262:	e841 2300 	strex	r3, r2, [r1]
 8007266:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800726a:	2b00      	cmp	r3, #0
 800726c:	d1e6      	bne.n	800723c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	3308      	adds	r3, #8
 8007274:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007276:	6a3b      	ldr	r3, [r7, #32]
 8007278:	e853 3f00 	ldrex	r3, [r3]
 800727c:	61fb      	str	r3, [r7, #28]
   return(result);
 800727e:	69fb      	ldr	r3, [r7, #28]
 8007280:	f023 0301 	bic.w	r3, r3, #1
 8007284:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	3308      	adds	r3, #8
 800728c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800728e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007290:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007292:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007294:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007296:	e841 2300 	strex	r3, r2, [r1]
 800729a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800729c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d1e5      	bne.n	800726e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d118      	bne.n	80072dc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	e853 3f00 	ldrex	r3, [r3]
 80072b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	f023 0310 	bic.w	r3, r3, #16
 80072be:	647b      	str	r3, [r7, #68]	@ 0x44
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	461a      	mov	r2, r3
 80072c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072c8:	61bb      	str	r3, [r7, #24]
 80072ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072cc:	6979      	ldr	r1, [r7, #20]
 80072ce:	69ba      	ldr	r2, [r7, #24]
 80072d0:	e841 2300 	strex	r3, r2, [r1]
 80072d4:	613b      	str	r3, [r7, #16]
   return(result);
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d1e6      	bne.n	80072aa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2220      	movs	r2, #32
 80072e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2200      	movs	r2, #0
 80072e8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2200      	movs	r2, #0
 80072ee:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80072f0:	bf00      	nop
 80072f2:	3754      	adds	r7, #84	@ 0x54
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr

080072fc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b084      	sub	sp, #16
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007308:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2200      	movs	r2, #0
 800730e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2200      	movs	r2, #0
 8007316:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800731a:	68f8      	ldr	r0, [r7, #12]
 800731c:	f7ff fbc0 	bl	8006aa0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007320:	bf00      	nop
 8007322:	3710      	adds	r7, #16
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b088      	sub	sp, #32
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	e853 3f00 	ldrex	r3, [r3]
 800733c:	60bb      	str	r3, [r7, #8]
   return(result);
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007344:	61fb      	str	r3, [r7, #28]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	461a      	mov	r2, r3
 800734c:	69fb      	ldr	r3, [r7, #28]
 800734e:	61bb      	str	r3, [r7, #24]
 8007350:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007352:	6979      	ldr	r1, [r7, #20]
 8007354:	69ba      	ldr	r2, [r7, #24]
 8007356:	e841 2300 	strex	r3, r2, [r1]
 800735a:	613b      	str	r3, [r7, #16]
   return(result);
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d1e6      	bne.n	8007330 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2220      	movs	r2, #32
 8007366:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2200      	movs	r2, #0
 800736c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f7ff fb8c 	bl	8006a8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007374:	bf00      	nop
 8007376:	3720      	adds	r7, #32
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b09c      	sub	sp, #112	@ 0x70
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800738a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007394:	2b22      	cmp	r3, #34	@ 0x22
 8007396:	f040 80b9 	bne.w	800750c <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80073a0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80073a4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80073a8:	b2d9      	uxtb	r1, r3
 80073aa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80073ae:	b2da      	uxtb	r2, r3
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073b4:	400a      	ands	r2, r1
 80073b6:	b2d2      	uxtb	r2, r2
 80073b8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073be:	1c5a      	adds	r2, r3, #1
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	3b01      	subs	r3, #1
 80073ce:	b29a      	uxth	r2, r3
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80073dc:	b29b      	uxth	r3, r3
 80073de:	2b00      	cmp	r3, #0
 80073e0:	f040 809c 	bne.w	800751c <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073ec:	e853 3f00 	ldrex	r3, [r3]
 80073f0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80073f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80073f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80073f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	461a      	mov	r2, r3
 8007400:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007402:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007404:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007406:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007408:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800740a:	e841 2300 	strex	r3, r2, [r1]
 800740e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007410:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007412:	2b00      	cmp	r3, #0
 8007414:	d1e6      	bne.n	80073e4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	3308      	adds	r3, #8
 800741c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800741e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007420:	e853 3f00 	ldrex	r3, [r3]
 8007424:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007426:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007428:	f023 0301 	bic.w	r3, r3, #1
 800742c:	667b      	str	r3, [r7, #100]	@ 0x64
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	3308      	adds	r3, #8
 8007434:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007436:	647a      	str	r2, [r7, #68]	@ 0x44
 8007438:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800743a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800743c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800743e:	e841 2300 	strex	r3, r2, [r1]
 8007442:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007444:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007446:	2b00      	cmp	r3, #0
 8007448:	d1e5      	bne.n	8007416 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2220      	movs	r2, #32
 800744e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2200      	movs	r2, #0
 800745c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007468:	2b00      	cmp	r3, #0
 800746a:	d018      	beq.n	800749e <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007474:	e853 3f00 	ldrex	r3, [r3]
 8007478:	623b      	str	r3, [r7, #32]
   return(result);
 800747a:	6a3b      	ldr	r3, [r7, #32]
 800747c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007480:	663b      	str	r3, [r7, #96]	@ 0x60
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	461a      	mov	r2, r3
 8007488:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800748a:	633b      	str	r3, [r7, #48]	@ 0x30
 800748c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800748e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007490:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007492:	e841 2300 	strex	r3, r2, [r1]
 8007496:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800749a:	2b00      	cmp	r3, #0
 800749c:	d1e6      	bne.n	800746c <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	d12e      	bne.n	8007504 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2200      	movs	r2, #0
 80074aa:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	e853 3f00 	ldrex	r3, [r3]
 80074b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f023 0310 	bic.w	r3, r3, #16
 80074c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	461a      	mov	r2, r3
 80074c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80074ca:	61fb      	str	r3, [r7, #28]
 80074cc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ce:	69b9      	ldr	r1, [r7, #24]
 80074d0:	69fa      	ldr	r2, [r7, #28]
 80074d2:	e841 2300 	strex	r3, r2, [r1]
 80074d6:	617b      	str	r3, [r7, #20]
   return(result);
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d1e6      	bne.n	80074ac <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	69db      	ldr	r3, [r3, #28]
 80074e4:	f003 0310 	and.w	r3, r3, #16
 80074e8:	2b10      	cmp	r3, #16
 80074ea:	d103      	bne.n	80074f4 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	2210      	movs	r2, #16
 80074f2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80074fa:	4619      	mov	r1, r3
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f7ff fad9 	bl	8006ab4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007502:	e00b      	b.n	800751c <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f7fa fc53 	bl	8001db0 <HAL_UART_RxCpltCallback>
}
 800750a:	e007      	b.n	800751c <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	699a      	ldr	r2, [r3, #24]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f042 0208 	orr.w	r2, r2, #8
 800751a:	619a      	str	r2, [r3, #24]
}
 800751c:	bf00      	nop
 800751e:	3770      	adds	r7, #112	@ 0x70
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}

08007524 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b09c      	sub	sp, #112	@ 0x70
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007532:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800753c:	2b22      	cmp	r3, #34	@ 0x22
 800753e:	f040 80b9 	bne.w	80076b4 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007548:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007550:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007552:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8007556:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800755a:	4013      	ands	r3, r2
 800755c:	b29a      	uxth	r2, r3
 800755e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007560:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007566:	1c9a      	adds	r2, r3, #2
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007572:	b29b      	uxth	r3, r3
 8007574:	3b01      	subs	r3, #1
 8007576:	b29a      	uxth	r2, r3
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007584:	b29b      	uxth	r3, r3
 8007586:	2b00      	cmp	r3, #0
 8007588:	f040 809c 	bne.w	80076c4 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007592:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007594:	e853 3f00 	ldrex	r3, [r3]
 8007598:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800759a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800759c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80075a0:	667b      	str	r3, [r7, #100]	@ 0x64
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	461a      	mov	r2, r3
 80075a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80075aa:	657b      	str	r3, [r7, #84]	@ 0x54
 80075ac:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ae:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80075b0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80075b2:	e841 2300 	strex	r3, r2, [r1]
 80075b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80075b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d1e6      	bne.n	800758c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	3308      	adds	r3, #8
 80075c4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075c8:	e853 3f00 	ldrex	r3, [r3]
 80075cc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80075ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075d0:	f023 0301 	bic.w	r3, r3, #1
 80075d4:	663b      	str	r3, [r7, #96]	@ 0x60
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	3308      	adds	r3, #8
 80075dc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80075de:	643a      	str	r2, [r7, #64]	@ 0x40
 80075e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80075e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80075e6:	e841 2300 	strex	r3, r2, [r1]
 80075ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80075ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d1e5      	bne.n	80075be <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2220      	movs	r2, #32
 80075f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2200      	movs	r2, #0
 80075fe:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2200      	movs	r2, #0
 8007604:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007610:	2b00      	cmp	r3, #0
 8007612:	d018      	beq.n	8007646 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800761a:	6a3b      	ldr	r3, [r7, #32]
 800761c:	e853 3f00 	ldrex	r3, [r3]
 8007620:	61fb      	str	r3, [r7, #28]
   return(result);
 8007622:	69fb      	ldr	r3, [r7, #28]
 8007624:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007628:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	461a      	mov	r2, r3
 8007630:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007632:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007634:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007636:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007638:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800763a:	e841 2300 	strex	r3, r2, [r1]
 800763e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007642:	2b00      	cmp	r3, #0
 8007644:	d1e6      	bne.n	8007614 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800764a:	2b01      	cmp	r3, #1
 800764c:	d12e      	bne.n	80076ac <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2200      	movs	r2, #0
 8007652:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	e853 3f00 	ldrex	r3, [r3]
 8007660:	60bb      	str	r3, [r7, #8]
   return(result);
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	f023 0310 	bic.w	r3, r3, #16
 8007668:	65bb      	str	r3, [r7, #88]	@ 0x58
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	461a      	mov	r2, r3
 8007670:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007672:	61bb      	str	r3, [r7, #24]
 8007674:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007676:	6979      	ldr	r1, [r7, #20]
 8007678:	69ba      	ldr	r2, [r7, #24]
 800767a:	e841 2300 	strex	r3, r2, [r1]
 800767e:	613b      	str	r3, [r7, #16]
   return(result);
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d1e6      	bne.n	8007654 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	69db      	ldr	r3, [r3, #28]
 800768c:	f003 0310 	and.w	r3, r3, #16
 8007690:	2b10      	cmp	r3, #16
 8007692:	d103      	bne.n	800769c <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	2210      	movs	r2, #16
 800769a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80076a2:	4619      	mov	r1, r3
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f7ff fa05 	bl	8006ab4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80076aa:	e00b      	b.n	80076c4 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f7fa fb7f 	bl	8001db0 <HAL_UART_RxCpltCallback>
}
 80076b2:	e007      	b.n	80076c4 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	699a      	ldr	r2, [r3, #24]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f042 0208 	orr.w	r2, r2, #8
 80076c2:	619a      	str	r2, [r3, #24]
}
 80076c4:	bf00      	nop
 80076c6:	3770      	adds	r7, #112	@ 0x70
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}

080076cc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b083      	sub	sp, #12
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80076d4:	bf00      	nop
 80076d6:	370c      	adds	r7, #12
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr

080076e0 <atoi>:
 80076e0:	220a      	movs	r2, #10
 80076e2:	2100      	movs	r1, #0
 80076e4:	f000 b87a 	b.w	80077dc <strtol>

080076e8 <_strtol_l.constprop.0>:
 80076e8:	2b24      	cmp	r3, #36	@ 0x24
 80076ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076ee:	4686      	mov	lr, r0
 80076f0:	4690      	mov	r8, r2
 80076f2:	d801      	bhi.n	80076f8 <_strtol_l.constprop.0+0x10>
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d106      	bne.n	8007706 <_strtol_l.constprop.0+0x1e>
 80076f8:	f000 f9f2 	bl	8007ae0 <__errno>
 80076fc:	2316      	movs	r3, #22
 80076fe:	6003      	str	r3, [r0, #0]
 8007700:	2000      	movs	r0, #0
 8007702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007706:	4834      	ldr	r0, [pc, #208]	@ (80077d8 <_strtol_l.constprop.0+0xf0>)
 8007708:	460d      	mov	r5, r1
 800770a:	462a      	mov	r2, r5
 800770c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007710:	5d06      	ldrb	r6, [r0, r4]
 8007712:	f016 0608 	ands.w	r6, r6, #8
 8007716:	d1f8      	bne.n	800770a <_strtol_l.constprop.0+0x22>
 8007718:	2c2d      	cmp	r4, #45	@ 0x2d
 800771a:	d12d      	bne.n	8007778 <_strtol_l.constprop.0+0x90>
 800771c:	782c      	ldrb	r4, [r5, #0]
 800771e:	2601      	movs	r6, #1
 8007720:	1c95      	adds	r5, r2, #2
 8007722:	f033 0210 	bics.w	r2, r3, #16
 8007726:	d109      	bne.n	800773c <_strtol_l.constprop.0+0x54>
 8007728:	2c30      	cmp	r4, #48	@ 0x30
 800772a:	d12a      	bne.n	8007782 <_strtol_l.constprop.0+0x9a>
 800772c:	782a      	ldrb	r2, [r5, #0]
 800772e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007732:	2a58      	cmp	r2, #88	@ 0x58
 8007734:	d125      	bne.n	8007782 <_strtol_l.constprop.0+0x9a>
 8007736:	786c      	ldrb	r4, [r5, #1]
 8007738:	2310      	movs	r3, #16
 800773a:	3502      	adds	r5, #2
 800773c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007740:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007744:	2200      	movs	r2, #0
 8007746:	fbbc f9f3 	udiv	r9, ip, r3
 800774a:	4610      	mov	r0, r2
 800774c:	fb03 ca19 	mls	sl, r3, r9, ip
 8007750:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007754:	2f09      	cmp	r7, #9
 8007756:	d81b      	bhi.n	8007790 <_strtol_l.constprop.0+0xa8>
 8007758:	463c      	mov	r4, r7
 800775a:	42a3      	cmp	r3, r4
 800775c:	dd27      	ble.n	80077ae <_strtol_l.constprop.0+0xc6>
 800775e:	1c57      	adds	r7, r2, #1
 8007760:	d007      	beq.n	8007772 <_strtol_l.constprop.0+0x8a>
 8007762:	4581      	cmp	r9, r0
 8007764:	d320      	bcc.n	80077a8 <_strtol_l.constprop.0+0xc0>
 8007766:	d101      	bne.n	800776c <_strtol_l.constprop.0+0x84>
 8007768:	45a2      	cmp	sl, r4
 800776a:	db1d      	blt.n	80077a8 <_strtol_l.constprop.0+0xc0>
 800776c:	fb00 4003 	mla	r0, r0, r3, r4
 8007770:	2201      	movs	r2, #1
 8007772:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007776:	e7eb      	b.n	8007750 <_strtol_l.constprop.0+0x68>
 8007778:	2c2b      	cmp	r4, #43	@ 0x2b
 800777a:	bf04      	itt	eq
 800777c:	782c      	ldrbeq	r4, [r5, #0]
 800777e:	1c95      	addeq	r5, r2, #2
 8007780:	e7cf      	b.n	8007722 <_strtol_l.constprop.0+0x3a>
 8007782:	2b00      	cmp	r3, #0
 8007784:	d1da      	bne.n	800773c <_strtol_l.constprop.0+0x54>
 8007786:	2c30      	cmp	r4, #48	@ 0x30
 8007788:	bf0c      	ite	eq
 800778a:	2308      	moveq	r3, #8
 800778c:	230a      	movne	r3, #10
 800778e:	e7d5      	b.n	800773c <_strtol_l.constprop.0+0x54>
 8007790:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007794:	2f19      	cmp	r7, #25
 8007796:	d801      	bhi.n	800779c <_strtol_l.constprop.0+0xb4>
 8007798:	3c37      	subs	r4, #55	@ 0x37
 800779a:	e7de      	b.n	800775a <_strtol_l.constprop.0+0x72>
 800779c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80077a0:	2f19      	cmp	r7, #25
 80077a2:	d804      	bhi.n	80077ae <_strtol_l.constprop.0+0xc6>
 80077a4:	3c57      	subs	r4, #87	@ 0x57
 80077a6:	e7d8      	b.n	800775a <_strtol_l.constprop.0+0x72>
 80077a8:	f04f 32ff 	mov.w	r2, #4294967295
 80077ac:	e7e1      	b.n	8007772 <_strtol_l.constprop.0+0x8a>
 80077ae:	1c53      	adds	r3, r2, #1
 80077b0:	d108      	bne.n	80077c4 <_strtol_l.constprop.0+0xdc>
 80077b2:	2322      	movs	r3, #34	@ 0x22
 80077b4:	f8ce 3000 	str.w	r3, [lr]
 80077b8:	4660      	mov	r0, ip
 80077ba:	f1b8 0f00 	cmp.w	r8, #0
 80077be:	d0a0      	beq.n	8007702 <_strtol_l.constprop.0+0x1a>
 80077c0:	1e69      	subs	r1, r5, #1
 80077c2:	e006      	b.n	80077d2 <_strtol_l.constprop.0+0xea>
 80077c4:	b106      	cbz	r6, 80077c8 <_strtol_l.constprop.0+0xe0>
 80077c6:	4240      	negs	r0, r0
 80077c8:	f1b8 0f00 	cmp.w	r8, #0
 80077cc:	d099      	beq.n	8007702 <_strtol_l.constprop.0+0x1a>
 80077ce:	2a00      	cmp	r2, #0
 80077d0:	d1f6      	bne.n	80077c0 <_strtol_l.constprop.0+0xd8>
 80077d2:	f8c8 1000 	str.w	r1, [r8]
 80077d6:	e794      	b.n	8007702 <_strtol_l.constprop.0+0x1a>
 80077d8:	08008f61 	.word	0x08008f61

080077dc <strtol>:
 80077dc:	4613      	mov	r3, r2
 80077de:	460a      	mov	r2, r1
 80077e0:	4601      	mov	r1, r0
 80077e2:	4802      	ldr	r0, [pc, #8]	@ (80077ec <strtol+0x10>)
 80077e4:	6800      	ldr	r0, [r0, #0]
 80077e6:	f7ff bf7f 	b.w	80076e8 <_strtol_l.constprop.0>
 80077ea:	bf00      	nop
 80077ec:	20000018 	.word	0x20000018

080077f0 <std>:
 80077f0:	2300      	movs	r3, #0
 80077f2:	b510      	push	{r4, lr}
 80077f4:	4604      	mov	r4, r0
 80077f6:	e9c0 3300 	strd	r3, r3, [r0]
 80077fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80077fe:	6083      	str	r3, [r0, #8]
 8007800:	8181      	strh	r1, [r0, #12]
 8007802:	6643      	str	r3, [r0, #100]	@ 0x64
 8007804:	81c2      	strh	r2, [r0, #14]
 8007806:	6183      	str	r3, [r0, #24]
 8007808:	4619      	mov	r1, r3
 800780a:	2208      	movs	r2, #8
 800780c:	305c      	adds	r0, #92	@ 0x5c
 800780e:	f000 f906 	bl	8007a1e <memset>
 8007812:	4b0d      	ldr	r3, [pc, #52]	@ (8007848 <std+0x58>)
 8007814:	6263      	str	r3, [r4, #36]	@ 0x24
 8007816:	4b0d      	ldr	r3, [pc, #52]	@ (800784c <std+0x5c>)
 8007818:	62a3      	str	r3, [r4, #40]	@ 0x28
 800781a:	4b0d      	ldr	r3, [pc, #52]	@ (8007850 <std+0x60>)
 800781c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800781e:	4b0d      	ldr	r3, [pc, #52]	@ (8007854 <std+0x64>)
 8007820:	6323      	str	r3, [r4, #48]	@ 0x30
 8007822:	4b0d      	ldr	r3, [pc, #52]	@ (8007858 <std+0x68>)
 8007824:	6224      	str	r4, [r4, #32]
 8007826:	429c      	cmp	r4, r3
 8007828:	d006      	beq.n	8007838 <std+0x48>
 800782a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800782e:	4294      	cmp	r4, r2
 8007830:	d002      	beq.n	8007838 <std+0x48>
 8007832:	33d0      	adds	r3, #208	@ 0xd0
 8007834:	429c      	cmp	r4, r3
 8007836:	d105      	bne.n	8007844 <std+0x54>
 8007838:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800783c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007840:	f000 b978 	b.w	8007b34 <__retarget_lock_init_recursive>
 8007844:	bd10      	pop	{r4, pc}
 8007846:	bf00      	nop
 8007848:	08007999 	.word	0x08007999
 800784c:	080079bb 	.word	0x080079bb
 8007850:	080079f3 	.word	0x080079f3
 8007854:	08007a17 	.word	0x08007a17
 8007858:	20000404 	.word	0x20000404

0800785c <stdio_exit_handler>:
 800785c:	4a02      	ldr	r2, [pc, #8]	@ (8007868 <stdio_exit_handler+0xc>)
 800785e:	4903      	ldr	r1, [pc, #12]	@ (800786c <stdio_exit_handler+0x10>)
 8007860:	4803      	ldr	r0, [pc, #12]	@ (8007870 <stdio_exit_handler+0x14>)
 8007862:	f000 b869 	b.w	8007938 <_fwalk_sglue>
 8007866:	bf00      	nop
 8007868:	2000000c 	.word	0x2000000c
 800786c:	080083d5 	.word	0x080083d5
 8007870:	2000001c 	.word	0x2000001c

08007874 <cleanup_stdio>:
 8007874:	6841      	ldr	r1, [r0, #4]
 8007876:	4b0c      	ldr	r3, [pc, #48]	@ (80078a8 <cleanup_stdio+0x34>)
 8007878:	4299      	cmp	r1, r3
 800787a:	b510      	push	{r4, lr}
 800787c:	4604      	mov	r4, r0
 800787e:	d001      	beq.n	8007884 <cleanup_stdio+0x10>
 8007880:	f000 fda8 	bl	80083d4 <_fflush_r>
 8007884:	68a1      	ldr	r1, [r4, #8]
 8007886:	4b09      	ldr	r3, [pc, #36]	@ (80078ac <cleanup_stdio+0x38>)
 8007888:	4299      	cmp	r1, r3
 800788a:	d002      	beq.n	8007892 <cleanup_stdio+0x1e>
 800788c:	4620      	mov	r0, r4
 800788e:	f000 fda1 	bl	80083d4 <_fflush_r>
 8007892:	68e1      	ldr	r1, [r4, #12]
 8007894:	4b06      	ldr	r3, [pc, #24]	@ (80078b0 <cleanup_stdio+0x3c>)
 8007896:	4299      	cmp	r1, r3
 8007898:	d004      	beq.n	80078a4 <cleanup_stdio+0x30>
 800789a:	4620      	mov	r0, r4
 800789c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078a0:	f000 bd98 	b.w	80083d4 <_fflush_r>
 80078a4:	bd10      	pop	{r4, pc}
 80078a6:	bf00      	nop
 80078a8:	20000404 	.word	0x20000404
 80078ac:	2000046c 	.word	0x2000046c
 80078b0:	200004d4 	.word	0x200004d4

080078b4 <global_stdio_init.part.0>:
 80078b4:	b510      	push	{r4, lr}
 80078b6:	4b0b      	ldr	r3, [pc, #44]	@ (80078e4 <global_stdio_init.part.0+0x30>)
 80078b8:	4c0b      	ldr	r4, [pc, #44]	@ (80078e8 <global_stdio_init.part.0+0x34>)
 80078ba:	4a0c      	ldr	r2, [pc, #48]	@ (80078ec <global_stdio_init.part.0+0x38>)
 80078bc:	601a      	str	r2, [r3, #0]
 80078be:	4620      	mov	r0, r4
 80078c0:	2200      	movs	r2, #0
 80078c2:	2104      	movs	r1, #4
 80078c4:	f7ff ff94 	bl	80077f0 <std>
 80078c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80078cc:	2201      	movs	r2, #1
 80078ce:	2109      	movs	r1, #9
 80078d0:	f7ff ff8e 	bl	80077f0 <std>
 80078d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80078d8:	2202      	movs	r2, #2
 80078da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078de:	2112      	movs	r1, #18
 80078e0:	f7ff bf86 	b.w	80077f0 <std>
 80078e4:	2000053c 	.word	0x2000053c
 80078e8:	20000404 	.word	0x20000404
 80078ec:	0800785d 	.word	0x0800785d

080078f0 <__sfp_lock_acquire>:
 80078f0:	4801      	ldr	r0, [pc, #4]	@ (80078f8 <__sfp_lock_acquire+0x8>)
 80078f2:	f000 b920 	b.w	8007b36 <__retarget_lock_acquire_recursive>
 80078f6:	bf00      	nop
 80078f8:	20000545 	.word	0x20000545

080078fc <__sfp_lock_release>:
 80078fc:	4801      	ldr	r0, [pc, #4]	@ (8007904 <__sfp_lock_release+0x8>)
 80078fe:	f000 b91b 	b.w	8007b38 <__retarget_lock_release_recursive>
 8007902:	bf00      	nop
 8007904:	20000545 	.word	0x20000545

08007908 <__sinit>:
 8007908:	b510      	push	{r4, lr}
 800790a:	4604      	mov	r4, r0
 800790c:	f7ff fff0 	bl	80078f0 <__sfp_lock_acquire>
 8007910:	6a23      	ldr	r3, [r4, #32]
 8007912:	b11b      	cbz	r3, 800791c <__sinit+0x14>
 8007914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007918:	f7ff bff0 	b.w	80078fc <__sfp_lock_release>
 800791c:	4b04      	ldr	r3, [pc, #16]	@ (8007930 <__sinit+0x28>)
 800791e:	6223      	str	r3, [r4, #32]
 8007920:	4b04      	ldr	r3, [pc, #16]	@ (8007934 <__sinit+0x2c>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d1f5      	bne.n	8007914 <__sinit+0xc>
 8007928:	f7ff ffc4 	bl	80078b4 <global_stdio_init.part.0>
 800792c:	e7f2      	b.n	8007914 <__sinit+0xc>
 800792e:	bf00      	nop
 8007930:	08007875 	.word	0x08007875
 8007934:	2000053c 	.word	0x2000053c

08007938 <_fwalk_sglue>:
 8007938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800793c:	4607      	mov	r7, r0
 800793e:	4688      	mov	r8, r1
 8007940:	4614      	mov	r4, r2
 8007942:	2600      	movs	r6, #0
 8007944:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007948:	f1b9 0901 	subs.w	r9, r9, #1
 800794c:	d505      	bpl.n	800795a <_fwalk_sglue+0x22>
 800794e:	6824      	ldr	r4, [r4, #0]
 8007950:	2c00      	cmp	r4, #0
 8007952:	d1f7      	bne.n	8007944 <_fwalk_sglue+0xc>
 8007954:	4630      	mov	r0, r6
 8007956:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800795a:	89ab      	ldrh	r3, [r5, #12]
 800795c:	2b01      	cmp	r3, #1
 800795e:	d907      	bls.n	8007970 <_fwalk_sglue+0x38>
 8007960:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007964:	3301      	adds	r3, #1
 8007966:	d003      	beq.n	8007970 <_fwalk_sglue+0x38>
 8007968:	4629      	mov	r1, r5
 800796a:	4638      	mov	r0, r7
 800796c:	47c0      	blx	r8
 800796e:	4306      	orrs	r6, r0
 8007970:	3568      	adds	r5, #104	@ 0x68
 8007972:	e7e9      	b.n	8007948 <_fwalk_sglue+0x10>

08007974 <iprintf>:
 8007974:	b40f      	push	{r0, r1, r2, r3}
 8007976:	b507      	push	{r0, r1, r2, lr}
 8007978:	4906      	ldr	r1, [pc, #24]	@ (8007994 <iprintf+0x20>)
 800797a:	ab04      	add	r3, sp, #16
 800797c:	6808      	ldr	r0, [r1, #0]
 800797e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007982:	6881      	ldr	r1, [r0, #8]
 8007984:	9301      	str	r3, [sp, #4]
 8007986:	f000 f9fb 	bl	8007d80 <_vfiprintf_r>
 800798a:	b003      	add	sp, #12
 800798c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007990:	b004      	add	sp, #16
 8007992:	4770      	bx	lr
 8007994:	20000018 	.word	0x20000018

08007998 <__sread>:
 8007998:	b510      	push	{r4, lr}
 800799a:	460c      	mov	r4, r1
 800799c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079a0:	f000 f87a 	bl	8007a98 <_read_r>
 80079a4:	2800      	cmp	r0, #0
 80079a6:	bfab      	itete	ge
 80079a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80079aa:	89a3      	ldrhlt	r3, [r4, #12]
 80079ac:	181b      	addge	r3, r3, r0
 80079ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80079b2:	bfac      	ite	ge
 80079b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80079b6:	81a3      	strhlt	r3, [r4, #12]
 80079b8:	bd10      	pop	{r4, pc}

080079ba <__swrite>:
 80079ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079be:	461f      	mov	r7, r3
 80079c0:	898b      	ldrh	r3, [r1, #12]
 80079c2:	05db      	lsls	r3, r3, #23
 80079c4:	4605      	mov	r5, r0
 80079c6:	460c      	mov	r4, r1
 80079c8:	4616      	mov	r6, r2
 80079ca:	d505      	bpl.n	80079d8 <__swrite+0x1e>
 80079cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079d0:	2302      	movs	r3, #2
 80079d2:	2200      	movs	r2, #0
 80079d4:	f000 f84e 	bl	8007a74 <_lseek_r>
 80079d8:	89a3      	ldrh	r3, [r4, #12]
 80079da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80079e2:	81a3      	strh	r3, [r4, #12]
 80079e4:	4632      	mov	r2, r6
 80079e6:	463b      	mov	r3, r7
 80079e8:	4628      	mov	r0, r5
 80079ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079ee:	f000 b865 	b.w	8007abc <_write_r>

080079f2 <__sseek>:
 80079f2:	b510      	push	{r4, lr}
 80079f4:	460c      	mov	r4, r1
 80079f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079fa:	f000 f83b 	bl	8007a74 <_lseek_r>
 80079fe:	1c43      	adds	r3, r0, #1
 8007a00:	89a3      	ldrh	r3, [r4, #12]
 8007a02:	bf15      	itete	ne
 8007a04:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007a06:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007a0a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007a0e:	81a3      	strheq	r3, [r4, #12]
 8007a10:	bf18      	it	ne
 8007a12:	81a3      	strhne	r3, [r4, #12]
 8007a14:	bd10      	pop	{r4, pc}

08007a16 <__sclose>:
 8007a16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a1a:	f000 b81b 	b.w	8007a54 <_close_r>

08007a1e <memset>:
 8007a1e:	4402      	add	r2, r0
 8007a20:	4603      	mov	r3, r0
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d100      	bne.n	8007a28 <memset+0xa>
 8007a26:	4770      	bx	lr
 8007a28:	f803 1b01 	strb.w	r1, [r3], #1
 8007a2c:	e7f9      	b.n	8007a22 <memset+0x4>

08007a2e <strncmp>:
 8007a2e:	b510      	push	{r4, lr}
 8007a30:	b16a      	cbz	r2, 8007a4e <strncmp+0x20>
 8007a32:	3901      	subs	r1, #1
 8007a34:	1884      	adds	r4, r0, r2
 8007a36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a3a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d103      	bne.n	8007a4a <strncmp+0x1c>
 8007a42:	42a0      	cmp	r0, r4
 8007a44:	d001      	beq.n	8007a4a <strncmp+0x1c>
 8007a46:	2a00      	cmp	r2, #0
 8007a48:	d1f5      	bne.n	8007a36 <strncmp+0x8>
 8007a4a:	1ad0      	subs	r0, r2, r3
 8007a4c:	bd10      	pop	{r4, pc}
 8007a4e:	4610      	mov	r0, r2
 8007a50:	e7fc      	b.n	8007a4c <strncmp+0x1e>
	...

08007a54 <_close_r>:
 8007a54:	b538      	push	{r3, r4, r5, lr}
 8007a56:	4d06      	ldr	r5, [pc, #24]	@ (8007a70 <_close_r+0x1c>)
 8007a58:	2300      	movs	r3, #0
 8007a5a:	4604      	mov	r4, r0
 8007a5c:	4608      	mov	r0, r1
 8007a5e:	602b      	str	r3, [r5, #0]
 8007a60:	f7fa fc1f 	bl	80022a2 <_close>
 8007a64:	1c43      	adds	r3, r0, #1
 8007a66:	d102      	bne.n	8007a6e <_close_r+0x1a>
 8007a68:	682b      	ldr	r3, [r5, #0]
 8007a6a:	b103      	cbz	r3, 8007a6e <_close_r+0x1a>
 8007a6c:	6023      	str	r3, [r4, #0]
 8007a6e:	bd38      	pop	{r3, r4, r5, pc}
 8007a70:	20000540 	.word	0x20000540

08007a74 <_lseek_r>:
 8007a74:	b538      	push	{r3, r4, r5, lr}
 8007a76:	4d07      	ldr	r5, [pc, #28]	@ (8007a94 <_lseek_r+0x20>)
 8007a78:	4604      	mov	r4, r0
 8007a7a:	4608      	mov	r0, r1
 8007a7c:	4611      	mov	r1, r2
 8007a7e:	2200      	movs	r2, #0
 8007a80:	602a      	str	r2, [r5, #0]
 8007a82:	461a      	mov	r2, r3
 8007a84:	f7fa fc34 	bl	80022f0 <_lseek>
 8007a88:	1c43      	adds	r3, r0, #1
 8007a8a:	d102      	bne.n	8007a92 <_lseek_r+0x1e>
 8007a8c:	682b      	ldr	r3, [r5, #0]
 8007a8e:	b103      	cbz	r3, 8007a92 <_lseek_r+0x1e>
 8007a90:	6023      	str	r3, [r4, #0]
 8007a92:	bd38      	pop	{r3, r4, r5, pc}
 8007a94:	20000540 	.word	0x20000540

08007a98 <_read_r>:
 8007a98:	b538      	push	{r3, r4, r5, lr}
 8007a9a:	4d07      	ldr	r5, [pc, #28]	@ (8007ab8 <_read_r+0x20>)
 8007a9c:	4604      	mov	r4, r0
 8007a9e:	4608      	mov	r0, r1
 8007aa0:	4611      	mov	r1, r2
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	602a      	str	r2, [r5, #0]
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	f7fa fbde 	bl	8002268 <_read>
 8007aac:	1c43      	adds	r3, r0, #1
 8007aae:	d102      	bne.n	8007ab6 <_read_r+0x1e>
 8007ab0:	682b      	ldr	r3, [r5, #0]
 8007ab2:	b103      	cbz	r3, 8007ab6 <_read_r+0x1e>
 8007ab4:	6023      	str	r3, [r4, #0]
 8007ab6:	bd38      	pop	{r3, r4, r5, pc}
 8007ab8:	20000540 	.word	0x20000540

08007abc <_write_r>:
 8007abc:	b538      	push	{r3, r4, r5, lr}
 8007abe:	4d07      	ldr	r5, [pc, #28]	@ (8007adc <_write_r+0x20>)
 8007ac0:	4604      	mov	r4, r0
 8007ac2:	4608      	mov	r0, r1
 8007ac4:	4611      	mov	r1, r2
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	602a      	str	r2, [r5, #0]
 8007aca:	461a      	mov	r2, r3
 8007acc:	f7fa f95a 	bl	8001d84 <_write>
 8007ad0:	1c43      	adds	r3, r0, #1
 8007ad2:	d102      	bne.n	8007ada <_write_r+0x1e>
 8007ad4:	682b      	ldr	r3, [r5, #0]
 8007ad6:	b103      	cbz	r3, 8007ada <_write_r+0x1e>
 8007ad8:	6023      	str	r3, [r4, #0]
 8007ada:	bd38      	pop	{r3, r4, r5, pc}
 8007adc:	20000540 	.word	0x20000540

08007ae0 <__errno>:
 8007ae0:	4b01      	ldr	r3, [pc, #4]	@ (8007ae8 <__errno+0x8>)
 8007ae2:	6818      	ldr	r0, [r3, #0]
 8007ae4:	4770      	bx	lr
 8007ae6:	bf00      	nop
 8007ae8:	20000018 	.word	0x20000018

08007aec <__libc_init_array>:
 8007aec:	b570      	push	{r4, r5, r6, lr}
 8007aee:	4d0d      	ldr	r5, [pc, #52]	@ (8007b24 <__libc_init_array+0x38>)
 8007af0:	4c0d      	ldr	r4, [pc, #52]	@ (8007b28 <__libc_init_array+0x3c>)
 8007af2:	1b64      	subs	r4, r4, r5
 8007af4:	10a4      	asrs	r4, r4, #2
 8007af6:	2600      	movs	r6, #0
 8007af8:	42a6      	cmp	r6, r4
 8007afa:	d109      	bne.n	8007b10 <__libc_init_array+0x24>
 8007afc:	4d0b      	ldr	r5, [pc, #44]	@ (8007b2c <__libc_init_array+0x40>)
 8007afe:	4c0c      	ldr	r4, [pc, #48]	@ (8007b30 <__libc_init_array+0x44>)
 8007b00:	f001 f92a 	bl	8008d58 <_init>
 8007b04:	1b64      	subs	r4, r4, r5
 8007b06:	10a4      	asrs	r4, r4, #2
 8007b08:	2600      	movs	r6, #0
 8007b0a:	42a6      	cmp	r6, r4
 8007b0c:	d105      	bne.n	8007b1a <__libc_init_array+0x2e>
 8007b0e:	bd70      	pop	{r4, r5, r6, pc}
 8007b10:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b14:	4798      	blx	r3
 8007b16:	3601      	adds	r6, #1
 8007b18:	e7ee      	b.n	8007af8 <__libc_init_array+0xc>
 8007b1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b1e:	4798      	blx	r3
 8007b20:	3601      	adds	r6, #1
 8007b22:	e7f2      	b.n	8007b0a <__libc_init_array+0x1e>
 8007b24:	08009110 	.word	0x08009110
 8007b28:	08009110 	.word	0x08009110
 8007b2c:	08009110 	.word	0x08009110
 8007b30:	08009114 	.word	0x08009114

08007b34 <__retarget_lock_init_recursive>:
 8007b34:	4770      	bx	lr

08007b36 <__retarget_lock_acquire_recursive>:
 8007b36:	4770      	bx	lr

08007b38 <__retarget_lock_release_recursive>:
 8007b38:	4770      	bx	lr
	...

08007b3c <_free_r>:
 8007b3c:	b538      	push	{r3, r4, r5, lr}
 8007b3e:	4605      	mov	r5, r0
 8007b40:	2900      	cmp	r1, #0
 8007b42:	d041      	beq.n	8007bc8 <_free_r+0x8c>
 8007b44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b48:	1f0c      	subs	r4, r1, #4
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	bfb8      	it	lt
 8007b4e:	18e4      	addlt	r4, r4, r3
 8007b50:	f000 f8e0 	bl	8007d14 <__malloc_lock>
 8007b54:	4a1d      	ldr	r2, [pc, #116]	@ (8007bcc <_free_r+0x90>)
 8007b56:	6813      	ldr	r3, [r2, #0]
 8007b58:	b933      	cbnz	r3, 8007b68 <_free_r+0x2c>
 8007b5a:	6063      	str	r3, [r4, #4]
 8007b5c:	6014      	str	r4, [r2, #0]
 8007b5e:	4628      	mov	r0, r5
 8007b60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b64:	f000 b8dc 	b.w	8007d20 <__malloc_unlock>
 8007b68:	42a3      	cmp	r3, r4
 8007b6a:	d908      	bls.n	8007b7e <_free_r+0x42>
 8007b6c:	6820      	ldr	r0, [r4, #0]
 8007b6e:	1821      	adds	r1, r4, r0
 8007b70:	428b      	cmp	r3, r1
 8007b72:	bf01      	itttt	eq
 8007b74:	6819      	ldreq	r1, [r3, #0]
 8007b76:	685b      	ldreq	r3, [r3, #4]
 8007b78:	1809      	addeq	r1, r1, r0
 8007b7a:	6021      	streq	r1, [r4, #0]
 8007b7c:	e7ed      	b.n	8007b5a <_free_r+0x1e>
 8007b7e:	461a      	mov	r2, r3
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	b10b      	cbz	r3, 8007b88 <_free_r+0x4c>
 8007b84:	42a3      	cmp	r3, r4
 8007b86:	d9fa      	bls.n	8007b7e <_free_r+0x42>
 8007b88:	6811      	ldr	r1, [r2, #0]
 8007b8a:	1850      	adds	r0, r2, r1
 8007b8c:	42a0      	cmp	r0, r4
 8007b8e:	d10b      	bne.n	8007ba8 <_free_r+0x6c>
 8007b90:	6820      	ldr	r0, [r4, #0]
 8007b92:	4401      	add	r1, r0
 8007b94:	1850      	adds	r0, r2, r1
 8007b96:	4283      	cmp	r3, r0
 8007b98:	6011      	str	r1, [r2, #0]
 8007b9a:	d1e0      	bne.n	8007b5e <_free_r+0x22>
 8007b9c:	6818      	ldr	r0, [r3, #0]
 8007b9e:	685b      	ldr	r3, [r3, #4]
 8007ba0:	6053      	str	r3, [r2, #4]
 8007ba2:	4408      	add	r0, r1
 8007ba4:	6010      	str	r0, [r2, #0]
 8007ba6:	e7da      	b.n	8007b5e <_free_r+0x22>
 8007ba8:	d902      	bls.n	8007bb0 <_free_r+0x74>
 8007baa:	230c      	movs	r3, #12
 8007bac:	602b      	str	r3, [r5, #0]
 8007bae:	e7d6      	b.n	8007b5e <_free_r+0x22>
 8007bb0:	6820      	ldr	r0, [r4, #0]
 8007bb2:	1821      	adds	r1, r4, r0
 8007bb4:	428b      	cmp	r3, r1
 8007bb6:	bf04      	itt	eq
 8007bb8:	6819      	ldreq	r1, [r3, #0]
 8007bba:	685b      	ldreq	r3, [r3, #4]
 8007bbc:	6063      	str	r3, [r4, #4]
 8007bbe:	bf04      	itt	eq
 8007bc0:	1809      	addeq	r1, r1, r0
 8007bc2:	6021      	streq	r1, [r4, #0]
 8007bc4:	6054      	str	r4, [r2, #4]
 8007bc6:	e7ca      	b.n	8007b5e <_free_r+0x22>
 8007bc8:	bd38      	pop	{r3, r4, r5, pc}
 8007bca:	bf00      	nop
 8007bcc:	2000054c 	.word	0x2000054c

08007bd0 <sbrk_aligned>:
 8007bd0:	b570      	push	{r4, r5, r6, lr}
 8007bd2:	4e0f      	ldr	r6, [pc, #60]	@ (8007c10 <sbrk_aligned+0x40>)
 8007bd4:	460c      	mov	r4, r1
 8007bd6:	6831      	ldr	r1, [r6, #0]
 8007bd8:	4605      	mov	r5, r0
 8007bda:	b911      	cbnz	r1, 8007be2 <sbrk_aligned+0x12>
 8007bdc:	f000 fcb6 	bl	800854c <_sbrk_r>
 8007be0:	6030      	str	r0, [r6, #0]
 8007be2:	4621      	mov	r1, r4
 8007be4:	4628      	mov	r0, r5
 8007be6:	f000 fcb1 	bl	800854c <_sbrk_r>
 8007bea:	1c43      	adds	r3, r0, #1
 8007bec:	d103      	bne.n	8007bf6 <sbrk_aligned+0x26>
 8007bee:	f04f 34ff 	mov.w	r4, #4294967295
 8007bf2:	4620      	mov	r0, r4
 8007bf4:	bd70      	pop	{r4, r5, r6, pc}
 8007bf6:	1cc4      	adds	r4, r0, #3
 8007bf8:	f024 0403 	bic.w	r4, r4, #3
 8007bfc:	42a0      	cmp	r0, r4
 8007bfe:	d0f8      	beq.n	8007bf2 <sbrk_aligned+0x22>
 8007c00:	1a21      	subs	r1, r4, r0
 8007c02:	4628      	mov	r0, r5
 8007c04:	f000 fca2 	bl	800854c <_sbrk_r>
 8007c08:	3001      	adds	r0, #1
 8007c0a:	d1f2      	bne.n	8007bf2 <sbrk_aligned+0x22>
 8007c0c:	e7ef      	b.n	8007bee <sbrk_aligned+0x1e>
 8007c0e:	bf00      	nop
 8007c10:	20000548 	.word	0x20000548

08007c14 <_malloc_r>:
 8007c14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c18:	1ccd      	adds	r5, r1, #3
 8007c1a:	f025 0503 	bic.w	r5, r5, #3
 8007c1e:	3508      	adds	r5, #8
 8007c20:	2d0c      	cmp	r5, #12
 8007c22:	bf38      	it	cc
 8007c24:	250c      	movcc	r5, #12
 8007c26:	2d00      	cmp	r5, #0
 8007c28:	4606      	mov	r6, r0
 8007c2a:	db01      	blt.n	8007c30 <_malloc_r+0x1c>
 8007c2c:	42a9      	cmp	r1, r5
 8007c2e:	d904      	bls.n	8007c3a <_malloc_r+0x26>
 8007c30:	230c      	movs	r3, #12
 8007c32:	6033      	str	r3, [r6, #0]
 8007c34:	2000      	movs	r0, #0
 8007c36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c3a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007d10 <_malloc_r+0xfc>
 8007c3e:	f000 f869 	bl	8007d14 <__malloc_lock>
 8007c42:	f8d8 3000 	ldr.w	r3, [r8]
 8007c46:	461c      	mov	r4, r3
 8007c48:	bb44      	cbnz	r4, 8007c9c <_malloc_r+0x88>
 8007c4a:	4629      	mov	r1, r5
 8007c4c:	4630      	mov	r0, r6
 8007c4e:	f7ff ffbf 	bl	8007bd0 <sbrk_aligned>
 8007c52:	1c43      	adds	r3, r0, #1
 8007c54:	4604      	mov	r4, r0
 8007c56:	d158      	bne.n	8007d0a <_malloc_r+0xf6>
 8007c58:	f8d8 4000 	ldr.w	r4, [r8]
 8007c5c:	4627      	mov	r7, r4
 8007c5e:	2f00      	cmp	r7, #0
 8007c60:	d143      	bne.n	8007cea <_malloc_r+0xd6>
 8007c62:	2c00      	cmp	r4, #0
 8007c64:	d04b      	beq.n	8007cfe <_malloc_r+0xea>
 8007c66:	6823      	ldr	r3, [r4, #0]
 8007c68:	4639      	mov	r1, r7
 8007c6a:	4630      	mov	r0, r6
 8007c6c:	eb04 0903 	add.w	r9, r4, r3
 8007c70:	f000 fc6c 	bl	800854c <_sbrk_r>
 8007c74:	4581      	cmp	r9, r0
 8007c76:	d142      	bne.n	8007cfe <_malloc_r+0xea>
 8007c78:	6821      	ldr	r1, [r4, #0]
 8007c7a:	1a6d      	subs	r5, r5, r1
 8007c7c:	4629      	mov	r1, r5
 8007c7e:	4630      	mov	r0, r6
 8007c80:	f7ff ffa6 	bl	8007bd0 <sbrk_aligned>
 8007c84:	3001      	adds	r0, #1
 8007c86:	d03a      	beq.n	8007cfe <_malloc_r+0xea>
 8007c88:	6823      	ldr	r3, [r4, #0]
 8007c8a:	442b      	add	r3, r5
 8007c8c:	6023      	str	r3, [r4, #0]
 8007c8e:	f8d8 3000 	ldr.w	r3, [r8]
 8007c92:	685a      	ldr	r2, [r3, #4]
 8007c94:	bb62      	cbnz	r2, 8007cf0 <_malloc_r+0xdc>
 8007c96:	f8c8 7000 	str.w	r7, [r8]
 8007c9a:	e00f      	b.n	8007cbc <_malloc_r+0xa8>
 8007c9c:	6822      	ldr	r2, [r4, #0]
 8007c9e:	1b52      	subs	r2, r2, r5
 8007ca0:	d420      	bmi.n	8007ce4 <_malloc_r+0xd0>
 8007ca2:	2a0b      	cmp	r2, #11
 8007ca4:	d917      	bls.n	8007cd6 <_malloc_r+0xc2>
 8007ca6:	1961      	adds	r1, r4, r5
 8007ca8:	42a3      	cmp	r3, r4
 8007caa:	6025      	str	r5, [r4, #0]
 8007cac:	bf18      	it	ne
 8007cae:	6059      	strne	r1, [r3, #4]
 8007cb0:	6863      	ldr	r3, [r4, #4]
 8007cb2:	bf08      	it	eq
 8007cb4:	f8c8 1000 	streq.w	r1, [r8]
 8007cb8:	5162      	str	r2, [r4, r5]
 8007cba:	604b      	str	r3, [r1, #4]
 8007cbc:	4630      	mov	r0, r6
 8007cbe:	f000 f82f 	bl	8007d20 <__malloc_unlock>
 8007cc2:	f104 000b 	add.w	r0, r4, #11
 8007cc6:	1d23      	adds	r3, r4, #4
 8007cc8:	f020 0007 	bic.w	r0, r0, #7
 8007ccc:	1ac2      	subs	r2, r0, r3
 8007cce:	bf1c      	itt	ne
 8007cd0:	1a1b      	subne	r3, r3, r0
 8007cd2:	50a3      	strne	r3, [r4, r2]
 8007cd4:	e7af      	b.n	8007c36 <_malloc_r+0x22>
 8007cd6:	6862      	ldr	r2, [r4, #4]
 8007cd8:	42a3      	cmp	r3, r4
 8007cda:	bf0c      	ite	eq
 8007cdc:	f8c8 2000 	streq.w	r2, [r8]
 8007ce0:	605a      	strne	r2, [r3, #4]
 8007ce2:	e7eb      	b.n	8007cbc <_malloc_r+0xa8>
 8007ce4:	4623      	mov	r3, r4
 8007ce6:	6864      	ldr	r4, [r4, #4]
 8007ce8:	e7ae      	b.n	8007c48 <_malloc_r+0x34>
 8007cea:	463c      	mov	r4, r7
 8007cec:	687f      	ldr	r7, [r7, #4]
 8007cee:	e7b6      	b.n	8007c5e <_malloc_r+0x4a>
 8007cf0:	461a      	mov	r2, r3
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	42a3      	cmp	r3, r4
 8007cf6:	d1fb      	bne.n	8007cf0 <_malloc_r+0xdc>
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	6053      	str	r3, [r2, #4]
 8007cfc:	e7de      	b.n	8007cbc <_malloc_r+0xa8>
 8007cfe:	230c      	movs	r3, #12
 8007d00:	6033      	str	r3, [r6, #0]
 8007d02:	4630      	mov	r0, r6
 8007d04:	f000 f80c 	bl	8007d20 <__malloc_unlock>
 8007d08:	e794      	b.n	8007c34 <_malloc_r+0x20>
 8007d0a:	6005      	str	r5, [r0, #0]
 8007d0c:	e7d6      	b.n	8007cbc <_malloc_r+0xa8>
 8007d0e:	bf00      	nop
 8007d10:	2000054c 	.word	0x2000054c

08007d14 <__malloc_lock>:
 8007d14:	4801      	ldr	r0, [pc, #4]	@ (8007d1c <__malloc_lock+0x8>)
 8007d16:	f7ff bf0e 	b.w	8007b36 <__retarget_lock_acquire_recursive>
 8007d1a:	bf00      	nop
 8007d1c:	20000544 	.word	0x20000544

08007d20 <__malloc_unlock>:
 8007d20:	4801      	ldr	r0, [pc, #4]	@ (8007d28 <__malloc_unlock+0x8>)
 8007d22:	f7ff bf09 	b.w	8007b38 <__retarget_lock_release_recursive>
 8007d26:	bf00      	nop
 8007d28:	20000544 	.word	0x20000544

08007d2c <__sfputc_r>:
 8007d2c:	6893      	ldr	r3, [r2, #8]
 8007d2e:	3b01      	subs	r3, #1
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	b410      	push	{r4}
 8007d34:	6093      	str	r3, [r2, #8]
 8007d36:	da08      	bge.n	8007d4a <__sfputc_r+0x1e>
 8007d38:	6994      	ldr	r4, [r2, #24]
 8007d3a:	42a3      	cmp	r3, r4
 8007d3c:	db01      	blt.n	8007d42 <__sfputc_r+0x16>
 8007d3e:	290a      	cmp	r1, #10
 8007d40:	d103      	bne.n	8007d4a <__sfputc_r+0x1e>
 8007d42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d46:	f000 bb6d 	b.w	8008424 <__swbuf_r>
 8007d4a:	6813      	ldr	r3, [r2, #0]
 8007d4c:	1c58      	adds	r0, r3, #1
 8007d4e:	6010      	str	r0, [r2, #0]
 8007d50:	7019      	strb	r1, [r3, #0]
 8007d52:	4608      	mov	r0, r1
 8007d54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d58:	4770      	bx	lr

08007d5a <__sfputs_r>:
 8007d5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d5c:	4606      	mov	r6, r0
 8007d5e:	460f      	mov	r7, r1
 8007d60:	4614      	mov	r4, r2
 8007d62:	18d5      	adds	r5, r2, r3
 8007d64:	42ac      	cmp	r4, r5
 8007d66:	d101      	bne.n	8007d6c <__sfputs_r+0x12>
 8007d68:	2000      	movs	r0, #0
 8007d6a:	e007      	b.n	8007d7c <__sfputs_r+0x22>
 8007d6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d70:	463a      	mov	r2, r7
 8007d72:	4630      	mov	r0, r6
 8007d74:	f7ff ffda 	bl	8007d2c <__sfputc_r>
 8007d78:	1c43      	adds	r3, r0, #1
 8007d7a:	d1f3      	bne.n	8007d64 <__sfputs_r+0xa>
 8007d7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007d80 <_vfiprintf_r>:
 8007d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d84:	460d      	mov	r5, r1
 8007d86:	b09d      	sub	sp, #116	@ 0x74
 8007d88:	4614      	mov	r4, r2
 8007d8a:	4698      	mov	r8, r3
 8007d8c:	4606      	mov	r6, r0
 8007d8e:	b118      	cbz	r0, 8007d98 <_vfiprintf_r+0x18>
 8007d90:	6a03      	ldr	r3, [r0, #32]
 8007d92:	b90b      	cbnz	r3, 8007d98 <_vfiprintf_r+0x18>
 8007d94:	f7ff fdb8 	bl	8007908 <__sinit>
 8007d98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007d9a:	07d9      	lsls	r1, r3, #31
 8007d9c:	d405      	bmi.n	8007daa <_vfiprintf_r+0x2a>
 8007d9e:	89ab      	ldrh	r3, [r5, #12]
 8007da0:	059a      	lsls	r2, r3, #22
 8007da2:	d402      	bmi.n	8007daa <_vfiprintf_r+0x2a>
 8007da4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007da6:	f7ff fec6 	bl	8007b36 <__retarget_lock_acquire_recursive>
 8007daa:	89ab      	ldrh	r3, [r5, #12]
 8007dac:	071b      	lsls	r3, r3, #28
 8007dae:	d501      	bpl.n	8007db4 <_vfiprintf_r+0x34>
 8007db0:	692b      	ldr	r3, [r5, #16]
 8007db2:	b99b      	cbnz	r3, 8007ddc <_vfiprintf_r+0x5c>
 8007db4:	4629      	mov	r1, r5
 8007db6:	4630      	mov	r0, r6
 8007db8:	f000 fb72 	bl	80084a0 <__swsetup_r>
 8007dbc:	b170      	cbz	r0, 8007ddc <_vfiprintf_r+0x5c>
 8007dbe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007dc0:	07dc      	lsls	r4, r3, #31
 8007dc2:	d504      	bpl.n	8007dce <_vfiprintf_r+0x4e>
 8007dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8007dc8:	b01d      	add	sp, #116	@ 0x74
 8007dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dce:	89ab      	ldrh	r3, [r5, #12]
 8007dd0:	0598      	lsls	r0, r3, #22
 8007dd2:	d4f7      	bmi.n	8007dc4 <_vfiprintf_r+0x44>
 8007dd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007dd6:	f7ff feaf 	bl	8007b38 <__retarget_lock_release_recursive>
 8007dda:	e7f3      	b.n	8007dc4 <_vfiprintf_r+0x44>
 8007ddc:	2300      	movs	r3, #0
 8007dde:	9309      	str	r3, [sp, #36]	@ 0x24
 8007de0:	2320      	movs	r3, #32
 8007de2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007de6:	f8cd 800c 	str.w	r8, [sp, #12]
 8007dea:	2330      	movs	r3, #48	@ 0x30
 8007dec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007f9c <_vfiprintf_r+0x21c>
 8007df0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007df4:	f04f 0901 	mov.w	r9, #1
 8007df8:	4623      	mov	r3, r4
 8007dfa:	469a      	mov	sl, r3
 8007dfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e00:	b10a      	cbz	r2, 8007e06 <_vfiprintf_r+0x86>
 8007e02:	2a25      	cmp	r2, #37	@ 0x25
 8007e04:	d1f9      	bne.n	8007dfa <_vfiprintf_r+0x7a>
 8007e06:	ebba 0b04 	subs.w	fp, sl, r4
 8007e0a:	d00b      	beq.n	8007e24 <_vfiprintf_r+0xa4>
 8007e0c:	465b      	mov	r3, fp
 8007e0e:	4622      	mov	r2, r4
 8007e10:	4629      	mov	r1, r5
 8007e12:	4630      	mov	r0, r6
 8007e14:	f7ff ffa1 	bl	8007d5a <__sfputs_r>
 8007e18:	3001      	adds	r0, #1
 8007e1a:	f000 80a7 	beq.w	8007f6c <_vfiprintf_r+0x1ec>
 8007e1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e20:	445a      	add	r2, fp
 8007e22:	9209      	str	r2, [sp, #36]	@ 0x24
 8007e24:	f89a 3000 	ldrb.w	r3, [sl]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	f000 809f 	beq.w	8007f6c <_vfiprintf_r+0x1ec>
 8007e2e:	2300      	movs	r3, #0
 8007e30:	f04f 32ff 	mov.w	r2, #4294967295
 8007e34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e38:	f10a 0a01 	add.w	sl, sl, #1
 8007e3c:	9304      	str	r3, [sp, #16]
 8007e3e:	9307      	str	r3, [sp, #28]
 8007e40:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007e44:	931a      	str	r3, [sp, #104]	@ 0x68
 8007e46:	4654      	mov	r4, sl
 8007e48:	2205      	movs	r2, #5
 8007e4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e4e:	4853      	ldr	r0, [pc, #332]	@ (8007f9c <_vfiprintf_r+0x21c>)
 8007e50:	f7f8 f9c6 	bl	80001e0 <memchr>
 8007e54:	9a04      	ldr	r2, [sp, #16]
 8007e56:	b9d8      	cbnz	r0, 8007e90 <_vfiprintf_r+0x110>
 8007e58:	06d1      	lsls	r1, r2, #27
 8007e5a:	bf44      	itt	mi
 8007e5c:	2320      	movmi	r3, #32
 8007e5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e62:	0713      	lsls	r3, r2, #28
 8007e64:	bf44      	itt	mi
 8007e66:	232b      	movmi	r3, #43	@ 0x2b
 8007e68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e6c:	f89a 3000 	ldrb.w	r3, [sl]
 8007e70:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e72:	d015      	beq.n	8007ea0 <_vfiprintf_r+0x120>
 8007e74:	9a07      	ldr	r2, [sp, #28]
 8007e76:	4654      	mov	r4, sl
 8007e78:	2000      	movs	r0, #0
 8007e7a:	f04f 0c0a 	mov.w	ip, #10
 8007e7e:	4621      	mov	r1, r4
 8007e80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e84:	3b30      	subs	r3, #48	@ 0x30
 8007e86:	2b09      	cmp	r3, #9
 8007e88:	d94b      	bls.n	8007f22 <_vfiprintf_r+0x1a2>
 8007e8a:	b1b0      	cbz	r0, 8007eba <_vfiprintf_r+0x13a>
 8007e8c:	9207      	str	r2, [sp, #28]
 8007e8e:	e014      	b.n	8007eba <_vfiprintf_r+0x13a>
 8007e90:	eba0 0308 	sub.w	r3, r0, r8
 8007e94:	fa09 f303 	lsl.w	r3, r9, r3
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	9304      	str	r3, [sp, #16]
 8007e9c:	46a2      	mov	sl, r4
 8007e9e:	e7d2      	b.n	8007e46 <_vfiprintf_r+0xc6>
 8007ea0:	9b03      	ldr	r3, [sp, #12]
 8007ea2:	1d19      	adds	r1, r3, #4
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	9103      	str	r1, [sp, #12]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	bfbb      	ittet	lt
 8007eac:	425b      	neglt	r3, r3
 8007eae:	f042 0202 	orrlt.w	r2, r2, #2
 8007eb2:	9307      	strge	r3, [sp, #28]
 8007eb4:	9307      	strlt	r3, [sp, #28]
 8007eb6:	bfb8      	it	lt
 8007eb8:	9204      	strlt	r2, [sp, #16]
 8007eba:	7823      	ldrb	r3, [r4, #0]
 8007ebc:	2b2e      	cmp	r3, #46	@ 0x2e
 8007ebe:	d10a      	bne.n	8007ed6 <_vfiprintf_r+0x156>
 8007ec0:	7863      	ldrb	r3, [r4, #1]
 8007ec2:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ec4:	d132      	bne.n	8007f2c <_vfiprintf_r+0x1ac>
 8007ec6:	9b03      	ldr	r3, [sp, #12]
 8007ec8:	1d1a      	adds	r2, r3, #4
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	9203      	str	r2, [sp, #12]
 8007ece:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007ed2:	3402      	adds	r4, #2
 8007ed4:	9305      	str	r3, [sp, #20]
 8007ed6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007fac <_vfiprintf_r+0x22c>
 8007eda:	7821      	ldrb	r1, [r4, #0]
 8007edc:	2203      	movs	r2, #3
 8007ede:	4650      	mov	r0, sl
 8007ee0:	f7f8 f97e 	bl	80001e0 <memchr>
 8007ee4:	b138      	cbz	r0, 8007ef6 <_vfiprintf_r+0x176>
 8007ee6:	9b04      	ldr	r3, [sp, #16]
 8007ee8:	eba0 000a 	sub.w	r0, r0, sl
 8007eec:	2240      	movs	r2, #64	@ 0x40
 8007eee:	4082      	lsls	r2, r0
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	3401      	adds	r4, #1
 8007ef4:	9304      	str	r3, [sp, #16]
 8007ef6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007efa:	4829      	ldr	r0, [pc, #164]	@ (8007fa0 <_vfiprintf_r+0x220>)
 8007efc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007f00:	2206      	movs	r2, #6
 8007f02:	f7f8 f96d 	bl	80001e0 <memchr>
 8007f06:	2800      	cmp	r0, #0
 8007f08:	d03f      	beq.n	8007f8a <_vfiprintf_r+0x20a>
 8007f0a:	4b26      	ldr	r3, [pc, #152]	@ (8007fa4 <_vfiprintf_r+0x224>)
 8007f0c:	bb1b      	cbnz	r3, 8007f56 <_vfiprintf_r+0x1d6>
 8007f0e:	9b03      	ldr	r3, [sp, #12]
 8007f10:	3307      	adds	r3, #7
 8007f12:	f023 0307 	bic.w	r3, r3, #7
 8007f16:	3308      	adds	r3, #8
 8007f18:	9303      	str	r3, [sp, #12]
 8007f1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f1c:	443b      	add	r3, r7
 8007f1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f20:	e76a      	b.n	8007df8 <_vfiprintf_r+0x78>
 8007f22:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f26:	460c      	mov	r4, r1
 8007f28:	2001      	movs	r0, #1
 8007f2a:	e7a8      	b.n	8007e7e <_vfiprintf_r+0xfe>
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	3401      	adds	r4, #1
 8007f30:	9305      	str	r3, [sp, #20]
 8007f32:	4619      	mov	r1, r3
 8007f34:	f04f 0c0a 	mov.w	ip, #10
 8007f38:	4620      	mov	r0, r4
 8007f3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f3e:	3a30      	subs	r2, #48	@ 0x30
 8007f40:	2a09      	cmp	r2, #9
 8007f42:	d903      	bls.n	8007f4c <_vfiprintf_r+0x1cc>
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d0c6      	beq.n	8007ed6 <_vfiprintf_r+0x156>
 8007f48:	9105      	str	r1, [sp, #20]
 8007f4a:	e7c4      	b.n	8007ed6 <_vfiprintf_r+0x156>
 8007f4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f50:	4604      	mov	r4, r0
 8007f52:	2301      	movs	r3, #1
 8007f54:	e7f0      	b.n	8007f38 <_vfiprintf_r+0x1b8>
 8007f56:	ab03      	add	r3, sp, #12
 8007f58:	9300      	str	r3, [sp, #0]
 8007f5a:	462a      	mov	r2, r5
 8007f5c:	4b12      	ldr	r3, [pc, #72]	@ (8007fa8 <_vfiprintf_r+0x228>)
 8007f5e:	a904      	add	r1, sp, #16
 8007f60:	4630      	mov	r0, r6
 8007f62:	f3af 8000 	nop.w
 8007f66:	4607      	mov	r7, r0
 8007f68:	1c78      	adds	r0, r7, #1
 8007f6a:	d1d6      	bne.n	8007f1a <_vfiprintf_r+0x19a>
 8007f6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007f6e:	07d9      	lsls	r1, r3, #31
 8007f70:	d405      	bmi.n	8007f7e <_vfiprintf_r+0x1fe>
 8007f72:	89ab      	ldrh	r3, [r5, #12]
 8007f74:	059a      	lsls	r2, r3, #22
 8007f76:	d402      	bmi.n	8007f7e <_vfiprintf_r+0x1fe>
 8007f78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007f7a:	f7ff fddd 	bl	8007b38 <__retarget_lock_release_recursive>
 8007f7e:	89ab      	ldrh	r3, [r5, #12]
 8007f80:	065b      	lsls	r3, r3, #25
 8007f82:	f53f af1f 	bmi.w	8007dc4 <_vfiprintf_r+0x44>
 8007f86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007f88:	e71e      	b.n	8007dc8 <_vfiprintf_r+0x48>
 8007f8a:	ab03      	add	r3, sp, #12
 8007f8c:	9300      	str	r3, [sp, #0]
 8007f8e:	462a      	mov	r2, r5
 8007f90:	4b05      	ldr	r3, [pc, #20]	@ (8007fa8 <_vfiprintf_r+0x228>)
 8007f92:	a904      	add	r1, sp, #16
 8007f94:	4630      	mov	r0, r6
 8007f96:	f000 f879 	bl	800808c <_printf_i>
 8007f9a:	e7e4      	b.n	8007f66 <_vfiprintf_r+0x1e6>
 8007f9c:	08009061 	.word	0x08009061
 8007fa0:	0800906b 	.word	0x0800906b
 8007fa4:	00000000 	.word	0x00000000
 8007fa8:	08007d5b 	.word	0x08007d5b
 8007fac:	08009067 	.word	0x08009067

08007fb0 <_printf_common>:
 8007fb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fb4:	4616      	mov	r6, r2
 8007fb6:	4698      	mov	r8, r3
 8007fb8:	688a      	ldr	r2, [r1, #8]
 8007fba:	690b      	ldr	r3, [r1, #16]
 8007fbc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	bfb8      	it	lt
 8007fc4:	4613      	movlt	r3, r2
 8007fc6:	6033      	str	r3, [r6, #0]
 8007fc8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007fcc:	4607      	mov	r7, r0
 8007fce:	460c      	mov	r4, r1
 8007fd0:	b10a      	cbz	r2, 8007fd6 <_printf_common+0x26>
 8007fd2:	3301      	adds	r3, #1
 8007fd4:	6033      	str	r3, [r6, #0]
 8007fd6:	6823      	ldr	r3, [r4, #0]
 8007fd8:	0699      	lsls	r1, r3, #26
 8007fda:	bf42      	ittt	mi
 8007fdc:	6833      	ldrmi	r3, [r6, #0]
 8007fde:	3302      	addmi	r3, #2
 8007fe0:	6033      	strmi	r3, [r6, #0]
 8007fe2:	6825      	ldr	r5, [r4, #0]
 8007fe4:	f015 0506 	ands.w	r5, r5, #6
 8007fe8:	d106      	bne.n	8007ff8 <_printf_common+0x48>
 8007fea:	f104 0a19 	add.w	sl, r4, #25
 8007fee:	68e3      	ldr	r3, [r4, #12]
 8007ff0:	6832      	ldr	r2, [r6, #0]
 8007ff2:	1a9b      	subs	r3, r3, r2
 8007ff4:	42ab      	cmp	r3, r5
 8007ff6:	dc26      	bgt.n	8008046 <_printf_common+0x96>
 8007ff8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007ffc:	6822      	ldr	r2, [r4, #0]
 8007ffe:	3b00      	subs	r3, #0
 8008000:	bf18      	it	ne
 8008002:	2301      	movne	r3, #1
 8008004:	0692      	lsls	r2, r2, #26
 8008006:	d42b      	bmi.n	8008060 <_printf_common+0xb0>
 8008008:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800800c:	4641      	mov	r1, r8
 800800e:	4638      	mov	r0, r7
 8008010:	47c8      	blx	r9
 8008012:	3001      	adds	r0, #1
 8008014:	d01e      	beq.n	8008054 <_printf_common+0xa4>
 8008016:	6823      	ldr	r3, [r4, #0]
 8008018:	6922      	ldr	r2, [r4, #16]
 800801a:	f003 0306 	and.w	r3, r3, #6
 800801e:	2b04      	cmp	r3, #4
 8008020:	bf02      	ittt	eq
 8008022:	68e5      	ldreq	r5, [r4, #12]
 8008024:	6833      	ldreq	r3, [r6, #0]
 8008026:	1aed      	subeq	r5, r5, r3
 8008028:	68a3      	ldr	r3, [r4, #8]
 800802a:	bf0c      	ite	eq
 800802c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008030:	2500      	movne	r5, #0
 8008032:	4293      	cmp	r3, r2
 8008034:	bfc4      	itt	gt
 8008036:	1a9b      	subgt	r3, r3, r2
 8008038:	18ed      	addgt	r5, r5, r3
 800803a:	2600      	movs	r6, #0
 800803c:	341a      	adds	r4, #26
 800803e:	42b5      	cmp	r5, r6
 8008040:	d11a      	bne.n	8008078 <_printf_common+0xc8>
 8008042:	2000      	movs	r0, #0
 8008044:	e008      	b.n	8008058 <_printf_common+0xa8>
 8008046:	2301      	movs	r3, #1
 8008048:	4652      	mov	r2, sl
 800804a:	4641      	mov	r1, r8
 800804c:	4638      	mov	r0, r7
 800804e:	47c8      	blx	r9
 8008050:	3001      	adds	r0, #1
 8008052:	d103      	bne.n	800805c <_printf_common+0xac>
 8008054:	f04f 30ff 	mov.w	r0, #4294967295
 8008058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800805c:	3501      	adds	r5, #1
 800805e:	e7c6      	b.n	8007fee <_printf_common+0x3e>
 8008060:	18e1      	adds	r1, r4, r3
 8008062:	1c5a      	adds	r2, r3, #1
 8008064:	2030      	movs	r0, #48	@ 0x30
 8008066:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800806a:	4422      	add	r2, r4
 800806c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008070:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008074:	3302      	adds	r3, #2
 8008076:	e7c7      	b.n	8008008 <_printf_common+0x58>
 8008078:	2301      	movs	r3, #1
 800807a:	4622      	mov	r2, r4
 800807c:	4641      	mov	r1, r8
 800807e:	4638      	mov	r0, r7
 8008080:	47c8      	blx	r9
 8008082:	3001      	adds	r0, #1
 8008084:	d0e6      	beq.n	8008054 <_printf_common+0xa4>
 8008086:	3601      	adds	r6, #1
 8008088:	e7d9      	b.n	800803e <_printf_common+0x8e>
	...

0800808c <_printf_i>:
 800808c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008090:	7e0f      	ldrb	r7, [r1, #24]
 8008092:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008094:	2f78      	cmp	r7, #120	@ 0x78
 8008096:	4691      	mov	r9, r2
 8008098:	4680      	mov	r8, r0
 800809a:	460c      	mov	r4, r1
 800809c:	469a      	mov	sl, r3
 800809e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80080a2:	d807      	bhi.n	80080b4 <_printf_i+0x28>
 80080a4:	2f62      	cmp	r7, #98	@ 0x62
 80080a6:	d80a      	bhi.n	80080be <_printf_i+0x32>
 80080a8:	2f00      	cmp	r7, #0
 80080aa:	f000 80d2 	beq.w	8008252 <_printf_i+0x1c6>
 80080ae:	2f58      	cmp	r7, #88	@ 0x58
 80080b0:	f000 80b9 	beq.w	8008226 <_printf_i+0x19a>
 80080b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80080b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80080bc:	e03a      	b.n	8008134 <_printf_i+0xa8>
 80080be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80080c2:	2b15      	cmp	r3, #21
 80080c4:	d8f6      	bhi.n	80080b4 <_printf_i+0x28>
 80080c6:	a101      	add	r1, pc, #4	@ (adr r1, 80080cc <_printf_i+0x40>)
 80080c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80080cc:	08008125 	.word	0x08008125
 80080d0:	08008139 	.word	0x08008139
 80080d4:	080080b5 	.word	0x080080b5
 80080d8:	080080b5 	.word	0x080080b5
 80080dc:	080080b5 	.word	0x080080b5
 80080e0:	080080b5 	.word	0x080080b5
 80080e4:	08008139 	.word	0x08008139
 80080e8:	080080b5 	.word	0x080080b5
 80080ec:	080080b5 	.word	0x080080b5
 80080f0:	080080b5 	.word	0x080080b5
 80080f4:	080080b5 	.word	0x080080b5
 80080f8:	08008239 	.word	0x08008239
 80080fc:	08008163 	.word	0x08008163
 8008100:	080081f3 	.word	0x080081f3
 8008104:	080080b5 	.word	0x080080b5
 8008108:	080080b5 	.word	0x080080b5
 800810c:	0800825b 	.word	0x0800825b
 8008110:	080080b5 	.word	0x080080b5
 8008114:	08008163 	.word	0x08008163
 8008118:	080080b5 	.word	0x080080b5
 800811c:	080080b5 	.word	0x080080b5
 8008120:	080081fb 	.word	0x080081fb
 8008124:	6833      	ldr	r3, [r6, #0]
 8008126:	1d1a      	adds	r2, r3, #4
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	6032      	str	r2, [r6, #0]
 800812c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008130:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008134:	2301      	movs	r3, #1
 8008136:	e09d      	b.n	8008274 <_printf_i+0x1e8>
 8008138:	6833      	ldr	r3, [r6, #0]
 800813a:	6820      	ldr	r0, [r4, #0]
 800813c:	1d19      	adds	r1, r3, #4
 800813e:	6031      	str	r1, [r6, #0]
 8008140:	0606      	lsls	r6, r0, #24
 8008142:	d501      	bpl.n	8008148 <_printf_i+0xbc>
 8008144:	681d      	ldr	r5, [r3, #0]
 8008146:	e003      	b.n	8008150 <_printf_i+0xc4>
 8008148:	0645      	lsls	r5, r0, #25
 800814a:	d5fb      	bpl.n	8008144 <_printf_i+0xb8>
 800814c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008150:	2d00      	cmp	r5, #0
 8008152:	da03      	bge.n	800815c <_printf_i+0xd0>
 8008154:	232d      	movs	r3, #45	@ 0x2d
 8008156:	426d      	negs	r5, r5
 8008158:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800815c:	4859      	ldr	r0, [pc, #356]	@ (80082c4 <_printf_i+0x238>)
 800815e:	230a      	movs	r3, #10
 8008160:	e011      	b.n	8008186 <_printf_i+0xfa>
 8008162:	6821      	ldr	r1, [r4, #0]
 8008164:	6833      	ldr	r3, [r6, #0]
 8008166:	0608      	lsls	r0, r1, #24
 8008168:	f853 5b04 	ldr.w	r5, [r3], #4
 800816c:	d402      	bmi.n	8008174 <_printf_i+0xe8>
 800816e:	0649      	lsls	r1, r1, #25
 8008170:	bf48      	it	mi
 8008172:	b2ad      	uxthmi	r5, r5
 8008174:	2f6f      	cmp	r7, #111	@ 0x6f
 8008176:	4853      	ldr	r0, [pc, #332]	@ (80082c4 <_printf_i+0x238>)
 8008178:	6033      	str	r3, [r6, #0]
 800817a:	bf14      	ite	ne
 800817c:	230a      	movne	r3, #10
 800817e:	2308      	moveq	r3, #8
 8008180:	2100      	movs	r1, #0
 8008182:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008186:	6866      	ldr	r6, [r4, #4]
 8008188:	60a6      	str	r6, [r4, #8]
 800818a:	2e00      	cmp	r6, #0
 800818c:	bfa2      	ittt	ge
 800818e:	6821      	ldrge	r1, [r4, #0]
 8008190:	f021 0104 	bicge.w	r1, r1, #4
 8008194:	6021      	strge	r1, [r4, #0]
 8008196:	b90d      	cbnz	r5, 800819c <_printf_i+0x110>
 8008198:	2e00      	cmp	r6, #0
 800819a:	d04b      	beq.n	8008234 <_printf_i+0x1a8>
 800819c:	4616      	mov	r6, r2
 800819e:	fbb5 f1f3 	udiv	r1, r5, r3
 80081a2:	fb03 5711 	mls	r7, r3, r1, r5
 80081a6:	5dc7      	ldrb	r7, [r0, r7]
 80081a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80081ac:	462f      	mov	r7, r5
 80081ae:	42bb      	cmp	r3, r7
 80081b0:	460d      	mov	r5, r1
 80081b2:	d9f4      	bls.n	800819e <_printf_i+0x112>
 80081b4:	2b08      	cmp	r3, #8
 80081b6:	d10b      	bne.n	80081d0 <_printf_i+0x144>
 80081b8:	6823      	ldr	r3, [r4, #0]
 80081ba:	07df      	lsls	r7, r3, #31
 80081bc:	d508      	bpl.n	80081d0 <_printf_i+0x144>
 80081be:	6923      	ldr	r3, [r4, #16]
 80081c0:	6861      	ldr	r1, [r4, #4]
 80081c2:	4299      	cmp	r1, r3
 80081c4:	bfde      	ittt	le
 80081c6:	2330      	movle	r3, #48	@ 0x30
 80081c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80081cc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80081d0:	1b92      	subs	r2, r2, r6
 80081d2:	6122      	str	r2, [r4, #16]
 80081d4:	f8cd a000 	str.w	sl, [sp]
 80081d8:	464b      	mov	r3, r9
 80081da:	aa03      	add	r2, sp, #12
 80081dc:	4621      	mov	r1, r4
 80081de:	4640      	mov	r0, r8
 80081e0:	f7ff fee6 	bl	8007fb0 <_printf_common>
 80081e4:	3001      	adds	r0, #1
 80081e6:	d14a      	bne.n	800827e <_printf_i+0x1f2>
 80081e8:	f04f 30ff 	mov.w	r0, #4294967295
 80081ec:	b004      	add	sp, #16
 80081ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081f2:	6823      	ldr	r3, [r4, #0]
 80081f4:	f043 0320 	orr.w	r3, r3, #32
 80081f8:	6023      	str	r3, [r4, #0]
 80081fa:	4833      	ldr	r0, [pc, #204]	@ (80082c8 <_printf_i+0x23c>)
 80081fc:	2778      	movs	r7, #120	@ 0x78
 80081fe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008202:	6823      	ldr	r3, [r4, #0]
 8008204:	6831      	ldr	r1, [r6, #0]
 8008206:	061f      	lsls	r7, r3, #24
 8008208:	f851 5b04 	ldr.w	r5, [r1], #4
 800820c:	d402      	bmi.n	8008214 <_printf_i+0x188>
 800820e:	065f      	lsls	r7, r3, #25
 8008210:	bf48      	it	mi
 8008212:	b2ad      	uxthmi	r5, r5
 8008214:	6031      	str	r1, [r6, #0]
 8008216:	07d9      	lsls	r1, r3, #31
 8008218:	bf44      	itt	mi
 800821a:	f043 0320 	orrmi.w	r3, r3, #32
 800821e:	6023      	strmi	r3, [r4, #0]
 8008220:	b11d      	cbz	r5, 800822a <_printf_i+0x19e>
 8008222:	2310      	movs	r3, #16
 8008224:	e7ac      	b.n	8008180 <_printf_i+0xf4>
 8008226:	4827      	ldr	r0, [pc, #156]	@ (80082c4 <_printf_i+0x238>)
 8008228:	e7e9      	b.n	80081fe <_printf_i+0x172>
 800822a:	6823      	ldr	r3, [r4, #0]
 800822c:	f023 0320 	bic.w	r3, r3, #32
 8008230:	6023      	str	r3, [r4, #0]
 8008232:	e7f6      	b.n	8008222 <_printf_i+0x196>
 8008234:	4616      	mov	r6, r2
 8008236:	e7bd      	b.n	80081b4 <_printf_i+0x128>
 8008238:	6833      	ldr	r3, [r6, #0]
 800823a:	6825      	ldr	r5, [r4, #0]
 800823c:	6961      	ldr	r1, [r4, #20]
 800823e:	1d18      	adds	r0, r3, #4
 8008240:	6030      	str	r0, [r6, #0]
 8008242:	062e      	lsls	r6, r5, #24
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	d501      	bpl.n	800824c <_printf_i+0x1c0>
 8008248:	6019      	str	r1, [r3, #0]
 800824a:	e002      	b.n	8008252 <_printf_i+0x1c6>
 800824c:	0668      	lsls	r0, r5, #25
 800824e:	d5fb      	bpl.n	8008248 <_printf_i+0x1bc>
 8008250:	8019      	strh	r1, [r3, #0]
 8008252:	2300      	movs	r3, #0
 8008254:	6123      	str	r3, [r4, #16]
 8008256:	4616      	mov	r6, r2
 8008258:	e7bc      	b.n	80081d4 <_printf_i+0x148>
 800825a:	6833      	ldr	r3, [r6, #0]
 800825c:	1d1a      	adds	r2, r3, #4
 800825e:	6032      	str	r2, [r6, #0]
 8008260:	681e      	ldr	r6, [r3, #0]
 8008262:	6862      	ldr	r2, [r4, #4]
 8008264:	2100      	movs	r1, #0
 8008266:	4630      	mov	r0, r6
 8008268:	f7f7 ffba 	bl	80001e0 <memchr>
 800826c:	b108      	cbz	r0, 8008272 <_printf_i+0x1e6>
 800826e:	1b80      	subs	r0, r0, r6
 8008270:	6060      	str	r0, [r4, #4]
 8008272:	6863      	ldr	r3, [r4, #4]
 8008274:	6123      	str	r3, [r4, #16]
 8008276:	2300      	movs	r3, #0
 8008278:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800827c:	e7aa      	b.n	80081d4 <_printf_i+0x148>
 800827e:	6923      	ldr	r3, [r4, #16]
 8008280:	4632      	mov	r2, r6
 8008282:	4649      	mov	r1, r9
 8008284:	4640      	mov	r0, r8
 8008286:	47d0      	blx	sl
 8008288:	3001      	adds	r0, #1
 800828a:	d0ad      	beq.n	80081e8 <_printf_i+0x15c>
 800828c:	6823      	ldr	r3, [r4, #0]
 800828e:	079b      	lsls	r3, r3, #30
 8008290:	d413      	bmi.n	80082ba <_printf_i+0x22e>
 8008292:	68e0      	ldr	r0, [r4, #12]
 8008294:	9b03      	ldr	r3, [sp, #12]
 8008296:	4298      	cmp	r0, r3
 8008298:	bfb8      	it	lt
 800829a:	4618      	movlt	r0, r3
 800829c:	e7a6      	b.n	80081ec <_printf_i+0x160>
 800829e:	2301      	movs	r3, #1
 80082a0:	4632      	mov	r2, r6
 80082a2:	4649      	mov	r1, r9
 80082a4:	4640      	mov	r0, r8
 80082a6:	47d0      	blx	sl
 80082a8:	3001      	adds	r0, #1
 80082aa:	d09d      	beq.n	80081e8 <_printf_i+0x15c>
 80082ac:	3501      	adds	r5, #1
 80082ae:	68e3      	ldr	r3, [r4, #12]
 80082b0:	9903      	ldr	r1, [sp, #12]
 80082b2:	1a5b      	subs	r3, r3, r1
 80082b4:	42ab      	cmp	r3, r5
 80082b6:	dcf2      	bgt.n	800829e <_printf_i+0x212>
 80082b8:	e7eb      	b.n	8008292 <_printf_i+0x206>
 80082ba:	2500      	movs	r5, #0
 80082bc:	f104 0619 	add.w	r6, r4, #25
 80082c0:	e7f5      	b.n	80082ae <_printf_i+0x222>
 80082c2:	bf00      	nop
 80082c4:	08009072 	.word	0x08009072
 80082c8:	08009083 	.word	0x08009083

080082cc <__sflush_r>:
 80082cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80082d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082d4:	0716      	lsls	r6, r2, #28
 80082d6:	4605      	mov	r5, r0
 80082d8:	460c      	mov	r4, r1
 80082da:	d454      	bmi.n	8008386 <__sflush_r+0xba>
 80082dc:	684b      	ldr	r3, [r1, #4]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	dc02      	bgt.n	80082e8 <__sflush_r+0x1c>
 80082e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	dd48      	ble.n	800837a <__sflush_r+0xae>
 80082e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80082ea:	2e00      	cmp	r6, #0
 80082ec:	d045      	beq.n	800837a <__sflush_r+0xae>
 80082ee:	2300      	movs	r3, #0
 80082f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80082f4:	682f      	ldr	r7, [r5, #0]
 80082f6:	6a21      	ldr	r1, [r4, #32]
 80082f8:	602b      	str	r3, [r5, #0]
 80082fa:	d030      	beq.n	800835e <__sflush_r+0x92>
 80082fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80082fe:	89a3      	ldrh	r3, [r4, #12]
 8008300:	0759      	lsls	r1, r3, #29
 8008302:	d505      	bpl.n	8008310 <__sflush_r+0x44>
 8008304:	6863      	ldr	r3, [r4, #4]
 8008306:	1ad2      	subs	r2, r2, r3
 8008308:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800830a:	b10b      	cbz	r3, 8008310 <__sflush_r+0x44>
 800830c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800830e:	1ad2      	subs	r2, r2, r3
 8008310:	2300      	movs	r3, #0
 8008312:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008314:	6a21      	ldr	r1, [r4, #32]
 8008316:	4628      	mov	r0, r5
 8008318:	47b0      	blx	r6
 800831a:	1c43      	adds	r3, r0, #1
 800831c:	89a3      	ldrh	r3, [r4, #12]
 800831e:	d106      	bne.n	800832e <__sflush_r+0x62>
 8008320:	6829      	ldr	r1, [r5, #0]
 8008322:	291d      	cmp	r1, #29
 8008324:	d82b      	bhi.n	800837e <__sflush_r+0xb2>
 8008326:	4a2a      	ldr	r2, [pc, #168]	@ (80083d0 <__sflush_r+0x104>)
 8008328:	410a      	asrs	r2, r1
 800832a:	07d6      	lsls	r6, r2, #31
 800832c:	d427      	bmi.n	800837e <__sflush_r+0xb2>
 800832e:	2200      	movs	r2, #0
 8008330:	6062      	str	r2, [r4, #4]
 8008332:	04d9      	lsls	r1, r3, #19
 8008334:	6922      	ldr	r2, [r4, #16]
 8008336:	6022      	str	r2, [r4, #0]
 8008338:	d504      	bpl.n	8008344 <__sflush_r+0x78>
 800833a:	1c42      	adds	r2, r0, #1
 800833c:	d101      	bne.n	8008342 <__sflush_r+0x76>
 800833e:	682b      	ldr	r3, [r5, #0]
 8008340:	b903      	cbnz	r3, 8008344 <__sflush_r+0x78>
 8008342:	6560      	str	r0, [r4, #84]	@ 0x54
 8008344:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008346:	602f      	str	r7, [r5, #0]
 8008348:	b1b9      	cbz	r1, 800837a <__sflush_r+0xae>
 800834a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800834e:	4299      	cmp	r1, r3
 8008350:	d002      	beq.n	8008358 <__sflush_r+0x8c>
 8008352:	4628      	mov	r0, r5
 8008354:	f7ff fbf2 	bl	8007b3c <_free_r>
 8008358:	2300      	movs	r3, #0
 800835a:	6363      	str	r3, [r4, #52]	@ 0x34
 800835c:	e00d      	b.n	800837a <__sflush_r+0xae>
 800835e:	2301      	movs	r3, #1
 8008360:	4628      	mov	r0, r5
 8008362:	47b0      	blx	r6
 8008364:	4602      	mov	r2, r0
 8008366:	1c50      	adds	r0, r2, #1
 8008368:	d1c9      	bne.n	80082fe <__sflush_r+0x32>
 800836a:	682b      	ldr	r3, [r5, #0]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d0c6      	beq.n	80082fe <__sflush_r+0x32>
 8008370:	2b1d      	cmp	r3, #29
 8008372:	d001      	beq.n	8008378 <__sflush_r+0xac>
 8008374:	2b16      	cmp	r3, #22
 8008376:	d11e      	bne.n	80083b6 <__sflush_r+0xea>
 8008378:	602f      	str	r7, [r5, #0]
 800837a:	2000      	movs	r0, #0
 800837c:	e022      	b.n	80083c4 <__sflush_r+0xf8>
 800837e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008382:	b21b      	sxth	r3, r3
 8008384:	e01b      	b.n	80083be <__sflush_r+0xf2>
 8008386:	690f      	ldr	r7, [r1, #16]
 8008388:	2f00      	cmp	r7, #0
 800838a:	d0f6      	beq.n	800837a <__sflush_r+0xae>
 800838c:	0793      	lsls	r3, r2, #30
 800838e:	680e      	ldr	r6, [r1, #0]
 8008390:	bf08      	it	eq
 8008392:	694b      	ldreq	r3, [r1, #20]
 8008394:	600f      	str	r7, [r1, #0]
 8008396:	bf18      	it	ne
 8008398:	2300      	movne	r3, #0
 800839a:	eba6 0807 	sub.w	r8, r6, r7
 800839e:	608b      	str	r3, [r1, #8]
 80083a0:	f1b8 0f00 	cmp.w	r8, #0
 80083a4:	dde9      	ble.n	800837a <__sflush_r+0xae>
 80083a6:	6a21      	ldr	r1, [r4, #32]
 80083a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80083aa:	4643      	mov	r3, r8
 80083ac:	463a      	mov	r2, r7
 80083ae:	4628      	mov	r0, r5
 80083b0:	47b0      	blx	r6
 80083b2:	2800      	cmp	r0, #0
 80083b4:	dc08      	bgt.n	80083c8 <__sflush_r+0xfc>
 80083b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083be:	81a3      	strh	r3, [r4, #12]
 80083c0:	f04f 30ff 	mov.w	r0, #4294967295
 80083c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083c8:	4407      	add	r7, r0
 80083ca:	eba8 0800 	sub.w	r8, r8, r0
 80083ce:	e7e7      	b.n	80083a0 <__sflush_r+0xd4>
 80083d0:	dfbffffe 	.word	0xdfbffffe

080083d4 <_fflush_r>:
 80083d4:	b538      	push	{r3, r4, r5, lr}
 80083d6:	690b      	ldr	r3, [r1, #16]
 80083d8:	4605      	mov	r5, r0
 80083da:	460c      	mov	r4, r1
 80083dc:	b913      	cbnz	r3, 80083e4 <_fflush_r+0x10>
 80083de:	2500      	movs	r5, #0
 80083e0:	4628      	mov	r0, r5
 80083e2:	bd38      	pop	{r3, r4, r5, pc}
 80083e4:	b118      	cbz	r0, 80083ee <_fflush_r+0x1a>
 80083e6:	6a03      	ldr	r3, [r0, #32]
 80083e8:	b90b      	cbnz	r3, 80083ee <_fflush_r+0x1a>
 80083ea:	f7ff fa8d 	bl	8007908 <__sinit>
 80083ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d0f3      	beq.n	80083de <_fflush_r+0xa>
 80083f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80083f8:	07d0      	lsls	r0, r2, #31
 80083fa:	d404      	bmi.n	8008406 <_fflush_r+0x32>
 80083fc:	0599      	lsls	r1, r3, #22
 80083fe:	d402      	bmi.n	8008406 <_fflush_r+0x32>
 8008400:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008402:	f7ff fb98 	bl	8007b36 <__retarget_lock_acquire_recursive>
 8008406:	4628      	mov	r0, r5
 8008408:	4621      	mov	r1, r4
 800840a:	f7ff ff5f 	bl	80082cc <__sflush_r>
 800840e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008410:	07da      	lsls	r2, r3, #31
 8008412:	4605      	mov	r5, r0
 8008414:	d4e4      	bmi.n	80083e0 <_fflush_r+0xc>
 8008416:	89a3      	ldrh	r3, [r4, #12]
 8008418:	059b      	lsls	r3, r3, #22
 800841a:	d4e1      	bmi.n	80083e0 <_fflush_r+0xc>
 800841c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800841e:	f7ff fb8b 	bl	8007b38 <__retarget_lock_release_recursive>
 8008422:	e7dd      	b.n	80083e0 <_fflush_r+0xc>

08008424 <__swbuf_r>:
 8008424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008426:	460e      	mov	r6, r1
 8008428:	4614      	mov	r4, r2
 800842a:	4605      	mov	r5, r0
 800842c:	b118      	cbz	r0, 8008436 <__swbuf_r+0x12>
 800842e:	6a03      	ldr	r3, [r0, #32]
 8008430:	b90b      	cbnz	r3, 8008436 <__swbuf_r+0x12>
 8008432:	f7ff fa69 	bl	8007908 <__sinit>
 8008436:	69a3      	ldr	r3, [r4, #24]
 8008438:	60a3      	str	r3, [r4, #8]
 800843a:	89a3      	ldrh	r3, [r4, #12]
 800843c:	071a      	lsls	r2, r3, #28
 800843e:	d501      	bpl.n	8008444 <__swbuf_r+0x20>
 8008440:	6923      	ldr	r3, [r4, #16]
 8008442:	b943      	cbnz	r3, 8008456 <__swbuf_r+0x32>
 8008444:	4621      	mov	r1, r4
 8008446:	4628      	mov	r0, r5
 8008448:	f000 f82a 	bl	80084a0 <__swsetup_r>
 800844c:	b118      	cbz	r0, 8008456 <__swbuf_r+0x32>
 800844e:	f04f 37ff 	mov.w	r7, #4294967295
 8008452:	4638      	mov	r0, r7
 8008454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008456:	6823      	ldr	r3, [r4, #0]
 8008458:	6922      	ldr	r2, [r4, #16]
 800845a:	1a98      	subs	r0, r3, r2
 800845c:	6963      	ldr	r3, [r4, #20]
 800845e:	b2f6      	uxtb	r6, r6
 8008460:	4283      	cmp	r3, r0
 8008462:	4637      	mov	r7, r6
 8008464:	dc05      	bgt.n	8008472 <__swbuf_r+0x4e>
 8008466:	4621      	mov	r1, r4
 8008468:	4628      	mov	r0, r5
 800846a:	f7ff ffb3 	bl	80083d4 <_fflush_r>
 800846e:	2800      	cmp	r0, #0
 8008470:	d1ed      	bne.n	800844e <__swbuf_r+0x2a>
 8008472:	68a3      	ldr	r3, [r4, #8]
 8008474:	3b01      	subs	r3, #1
 8008476:	60a3      	str	r3, [r4, #8]
 8008478:	6823      	ldr	r3, [r4, #0]
 800847a:	1c5a      	adds	r2, r3, #1
 800847c:	6022      	str	r2, [r4, #0]
 800847e:	701e      	strb	r6, [r3, #0]
 8008480:	6962      	ldr	r2, [r4, #20]
 8008482:	1c43      	adds	r3, r0, #1
 8008484:	429a      	cmp	r2, r3
 8008486:	d004      	beq.n	8008492 <__swbuf_r+0x6e>
 8008488:	89a3      	ldrh	r3, [r4, #12]
 800848a:	07db      	lsls	r3, r3, #31
 800848c:	d5e1      	bpl.n	8008452 <__swbuf_r+0x2e>
 800848e:	2e0a      	cmp	r6, #10
 8008490:	d1df      	bne.n	8008452 <__swbuf_r+0x2e>
 8008492:	4621      	mov	r1, r4
 8008494:	4628      	mov	r0, r5
 8008496:	f7ff ff9d 	bl	80083d4 <_fflush_r>
 800849a:	2800      	cmp	r0, #0
 800849c:	d0d9      	beq.n	8008452 <__swbuf_r+0x2e>
 800849e:	e7d6      	b.n	800844e <__swbuf_r+0x2a>

080084a0 <__swsetup_r>:
 80084a0:	b538      	push	{r3, r4, r5, lr}
 80084a2:	4b29      	ldr	r3, [pc, #164]	@ (8008548 <__swsetup_r+0xa8>)
 80084a4:	4605      	mov	r5, r0
 80084a6:	6818      	ldr	r0, [r3, #0]
 80084a8:	460c      	mov	r4, r1
 80084aa:	b118      	cbz	r0, 80084b4 <__swsetup_r+0x14>
 80084ac:	6a03      	ldr	r3, [r0, #32]
 80084ae:	b90b      	cbnz	r3, 80084b4 <__swsetup_r+0x14>
 80084b0:	f7ff fa2a 	bl	8007908 <__sinit>
 80084b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084b8:	0719      	lsls	r1, r3, #28
 80084ba:	d422      	bmi.n	8008502 <__swsetup_r+0x62>
 80084bc:	06da      	lsls	r2, r3, #27
 80084be:	d407      	bmi.n	80084d0 <__swsetup_r+0x30>
 80084c0:	2209      	movs	r2, #9
 80084c2:	602a      	str	r2, [r5, #0]
 80084c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084c8:	81a3      	strh	r3, [r4, #12]
 80084ca:	f04f 30ff 	mov.w	r0, #4294967295
 80084ce:	e033      	b.n	8008538 <__swsetup_r+0x98>
 80084d0:	0758      	lsls	r0, r3, #29
 80084d2:	d512      	bpl.n	80084fa <__swsetup_r+0x5a>
 80084d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80084d6:	b141      	cbz	r1, 80084ea <__swsetup_r+0x4a>
 80084d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80084dc:	4299      	cmp	r1, r3
 80084de:	d002      	beq.n	80084e6 <__swsetup_r+0x46>
 80084e0:	4628      	mov	r0, r5
 80084e2:	f7ff fb2b 	bl	8007b3c <_free_r>
 80084e6:	2300      	movs	r3, #0
 80084e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80084ea:	89a3      	ldrh	r3, [r4, #12]
 80084ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80084f0:	81a3      	strh	r3, [r4, #12]
 80084f2:	2300      	movs	r3, #0
 80084f4:	6063      	str	r3, [r4, #4]
 80084f6:	6923      	ldr	r3, [r4, #16]
 80084f8:	6023      	str	r3, [r4, #0]
 80084fa:	89a3      	ldrh	r3, [r4, #12]
 80084fc:	f043 0308 	orr.w	r3, r3, #8
 8008500:	81a3      	strh	r3, [r4, #12]
 8008502:	6923      	ldr	r3, [r4, #16]
 8008504:	b94b      	cbnz	r3, 800851a <__swsetup_r+0x7a>
 8008506:	89a3      	ldrh	r3, [r4, #12]
 8008508:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800850c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008510:	d003      	beq.n	800851a <__swsetup_r+0x7a>
 8008512:	4621      	mov	r1, r4
 8008514:	4628      	mov	r0, r5
 8008516:	f000 f84f 	bl	80085b8 <__smakebuf_r>
 800851a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800851e:	f013 0201 	ands.w	r2, r3, #1
 8008522:	d00a      	beq.n	800853a <__swsetup_r+0x9a>
 8008524:	2200      	movs	r2, #0
 8008526:	60a2      	str	r2, [r4, #8]
 8008528:	6962      	ldr	r2, [r4, #20]
 800852a:	4252      	negs	r2, r2
 800852c:	61a2      	str	r2, [r4, #24]
 800852e:	6922      	ldr	r2, [r4, #16]
 8008530:	b942      	cbnz	r2, 8008544 <__swsetup_r+0xa4>
 8008532:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008536:	d1c5      	bne.n	80084c4 <__swsetup_r+0x24>
 8008538:	bd38      	pop	{r3, r4, r5, pc}
 800853a:	0799      	lsls	r1, r3, #30
 800853c:	bf58      	it	pl
 800853e:	6962      	ldrpl	r2, [r4, #20]
 8008540:	60a2      	str	r2, [r4, #8]
 8008542:	e7f4      	b.n	800852e <__swsetup_r+0x8e>
 8008544:	2000      	movs	r0, #0
 8008546:	e7f7      	b.n	8008538 <__swsetup_r+0x98>
 8008548:	20000018 	.word	0x20000018

0800854c <_sbrk_r>:
 800854c:	b538      	push	{r3, r4, r5, lr}
 800854e:	4d06      	ldr	r5, [pc, #24]	@ (8008568 <_sbrk_r+0x1c>)
 8008550:	2300      	movs	r3, #0
 8008552:	4604      	mov	r4, r0
 8008554:	4608      	mov	r0, r1
 8008556:	602b      	str	r3, [r5, #0]
 8008558:	f7f9 fed8 	bl	800230c <_sbrk>
 800855c:	1c43      	adds	r3, r0, #1
 800855e:	d102      	bne.n	8008566 <_sbrk_r+0x1a>
 8008560:	682b      	ldr	r3, [r5, #0]
 8008562:	b103      	cbz	r3, 8008566 <_sbrk_r+0x1a>
 8008564:	6023      	str	r3, [r4, #0]
 8008566:	bd38      	pop	{r3, r4, r5, pc}
 8008568:	20000540 	.word	0x20000540

0800856c <__swhatbuf_r>:
 800856c:	b570      	push	{r4, r5, r6, lr}
 800856e:	460c      	mov	r4, r1
 8008570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008574:	2900      	cmp	r1, #0
 8008576:	b096      	sub	sp, #88	@ 0x58
 8008578:	4615      	mov	r5, r2
 800857a:	461e      	mov	r6, r3
 800857c:	da0d      	bge.n	800859a <__swhatbuf_r+0x2e>
 800857e:	89a3      	ldrh	r3, [r4, #12]
 8008580:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008584:	f04f 0100 	mov.w	r1, #0
 8008588:	bf14      	ite	ne
 800858a:	2340      	movne	r3, #64	@ 0x40
 800858c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008590:	2000      	movs	r0, #0
 8008592:	6031      	str	r1, [r6, #0]
 8008594:	602b      	str	r3, [r5, #0]
 8008596:	b016      	add	sp, #88	@ 0x58
 8008598:	bd70      	pop	{r4, r5, r6, pc}
 800859a:	466a      	mov	r2, sp
 800859c:	f000 f848 	bl	8008630 <_fstat_r>
 80085a0:	2800      	cmp	r0, #0
 80085a2:	dbec      	blt.n	800857e <__swhatbuf_r+0x12>
 80085a4:	9901      	ldr	r1, [sp, #4]
 80085a6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80085aa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80085ae:	4259      	negs	r1, r3
 80085b0:	4159      	adcs	r1, r3
 80085b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80085b6:	e7eb      	b.n	8008590 <__swhatbuf_r+0x24>

080085b8 <__smakebuf_r>:
 80085b8:	898b      	ldrh	r3, [r1, #12]
 80085ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085bc:	079d      	lsls	r5, r3, #30
 80085be:	4606      	mov	r6, r0
 80085c0:	460c      	mov	r4, r1
 80085c2:	d507      	bpl.n	80085d4 <__smakebuf_r+0x1c>
 80085c4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80085c8:	6023      	str	r3, [r4, #0]
 80085ca:	6123      	str	r3, [r4, #16]
 80085cc:	2301      	movs	r3, #1
 80085ce:	6163      	str	r3, [r4, #20]
 80085d0:	b003      	add	sp, #12
 80085d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085d4:	ab01      	add	r3, sp, #4
 80085d6:	466a      	mov	r2, sp
 80085d8:	f7ff ffc8 	bl	800856c <__swhatbuf_r>
 80085dc:	9f00      	ldr	r7, [sp, #0]
 80085de:	4605      	mov	r5, r0
 80085e0:	4639      	mov	r1, r7
 80085e2:	4630      	mov	r0, r6
 80085e4:	f7ff fb16 	bl	8007c14 <_malloc_r>
 80085e8:	b948      	cbnz	r0, 80085fe <__smakebuf_r+0x46>
 80085ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085ee:	059a      	lsls	r2, r3, #22
 80085f0:	d4ee      	bmi.n	80085d0 <__smakebuf_r+0x18>
 80085f2:	f023 0303 	bic.w	r3, r3, #3
 80085f6:	f043 0302 	orr.w	r3, r3, #2
 80085fa:	81a3      	strh	r3, [r4, #12]
 80085fc:	e7e2      	b.n	80085c4 <__smakebuf_r+0xc>
 80085fe:	89a3      	ldrh	r3, [r4, #12]
 8008600:	6020      	str	r0, [r4, #0]
 8008602:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008606:	81a3      	strh	r3, [r4, #12]
 8008608:	9b01      	ldr	r3, [sp, #4]
 800860a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800860e:	b15b      	cbz	r3, 8008628 <__smakebuf_r+0x70>
 8008610:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008614:	4630      	mov	r0, r6
 8008616:	f000 f81d 	bl	8008654 <_isatty_r>
 800861a:	b128      	cbz	r0, 8008628 <__smakebuf_r+0x70>
 800861c:	89a3      	ldrh	r3, [r4, #12]
 800861e:	f023 0303 	bic.w	r3, r3, #3
 8008622:	f043 0301 	orr.w	r3, r3, #1
 8008626:	81a3      	strh	r3, [r4, #12]
 8008628:	89a3      	ldrh	r3, [r4, #12]
 800862a:	431d      	orrs	r5, r3
 800862c:	81a5      	strh	r5, [r4, #12]
 800862e:	e7cf      	b.n	80085d0 <__smakebuf_r+0x18>

08008630 <_fstat_r>:
 8008630:	b538      	push	{r3, r4, r5, lr}
 8008632:	4d07      	ldr	r5, [pc, #28]	@ (8008650 <_fstat_r+0x20>)
 8008634:	2300      	movs	r3, #0
 8008636:	4604      	mov	r4, r0
 8008638:	4608      	mov	r0, r1
 800863a:	4611      	mov	r1, r2
 800863c:	602b      	str	r3, [r5, #0]
 800863e:	f7f9 fe3c 	bl	80022ba <_fstat>
 8008642:	1c43      	adds	r3, r0, #1
 8008644:	d102      	bne.n	800864c <_fstat_r+0x1c>
 8008646:	682b      	ldr	r3, [r5, #0]
 8008648:	b103      	cbz	r3, 800864c <_fstat_r+0x1c>
 800864a:	6023      	str	r3, [r4, #0]
 800864c:	bd38      	pop	{r3, r4, r5, pc}
 800864e:	bf00      	nop
 8008650:	20000540 	.word	0x20000540

08008654 <_isatty_r>:
 8008654:	b538      	push	{r3, r4, r5, lr}
 8008656:	4d06      	ldr	r5, [pc, #24]	@ (8008670 <_isatty_r+0x1c>)
 8008658:	2300      	movs	r3, #0
 800865a:	4604      	mov	r4, r0
 800865c:	4608      	mov	r0, r1
 800865e:	602b      	str	r3, [r5, #0]
 8008660:	f7f9 fe3b 	bl	80022da <_isatty>
 8008664:	1c43      	adds	r3, r0, #1
 8008666:	d102      	bne.n	800866e <_isatty_r+0x1a>
 8008668:	682b      	ldr	r3, [r5, #0]
 800866a:	b103      	cbz	r3, 800866e <_isatty_r+0x1a>
 800866c:	6023      	str	r3, [r4, #0]
 800866e:	bd38      	pop	{r3, r4, r5, pc}
 8008670:	20000540 	.word	0x20000540

08008674 <atan2>:
 8008674:	f000 b908 	b.w	8008888 <__ieee754_atan2>

08008678 <sqrt>:
 8008678:	b538      	push	{r3, r4, r5, lr}
 800867a:	ed2d 8b02 	vpush	{d8}
 800867e:	ec55 4b10 	vmov	r4, r5, d0
 8008682:	f000 f825 	bl	80086d0 <__ieee754_sqrt>
 8008686:	4622      	mov	r2, r4
 8008688:	462b      	mov	r3, r5
 800868a:	4620      	mov	r0, r4
 800868c:	4629      	mov	r1, r5
 800868e:	eeb0 8a40 	vmov.f32	s16, s0
 8008692:	eef0 8a60 	vmov.f32	s17, s1
 8008696:	f7f8 fa49 	bl	8000b2c <__aeabi_dcmpun>
 800869a:	b990      	cbnz	r0, 80086c2 <sqrt+0x4a>
 800869c:	2200      	movs	r2, #0
 800869e:	2300      	movs	r3, #0
 80086a0:	4620      	mov	r0, r4
 80086a2:	4629      	mov	r1, r5
 80086a4:	f7f8 fa1a 	bl	8000adc <__aeabi_dcmplt>
 80086a8:	b158      	cbz	r0, 80086c2 <sqrt+0x4a>
 80086aa:	f7ff fa19 	bl	8007ae0 <__errno>
 80086ae:	2321      	movs	r3, #33	@ 0x21
 80086b0:	6003      	str	r3, [r0, #0]
 80086b2:	2200      	movs	r2, #0
 80086b4:	2300      	movs	r3, #0
 80086b6:	4610      	mov	r0, r2
 80086b8:	4619      	mov	r1, r3
 80086ba:	f7f8 f8c7 	bl	800084c <__aeabi_ddiv>
 80086be:	ec41 0b18 	vmov	d8, r0, r1
 80086c2:	eeb0 0a48 	vmov.f32	s0, s16
 80086c6:	eef0 0a68 	vmov.f32	s1, s17
 80086ca:	ecbd 8b02 	vpop	{d8}
 80086ce:	bd38      	pop	{r3, r4, r5, pc}

080086d0 <__ieee754_sqrt>:
 80086d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086d4:	4a68      	ldr	r2, [pc, #416]	@ (8008878 <__ieee754_sqrt+0x1a8>)
 80086d6:	ec55 4b10 	vmov	r4, r5, d0
 80086da:	43aa      	bics	r2, r5
 80086dc:	462b      	mov	r3, r5
 80086de:	4621      	mov	r1, r4
 80086e0:	d110      	bne.n	8008704 <__ieee754_sqrt+0x34>
 80086e2:	4622      	mov	r2, r4
 80086e4:	4620      	mov	r0, r4
 80086e6:	4629      	mov	r1, r5
 80086e8:	f7f7 ff86 	bl	80005f8 <__aeabi_dmul>
 80086ec:	4602      	mov	r2, r0
 80086ee:	460b      	mov	r3, r1
 80086f0:	4620      	mov	r0, r4
 80086f2:	4629      	mov	r1, r5
 80086f4:	f7f7 fdca 	bl	800028c <__adddf3>
 80086f8:	4604      	mov	r4, r0
 80086fa:	460d      	mov	r5, r1
 80086fc:	ec45 4b10 	vmov	d0, r4, r5
 8008700:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008704:	2d00      	cmp	r5, #0
 8008706:	dc0e      	bgt.n	8008726 <__ieee754_sqrt+0x56>
 8008708:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800870c:	4322      	orrs	r2, r4
 800870e:	d0f5      	beq.n	80086fc <__ieee754_sqrt+0x2c>
 8008710:	b19d      	cbz	r5, 800873a <__ieee754_sqrt+0x6a>
 8008712:	4622      	mov	r2, r4
 8008714:	4620      	mov	r0, r4
 8008716:	4629      	mov	r1, r5
 8008718:	f7f7 fdb6 	bl	8000288 <__aeabi_dsub>
 800871c:	4602      	mov	r2, r0
 800871e:	460b      	mov	r3, r1
 8008720:	f7f8 f894 	bl	800084c <__aeabi_ddiv>
 8008724:	e7e8      	b.n	80086f8 <__ieee754_sqrt+0x28>
 8008726:	152a      	asrs	r2, r5, #20
 8008728:	d115      	bne.n	8008756 <__ieee754_sqrt+0x86>
 800872a:	2000      	movs	r0, #0
 800872c:	e009      	b.n	8008742 <__ieee754_sqrt+0x72>
 800872e:	0acb      	lsrs	r3, r1, #11
 8008730:	3a15      	subs	r2, #21
 8008732:	0549      	lsls	r1, r1, #21
 8008734:	2b00      	cmp	r3, #0
 8008736:	d0fa      	beq.n	800872e <__ieee754_sqrt+0x5e>
 8008738:	e7f7      	b.n	800872a <__ieee754_sqrt+0x5a>
 800873a:	462a      	mov	r2, r5
 800873c:	e7fa      	b.n	8008734 <__ieee754_sqrt+0x64>
 800873e:	005b      	lsls	r3, r3, #1
 8008740:	3001      	adds	r0, #1
 8008742:	02dc      	lsls	r4, r3, #11
 8008744:	d5fb      	bpl.n	800873e <__ieee754_sqrt+0x6e>
 8008746:	1e44      	subs	r4, r0, #1
 8008748:	1b12      	subs	r2, r2, r4
 800874a:	f1c0 0420 	rsb	r4, r0, #32
 800874e:	fa21 f404 	lsr.w	r4, r1, r4
 8008752:	4323      	orrs	r3, r4
 8008754:	4081      	lsls	r1, r0
 8008756:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800875a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800875e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008762:	07d2      	lsls	r2, r2, #31
 8008764:	bf5c      	itt	pl
 8008766:	005b      	lslpl	r3, r3, #1
 8008768:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800876c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008770:	bf58      	it	pl
 8008772:	0049      	lslpl	r1, r1, #1
 8008774:	2600      	movs	r6, #0
 8008776:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800877a:	106d      	asrs	r5, r5, #1
 800877c:	0049      	lsls	r1, r1, #1
 800877e:	2016      	movs	r0, #22
 8008780:	4632      	mov	r2, r6
 8008782:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8008786:	1917      	adds	r7, r2, r4
 8008788:	429f      	cmp	r7, r3
 800878a:	bfde      	ittt	le
 800878c:	193a      	addle	r2, r7, r4
 800878e:	1bdb      	suble	r3, r3, r7
 8008790:	1936      	addle	r6, r6, r4
 8008792:	0fcf      	lsrs	r7, r1, #31
 8008794:	3801      	subs	r0, #1
 8008796:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800879a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800879e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80087a2:	d1f0      	bne.n	8008786 <__ieee754_sqrt+0xb6>
 80087a4:	4604      	mov	r4, r0
 80087a6:	2720      	movs	r7, #32
 80087a8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80087ac:	429a      	cmp	r2, r3
 80087ae:	eb00 0e0c 	add.w	lr, r0, ip
 80087b2:	db02      	blt.n	80087ba <__ieee754_sqrt+0xea>
 80087b4:	d113      	bne.n	80087de <__ieee754_sqrt+0x10e>
 80087b6:	458e      	cmp	lr, r1
 80087b8:	d811      	bhi.n	80087de <__ieee754_sqrt+0x10e>
 80087ba:	f1be 0f00 	cmp.w	lr, #0
 80087be:	eb0e 000c 	add.w	r0, lr, ip
 80087c2:	da42      	bge.n	800884a <__ieee754_sqrt+0x17a>
 80087c4:	2800      	cmp	r0, #0
 80087c6:	db40      	blt.n	800884a <__ieee754_sqrt+0x17a>
 80087c8:	f102 0801 	add.w	r8, r2, #1
 80087cc:	1a9b      	subs	r3, r3, r2
 80087ce:	458e      	cmp	lr, r1
 80087d0:	bf88      	it	hi
 80087d2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80087d6:	eba1 010e 	sub.w	r1, r1, lr
 80087da:	4464      	add	r4, ip
 80087dc:	4642      	mov	r2, r8
 80087de:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80087e2:	3f01      	subs	r7, #1
 80087e4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80087e8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80087ec:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80087f0:	d1dc      	bne.n	80087ac <__ieee754_sqrt+0xdc>
 80087f2:	4319      	orrs	r1, r3
 80087f4:	d01b      	beq.n	800882e <__ieee754_sqrt+0x15e>
 80087f6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800887c <__ieee754_sqrt+0x1ac>
 80087fa:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8008880 <__ieee754_sqrt+0x1b0>
 80087fe:	e9da 0100 	ldrd	r0, r1, [sl]
 8008802:	e9db 2300 	ldrd	r2, r3, [fp]
 8008806:	f7f7 fd3f 	bl	8000288 <__aeabi_dsub>
 800880a:	e9da 8900 	ldrd	r8, r9, [sl]
 800880e:	4602      	mov	r2, r0
 8008810:	460b      	mov	r3, r1
 8008812:	4640      	mov	r0, r8
 8008814:	4649      	mov	r1, r9
 8008816:	f7f8 f96b 	bl	8000af0 <__aeabi_dcmple>
 800881a:	b140      	cbz	r0, 800882e <__ieee754_sqrt+0x15e>
 800881c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8008820:	e9da 0100 	ldrd	r0, r1, [sl]
 8008824:	e9db 2300 	ldrd	r2, r3, [fp]
 8008828:	d111      	bne.n	800884e <__ieee754_sqrt+0x17e>
 800882a:	3601      	adds	r6, #1
 800882c:	463c      	mov	r4, r7
 800882e:	1072      	asrs	r2, r6, #1
 8008830:	0863      	lsrs	r3, r4, #1
 8008832:	07f1      	lsls	r1, r6, #31
 8008834:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8008838:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800883c:	bf48      	it	mi
 800883e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8008842:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8008846:	4618      	mov	r0, r3
 8008848:	e756      	b.n	80086f8 <__ieee754_sqrt+0x28>
 800884a:	4690      	mov	r8, r2
 800884c:	e7be      	b.n	80087cc <__ieee754_sqrt+0xfc>
 800884e:	f7f7 fd1d 	bl	800028c <__adddf3>
 8008852:	e9da 8900 	ldrd	r8, r9, [sl]
 8008856:	4602      	mov	r2, r0
 8008858:	460b      	mov	r3, r1
 800885a:	4640      	mov	r0, r8
 800885c:	4649      	mov	r1, r9
 800885e:	f7f8 f93d 	bl	8000adc <__aeabi_dcmplt>
 8008862:	b120      	cbz	r0, 800886e <__ieee754_sqrt+0x19e>
 8008864:	1ca0      	adds	r0, r4, #2
 8008866:	bf08      	it	eq
 8008868:	3601      	addeq	r6, #1
 800886a:	3402      	adds	r4, #2
 800886c:	e7df      	b.n	800882e <__ieee754_sqrt+0x15e>
 800886e:	1c63      	adds	r3, r4, #1
 8008870:	f023 0401 	bic.w	r4, r3, #1
 8008874:	e7db      	b.n	800882e <__ieee754_sqrt+0x15e>
 8008876:	bf00      	nop
 8008878:	7ff00000 	.word	0x7ff00000
 800887c:	20000070 	.word	0x20000070
 8008880:	20000068 	.word	0x20000068
 8008884:	00000000 	.word	0x00000000

08008888 <__ieee754_atan2>:
 8008888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800888c:	ec57 6b11 	vmov	r6, r7, d1
 8008890:	4273      	negs	r3, r6
 8008892:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8008a10 <__ieee754_atan2+0x188>
 8008896:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800889a:	4333      	orrs	r3, r6
 800889c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80088a0:	4543      	cmp	r3, r8
 80088a2:	ec51 0b10 	vmov	r0, r1, d0
 80088a6:	4635      	mov	r5, r6
 80088a8:	d809      	bhi.n	80088be <__ieee754_atan2+0x36>
 80088aa:	4244      	negs	r4, r0
 80088ac:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80088b0:	4304      	orrs	r4, r0
 80088b2:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80088b6:	4544      	cmp	r4, r8
 80088b8:	468e      	mov	lr, r1
 80088ba:	4681      	mov	r9, r0
 80088bc:	d907      	bls.n	80088ce <__ieee754_atan2+0x46>
 80088be:	4632      	mov	r2, r6
 80088c0:	463b      	mov	r3, r7
 80088c2:	f7f7 fce3 	bl	800028c <__adddf3>
 80088c6:	ec41 0b10 	vmov	d0, r0, r1
 80088ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088ce:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 80088d2:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 80088d6:	4334      	orrs	r4, r6
 80088d8:	d103      	bne.n	80088e2 <__ieee754_atan2+0x5a>
 80088da:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088de:	f000 b89b 	b.w	8008a18 <atan>
 80088e2:	17bc      	asrs	r4, r7, #30
 80088e4:	f004 0402 	and.w	r4, r4, #2
 80088e8:	ea53 0909 	orrs.w	r9, r3, r9
 80088ec:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80088f0:	d107      	bne.n	8008902 <__ieee754_atan2+0x7a>
 80088f2:	2c02      	cmp	r4, #2
 80088f4:	d05f      	beq.n	80089b6 <__ieee754_atan2+0x12e>
 80088f6:	2c03      	cmp	r4, #3
 80088f8:	d1e5      	bne.n	80088c6 <__ieee754_atan2+0x3e>
 80088fa:	a141      	add	r1, pc, #260	@ (adr r1, 8008a00 <__ieee754_atan2+0x178>)
 80088fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008900:	e7e1      	b.n	80088c6 <__ieee754_atan2+0x3e>
 8008902:	4315      	orrs	r5, r2
 8008904:	d106      	bne.n	8008914 <__ieee754_atan2+0x8c>
 8008906:	f1be 0f00 	cmp.w	lr, #0
 800890a:	da5f      	bge.n	80089cc <__ieee754_atan2+0x144>
 800890c:	a13e      	add	r1, pc, #248	@ (adr r1, 8008a08 <__ieee754_atan2+0x180>)
 800890e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008912:	e7d8      	b.n	80088c6 <__ieee754_atan2+0x3e>
 8008914:	4542      	cmp	r2, r8
 8008916:	d10f      	bne.n	8008938 <__ieee754_atan2+0xb0>
 8008918:	4293      	cmp	r3, r2
 800891a:	f104 34ff 	add.w	r4, r4, #4294967295
 800891e:	d107      	bne.n	8008930 <__ieee754_atan2+0xa8>
 8008920:	2c02      	cmp	r4, #2
 8008922:	d84c      	bhi.n	80089be <__ieee754_atan2+0x136>
 8008924:	4b34      	ldr	r3, [pc, #208]	@ (80089f8 <__ieee754_atan2+0x170>)
 8008926:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800892a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800892e:	e7ca      	b.n	80088c6 <__ieee754_atan2+0x3e>
 8008930:	2c02      	cmp	r4, #2
 8008932:	d848      	bhi.n	80089c6 <__ieee754_atan2+0x13e>
 8008934:	4b31      	ldr	r3, [pc, #196]	@ (80089fc <__ieee754_atan2+0x174>)
 8008936:	e7f6      	b.n	8008926 <__ieee754_atan2+0x9e>
 8008938:	4543      	cmp	r3, r8
 800893a:	d0e4      	beq.n	8008906 <__ieee754_atan2+0x7e>
 800893c:	1a9b      	subs	r3, r3, r2
 800893e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8008942:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008946:	da1e      	bge.n	8008986 <__ieee754_atan2+0xfe>
 8008948:	2f00      	cmp	r7, #0
 800894a:	da01      	bge.n	8008950 <__ieee754_atan2+0xc8>
 800894c:	323c      	adds	r2, #60	@ 0x3c
 800894e:	db1e      	blt.n	800898e <__ieee754_atan2+0x106>
 8008950:	4632      	mov	r2, r6
 8008952:	463b      	mov	r3, r7
 8008954:	f7f7 ff7a 	bl	800084c <__aeabi_ddiv>
 8008958:	ec41 0b10 	vmov	d0, r0, r1
 800895c:	f000 f9f4 	bl	8008d48 <fabs>
 8008960:	f000 f85a 	bl	8008a18 <atan>
 8008964:	ec51 0b10 	vmov	r0, r1, d0
 8008968:	2c01      	cmp	r4, #1
 800896a:	d013      	beq.n	8008994 <__ieee754_atan2+0x10c>
 800896c:	2c02      	cmp	r4, #2
 800896e:	d015      	beq.n	800899c <__ieee754_atan2+0x114>
 8008970:	2c00      	cmp	r4, #0
 8008972:	d0a8      	beq.n	80088c6 <__ieee754_atan2+0x3e>
 8008974:	a318      	add	r3, pc, #96	@ (adr r3, 80089d8 <__ieee754_atan2+0x150>)
 8008976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800897a:	f7f7 fc85 	bl	8000288 <__aeabi_dsub>
 800897e:	a318      	add	r3, pc, #96	@ (adr r3, 80089e0 <__ieee754_atan2+0x158>)
 8008980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008984:	e014      	b.n	80089b0 <__ieee754_atan2+0x128>
 8008986:	a118      	add	r1, pc, #96	@ (adr r1, 80089e8 <__ieee754_atan2+0x160>)
 8008988:	e9d1 0100 	ldrd	r0, r1, [r1]
 800898c:	e7ec      	b.n	8008968 <__ieee754_atan2+0xe0>
 800898e:	2000      	movs	r0, #0
 8008990:	2100      	movs	r1, #0
 8008992:	e7e9      	b.n	8008968 <__ieee754_atan2+0xe0>
 8008994:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008998:	4619      	mov	r1, r3
 800899a:	e794      	b.n	80088c6 <__ieee754_atan2+0x3e>
 800899c:	a30e      	add	r3, pc, #56	@ (adr r3, 80089d8 <__ieee754_atan2+0x150>)
 800899e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a2:	f7f7 fc71 	bl	8000288 <__aeabi_dsub>
 80089a6:	4602      	mov	r2, r0
 80089a8:	460b      	mov	r3, r1
 80089aa:	a10d      	add	r1, pc, #52	@ (adr r1, 80089e0 <__ieee754_atan2+0x158>)
 80089ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089b0:	f7f7 fc6a 	bl	8000288 <__aeabi_dsub>
 80089b4:	e787      	b.n	80088c6 <__ieee754_atan2+0x3e>
 80089b6:	a10a      	add	r1, pc, #40	@ (adr r1, 80089e0 <__ieee754_atan2+0x158>)
 80089b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089bc:	e783      	b.n	80088c6 <__ieee754_atan2+0x3e>
 80089be:	a10c      	add	r1, pc, #48	@ (adr r1, 80089f0 <__ieee754_atan2+0x168>)
 80089c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089c4:	e77f      	b.n	80088c6 <__ieee754_atan2+0x3e>
 80089c6:	2000      	movs	r0, #0
 80089c8:	2100      	movs	r1, #0
 80089ca:	e77c      	b.n	80088c6 <__ieee754_atan2+0x3e>
 80089cc:	a106      	add	r1, pc, #24	@ (adr r1, 80089e8 <__ieee754_atan2+0x160>)
 80089ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089d2:	e778      	b.n	80088c6 <__ieee754_atan2+0x3e>
 80089d4:	f3af 8000 	nop.w
 80089d8:	33145c07 	.word	0x33145c07
 80089dc:	3ca1a626 	.word	0x3ca1a626
 80089e0:	54442d18 	.word	0x54442d18
 80089e4:	400921fb 	.word	0x400921fb
 80089e8:	54442d18 	.word	0x54442d18
 80089ec:	3ff921fb 	.word	0x3ff921fb
 80089f0:	54442d18 	.word	0x54442d18
 80089f4:	3fe921fb 	.word	0x3fe921fb
 80089f8:	080090b0 	.word	0x080090b0
 80089fc:	08009098 	.word	0x08009098
 8008a00:	54442d18 	.word	0x54442d18
 8008a04:	c00921fb 	.word	0xc00921fb
 8008a08:	54442d18 	.word	0x54442d18
 8008a0c:	bff921fb 	.word	0xbff921fb
 8008a10:	7ff00000 	.word	0x7ff00000
 8008a14:	00000000 	.word	0x00000000

08008a18 <atan>:
 8008a18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a1c:	ec55 4b10 	vmov	r4, r5, d0
 8008a20:	4bbf      	ldr	r3, [pc, #764]	@ (8008d20 <atan+0x308>)
 8008a22:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8008a26:	429e      	cmp	r6, r3
 8008a28:	46ab      	mov	fp, r5
 8008a2a:	d918      	bls.n	8008a5e <atan+0x46>
 8008a2c:	4bbd      	ldr	r3, [pc, #756]	@ (8008d24 <atan+0x30c>)
 8008a2e:	429e      	cmp	r6, r3
 8008a30:	d801      	bhi.n	8008a36 <atan+0x1e>
 8008a32:	d109      	bne.n	8008a48 <atan+0x30>
 8008a34:	b144      	cbz	r4, 8008a48 <atan+0x30>
 8008a36:	4622      	mov	r2, r4
 8008a38:	462b      	mov	r3, r5
 8008a3a:	4620      	mov	r0, r4
 8008a3c:	4629      	mov	r1, r5
 8008a3e:	f7f7 fc25 	bl	800028c <__adddf3>
 8008a42:	4604      	mov	r4, r0
 8008a44:	460d      	mov	r5, r1
 8008a46:	e006      	b.n	8008a56 <atan+0x3e>
 8008a48:	f1bb 0f00 	cmp.w	fp, #0
 8008a4c:	f340 812b 	ble.w	8008ca6 <atan+0x28e>
 8008a50:	a597      	add	r5, pc, #604	@ (adr r5, 8008cb0 <atan+0x298>)
 8008a52:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008a56:	ec45 4b10 	vmov	d0, r4, r5
 8008a5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a5e:	4bb2      	ldr	r3, [pc, #712]	@ (8008d28 <atan+0x310>)
 8008a60:	429e      	cmp	r6, r3
 8008a62:	d813      	bhi.n	8008a8c <atan+0x74>
 8008a64:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8008a68:	429e      	cmp	r6, r3
 8008a6a:	d80c      	bhi.n	8008a86 <atan+0x6e>
 8008a6c:	a392      	add	r3, pc, #584	@ (adr r3, 8008cb8 <atan+0x2a0>)
 8008a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a72:	4620      	mov	r0, r4
 8008a74:	4629      	mov	r1, r5
 8008a76:	f7f7 fc09 	bl	800028c <__adddf3>
 8008a7a:	4bac      	ldr	r3, [pc, #688]	@ (8008d2c <atan+0x314>)
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	f7f8 f84b 	bl	8000b18 <__aeabi_dcmpgt>
 8008a82:	2800      	cmp	r0, #0
 8008a84:	d1e7      	bne.n	8008a56 <atan+0x3e>
 8008a86:	f04f 3aff 	mov.w	sl, #4294967295
 8008a8a:	e029      	b.n	8008ae0 <atan+0xc8>
 8008a8c:	f000 f95c 	bl	8008d48 <fabs>
 8008a90:	4ba7      	ldr	r3, [pc, #668]	@ (8008d30 <atan+0x318>)
 8008a92:	429e      	cmp	r6, r3
 8008a94:	ec55 4b10 	vmov	r4, r5, d0
 8008a98:	f200 80bc 	bhi.w	8008c14 <atan+0x1fc>
 8008a9c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8008aa0:	429e      	cmp	r6, r3
 8008aa2:	f200 809e 	bhi.w	8008be2 <atan+0x1ca>
 8008aa6:	4622      	mov	r2, r4
 8008aa8:	462b      	mov	r3, r5
 8008aaa:	4620      	mov	r0, r4
 8008aac:	4629      	mov	r1, r5
 8008aae:	f7f7 fbed 	bl	800028c <__adddf3>
 8008ab2:	4b9e      	ldr	r3, [pc, #632]	@ (8008d2c <atan+0x314>)
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	f7f7 fbe7 	bl	8000288 <__aeabi_dsub>
 8008aba:	2200      	movs	r2, #0
 8008abc:	4606      	mov	r6, r0
 8008abe:	460f      	mov	r7, r1
 8008ac0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008ac4:	4620      	mov	r0, r4
 8008ac6:	4629      	mov	r1, r5
 8008ac8:	f7f7 fbe0 	bl	800028c <__adddf3>
 8008acc:	4602      	mov	r2, r0
 8008ace:	460b      	mov	r3, r1
 8008ad0:	4630      	mov	r0, r6
 8008ad2:	4639      	mov	r1, r7
 8008ad4:	f7f7 feba 	bl	800084c <__aeabi_ddiv>
 8008ad8:	f04f 0a00 	mov.w	sl, #0
 8008adc:	4604      	mov	r4, r0
 8008ade:	460d      	mov	r5, r1
 8008ae0:	4622      	mov	r2, r4
 8008ae2:	462b      	mov	r3, r5
 8008ae4:	4620      	mov	r0, r4
 8008ae6:	4629      	mov	r1, r5
 8008ae8:	f7f7 fd86 	bl	80005f8 <__aeabi_dmul>
 8008aec:	4602      	mov	r2, r0
 8008aee:	460b      	mov	r3, r1
 8008af0:	4680      	mov	r8, r0
 8008af2:	4689      	mov	r9, r1
 8008af4:	f7f7 fd80 	bl	80005f8 <__aeabi_dmul>
 8008af8:	a371      	add	r3, pc, #452	@ (adr r3, 8008cc0 <atan+0x2a8>)
 8008afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008afe:	4606      	mov	r6, r0
 8008b00:	460f      	mov	r7, r1
 8008b02:	f7f7 fd79 	bl	80005f8 <__aeabi_dmul>
 8008b06:	a370      	add	r3, pc, #448	@ (adr r3, 8008cc8 <atan+0x2b0>)
 8008b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b0c:	f7f7 fbbe 	bl	800028c <__adddf3>
 8008b10:	4632      	mov	r2, r6
 8008b12:	463b      	mov	r3, r7
 8008b14:	f7f7 fd70 	bl	80005f8 <__aeabi_dmul>
 8008b18:	a36d      	add	r3, pc, #436	@ (adr r3, 8008cd0 <atan+0x2b8>)
 8008b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b1e:	f7f7 fbb5 	bl	800028c <__adddf3>
 8008b22:	4632      	mov	r2, r6
 8008b24:	463b      	mov	r3, r7
 8008b26:	f7f7 fd67 	bl	80005f8 <__aeabi_dmul>
 8008b2a:	a36b      	add	r3, pc, #428	@ (adr r3, 8008cd8 <atan+0x2c0>)
 8008b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b30:	f7f7 fbac 	bl	800028c <__adddf3>
 8008b34:	4632      	mov	r2, r6
 8008b36:	463b      	mov	r3, r7
 8008b38:	f7f7 fd5e 	bl	80005f8 <__aeabi_dmul>
 8008b3c:	a368      	add	r3, pc, #416	@ (adr r3, 8008ce0 <atan+0x2c8>)
 8008b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b42:	f7f7 fba3 	bl	800028c <__adddf3>
 8008b46:	4632      	mov	r2, r6
 8008b48:	463b      	mov	r3, r7
 8008b4a:	f7f7 fd55 	bl	80005f8 <__aeabi_dmul>
 8008b4e:	a366      	add	r3, pc, #408	@ (adr r3, 8008ce8 <atan+0x2d0>)
 8008b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b54:	f7f7 fb9a 	bl	800028c <__adddf3>
 8008b58:	4642      	mov	r2, r8
 8008b5a:	464b      	mov	r3, r9
 8008b5c:	f7f7 fd4c 	bl	80005f8 <__aeabi_dmul>
 8008b60:	a363      	add	r3, pc, #396	@ (adr r3, 8008cf0 <atan+0x2d8>)
 8008b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b66:	4680      	mov	r8, r0
 8008b68:	4689      	mov	r9, r1
 8008b6a:	4630      	mov	r0, r6
 8008b6c:	4639      	mov	r1, r7
 8008b6e:	f7f7 fd43 	bl	80005f8 <__aeabi_dmul>
 8008b72:	a361      	add	r3, pc, #388	@ (adr r3, 8008cf8 <atan+0x2e0>)
 8008b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b78:	f7f7 fb86 	bl	8000288 <__aeabi_dsub>
 8008b7c:	4632      	mov	r2, r6
 8008b7e:	463b      	mov	r3, r7
 8008b80:	f7f7 fd3a 	bl	80005f8 <__aeabi_dmul>
 8008b84:	a35e      	add	r3, pc, #376	@ (adr r3, 8008d00 <atan+0x2e8>)
 8008b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b8a:	f7f7 fb7d 	bl	8000288 <__aeabi_dsub>
 8008b8e:	4632      	mov	r2, r6
 8008b90:	463b      	mov	r3, r7
 8008b92:	f7f7 fd31 	bl	80005f8 <__aeabi_dmul>
 8008b96:	a35c      	add	r3, pc, #368	@ (adr r3, 8008d08 <atan+0x2f0>)
 8008b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b9c:	f7f7 fb74 	bl	8000288 <__aeabi_dsub>
 8008ba0:	4632      	mov	r2, r6
 8008ba2:	463b      	mov	r3, r7
 8008ba4:	f7f7 fd28 	bl	80005f8 <__aeabi_dmul>
 8008ba8:	a359      	add	r3, pc, #356	@ (adr r3, 8008d10 <atan+0x2f8>)
 8008baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bae:	f7f7 fb6b 	bl	8000288 <__aeabi_dsub>
 8008bb2:	4632      	mov	r2, r6
 8008bb4:	463b      	mov	r3, r7
 8008bb6:	f7f7 fd1f 	bl	80005f8 <__aeabi_dmul>
 8008bba:	4602      	mov	r2, r0
 8008bbc:	460b      	mov	r3, r1
 8008bbe:	4640      	mov	r0, r8
 8008bc0:	4649      	mov	r1, r9
 8008bc2:	f7f7 fb63 	bl	800028c <__adddf3>
 8008bc6:	4622      	mov	r2, r4
 8008bc8:	462b      	mov	r3, r5
 8008bca:	f7f7 fd15 	bl	80005f8 <__aeabi_dmul>
 8008bce:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008bd2:	4602      	mov	r2, r0
 8008bd4:	460b      	mov	r3, r1
 8008bd6:	d148      	bne.n	8008c6a <atan+0x252>
 8008bd8:	4620      	mov	r0, r4
 8008bda:	4629      	mov	r1, r5
 8008bdc:	f7f7 fb54 	bl	8000288 <__aeabi_dsub>
 8008be0:	e72f      	b.n	8008a42 <atan+0x2a>
 8008be2:	4b52      	ldr	r3, [pc, #328]	@ (8008d2c <atan+0x314>)
 8008be4:	2200      	movs	r2, #0
 8008be6:	4620      	mov	r0, r4
 8008be8:	4629      	mov	r1, r5
 8008bea:	f7f7 fb4d 	bl	8000288 <__aeabi_dsub>
 8008bee:	4b4f      	ldr	r3, [pc, #316]	@ (8008d2c <atan+0x314>)
 8008bf0:	4606      	mov	r6, r0
 8008bf2:	460f      	mov	r7, r1
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	4620      	mov	r0, r4
 8008bf8:	4629      	mov	r1, r5
 8008bfa:	f7f7 fb47 	bl	800028c <__adddf3>
 8008bfe:	4602      	mov	r2, r0
 8008c00:	460b      	mov	r3, r1
 8008c02:	4630      	mov	r0, r6
 8008c04:	4639      	mov	r1, r7
 8008c06:	f7f7 fe21 	bl	800084c <__aeabi_ddiv>
 8008c0a:	f04f 0a01 	mov.w	sl, #1
 8008c0e:	4604      	mov	r4, r0
 8008c10:	460d      	mov	r5, r1
 8008c12:	e765      	b.n	8008ae0 <atan+0xc8>
 8008c14:	4b47      	ldr	r3, [pc, #284]	@ (8008d34 <atan+0x31c>)
 8008c16:	429e      	cmp	r6, r3
 8008c18:	d21c      	bcs.n	8008c54 <atan+0x23c>
 8008c1a:	4b47      	ldr	r3, [pc, #284]	@ (8008d38 <atan+0x320>)
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	4620      	mov	r0, r4
 8008c20:	4629      	mov	r1, r5
 8008c22:	f7f7 fb31 	bl	8000288 <__aeabi_dsub>
 8008c26:	4b44      	ldr	r3, [pc, #272]	@ (8008d38 <atan+0x320>)
 8008c28:	4606      	mov	r6, r0
 8008c2a:	460f      	mov	r7, r1
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	4620      	mov	r0, r4
 8008c30:	4629      	mov	r1, r5
 8008c32:	f7f7 fce1 	bl	80005f8 <__aeabi_dmul>
 8008c36:	4b3d      	ldr	r3, [pc, #244]	@ (8008d2c <atan+0x314>)
 8008c38:	2200      	movs	r2, #0
 8008c3a:	f7f7 fb27 	bl	800028c <__adddf3>
 8008c3e:	4602      	mov	r2, r0
 8008c40:	460b      	mov	r3, r1
 8008c42:	4630      	mov	r0, r6
 8008c44:	4639      	mov	r1, r7
 8008c46:	f7f7 fe01 	bl	800084c <__aeabi_ddiv>
 8008c4a:	f04f 0a02 	mov.w	sl, #2
 8008c4e:	4604      	mov	r4, r0
 8008c50:	460d      	mov	r5, r1
 8008c52:	e745      	b.n	8008ae0 <atan+0xc8>
 8008c54:	4622      	mov	r2, r4
 8008c56:	462b      	mov	r3, r5
 8008c58:	4938      	ldr	r1, [pc, #224]	@ (8008d3c <atan+0x324>)
 8008c5a:	2000      	movs	r0, #0
 8008c5c:	f7f7 fdf6 	bl	800084c <__aeabi_ddiv>
 8008c60:	f04f 0a03 	mov.w	sl, #3
 8008c64:	4604      	mov	r4, r0
 8008c66:	460d      	mov	r5, r1
 8008c68:	e73a      	b.n	8008ae0 <atan+0xc8>
 8008c6a:	4b35      	ldr	r3, [pc, #212]	@ (8008d40 <atan+0x328>)
 8008c6c:	4e35      	ldr	r6, [pc, #212]	@ (8008d44 <atan+0x32c>)
 8008c6e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c76:	f7f7 fb07 	bl	8000288 <__aeabi_dsub>
 8008c7a:	4622      	mov	r2, r4
 8008c7c:	462b      	mov	r3, r5
 8008c7e:	f7f7 fb03 	bl	8000288 <__aeabi_dsub>
 8008c82:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8008c86:	4602      	mov	r2, r0
 8008c88:	460b      	mov	r3, r1
 8008c8a:	e9d6 0100 	ldrd	r0, r1, [r6]
 8008c8e:	f7f7 fafb 	bl	8000288 <__aeabi_dsub>
 8008c92:	f1bb 0f00 	cmp.w	fp, #0
 8008c96:	4604      	mov	r4, r0
 8008c98:	460d      	mov	r5, r1
 8008c9a:	f6bf aedc 	bge.w	8008a56 <atan+0x3e>
 8008c9e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008ca2:	461d      	mov	r5, r3
 8008ca4:	e6d7      	b.n	8008a56 <atan+0x3e>
 8008ca6:	a51c      	add	r5, pc, #112	@ (adr r5, 8008d18 <atan+0x300>)
 8008ca8:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008cac:	e6d3      	b.n	8008a56 <atan+0x3e>
 8008cae:	bf00      	nop
 8008cb0:	54442d18 	.word	0x54442d18
 8008cb4:	3ff921fb 	.word	0x3ff921fb
 8008cb8:	8800759c 	.word	0x8800759c
 8008cbc:	7e37e43c 	.word	0x7e37e43c
 8008cc0:	e322da11 	.word	0xe322da11
 8008cc4:	3f90ad3a 	.word	0x3f90ad3a
 8008cc8:	24760deb 	.word	0x24760deb
 8008ccc:	3fa97b4b 	.word	0x3fa97b4b
 8008cd0:	a0d03d51 	.word	0xa0d03d51
 8008cd4:	3fb10d66 	.word	0x3fb10d66
 8008cd8:	c54c206e 	.word	0xc54c206e
 8008cdc:	3fb745cd 	.word	0x3fb745cd
 8008ce0:	920083ff 	.word	0x920083ff
 8008ce4:	3fc24924 	.word	0x3fc24924
 8008ce8:	5555550d 	.word	0x5555550d
 8008cec:	3fd55555 	.word	0x3fd55555
 8008cf0:	2c6a6c2f 	.word	0x2c6a6c2f
 8008cf4:	bfa2b444 	.word	0xbfa2b444
 8008cf8:	52defd9a 	.word	0x52defd9a
 8008cfc:	3fadde2d 	.word	0x3fadde2d
 8008d00:	af749a6d 	.word	0xaf749a6d
 8008d04:	3fb3b0f2 	.word	0x3fb3b0f2
 8008d08:	fe231671 	.word	0xfe231671
 8008d0c:	3fbc71c6 	.word	0x3fbc71c6
 8008d10:	9998ebc4 	.word	0x9998ebc4
 8008d14:	3fc99999 	.word	0x3fc99999
 8008d18:	54442d18 	.word	0x54442d18
 8008d1c:	bff921fb 	.word	0xbff921fb
 8008d20:	440fffff 	.word	0x440fffff
 8008d24:	7ff00000 	.word	0x7ff00000
 8008d28:	3fdbffff 	.word	0x3fdbffff
 8008d2c:	3ff00000 	.word	0x3ff00000
 8008d30:	3ff2ffff 	.word	0x3ff2ffff
 8008d34:	40038000 	.word	0x40038000
 8008d38:	3ff80000 	.word	0x3ff80000
 8008d3c:	bff00000 	.word	0xbff00000
 8008d40:	080090c8 	.word	0x080090c8
 8008d44:	080090e8 	.word	0x080090e8

08008d48 <fabs>:
 8008d48:	ec51 0b10 	vmov	r0, r1, d0
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008d52:	ec43 2b10 	vmov	d0, r2, r3
 8008d56:	4770      	bx	lr

08008d58 <_init>:
 8008d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d5a:	bf00      	nop
 8008d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d5e:	bc08      	pop	{r3}
 8008d60:	469e      	mov	lr, r3
 8008d62:	4770      	bx	lr

08008d64 <_fini>:
 8008d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d66:	bf00      	nop
 8008d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d6a:	bc08      	pop	{r3}
 8008d6c:	469e      	mov	lr, r3
 8008d6e:	4770      	bx	lr
