
FlightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003720  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080038a8  080038a8  000048a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038e8  080038e8  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  080038e8  080038e8  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080038e8  080038e8  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038e8  080038e8  000048e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080038ec  080038ec  000048ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080038f0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          00000134  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000140  20000140  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a20c  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a7e  00000000  00000000  0000f248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000758  00000000  00000000  00010cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000059c  00000000  00000000  00011420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a4d3  00000000  00000000  000119bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000aa64  00000000  00000000  0002be8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009a2c0  00000000  00000000  000368f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000d0bb3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001c98  00000000  00000000  000d0bf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  000d2890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003890 	.word	0x08003890

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003890 	.word	0x08003890

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fa7e 	bl	80006cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f812 	bl	80001f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f8c2 	bl	800035c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001d8:	f000 f890 	bl	80002fc <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80001dc:	f000 f85e 	bl	800029c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, rx_buffer, sizeof(rx_buffer));
 80001e0:	2204      	movs	r2, #4
 80001e2:	4903      	ldr	r1, [pc, #12]	@ (80001f0 <main+0x28>)
 80001e4:	4803      	ldr	r0, [pc, #12]	@ (80001f4 <main+0x2c>)
 80001e6:	f002 f9c1 	bl	800256c <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001ea:	bf00      	nop
 80001ec:	e7fd      	b.n	80001ea <main+0x22>
 80001ee:	bf00      	nop
 80001f0:	20000138 	.word	0x20000138
 80001f4:	20000028 	.word	0x20000028

080001f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b096      	sub	sp, #88	@ 0x58
 80001fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001fe:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000202:	2228      	movs	r2, #40	@ 0x28
 8000204:	2100      	movs	r1, #0
 8000206:	4618      	mov	r0, r3
 8000208:	f003 fb04 	bl	8003814 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800020c:	f107 031c 	add.w	r3, r7, #28
 8000210:	2200      	movs	r2, #0
 8000212:	601a      	str	r2, [r3, #0]
 8000214:	605a      	str	r2, [r3, #4]
 8000216:	609a      	str	r2, [r3, #8]
 8000218:	60da      	str	r2, [r3, #12]
 800021a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800021c:	1d3b      	adds	r3, r7, #4
 800021e:	2200      	movs	r2, #0
 8000220:	601a      	str	r2, [r3, #0]
 8000222:	605a      	str	r2, [r3, #4]
 8000224:	609a      	str	r2, [r3, #8]
 8000226:	60da      	str	r2, [r3, #12]
 8000228:	611a      	str	r2, [r3, #16]
 800022a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800022c:	2302      	movs	r3, #2
 800022e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000230:	2301      	movs	r3, #1
 8000232:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000234:	2310      	movs	r3, #16
 8000236:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000238:	2300      	movs	r3, #0
 800023a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800023c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000240:	4618      	mov	r0, r3
 8000242:	f000 fdc1 	bl	8000dc8 <HAL_RCC_OscConfig>
 8000246:	4603      	mov	r3, r0
 8000248:	2b00      	cmp	r3, #0
 800024a:	d001      	beq.n	8000250 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800024c:	f000 f90e 	bl	800046c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000250:	230f      	movs	r3, #15
 8000252:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000254:	2300      	movs	r3, #0
 8000256:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000258:	2300      	movs	r3, #0
 800025a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800025c:	2300      	movs	r3, #0
 800025e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000260:	2300      	movs	r3, #0
 8000262:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000264:	f107 031c 	add.w	r3, r7, #28
 8000268:	2100      	movs	r1, #0
 800026a:	4618      	mov	r0, r3
 800026c:	f001 fdea 	bl	8001e44 <HAL_RCC_ClockConfig>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d001      	beq.n	800027a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000276:	f000 f8f9 	bl	800046c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800027a:	2301      	movs	r3, #1
 800027c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800027e:	2300      	movs	r3, #0
 8000280:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000282:	1d3b      	adds	r3, r7, #4
 8000284:	4618      	mov	r0, r3
 8000286:	f001 fffd 	bl	8002284 <HAL_RCCEx_PeriphCLKConfig>
 800028a:	4603      	mov	r3, r0
 800028c:	2b00      	cmp	r3, #0
 800028e:	d001      	beq.n	8000294 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000290:	f000 f8ec 	bl	800046c <Error_Handler>
  }
}
 8000294:	bf00      	nop
 8000296:	3758      	adds	r7, #88	@ 0x58
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}

0800029c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002a0:	4b14      	ldr	r3, [pc, #80]	@ (80002f4 <MX_USART1_UART_Init+0x58>)
 80002a2:	4a15      	ldr	r2, [pc, #84]	@ (80002f8 <MX_USART1_UART_Init+0x5c>)
 80002a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80002a6:	4b13      	ldr	r3, [pc, #76]	@ (80002f4 <MX_USART1_UART_Init+0x58>)
 80002a8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80002ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002ae:	4b11      	ldr	r3, [pc, #68]	@ (80002f4 <MX_USART1_UART_Init+0x58>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002b4:	4b0f      	ldr	r3, [pc, #60]	@ (80002f4 <MX_USART1_UART_Init+0x58>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002ba:	4b0e      	ldr	r3, [pc, #56]	@ (80002f4 <MX_USART1_UART_Init+0x58>)
 80002bc:	2200      	movs	r2, #0
 80002be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002c0:	4b0c      	ldr	r3, [pc, #48]	@ (80002f4 <MX_USART1_UART_Init+0x58>)
 80002c2:	220c      	movs	r2, #12
 80002c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002c6:	4b0b      	ldr	r3, [pc, #44]	@ (80002f4 <MX_USART1_UART_Init+0x58>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002cc:	4b09      	ldr	r3, [pc, #36]	@ (80002f4 <MX_USART1_UART_Init+0x58>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80002d2:	4b08      	ldr	r3, [pc, #32]	@ (80002f4 <MX_USART1_UART_Init+0x58>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80002d8:	4b06      	ldr	r3, [pc, #24]	@ (80002f4 <MX_USART1_UART_Init+0x58>)
 80002da:	2200      	movs	r2, #0
 80002dc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002de:	4805      	ldr	r0, [pc, #20]	@ (80002f4 <MX_USART1_UART_Init+0x58>)
 80002e0:	f002 f8f6 	bl	80024d0 <HAL_UART_Init>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80002ea:	f000 f8bf 	bl	800046c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80002ee:	bf00      	nop
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	20000028 	.word	0x20000028
 80002f8:	40013800 	.word	0x40013800

080002fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000300:	4b14      	ldr	r3, [pc, #80]	@ (8000354 <MX_USART2_UART_Init+0x58>)
 8000302:	4a15      	ldr	r2, [pc, #84]	@ (8000358 <MX_USART2_UART_Init+0x5c>)
 8000304:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000306:	4b13      	ldr	r3, [pc, #76]	@ (8000354 <MX_USART2_UART_Init+0x58>)
 8000308:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 800030c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800030e:	4b11      	ldr	r3, [pc, #68]	@ (8000354 <MX_USART2_UART_Init+0x58>)
 8000310:	2200      	movs	r2, #0
 8000312:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000314:	4b0f      	ldr	r3, [pc, #60]	@ (8000354 <MX_USART2_UART_Init+0x58>)
 8000316:	2200      	movs	r2, #0
 8000318:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800031a:	4b0e      	ldr	r3, [pc, #56]	@ (8000354 <MX_USART2_UART_Init+0x58>)
 800031c:	2200      	movs	r2, #0
 800031e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000320:	4b0c      	ldr	r3, [pc, #48]	@ (8000354 <MX_USART2_UART_Init+0x58>)
 8000322:	220c      	movs	r2, #12
 8000324:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000326:	4b0b      	ldr	r3, [pc, #44]	@ (8000354 <MX_USART2_UART_Init+0x58>)
 8000328:	2200      	movs	r2, #0
 800032a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800032c:	4b09      	ldr	r3, [pc, #36]	@ (8000354 <MX_USART2_UART_Init+0x58>)
 800032e:	2200      	movs	r2, #0
 8000330:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000332:	4b08      	ldr	r3, [pc, #32]	@ (8000354 <MX_USART2_UART_Init+0x58>)
 8000334:	2200      	movs	r2, #0
 8000336:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000338:	4b06      	ldr	r3, [pc, #24]	@ (8000354 <MX_USART2_UART_Init+0x58>)
 800033a:	2200      	movs	r2, #0
 800033c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800033e:	4805      	ldr	r0, [pc, #20]	@ (8000354 <MX_USART2_UART_Init+0x58>)
 8000340:	f002 f8c6 	bl	80024d0 <HAL_UART_Init>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800034a:	f000 f88f 	bl	800046c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800034e:	bf00      	nop
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	200000b0 	.word	0x200000b0
 8000358:	40004400 	.word	0x40004400

0800035c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b088      	sub	sp, #32
 8000360:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000362:	f107 030c 	add.w	r3, r7, #12
 8000366:	2200      	movs	r2, #0
 8000368:	601a      	str	r2, [r3, #0]
 800036a:	605a      	str	r2, [r3, #4]
 800036c:	609a      	str	r2, [r3, #8]
 800036e:	60da      	str	r2, [r3, #12]
 8000370:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000372:	4b1d      	ldr	r3, [pc, #116]	@ (80003e8 <MX_GPIO_Init+0x8c>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	4a1c      	ldr	r2, [pc, #112]	@ (80003e8 <MX_GPIO_Init+0x8c>)
 8000378:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800037c:	6153      	str	r3, [r2, #20]
 800037e:	4b1a      	ldr	r3, [pc, #104]	@ (80003e8 <MX_GPIO_Init+0x8c>)
 8000380:	695b      	ldr	r3, [r3, #20]
 8000382:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000386:	60bb      	str	r3, [r7, #8]
 8000388:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800038a:	4b17      	ldr	r3, [pc, #92]	@ (80003e8 <MX_GPIO_Init+0x8c>)
 800038c:	695b      	ldr	r3, [r3, #20]
 800038e:	4a16      	ldr	r2, [pc, #88]	@ (80003e8 <MX_GPIO_Init+0x8c>)
 8000390:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000394:	6153      	str	r3, [r2, #20]
 8000396:	4b14      	ldr	r3, [pc, #80]	@ (80003e8 <MX_GPIO_Init+0x8c>)
 8000398:	695b      	ldr	r3, [r3, #20]
 800039a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800039e:	607b      	str	r3, [r7, #4]
 80003a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003a2:	4b11      	ldr	r3, [pc, #68]	@ (80003e8 <MX_GPIO_Init+0x8c>)
 80003a4:	695b      	ldr	r3, [r3, #20]
 80003a6:	4a10      	ldr	r2, [pc, #64]	@ (80003e8 <MX_GPIO_Init+0x8c>)
 80003a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80003ac:	6153      	str	r3, [r2, #20]
 80003ae:	4b0e      	ldr	r3, [pc, #56]	@ (80003e8 <MX_GPIO_Init+0x8c>)
 80003b0:	695b      	ldr	r3, [r3, #20]
 80003b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80003b6:	603b      	str	r3, [r7, #0]
 80003b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80003ba:	2200      	movs	r2, #0
 80003bc:	2108      	movs	r1, #8
 80003be:	480b      	ldr	r0, [pc, #44]	@ (80003ec <MX_GPIO_Init+0x90>)
 80003c0:	f000 fcea 	bl	8000d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80003c4:	2308      	movs	r3, #8
 80003c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003c8:	2301      	movs	r3, #1
 80003ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003cc:	2300      	movs	r3, #0
 80003ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003d0:	2300      	movs	r3, #0
 80003d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003d4:	f107 030c 	add.w	r3, r7, #12
 80003d8:	4619      	mov	r1, r3
 80003da:	4804      	ldr	r0, [pc, #16]	@ (80003ec <MX_GPIO_Init+0x90>)
 80003dc:	f000 fb6a 	bl	8000ab4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003e0:	bf00      	nop
 80003e2:	3720      	adds	r7, #32
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	40021000 	.word	0x40021000
 80003ec:	48000400 	.word	0x48000400

080003f0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
    // Verificar si la interrupción proviene de USART1
    if (huart->Instance == USART1) {
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	4a15      	ldr	r2, [pc, #84]	@ (8000454 <HAL_UART_RxCpltCallback+0x64>)
 80003fe:	4293      	cmp	r3, r2
 8000400:	d124      	bne.n	800044c <HAL_UART_RxCpltCallback+0x5c>
        // Comparar el contenido del búfer recibido
        if (strncmp((char *)rx_buffer, "ON", 2) == 0) {
 8000402:	2202      	movs	r2, #2
 8000404:	4914      	ldr	r1, [pc, #80]	@ (8000458 <HAL_UART_RxCpltCallback+0x68>)
 8000406:	4815      	ldr	r0, [pc, #84]	@ (800045c <HAL_UART_RxCpltCallback+0x6c>)
 8000408:	f003 fa0c 	bl	8003824 <strncmp>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d105      	bne.n	800041e <HAL_UART_RxCpltCallback+0x2e>
            // Encender el LED (PB3)
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8000412:	2201      	movs	r2, #1
 8000414:	2108      	movs	r1, #8
 8000416:	4812      	ldr	r0, [pc, #72]	@ (8000460 <HAL_UART_RxCpltCallback+0x70>)
 8000418:	f000 fcbe 	bl	8000d98 <HAL_GPIO_WritePin>
 800041c:	e00c      	b.n	8000438 <HAL_UART_RxCpltCallback+0x48>
        } else if (strncmp((char *)rx_buffer, "OFF", 3) == 0) {
 800041e:	2203      	movs	r2, #3
 8000420:	4910      	ldr	r1, [pc, #64]	@ (8000464 <HAL_UART_RxCpltCallback+0x74>)
 8000422:	480e      	ldr	r0, [pc, #56]	@ (800045c <HAL_UART_RxCpltCallback+0x6c>)
 8000424:	f003 f9fe 	bl	8003824 <strncmp>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d104      	bne.n	8000438 <HAL_UART_RxCpltCallback+0x48>
            // Apagar el LED (PB3)
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800042e:	2200      	movs	r2, #0
 8000430:	2108      	movs	r1, #8
 8000432:	480b      	ldr	r0, [pc, #44]	@ (8000460 <HAL_UART_RxCpltCallback+0x70>)
 8000434:	f000 fcb0 	bl	8000d98 <HAL_GPIO_WritePin>
        }

        // Limpiar el búfer y esperar nuevos datos
        memset(rx_buffer, 0, sizeof(rx_buffer));
 8000438:	2204      	movs	r2, #4
 800043a:	2100      	movs	r1, #0
 800043c:	4807      	ldr	r0, [pc, #28]	@ (800045c <HAL_UART_RxCpltCallback+0x6c>)
 800043e:	f003 f9e9 	bl	8003814 <memset>

        // Volver a habilitar la recepción UART en modo interrupción
        HAL_UART_Receive_IT(&huart1, rx_buffer, sizeof(rx_buffer));
 8000442:	2204      	movs	r2, #4
 8000444:	4905      	ldr	r1, [pc, #20]	@ (800045c <HAL_UART_RxCpltCallback+0x6c>)
 8000446:	4808      	ldr	r0, [pc, #32]	@ (8000468 <HAL_UART_RxCpltCallback+0x78>)
 8000448:	f002 f890 	bl	800256c <HAL_UART_Receive_IT>
    }
}
 800044c:	bf00      	nop
 800044e:	3708      	adds	r7, #8
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}
 8000454:	40013800 	.word	0x40013800
 8000458:	080038a8 	.word	0x080038a8
 800045c:	20000138 	.word	0x20000138
 8000460:	48000400 	.word	0x48000400
 8000464:	080038ac 	.word	0x080038ac
 8000468:	20000028 	.word	0x20000028

0800046c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000470:	b672      	cpsid	i
}
 8000472:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000474:	bf00      	nop
 8000476:	e7fd      	b.n	8000474 <Error_Handler+0x8>

08000478 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000478:	b480      	push	{r7}
 800047a:	b083      	sub	sp, #12
 800047c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800047e:	4b0f      	ldr	r3, [pc, #60]	@ (80004bc <HAL_MspInit+0x44>)
 8000480:	699b      	ldr	r3, [r3, #24]
 8000482:	4a0e      	ldr	r2, [pc, #56]	@ (80004bc <HAL_MspInit+0x44>)
 8000484:	f043 0301 	orr.w	r3, r3, #1
 8000488:	6193      	str	r3, [r2, #24]
 800048a:	4b0c      	ldr	r3, [pc, #48]	@ (80004bc <HAL_MspInit+0x44>)
 800048c:	699b      	ldr	r3, [r3, #24]
 800048e:	f003 0301 	and.w	r3, r3, #1
 8000492:	607b      	str	r3, [r7, #4]
 8000494:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000496:	4b09      	ldr	r3, [pc, #36]	@ (80004bc <HAL_MspInit+0x44>)
 8000498:	69db      	ldr	r3, [r3, #28]
 800049a:	4a08      	ldr	r2, [pc, #32]	@ (80004bc <HAL_MspInit+0x44>)
 800049c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004a0:	61d3      	str	r3, [r2, #28]
 80004a2:	4b06      	ldr	r3, [pc, #24]	@ (80004bc <HAL_MspInit+0x44>)
 80004a4:	69db      	ldr	r3, [r3, #28]
 80004a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004aa:	603b      	str	r3, [r7, #0]
 80004ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ae:	bf00      	nop
 80004b0:	370c      	adds	r7, #12
 80004b2:	46bd      	mov	sp, r7
 80004b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop
 80004bc:	40021000 	.word	0x40021000

080004c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b08c      	sub	sp, #48	@ 0x30
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c8:	f107 031c 	add.w	r3, r7, #28
 80004cc:	2200      	movs	r2, #0
 80004ce:	601a      	str	r2, [r3, #0]
 80004d0:	605a      	str	r2, [r3, #4]
 80004d2:	609a      	str	r2, [r3, #8]
 80004d4:	60da      	str	r2, [r3, #12]
 80004d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a38      	ldr	r2, [pc, #224]	@ (80005c0 <HAL_UART_MspInit+0x100>)
 80004de:	4293      	cmp	r3, r2
 80004e0:	d132      	bne.n	8000548 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80004e2:	4b38      	ldr	r3, [pc, #224]	@ (80005c4 <HAL_UART_MspInit+0x104>)
 80004e4:	699b      	ldr	r3, [r3, #24]
 80004e6:	4a37      	ldr	r2, [pc, #220]	@ (80005c4 <HAL_UART_MspInit+0x104>)
 80004e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80004ec:	6193      	str	r3, [r2, #24]
 80004ee:	4b35      	ldr	r3, [pc, #212]	@ (80005c4 <HAL_UART_MspInit+0x104>)
 80004f0:	699b      	ldr	r3, [r3, #24]
 80004f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80004f6:	61bb      	str	r3, [r7, #24]
 80004f8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fa:	4b32      	ldr	r3, [pc, #200]	@ (80005c4 <HAL_UART_MspInit+0x104>)
 80004fc:	695b      	ldr	r3, [r3, #20]
 80004fe:	4a31      	ldr	r2, [pc, #196]	@ (80005c4 <HAL_UART_MspInit+0x104>)
 8000500:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000504:	6153      	str	r3, [r2, #20]
 8000506:	4b2f      	ldr	r3, [pc, #188]	@ (80005c4 <HAL_UART_MspInit+0x104>)
 8000508:	695b      	ldr	r3, [r3, #20]
 800050a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800050e:	617b      	str	r3, [r7, #20]
 8000510:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000512:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000516:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000518:	2302      	movs	r3, #2
 800051a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051c:	2300      	movs	r3, #0
 800051e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000520:	2303      	movs	r3, #3
 8000522:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000524:	2307      	movs	r3, #7
 8000526:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000528:	f107 031c 	add.w	r3, r7, #28
 800052c:	4619      	mov	r1, r3
 800052e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000532:	f000 fabf 	bl	8000ab4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000536:	2200      	movs	r2, #0
 8000538:	2100      	movs	r1, #0
 800053a:	2025      	movs	r0, #37	@ 0x25
 800053c:	f000 fa07 	bl	800094e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000540:	2025      	movs	r0, #37	@ 0x25
 8000542:	f000 fa20 	bl	8000986 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000546:	e036      	b.n	80005b6 <HAL_UART_MspInit+0xf6>
  else if(huart->Instance==USART2)
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a1e      	ldr	r2, [pc, #120]	@ (80005c8 <HAL_UART_MspInit+0x108>)
 800054e:	4293      	cmp	r3, r2
 8000550:	d131      	bne.n	80005b6 <HAL_UART_MspInit+0xf6>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000552:	4b1c      	ldr	r3, [pc, #112]	@ (80005c4 <HAL_UART_MspInit+0x104>)
 8000554:	69db      	ldr	r3, [r3, #28]
 8000556:	4a1b      	ldr	r2, [pc, #108]	@ (80005c4 <HAL_UART_MspInit+0x104>)
 8000558:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800055c:	61d3      	str	r3, [r2, #28]
 800055e:	4b19      	ldr	r3, [pc, #100]	@ (80005c4 <HAL_UART_MspInit+0x104>)
 8000560:	69db      	ldr	r3, [r3, #28]
 8000562:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000566:	613b      	str	r3, [r7, #16]
 8000568:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800056a:	4b16      	ldr	r3, [pc, #88]	@ (80005c4 <HAL_UART_MspInit+0x104>)
 800056c:	695b      	ldr	r3, [r3, #20]
 800056e:	4a15      	ldr	r2, [pc, #84]	@ (80005c4 <HAL_UART_MspInit+0x104>)
 8000570:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000574:	6153      	str	r3, [r2, #20]
 8000576:	4b13      	ldr	r3, [pc, #76]	@ (80005c4 <HAL_UART_MspInit+0x104>)
 8000578:	695b      	ldr	r3, [r3, #20]
 800057a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800057e:	60fb      	str	r3, [r7, #12]
 8000580:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000582:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000586:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000588:	2302      	movs	r3, #2
 800058a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058c:	2300      	movs	r3, #0
 800058e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000590:	2303      	movs	r3, #3
 8000592:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000594:	2307      	movs	r3, #7
 8000596:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000598:	f107 031c 	add.w	r3, r7, #28
 800059c:	4619      	mov	r1, r3
 800059e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005a2:	f000 fa87 	bl	8000ab4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80005a6:	2200      	movs	r2, #0
 80005a8:	2100      	movs	r1, #0
 80005aa:	2026      	movs	r0, #38	@ 0x26
 80005ac:	f000 f9cf 	bl	800094e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80005b0:	2026      	movs	r0, #38	@ 0x26
 80005b2:	f000 f9e8 	bl	8000986 <HAL_NVIC_EnableIRQ>
}
 80005b6:	bf00      	nop
 80005b8:	3730      	adds	r7, #48	@ 0x30
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40013800 	.word	0x40013800
 80005c4:	40021000 	.word	0x40021000
 80005c8:	40004400 	.word	0x40004400

080005cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005d0:	bf00      	nop
 80005d2:	e7fd      	b.n	80005d0 <NMI_Handler+0x4>

080005d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005d8:	bf00      	nop
 80005da:	e7fd      	b.n	80005d8 <HardFault_Handler+0x4>

080005dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005e0:	bf00      	nop
 80005e2:	e7fd      	b.n	80005e0 <MemManage_Handler+0x4>

080005e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005e8:	bf00      	nop
 80005ea:	e7fd      	b.n	80005e8 <BusFault_Handler+0x4>

080005ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005f0:	bf00      	nop
 80005f2:	e7fd      	b.n	80005f0 <UsageFault_Handler+0x4>

080005f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005f8:	bf00      	nop
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr

08000602 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000602:	b480      	push	{r7}
 8000604:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000606:	bf00      	nop
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr

08000610 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000614:	bf00      	nop
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr

0800061e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800061e:	b580      	push	{r7, lr}
 8000620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000622:	f000 f899 	bl	8000758 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}
	...

0800062c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000630:	4802      	ldr	r0, [pc, #8]	@ (800063c <USART1_IRQHandler+0x10>)
 8000632:	f001 ffdf 	bl	80025f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	20000028 	.word	0x20000028

08000640 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000644:	4802      	ldr	r0, [pc, #8]	@ (8000650 <USART2_IRQHandler+0x10>)
 8000646:	f001 ffd5 	bl	80025f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	200000b0 	.word	0x200000b0

08000654 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000658:	4b06      	ldr	r3, [pc, #24]	@ (8000674 <SystemInit+0x20>)
 800065a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800065e:	4a05      	ldr	r2, [pc, #20]	@ (8000674 <SystemInit+0x20>)
 8000660:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000664:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000668:	bf00      	nop
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	e000ed00 	.word	0xe000ed00

08000678 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000678:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80006b0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800067c:	f7ff ffea 	bl	8000654 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000680:	480c      	ldr	r0, [pc, #48]	@ (80006b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000682:	490d      	ldr	r1, [pc, #52]	@ (80006b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000684:	4a0d      	ldr	r2, [pc, #52]	@ (80006bc <LoopForever+0xe>)
  movs r3, #0
 8000686:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000688:	e002      	b.n	8000690 <LoopCopyDataInit>

0800068a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800068a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800068c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800068e:	3304      	adds	r3, #4

08000690 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000690:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000692:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000694:	d3f9      	bcc.n	800068a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000696:	4a0a      	ldr	r2, [pc, #40]	@ (80006c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000698:	4c0a      	ldr	r4, [pc, #40]	@ (80006c4 <LoopForever+0x16>)
  movs r3, #0
 800069a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800069c:	e001      	b.n	80006a2 <LoopFillZerobss>

0800069e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800069e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006a0:	3204      	adds	r2, #4

080006a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006a4:	d3fb      	bcc.n	800069e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006a6:	f003 f8cf 	bl	8003848 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006aa:	f7ff fd8d 	bl	80001c8 <main>

080006ae <LoopForever>:

LoopForever:
    b LoopForever
 80006ae:	e7fe      	b.n	80006ae <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006b0:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80006b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006b8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006bc:	080038f0 	.word	0x080038f0
  ldr r2, =_sbss
 80006c0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006c4:	20000140 	.word	0x20000140

080006c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006c8:	e7fe      	b.n	80006c8 <ADC1_2_IRQHandler>
	...

080006cc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006d0:	4b08      	ldr	r3, [pc, #32]	@ (80006f4 <HAL_Init+0x28>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a07      	ldr	r2, [pc, #28]	@ (80006f4 <HAL_Init+0x28>)
 80006d6:	f043 0310 	orr.w	r3, r3, #16
 80006da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006dc:	2003      	movs	r0, #3
 80006de:	f000 f92b 	bl	8000938 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006e2:	2000      	movs	r0, #0
 80006e4:	f000 f808 	bl	80006f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006e8:	f7ff fec6 	bl	8000478 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006ec:	2300      	movs	r3, #0
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40022000 	.word	0x40022000

080006f8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000700:	4b12      	ldr	r3, [pc, #72]	@ (800074c <HAL_InitTick+0x54>)
 8000702:	681a      	ldr	r2, [r3, #0]
 8000704:	4b12      	ldr	r3, [pc, #72]	@ (8000750 <HAL_InitTick+0x58>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	4619      	mov	r1, r3
 800070a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800070e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000712:	fbb2 f3f3 	udiv	r3, r2, r3
 8000716:	4618      	mov	r0, r3
 8000718:	f000 f943 	bl	80009a2 <HAL_SYSTICK_Config>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000722:	2301      	movs	r3, #1
 8000724:	e00e      	b.n	8000744 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	2b0f      	cmp	r3, #15
 800072a:	d80a      	bhi.n	8000742 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800072c:	2200      	movs	r2, #0
 800072e:	6879      	ldr	r1, [r7, #4]
 8000730:	f04f 30ff 	mov.w	r0, #4294967295
 8000734:	f000 f90b 	bl	800094e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000738:	4a06      	ldr	r2, [pc, #24]	@ (8000754 <HAL_InitTick+0x5c>)
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800073e:	2300      	movs	r3, #0
 8000740:	e000      	b.n	8000744 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000742:	2301      	movs	r3, #1
}
 8000744:	4618      	mov	r0, r3
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000000 	.word	0x20000000
 8000750:	20000008 	.word	0x20000008
 8000754:	20000004 	.word	0x20000004

08000758 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800075c:	4b06      	ldr	r3, [pc, #24]	@ (8000778 <HAL_IncTick+0x20>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	461a      	mov	r2, r3
 8000762:	4b06      	ldr	r3, [pc, #24]	@ (800077c <HAL_IncTick+0x24>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4413      	add	r3, r2
 8000768:	4a04      	ldr	r2, [pc, #16]	@ (800077c <HAL_IncTick+0x24>)
 800076a:	6013      	str	r3, [r2, #0]
}
 800076c:	bf00      	nop
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	20000008 	.word	0x20000008
 800077c:	2000013c 	.word	0x2000013c

08000780 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  return uwTick;  
 8000784:	4b03      	ldr	r3, [pc, #12]	@ (8000794 <HAL_GetTick+0x14>)
 8000786:	681b      	ldr	r3, [r3, #0]
}
 8000788:	4618      	mov	r0, r3
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	2000013c 	.word	0x2000013c

08000798 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000798:	b480      	push	{r7}
 800079a:	b085      	sub	sp, #20
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	f003 0307 	and.w	r3, r3, #7
 80007a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007a8:	4b0c      	ldr	r3, [pc, #48]	@ (80007dc <__NVIC_SetPriorityGrouping+0x44>)
 80007aa:	68db      	ldr	r3, [r3, #12]
 80007ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007ae:	68ba      	ldr	r2, [r7, #8]
 80007b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80007b4:	4013      	ands	r3, r2
 80007b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80007c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007ca:	4a04      	ldr	r2, [pc, #16]	@ (80007dc <__NVIC_SetPriorityGrouping+0x44>)
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	60d3      	str	r3, [r2, #12]
}
 80007d0:	bf00      	nop
 80007d2:	3714      	adds	r7, #20
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr
 80007dc:	e000ed00 	.word	0xe000ed00

080007e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007e4:	4b04      	ldr	r3, [pc, #16]	@ (80007f8 <__NVIC_GetPriorityGrouping+0x18>)
 80007e6:	68db      	ldr	r3, [r3, #12]
 80007e8:	0a1b      	lsrs	r3, r3, #8
 80007ea:	f003 0307 	and.w	r3, r3, #7
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr
 80007f8:	e000ed00 	.word	0xe000ed00

080007fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080a:	2b00      	cmp	r3, #0
 800080c:	db0b      	blt.n	8000826 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	f003 021f 	and.w	r2, r3, #31
 8000814:	4907      	ldr	r1, [pc, #28]	@ (8000834 <__NVIC_EnableIRQ+0x38>)
 8000816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081a:	095b      	lsrs	r3, r3, #5
 800081c:	2001      	movs	r0, #1
 800081e:	fa00 f202 	lsl.w	r2, r0, r2
 8000822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000826:	bf00      	nop
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	e000e100 	.word	0xe000e100

08000838 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	6039      	str	r1, [r7, #0]
 8000842:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000848:	2b00      	cmp	r3, #0
 800084a:	db0a      	blt.n	8000862 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	b2da      	uxtb	r2, r3
 8000850:	490c      	ldr	r1, [pc, #48]	@ (8000884 <__NVIC_SetPriority+0x4c>)
 8000852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000856:	0112      	lsls	r2, r2, #4
 8000858:	b2d2      	uxtb	r2, r2
 800085a:	440b      	add	r3, r1
 800085c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000860:	e00a      	b.n	8000878 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	b2da      	uxtb	r2, r3
 8000866:	4908      	ldr	r1, [pc, #32]	@ (8000888 <__NVIC_SetPriority+0x50>)
 8000868:	79fb      	ldrb	r3, [r7, #7]
 800086a:	f003 030f 	and.w	r3, r3, #15
 800086e:	3b04      	subs	r3, #4
 8000870:	0112      	lsls	r2, r2, #4
 8000872:	b2d2      	uxtb	r2, r2
 8000874:	440b      	add	r3, r1
 8000876:	761a      	strb	r2, [r3, #24]
}
 8000878:	bf00      	nop
 800087a:	370c      	adds	r7, #12
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr
 8000884:	e000e100 	.word	0xe000e100
 8000888:	e000ed00 	.word	0xe000ed00

0800088c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800088c:	b480      	push	{r7}
 800088e:	b089      	sub	sp, #36	@ 0x24
 8000890:	af00      	add	r7, sp, #0
 8000892:	60f8      	str	r0, [r7, #12]
 8000894:	60b9      	str	r1, [r7, #8]
 8000896:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	f003 0307 	and.w	r3, r3, #7
 800089e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008a0:	69fb      	ldr	r3, [r7, #28]
 80008a2:	f1c3 0307 	rsb	r3, r3, #7
 80008a6:	2b04      	cmp	r3, #4
 80008a8:	bf28      	it	cs
 80008aa:	2304      	movcs	r3, #4
 80008ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008ae:	69fb      	ldr	r3, [r7, #28]
 80008b0:	3304      	adds	r3, #4
 80008b2:	2b06      	cmp	r3, #6
 80008b4:	d902      	bls.n	80008bc <NVIC_EncodePriority+0x30>
 80008b6:	69fb      	ldr	r3, [r7, #28]
 80008b8:	3b03      	subs	r3, #3
 80008ba:	e000      	b.n	80008be <NVIC_EncodePriority+0x32>
 80008bc:	2300      	movs	r3, #0
 80008be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c0:	f04f 32ff 	mov.w	r2, #4294967295
 80008c4:	69bb      	ldr	r3, [r7, #24]
 80008c6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ca:	43da      	mvns	r2, r3
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	401a      	ands	r2, r3
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008d4:	f04f 31ff 	mov.w	r1, #4294967295
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	fa01 f303 	lsl.w	r3, r1, r3
 80008de:	43d9      	mvns	r1, r3
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008e4:	4313      	orrs	r3, r2
         );
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	3724      	adds	r7, #36	@ 0x24
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
	...

080008f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	3b01      	subs	r3, #1
 8000900:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000904:	d301      	bcc.n	800090a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000906:	2301      	movs	r3, #1
 8000908:	e00f      	b.n	800092a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800090a:	4a0a      	ldr	r2, [pc, #40]	@ (8000934 <SysTick_Config+0x40>)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	3b01      	subs	r3, #1
 8000910:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000912:	210f      	movs	r1, #15
 8000914:	f04f 30ff 	mov.w	r0, #4294967295
 8000918:	f7ff ff8e 	bl	8000838 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800091c:	4b05      	ldr	r3, [pc, #20]	@ (8000934 <SysTick_Config+0x40>)
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000922:	4b04      	ldr	r3, [pc, #16]	@ (8000934 <SysTick_Config+0x40>)
 8000924:	2207      	movs	r2, #7
 8000926:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000928:	2300      	movs	r3, #0
}
 800092a:	4618      	mov	r0, r3
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	e000e010 	.word	0xe000e010

08000938 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000940:	6878      	ldr	r0, [r7, #4]
 8000942:	f7ff ff29 	bl	8000798 <__NVIC_SetPriorityGrouping>
}
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}

0800094e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	b086      	sub	sp, #24
 8000952:	af00      	add	r7, sp, #0
 8000954:	4603      	mov	r3, r0
 8000956:	60b9      	str	r1, [r7, #8]
 8000958:	607a      	str	r2, [r7, #4]
 800095a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800095c:	2300      	movs	r3, #0
 800095e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000960:	f7ff ff3e 	bl	80007e0 <__NVIC_GetPriorityGrouping>
 8000964:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000966:	687a      	ldr	r2, [r7, #4]
 8000968:	68b9      	ldr	r1, [r7, #8]
 800096a:	6978      	ldr	r0, [r7, #20]
 800096c:	f7ff ff8e 	bl	800088c <NVIC_EncodePriority>
 8000970:	4602      	mov	r2, r0
 8000972:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000976:	4611      	mov	r1, r2
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff ff5d 	bl	8000838 <__NVIC_SetPriority>
}
 800097e:	bf00      	nop
 8000980:	3718      	adds	r7, #24
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}

08000986 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000986:	b580      	push	{r7, lr}
 8000988:	b082      	sub	sp, #8
 800098a:	af00      	add	r7, sp, #0
 800098c:	4603      	mov	r3, r0
 800098e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff ff31 	bl	80007fc <__NVIC_EnableIRQ>
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}

080009a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009a2:	b580      	push	{r7, lr}
 80009a4:	b082      	sub	sp, #8
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f7ff ffa2 	bl	80008f4 <SysTick_Config>
 80009b0:	4603      	mov	r3, r0
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80009ba:	b480      	push	{r7}
 80009bc:	b083      	sub	sp, #12
 80009be:	af00      	add	r7, sp, #0
 80009c0:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d101      	bne.n	80009cc <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80009c8:	2301      	movs	r3, #1
 80009ca:	e02e      	b.n	8000a2a <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80009d2:	2b02      	cmp	r3, #2
 80009d4:	d008      	beq.n	80009e8 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	2204      	movs	r2, #4
 80009da:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2200      	movs	r2, #0
 80009e0:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80009e4:	2301      	movs	r3, #1
 80009e6:	e020      	b.n	8000a2a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	f022 020e 	bic.w	r2, r2, #14
 80009f6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	f022 0201 	bic.w	r2, r2, #1
 8000a06:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000a10:	2101      	movs	r1, #1
 8000a12:	fa01 f202 	lsl.w	r2, r1, r2
 8000a16:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	2200      	movs	r2, #0
 8000a24:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000a28:	2300      	movs	r3, #0
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr

08000a36 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b084      	sub	sp, #16
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000a48:	2b02      	cmp	r3, #2
 8000a4a:	d005      	beq.n	8000a58 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2204      	movs	r2, #4
 8000a50:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8000a52:	2301      	movs	r3, #1
 8000a54:	73fb      	strb	r3, [r7, #15]
 8000a56:	e027      	b.n	8000aa8 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	681a      	ldr	r2, [r3, #0]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	f022 020e 	bic.w	r2, r2, #14
 8000a66:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f022 0201 	bic.w	r2, r2, #1
 8000a76:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000a80:	2101      	movs	r1, #1
 8000a82:	fa01 f202 	lsl.w	r2, r1, r2
 8000a86:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2200      	movs	r2, #0
 8000a94:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d003      	beq.n	8000aa8 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000aa4:	6878      	ldr	r0, [r7, #4]
 8000aa6:	4798      	blx	r3
    }
  }
  return status;
 8000aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3710      	adds	r7, #16
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
	...

08000ab4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b087      	sub	sp, #28
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ac2:	e14e      	b.n	8000d62 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	2101      	movs	r1, #1
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	f000 8140 	beq.w	8000d5c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	f003 0303 	and.w	r3, r3, #3
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d005      	beq.n	8000af4 <HAL_GPIO_Init+0x40>
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	f003 0303 	and.w	r3, r3, #3
 8000af0:	2b02      	cmp	r3, #2
 8000af2:	d130      	bne.n	8000b56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	689b      	ldr	r3, [r3, #8]
 8000af8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	005b      	lsls	r3, r3, #1
 8000afe:	2203      	movs	r2, #3
 8000b00:	fa02 f303 	lsl.w	r3, r2, r3
 8000b04:	43db      	mvns	r3, r3
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	4013      	ands	r3, r2
 8000b0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	68da      	ldr	r2, [r3, #12]
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	fa02 f303 	lsl.w	r3, r2, r3
 8000b18:	693a      	ldr	r2, [r7, #16]
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	693a      	ldr	r2, [r7, #16]
 8000b22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b32:	43db      	mvns	r3, r3
 8000b34:	693a      	ldr	r2, [r7, #16]
 8000b36:	4013      	ands	r3, r2
 8000b38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	091b      	lsrs	r3, r3, #4
 8000b40:	f003 0201 	and.w	r2, r3, #1
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	f003 0303 	and.w	r3, r3, #3
 8000b5e:	2b03      	cmp	r3, #3
 8000b60:	d017      	beq.n	8000b92 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	68db      	ldr	r3, [r3, #12]
 8000b66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	005b      	lsls	r3, r3, #1
 8000b6c:	2203      	movs	r2, #3
 8000b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b72:	43db      	mvns	r3, r3
 8000b74:	693a      	ldr	r2, [r7, #16]
 8000b76:	4013      	ands	r3, r2
 8000b78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	689a      	ldr	r2, [r3, #8]
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	fa02 f303 	lsl.w	r3, r2, r3
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	f003 0303 	and.w	r3, r3, #3
 8000b9a:	2b02      	cmp	r3, #2
 8000b9c:	d123      	bne.n	8000be6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	08da      	lsrs	r2, r3, #3
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	3208      	adds	r2, #8
 8000ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000baa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	f003 0307 	and.w	r3, r3, #7
 8000bb2:	009b      	lsls	r3, r3, #2
 8000bb4:	220f      	movs	r2, #15
 8000bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bba:	43db      	mvns	r3, r3
 8000bbc:	693a      	ldr	r2, [r7, #16]
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	691a      	ldr	r2, [r3, #16]
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	f003 0307 	and.w	r3, r3, #7
 8000bcc:	009b      	lsls	r3, r3, #2
 8000bce:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	08da      	lsrs	r2, r3, #3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	3208      	adds	r2, #8
 8000be0:	6939      	ldr	r1, [r7, #16]
 8000be2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	2203      	movs	r2, #3
 8000bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf6:	43db      	mvns	r3, r3
 8000bf8:	693a      	ldr	r2, [r7, #16]
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	f003 0203 	and.w	r2, r3, #3
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	005b      	lsls	r3, r3, #1
 8000c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	4313      	orrs	r3, r2
 8000c12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f000 809a 	beq.w	8000d5c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c28:	4b55      	ldr	r3, [pc, #340]	@ (8000d80 <HAL_GPIO_Init+0x2cc>)
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	4a54      	ldr	r2, [pc, #336]	@ (8000d80 <HAL_GPIO_Init+0x2cc>)
 8000c2e:	f043 0301 	orr.w	r3, r3, #1
 8000c32:	6193      	str	r3, [r2, #24]
 8000c34:	4b52      	ldr	r3, [pc, #328]	@ (8000d80 <HAL_GPIO_Init+0x2cc>)
 8000c36:	699b      	ldr	r3, [r3, #24]
 8000c38:	f003 0301 	and.w	r3, r3, #1
 8000c3c:	60bb      	str	r3, [r7, #8]
 8000c3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c40:	4a50      	ldr	r2, [pc, #320]	@ (8000d84 <HAL_GPIO_Init+0x2d0>)
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	089b      	lsrs	r3, r3, #2
 8000c46:	3302      	adds	r3, #2
 8000c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	f003 0303 	and.w	r3, r3, #3
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	220f      	movs	r2, #15
 8000c58:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5c:	43db      	mvns	r3, r3
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	4013      	ands	r3, r2
 8000c62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000c6a:	d013      	beq.n	8000c94 <HAL_GPIO_Init+0x1e0>
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	4a46      	ldr	r2, [pc, #280]	@ (8000d88 <HAL_GPIO_Init+0x2d4>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d00d      	beq.n	8000c90 <HAL_GPIO_Init+0x1dc>
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	4a45      	ldr	r2, [pc, #276]	@ (8000d8c <HAL_GPIO_Init+0x2d8>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d007      	beq.n	8000c8c <HAL_GPIO_Init+0x1d8>
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	4a44      	ldr	r2, [pc, #272]	@ (8000d90 <HAL_GPIO_Init+0x2dc>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d101      	bne.n	8000c88 <HAL_GPIO_Init+0x1d4>
 8000c84:	2303      	movs	r3, #3
 8000c86:	e006      	b.n	8000c96 <HAL_GPIO_Init+0x1e2>
 8000c88:	2305      	movs	r3, #5
 8000c8a:	e004      	b.n	8000c96 <HAL_GPIO_Init+0x1e2>
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	e002      	b.n	8000c96 <HAL_GPIO_Init+0x1e2>
 8000c90:	2301      	movs	r3, #1
 8000c92:	e000      	b.n	8000c96 <HAL_GPIO_Init+0x1e2>
 8000c94:	2300      	movs	r3, #0
 8000c96:	697a      	ldr	r2, [r7, #20]
 8000c98:	f002 0203 	and.w	r2, r2, #3
 8000c9c:	0092      	lsls	r2, r2, #2
 8000c9e:	4093      	lsls	r3, r2
 8000ca0:	693a      	ldr	r2, [r7, #16]
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ca6:	4937      	ldr	r1, [pc, #220]	@ (8000d84 <HAL_GPIO_Init+0x2d0>)
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	089b      	lsrs	r3, r3, #2
 8000cac:	3302      	adds	r3, #2
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cb4:	4b37      	ldr	r3, [pc, #220]	@ (8000d94 <HAL_GPIO_Init+0x2e0>)
 8000cb6:	689b      	ldr	r3, [r3, #8]
 8000cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	43db      	mvns	r3, r3
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d003      	beq.n	8000cd8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000cd0:	693a      	ldr	r2, [r7, #16]
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000cd8:	4a2e      	ldr	r2, [pc, #184]	@ (8000d94 <HAL_GPIO_Init+0x2e0>)
 8000cda:	693b      	ldr	r3, [r7, #16]
 8000cdc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000cde:	4b2d      	ldr	r3, [pc, #180]	@ (8000d94 <HAL_GPIO_Init+0x2e0>)
 8000ce0:	68db      	ldr	r3, [r3, #12]
 8000ce2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	43db      	mvns	r3, r3
 8000ce8:	693a      	ldr	r2, [r7, #16]
 8000cea:	4013      	ands	r3, r2
 8000cec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d003      	beq.n	8000d02 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d02:	4a24      	ldr	r2, [pc, #144]	@ (8000d94 <HAL_GPIO_Init+0x2e0>)
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d08:	4b22      	ldr	r3, [pc, #136]	@ (8000d94 <HAL_GPIO_Init+0x2e0>)
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	43db      	mvns	r3, r3
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	4013      	ands	r3, r2
 8000d16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d003      	beq.n	8000d2c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000d24:	693a      	ldr	r2, [r7, #16]
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d2c:	4a19      	ldr	r2, [pc, #100]	@ (8000d94 <HAL_GPIO_Init+0x2e0>)
 8000d2e:	693b      	ldr	r3, [r7, #16]
 8000d30:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d32:	4b18      	ldr	r3, [pc, #96]	@ (8000d94 <HAL_GPIO_Init+0x2e0>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	43db      	mvns	r3, r3
 8000d3c:	693a      	ldr	r2, [r7, #16]
 8000d3e:	4013      	ands	r3, r2
 8000d40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d003      	beq.n	8000d56 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	4313      	orrs	r3, r2
 8000d54:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d56:	4a0f      	ldr	r2, [pc, #60]	@ (8000d94 <HAL_GPIO_Init+0x2e0>)
 8000d58:	693b      	ldr	r3, [r7, #16]
 8000d5a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	fa22 f303 	lsr.w	r3, r2, r3
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	f47f aea9 	bne.w	8000ac4 <HAL_GPIO_Init+0x10>
  }
}
 8000d72:	bf00      	nop
 8000d74:	bf00      	nop
 8000d76:	371c      	adds	r7, #28
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	40021000 	.word	0x40021000
 8000d84:	40010000 	.word	0x40010000
 8000d88:	48000400 	.word	0x48000400
 8000d8c:	48000800 	.word	0x48000800
 8000d90:	48000c00 	.word	0x48000c00
 8000d94:	40010400 	.word	0x40010400

08000d98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	460b      	mov	r3, r1
 8000da2:	807b      	strh	r3, [r7, #2]
 8000da4:	4613      	mov	r3, r2
 8000da6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000da8:	787b      	ldrb	r3, [r7, #1]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d003      	beq.n	8000db6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000dae:	887a      	ldrh	r2, [r7, #2]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000db4:	e002      	b.n	8000dbc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000db6:	887a      	ldrh	r2, [r7, #2]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000dbc:	bf00      	nop
 8000dbe:	370c      	adds	r7, #12
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr

08000dc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000dd4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000dd8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000dda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000dde:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d102      	bne.n	8000dee <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000de8:	2301      	movs	r3, #1
 8000dea:	f001 b823 	b.w	8001e34 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000df2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	f000 817d 	beq.w	80010fe <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e04:	4bbc      	ldr	r3, [pc, #752]	@ (80010f8 <HAL_RCC_OscConfig+0x330>)
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f003 030c 	and.w	r3, r3, #12
 8000e0c:	2b04      	cmp	r3, #4
 8000e0e:	d00c      	beq.n	8000e2a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e10:	4bb9      	ldr	r3, [pc, #740]	@ (80010f8 <HAL_RCC_OscConfig+0x330>)
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f003 030c 	and.w	r3, r3, #12
 8000e18:	2b08      	cmp	r3, #8
 8000e1a:	d15c      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x10e>
 8000e1c:	4bb6      	ldr	r3, [pc, #728]	@ (80010f8 <HAL_RCC_OscConfig+0x330>)
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e28:	d155      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x10e>
 8000e2a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e2e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e32:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8000e36:	fa93 f3a3 	rbit	r3, r3
 8000e3a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000e3e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e42:	fab3 f383 	clz	r3, r3
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	095b      	lsrs	r3, r3, #5
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	f043 0301 	orr.w	r3, r3, #1
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d102      	bne.n	8000e5c <HAL_RCC_OscConfig+0x94>
 8000e56:	4ba8      	ldr	r3, [pc, #672]	@ (80010f8 <HAL_RCC_OscConfig+0x330>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	e015      	b.n	8000e88 <HAL_RCC_OscConfig+0xc0>
 8000e5c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e60:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e64:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8000e68:	fa93 f3a3 	rbit	r3, r3
 8000e6c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000e70:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e74:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8000e78:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8000e7c:	fa93 f3a3 	rbit	r3, r3
 8000e80:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8000e84:	4b9c      	ldr	r3, [pc, #624]	@ (80010f8 <HAL_RCC_OscConfig+0x330>)
 8000e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e88:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000e8c:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8000e90:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8000e94:	fa92 f2a2 	rbit	r2, r2
 8000e98:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8000e9c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8000ea0:	fab2 f282 	clz	r2, r2
 8000ea4:	b2d2      	uxtb	r2, r2
 8000ea6:	f042 0220 	orr.w	r2, r2, #32
 8000eaa:	b2d2      	uxtb	r2, r2
 8000eac:	f002 021f 	and.w	r2, r2, #31
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	fa01 f202 	lsl.w	r2, r1, r2
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	f000 811f 	beq.w	80010fc <HAL_RCC_OscConfig+0x334>
 8000ebe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000ec2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	f040 8116 	bne.w	80010fc <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	f000 bfaf 	b.w	8001e34 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ed6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000eda:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ee6:	d106      	bne.n	8000ef6 <HAL_RCC_OscConfig+0x12e>
 8000ee8:	4b83      	ldr	r3, [pc, #524]	@ (80010f8 <HAL_RCC_OscConfig+0x330>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a82      	ldr	r2, [pc, #520]	@ (80010f8 <HAL_RCC_OscConfig+0x330>)
 8000eee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ef2:	6013      	str	r3, [r2, #0]
 8000ef4:	e036      	b.n	8000f64 <HAL_RCC_OscConfig+0x19c>
 8000ef6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000efa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d10c      	bne.n	8000f20 <HAL_RCC_OscConfig+0x158>
 8000f06:	4b7c      	ldr	r3, [pc, #496]	@ (80010f8 <HAL_RCC_OscConfig+0x330>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a7b      	ldr	r2, [pc, #492]	@ (80010f8 <HAL_RCC_OscConfig+0x330>)
 8000f0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f10:	6013      	str	r3, [r2, #0]
 8000f12:	4b79      	ldr	r3, [pc, #484]	@ (80010f8 <HAL_RCC_OscConfig+0x330>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a78      	ldr	r2, [pc, #480]	@ (80010f8 <HAL_RCC_OscConfig+0x330>)
 8000f18:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f1c:	6013      	str	r3, [r2, #0]
 8000f1e:	e021      	b.n	8000f64 <HAL_RCC_OscConfig+0x19c>
 8000f20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f24:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000f30:	d10c      	bne.n	8000f4c <HAL_RCC_OscConfig+0x184>
 8000f32:	4b71      	ldr	r3, [pc, #452]	@ (80010f8 <HAL_RCC_OscConfig+0x330>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a70      	ldr	r2, [pc, #448]	@ (80010f8 <HAL_RCC_OscConfig+0x330>)
 8000f38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f3c:	6013      	str	r3, [r2, #0]
 8000f3e:	4b6e      	ldr	r3, [pc, #440]	@ (80010f8 <HAL_RCC_OscConfig+0x330>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a6d      	ldr	r2, [pc, #436]	@ (80010f8 <HAL_RCC_OscConfig+0x330>)
 8000f44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f48:	6013      	str	r3, [r2, #0]
 8000f4a:	e00b      	b.n	8000f64 <HAL_RCC_OscConfig+0x19c>
 8000f4c:	4b6a      	ldr	r3, [pc, #424]	@ (80010f8 <HAL_RCC_OscConfig+0x330>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a69      	ldr	r2, [pc, #420]	@ (80010f8 <HAL_RCC_OscConfig+0x330>)
 8000f52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f56:	6013      	str	r3, [r2, #0]
 8000f58:	4b67      	ldr	r3, [pc, #412]	@ (80010f8 <HAL_RCC_OscConfig+0x330>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a66      	ldr	r2, [pc, #408]	@ (80010f8 <HAL_RCC_OscConfig+0x330>)
 8000f5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f62:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f64:	4b64      	ldr	r3, [pc, #400]	@ (80010f8 <HAL_RCC_OscConfig+0x330>)
 8000f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f68:	f023 020f 	bic.w	r2, r3, #15
 8000f6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f70:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	495f      	ldr	r1, [pc, #380]	@ (80010f8 <HAL_RCC_OscConfig+0x330>)
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f82:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d059      	beq.n	8001042 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f8e:	f7ff fbf7 	bl	8000780 <HAL_GetTick>
 8000f92:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f96:	e00a      	b.n	8000fae <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f98:	f7ff fbf2 	bl	8000780 <HAL_GetTick>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000fa2:	1ad3      	subs	r3, r2, r3
 8000fa4:	2b64      	cmp	r3, #100	@ 0x64
 8000fa6:	d902      	bls.n	8000fae <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	f000 bf43 	b.w	8001e34 <HAL_RCC_OscConfig+0x106c>
 8000fae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000fb2:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fb6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8000fba:	fa93 f3a3 	rbit	r3, r3
 8000fbe:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8000fc2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fc6:	fab3 f383 	clz	r3, r3
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	095b      	lsrs	r3, r3, #5
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d102      	bne.n	8000fe0 <HAL_RCC_OscConfig+0x218>
 8000fda:	4b47      	ldr	r3, [pc, #284]	@ (80010f8 <HAL_RCC_OscConfig+0x330>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	e015      	b.n	800100c <HAL_RCC_OscConfig+0x244>
 8000fe0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000fe4:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fe8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8000fec:	fa93 f3a3 	rbit	r3, r3
 8000ff0:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8000ff4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000ff8:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8000ffc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001000:	fa93 f3a3 	rbit	r3, r3
 8001004:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001008:	4b3b      	ldr	r3, [pc, #236]	@ (80010f8 <HAL_RCC_OscConfig+0x330>)
 800100a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800100c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001010:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001014:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001018:	fa92 f2a2 	rbit	r2, r2
 800101c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001020:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001024:	fab2 f282 	clz	r2, r2
 8001028:	b2d2      	uxtb	r2, r2
 800102a:	f042 0220 	orr.w	r2, r2, #32
 800102e:	b2d2      	uxtb	r2, r2
 8001030:	f002 021f 	and.w	r2, r2, #31
 8001034:	2101      	movs	r1, #1
 8001036:	fa01 f202 	lsl.w	r2, r1, r2
 800103a:	4013      	ands	r3, r2
 800103c:	2b00      	cmp	r3, #0
 800103e:	d0ab      	beq.n	8000f98 <HAL_RCC_OscConfig+0x1d0>
 8001040:	e05d      	b.n	80010fe <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001042:	f7ff fb9d 	bl	8000780 <HAL_GetTick>
 8001046:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800104a:	e00a      	b.n	8001062 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800104c:	f7ff fb98 	bl	8000780 <HAL_GetTick>
 8001050:	4602      	mov	r2, r0
 8001052:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	2b64      	cmp	r3, #100	@ 0x64
 800105a:	d902      	bls.n	8001062 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800105c:	2303      	movs	r3, #3
 800105e:	f000 bee9 	b.w	8001e34 <HAL_RCC_OscConfig+0x106c>
 8001062:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001066:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800106a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800106e:	fa93 f3a3 	rbit	r3, r3
 8001072:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001076:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800107a:	fab3 f383 	clz	r3, r3
 800107e:	b2db      	uxtb	r3, r3
 8001080:	095b      	lsrs	r3, r3, #5
 8001082:	b2db      	uxtb	r3, r3
 8001084:	f043 0301 	orr.w	r3, r3, #1
 8001088:	b2db      	uxtb	r3, r3
 800108a:	2b01      	cmp	r3, #1
 800108c:	d102      	bne.n	8001094 <HAL_RCC_OscConfig+0x2cc>
 800108e:	4b1a      	ldr	r3, [pc, #104]	@ (80010f8 <HAL_RCC_OscConfig+0x330>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	e015      	b.n	80010c0 <HAL_RCC_OscConfig+0x2f8>
 8001094:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001098:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800109c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80010a0:	fa93 f3a3 	rbit	r3, r3
 80010a4:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80010a8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80010ac:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80010b0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80010b4:	fa93 f3a3 	rbit	r3, r3
 80010b8:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80010bc:	4b0e      	ldr	r3, [pc, #56]	@ (80010f8 <HAL_RCC_OscConfig+0x330>)
 80010be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010c0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80010c4:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80010c8:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80010cc:	fa92 f2a2 	rbit	r2, r2
 80010d0:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80010d4:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80010d8:	fab2 f282 	clz	r2, r2
 80010dc:	b2d2      	uxtb	r2, r2
 80010de:	f042 0220 	orr.w	r2, r2, #32
 80010e2:	b2d2      	uxtb	r2, r2
 80010e4:	f002 021f 	and.w	r2, r2, #31
 80010e8:	2101      	movs	r1, #1
 80010ea:	fa01 f202 	lsl.w	r2, r1, r2
 80010ee:	4013      	ands	r3, r2
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d1ab      	bne.n	800104c <HAL_RCC_OscConfig+0x284>
 80010f4:	e003      	b.n	80010fe <HAL_RCC_OscConfig+0x336>
 80010f6:	bf00      	nop
 80010f8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001102:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f003 0302 	and.w	r3, r3, #2
 800110e:	2b00      	cmp	r3, #0
 8001110:	f000 817d 	beq.w	800140e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001114:	4ba6      	ldr	r3, [pc, #664]	@ (80013b0 <HAL_RCC_OscConfig+0x5e8>)
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f003 030c 	and.w	r3, r3, #12
 800111c:	2b00      	cmp	r3, #0
 800111e:	d00b      	beq.n	8001138 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001120:	4ba3      	ldr	r3, [pc, #652]	@ (80013b0 <HAL_RCC_OscConfig+0x5e8>)
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f003 030c 	and.w	r3, r3, #12
 8001128:	2b08      	cmp	r3, #8
 800112a:	d172      	bne.n	8001212 <HAL_RCC_OscConfig+0x44a>
 800112c:	4ba0      	ldr	r3, [pc, #640]	@ (80013b0 <HAL_RCC_OscConfig+0x5e8>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001134:	2b00      	cmp	r3, #0
 8001136:	d16c      	bne.n	8001212 <HAL_RCC_OscConfig+0x44a>
 8001138:	2302      	movs	r3, #2
 800113a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800113e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001142:	fa93 f3a3 	rbit	r3, r3
 8001146:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800114a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800114e:	fab3 f383 	clz	r3, r3
 8001152:	b2db      	uxtb	r3, r3
 8001154:	095b      	lsrs	r3, r3, #5
 8001156:	b2db      	uxtb	r3, r3
 8001158:	f043 0301 	orr.w	r3, r3, #1
 800115c:	b2db      	uxtb	r3, r3
 800115e:	2b01      	cmp	r3, #1
 8001160:	d102      	bne.n	8001168 <HAL_RCC_OscConfig+0x3a0>
 8001162:	4b93      	ldr	r3, [pc, #588]	@ (80013b0 <HAL_RCC_OscConfig+0x5e8>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	e013      	b.n	8001190 <HAL_RCC_OscConfig+0x3c8>
 8001168:	2302      	movs	r3, #2
 800116a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800116e:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001172:	fa93 f3a3 	rbit	r3, r3
 8001176:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800117a:	2302      	movs	r3, #2
 800117c:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001180:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001184:	fa93 f3a3 	rbit	r3, r3
 8001188:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 800118c:	4b88      	ldr	r3, [pc, #544]	@ (80013b0 <HAL_RCC_OscConfig+0x5e8>)
 800118e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001190:	2202      	movs	r2, #2
 8001192:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001196:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800119a:	fa92 f2a2 	rbit	r2, r2
 800119e:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80011a2:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80011a6:	fab2 f282 	clz	r2, r2
 80011aa:	b2d2      	uxtb	r2, r2
 80011ac:	f042 0220 	orr.w	r2, r2, #32
 80011b0:	b2d2      	uxtb	r2, r2
 80011b2:	f002 021f 	and.w	r2, r2, #31
 80011b6:	2101      	movs	r1, #1
 80011b8:	fa01 f202 	lsl.w	r2, r1, r2
 80011bc:	4013      	ands	r3, r2
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d00a      	beq.n	80011d8 <HAL_RCC_OscConfig+0x410>
 80011c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011c6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	691b      	ldr	r3, [r3, #16]
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d002      	beq.n	80011d8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	f000 be2e 	b.w	8001e34 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011d8:	4b75      	ldr	r3, [pc, #468]	@ (80013b0 <HAL_RCC_OscConfig+0x5e8>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011e4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	695b      	ldr	r3, [r3, #20]
 80011ec:	21f8      	movs	r1, #248	@ 0xf8
 80011ee:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011f2:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80011f6:	fa91 f1a1 	rbit	r1, r1
 80011fa:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80011fe:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001202:	fab1 f181 	clz	r1, r1
 8001206:	b2c9      	uxtb	r1, r1
 8001208:	408b      	lsls	r3, r1
 800120a:	4969      	ldr	r1, [pc, #420]	@ (80013b0 <HAL_RCC_OscConfig+0x5e8>)
 800120c:	4313      	orrs	r3, r2
 800120e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001210:	e0fd      	b.n	800140e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001212:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001216:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	691b      	ldr	r3, [r3, #16]
 800121e:	2b00      	cmp	r3, #0
 8001220:	f000 8088 	beq.w	8001334 <HAL_RCC_OscConfig+0x56c>
 8001224:	2301      	movs	r3, #1
 8001226:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800122a:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800122e:	fa93 f3a3 	rbit	r3, r3
 8001232:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001236:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800123a:	fab3 f383 	clz	r3, r3
 800123e:	b2db      	uxtb	r3, r3
 8001240:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001244:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	461a      	mov	r2, r3
 800124c:	2301      	movs	r3, #1
 800124e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001250:	f7ff fa96 	bl	8000780 <HAL_GetTick>
 8001254:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001258:	e00a      	b.n	8001270 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800125a:	f7ff fa91 	bl	8000780 <HAL_GetTick>
 800125e:	4602      	mov	r2, r0
 8001260:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	2b02      	cmp	r3, #2
 8001268:	d902      	bls.n	8001270 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800126a:	2303      	movs	r3, #3
 800126c:	f000 bde2 	b.w	8001e34 <HAL_RCC_OscConfig+0x106c>
 8001270:	2302      	movs	r3, #2
 8001272:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001276:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800127a:	fa93 f3a3 	rbit	r3, r3
 800127e:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001282:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001286:	fab3 f383 	clz	r3, r3
 800128a:	b2db      	uxtb	r3, r3
 800128c:	095b      	lsrs	r3, r3, #5
 800128e:	b2db      	uxtb	r3, r3
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	b2db      	uxtb	r3, r3
 8001296:	2b01      	cmp	r3, #1
 8001298:	d102      	bne.n	80012a0 <HAL_RCC_OscConfig+0x4d8>
 800129a:	4b45      	ldr	r3, [pc, #276]	@ (80013b0 <HAL_RCC_OscConfig+0x5e8>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	e013      	b.n	80012c8 <HAL_RCC_OscConfig+0x500>
 80012a0:	2302      	movs	r3, #2
 80012a2:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012a6:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80012aa:	fa93 f3a3 	rbit	r3, r3
 80012ae:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80012b2:	2302      	movs	r3, #2
 80012b4:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80012b8:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80012bc:	fa93 f3a3 	rbit	r3, r3
 80012c0:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80012c4:	4b3a      	ldr	r3, [pc, #232]	@ (80013b0 <HAL_RCC_OscConfig+0x5e8>)
 80012c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012c8:	2202      	movs	r2, #2
 80012ca:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80012ce:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80012d2:	fa92 f2a2 	rbit	r2, r2
 80012d6:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80012da:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80012de:	fab2 f282 	clz	r2, r2
 80012e2:	b2d2      	uxtb	r2, r2
 80012e4:	f042 0220 	orr.w	r2, r2, #32
 80012e8:	b2d2      	uxtb	r2, r2
 80012ea:	f002 021f 	and.w	r2, r2, #31
 80012ee:	2101      	movs	r1, #1
 80012f0:	fa01 f202 	lsl.w	r2, r1, r2
 80012f4:	4013      	ands	r3, r2
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d0af      	beq.n	800125a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012fa:	4b2d      	ldr	r3, [pc, #180]	@ (80013b0 <HAL_RCC_OscConfig+0x5e8>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001302:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001306:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	695b      	ldr	r3, [r3, #20]
 800130e:	21f8      	movs	r1, #248	@ 0xf8
 8001310:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001314:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001318:	fa91 f1a1 	rbit	r1, r1
 800131c:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001320:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001324:	fab1 f181 	clz	r1, r1
 8001328:	b2c9      	uxtb	r1, r1
 800132a:	408b      	lsls	r3, r1
 800132c:	4920      	ldr	r1, [pc, #128]	@ (80013b0 <HAL_RCC_OscConfig+0x5e8>)
 800132e:	4313      	orrs	r3, r2
 8001330:	600b      	str	r3, [r1, #0]
 8001332:	e06c      	b.n	800140e <HAL_RCC_OscConfig+0x646>
 8001334:	2301      	movs	r3, #1
 8001336:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800133a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800133e:	fa93 f3a3 	rbit	r3, r3
 8001342:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001346:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800134a:	fab3 f383 	clz	r3, r3
 800134e:	b2db      	uxtb	r3, r3
 8001350:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001354:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	461a      	mov	r2, r3
 800135c:	2300      	movs	r3, #0
 800135e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001360:	f7ff fa0e 	bl	8000780 <HAL_GetTick>
 8001364:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001368:	e00a      	b.n	8001380 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800136a:	f7ff fa09 	bl	8000780 <HAL_GetTick>
 800136e:	4602      	mov	r2, r0
 8001370:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	2b02      	cmp	r3, #2
 8001378:	d902      	bls.n	8001380 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	f000 bd5a 	b.w	8001e34 <HAL_RCC_OscConfig+0x106c>
 8001380:	2302      	movs	r3, #2
 8001382:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001386:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800138a:	fa93 f3a3 	rbit	r3, r3
 800138e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001392:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001396:	fab3 f383 	clz	r3, r3
 800139a:	b2db      	uxtb	r3, r3
 800139c:	095b      	lsrs	r3, r3, #5
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	f043 0301 	orr.w	r3, r3, #1
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d104      	bne.n	80013b4 <HAL_RCC_OscConfig+0x5ec>
 80013aa:	4b01      	ldr	r3, [pc, #4]	@ (80013b0 <HAL_RCC_OscConfig+0x5e8>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	e015      	b.n	80013dc <HAL_RCC_OscConfig+0x614>
 80013b0:	40021000 	.word	0x40021000
 80013b4:	2302      	movs	r3, #2
 80013b6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80013be:	fa93 f3a3 	rbit	r3, r3
 80013c2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80013c6:	2302      	movs	r3, #2
 80013c8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80013cc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80013d0:	fa93 f3a3 	rbit	r3, r3
 80013d4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80013d8:	4bc8      	ldr	r3, [pc, #800]	@ (80016fc <HAL_RCC_OscConfig+0x934>)
 80013da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013dc:	2202      	movs	r2, #2
 80013de:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80013e2:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80013e6:	fa92 f2a2 	rbit	r2, r2
 80013ea:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80013ee:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80013f2:	fab2 f282 	clz	r2, r2
 80013f6:	b2d2      	uxtb	r2, r2
 80013f8:	f042 0220 	orr.w	r2, r2, #32
 80013fc:	b2d2      	uxtb	r2, r2
 80013fe:	f002 021f 	and.w	r2, r2, #31
 8001402:	2101      	movs	r1, #1
 8001404:	fa01 f202 	lsl.w	r2, r1, r2
 8001408:	4013      	ands	r3, r2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d1ad      	bne.n	800136a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800140e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001412:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0308 	and.w	r3, r3, #8
 800141e:	2b00      	cmp	r3, #0
 8001420:	f000 8110 	beq.w	8001644 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001424:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001428:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d079      	beq.n	8001528 <HAL_RCC_OscConfig+0x760>
 8001434:	2301      	movs	r3, #1
 8001436:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800143a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800143e:	fa93 f3a3 	rbit	r3, r3
 8001442:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001446:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800144a:	fab3 f383 	clz	r3, r3
 800144e:	b2db      	uxtb	r3, r3
 8001450:	461a      	mov	r2, r3
 8001452:	4bab      	ldr	r3, [pc, #684]	@ (8001700 <HAL_RCC_OscConfig+0x938>)
 8001454:	4413      	add	r3, r2
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	461a      	mov	r2, r3
 800145a:	2301      	movs	r3, #1
 800145c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800145e:	f7ff f98f 	bl	8000780 <HAL_GetTick>
 8001462:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001466:	e00a      	b.n	800147e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001468:	f7ff f98a 	bl	8000780 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	2b02      	cmp	r3, #2
 8001476:	d902      	bls.n	800147e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001478:	2303      	movs	r3, #3
 800147a:	f000 bcdb 	b.w	8001e34 <HAL_RCC_OscConfig+0x106c>
 800147e:	2302      	movs	r3, #2
 8001480:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001484:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001488:	fa93 f3a3 	rbit	r3, r3
 800148c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001490:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001494:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001498:	2202      	movs	r2, #2
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014a0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	fa93 f2a3 	rbit	r2, r3
 80014aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80014bc:	2202      	movs	r2, #2
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	fa93 f2a3 	rbit	r2, r3
 80014ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014d2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80014d6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014d8:	4b88      	ldr	r3, [pc, #544]	@ (80016fc <HAL_RCC_OscConfig+0x934>)
 80014da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80014dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014e0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80014e4:	2102      	movs	r1, #2
 80014e6:	6019      	str	r1, [r3, #0]
 80014e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014ec:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	fa93 f1a3 	rbit	r1, r3
 80014f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014fa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80014fe:	6019      	str	r1, [r3, #0]
  return result;
 8001500:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001504:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	fab3 f383 	clz	r3, r3
 800150e:	b2db      	uxtb	r3, r3
 8001510:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001514:	b2db      	uxtb	r3, r3
 8001516:	f003 031f 	and.w	r3, r3, #31
 800151a:	2101      	movs	r1, #1
 800151c:	fa01 f303 	lsl.w	r3, r1, r3
 8001520:	4013      	ands	r3, r2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d0a0      	beq.n	8001468 <HAL_RCC_OscConfig+0x6a0>
 8001526:	e08d      	b.n	8001644 <HAL_RCC_OscConfig+0x87c>
 8001528:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800152c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001530:	2201      	movs	r2, #1
 8001532:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001534:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001538:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	fa93 f2a3 	rbit	r2, r3
 8001542:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001546:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800154a:	601a      	str	r2, [r3, #0]
  return result;
 800154c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001550:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001554:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001556:	fab3 f383 	clz	r3, r3
 800155a:	b2db      	uxtb	r3, r3
 800155c:	461a      	mov	r2, r3
 800155e:	4b68      	ldr	r3, [pc, #416]	@ (8001700 <HAL_RCC_OscConfig+0x938>)
 8001560:	4413      	add	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	461a      	mov	r2, r3
 8001566:	2300      	movs	r3, #0
 8001568:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800156a:	f7ff f909 	bl	8000780 <HAL_GetTick>
 800156e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001572:	e00a      	b.n	800158a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001574:	f7ff f904 	bl	8000780 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	2b02      	cmp	r3, #2
 8001582:	d902      	bls.n	800158a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	f000 bc55 	b.w	8001e34 <HAL_RCC_OscConfig+0x106c>
 800158a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800158e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001592:	2202      	movs	r2, #2
 8001594:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001596:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800159a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	fa93 f2a3 	rbit	r2, r3
 80015a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015a8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015b2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80015b6:	2202      	movs	r2, #2
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015be:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	fa93 f2a3 	rbit	r2, r3
 80015c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015cc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015d6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80015da:	2202      	movs	r2, #2
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015e2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	fa93 f2a3 	rbit	r2, r3
 80015ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015f0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80015f4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015f6:	4b41      	ldr	r3, [pc, #260]	@ (80016fc <HAL_RCC_OscConfig+0x934>)
 80015f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80015fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015fe:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001602:	2102      	movs	r1, #2
 8001604:	6019      	str	r1, [r3, #0]
 8001606:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800160a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	fa93 f1a3 	rbit	r1, r3
 8001614:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001618:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800161c:	6019      	str	r1, [r3, #0]
  return result;
 800161e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001622:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	fab3 f383 	clz	r3, r3
 800162c:	b2db      	uxtb	r3, r3
 800162e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001632:	b2db      	uxtb	r3, r3
 8001634:	f003 031f 	and.w	r3, r3, #31
 8001638:	2101      	movs	r1, #1
 800163a:	fa01 f303 	lsl.w	r3, r1, r3
 800163e:	4013      	ands	r3, r2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d197      	bne.n	8001574 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001644:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001648:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0304 	and.w	r3, r3, #4
 8001654:	2b00      	cmp	r3, #0
 8001656:	f000 81a1 	beq.w	800199c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800165a:	2300      	movs	r3, #0
 800165c:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001660:	4b26      	ldr	r3, [pc, #152]	@ (80016fc <HAL_RCC_OscConfig+0x934>)
 8001662:	69db      	ldr	r3, [r3, #28]
 8001664:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d116      	bne.n	800169a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800166c:	4b23      	ldr	r3, [pc, #140]	@ (80016fc <HAL_RCC_OscConfig+0x934>)
 800166e:	69db      	ldr	r3, [r3, #28]
 8001670:	4a22      	ldr	r2, [pc, #136]	@ (80016fc <HAL_RCC_OscConfig+0x934>)
 8001672:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001676:	61d3      	str	r3, [r2, #28]
 8001678:	4b20      	ldr	r3, [pc, #128]	@ (80016fc <HAL_RCC_OscConfig+0x934>)
 800167a:	69db      	ldr	r3, [r3, #28]
 800167c:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001680:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001684:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800168e:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001692:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001694:	2301      	movs	r3, #1
 8001696:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800169a:	4b1a      	ldr	r3, [pc, #104]	@ (8001704 <HAL_RCC_OscConfig+0x93c>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d11a      	bne.n	80016dc <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016a6:	4b17      	ldr	r3, [pc, #92]	@ (8001704 <HAL_RCC_OscConfig+0x93c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a16      	ldr	r2, [pc, #88]	@ (8001704 <HAL_RCC_OscConfig+0x93c>)
 80016ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016b0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016b2:	f7ff f865 	bl	8000780 <HAL_GetTick>
 80016b6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ba:	e009      	b.n	80016d0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016bc:	f7ff f860 	bl	8000780 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	2b64      	cmp	r3, #100	@ 0x64
 80016ca:	d901      	bls.n	80016d0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e3b1      	b.n	8001e34 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001704 <HAL_RCC_OscConfig+0x93c>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d0ef      	beq.n	80016bc <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016e0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d10d      	bne.n	8001708 <HAL_RCC_OscConfig+0x940>
 80016ec:	4b03      	ldr	r3, [pc, #12]	@ (80016fc <HAL_RCC_OscConfig+0x934>)
 80016ee:	6a1b      	ldr	r3, [r3, #32]
 80016f0:	4a02      	ldr	r2, [pc, #8]	@ (80016fc <HAL_RCC_OscConfig+0x934>)
 80016f2:	f043 0301 	orr.w	r3, r3, #1
 80016f6:	6213      	str	r3, [r2, #32]
 80016f8:	e03c      	b.n	8001774 <HAL_RCC_OscConfig+0x9ac>
 80016fa:	bf00      	nop
 80016fc:	40021000 	.word	0x40021000
 8001700:	10908120 	.word	0x10908120
 8001704:	40007000 	.word	0x40007000
 8001708:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800170c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d10c      	bne.n	8001732 <HAL_RCC_OscConfig+0x96a>
 8001718:	4bc1      	ldr	r3, [pc, #772]	@ (8001a20 <HAL_RCC_OscConfig+0xc58>)
 800171a:	6a1b      	ldr	r3, [r3, #32]
 800171c:	4ac0      	ldr	r2, [pc, #768]	@ (8001a20 <HAL_RCC_OscConfig+0xc58>)
 800171e:	f023 0301 	bic.w	r3, r3, #1
 8001722:	6213      	str	r3, [r2, #32]
 8001724:	4bbe      	ldr	r3, [pc, #760]	@ (8001a20 <HAL_RCC_OscConfig+0xc58>)
 8001726:	6a1b      	ldr	r3, [r3, #32]
 8001728:	4abd      	ldr	r2, [pc, #756]	@ (8001a20 <HAL_RCC_OscConfig+0xc58>)
 800172a:	f023 0304 	bic.w	r3, r3, #4
 800172e:	6213      	str	r3, [r2, #32]
 8001730:	e020      	b.n	8001774 <HAL_RCC_OscConfig+0x9ac>
 8001732:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001736:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	2b05      	cmp	r3, #5
 8001740:	d10c      	bne.n	800175c <HAL_RCC_OscConfig+0x994>
 8001742:	4bb7      	ldr	r3, [pc, #732]	@ (8001a20 <HAL_RCC_OscConfig+0xc58>)
 8001744:	6a1b      	ldr	r3, [r3, #32]
 8001746:	4ab6      	ldr	r2, [pc, #728]	@ (8001a20 <HAL_RCC_OscConfig+0xc58>)
 8001748:	f043 0304 	orr.w	r3, r3, #4
 800174c:	6213      	str	r3, [r2, #32]
 800174e:	4bb4      	ldr	r3, [pc, #720]	@ (8001a20 <HAL_RCC_OscConfig+0xc58>)
 8001750:	6a1b      	ldr	r3, [r3, #32]
 8001752:	4ab3      	ldr	r2, [pc, #716]	@ (8001a20 <HAL_RCC_OscConfig+0xc58>)
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	6213      	str	r3, [r2, #32]
 800175a:	e00b      	b.n	8001774 <HAL_RCC_OscConfig+0x9ac>
 800175c:	4bb0      	ldr	r3, [pc, #704]	@ (8001a20 <HAL_RCC_OscConfig+0xc58>)
 800175e:	6a1b      	ldr	r3, [r3, #32]
 8001760:	4aaf      	ldr	r2, [pc, #700]	@ (8001a20 <HAL_RCC_OscConfig+0xc58>)
 8001762:	f023 0301 	bic.w	r3, r3, #1
 8001766:	6213      	str	r3, [r2, #32]
 8001768:	4bad      	ldr	r3, [pc, #692]	@ (8001a20 <HAL_RCC_OscConfig+0xc58>)
 800176a:	6a1b      	ldr	r3, [r3, #32]
 800176c:	4aac      	ldr	r2, [pc, #688]	@ (8001a20 <HAL_RCC_OscConfig+0xc58>)
 800176e:	f023 0304 	bic.w	r3, r3, #4
 8001772:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001774:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001778:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	2b00      	cmp	r3, #0
 8001782:	f000 8081 	beq.w	8001888 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001786:	f7fe fffb 	bl	8000780 <HAL_GetTick>
 800178a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800178e:	e00b      	b.n	80017a8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001790:	f7fe fff6 	bl	8000780 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d901      	bls.n	80017a8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e345      	b.n	8001e34 <HAL_RCC_OscConfig+0x106c>
 80017a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017ac:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80017b0:	2202      	movs	r2, #2
 80017b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017b8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	fa93 f2a3 	rbit	r2, r3
 80017c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017c6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017d0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80017d4:	2202      	movs	r2, #2
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017dc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	fa93 f2a3 	rbit	r2, r3
 80017e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017ea:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80017ee:	601a      	str	r2, [r3, #0]
  return result;
 80017f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017f4:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80017f8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017fa:	fab3 f383 	clz	r3, r3
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	095b      	lsrs	r3, r3, #5
 8001802:	b2db      	uxtb	r3, r3
 8001804:	f043 0302 	orr.w	r3, r3, #2
 8001808:	b2db      	uxtb	r3, r3
 800180a:	2b02      	cmp	r3, #2
 800180c:	d102      	bne.n	8001814 <HAL_RCC_OscConfig+0xa4c>
 800180e:	4b84      	ldr	r3, [pc, #528]	@ (8001a20 <HAL_RCC_OscConfig+0xc58>)
 8001810:	6a1b      	ldr	r3, [r3, #32]
 8001812:	e013      	b.n	800183c <HAL_RCC_OscConfig+0xa74>
 8001814:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001818:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800181c:	2202      	movs	r2, #2
 800181e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001820:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001824:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	fa93 f2a3 	rbit	r2, r3
 800182e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001832:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	4b79      	ldr	r3, [pc, #484]	@ (8001a20 <HAL_RCC_OscConfig+0xc58>)
 800183a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800183c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001840:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001844:	2102      	movs	r1, #2
 8001846:	6011      	str	r1, [r2, #0]
 8001848:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800184c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001850:	6812      	ldr	r2, [r2, #0]
 8001852:	fa92 f1a2 	rbit	r1, r2
 8001856:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800185a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800185e:	6011      	str	r1, [r2, #0]
  return result;
 8001860:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001864:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001868:	6812      	ldr	r2, [r2, #0]
 800186a:	fab2 f282 	clz	r2, r2
 800186e:	b2d2      	uxtb	r2, r2
 8001870:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001874:	b2d2      	uxtb	r2, r2
 8001876:	f002 021f 	and.w	r2, r2, #31
 800187a:	2101      	movs	r1, #1
 800187c:	fa01 f202 	lsl.w	r2, r1, r2
 8001880:	4013      	ands	r3, r2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d084      	beq.n	8001790 <HAL_RCC_OscConfig+0x9c8>
 8001886:	e07f      	b.n	8001988 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001888:	f7fe ff7a 	bl	8000780 <HAL_GetTick>
 800188c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001890:	e00b      	b.n	80018aa <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001892:	f7fe ff75 	bl	8000780 <HAL_GetTick>
 8001896:	4602      	mov	r2, r0
 8001898:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e2c4      	b.n	8001e34 <HAL_RCC_OscConfig+0x106c>
 80018aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018ae:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80018b2:	2202      	movs	r2, #2
 80018b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018ba:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	fa93 f2a3 	rbit	r2, r3
 80018c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018c8:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018d2:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80018d6:	2202      	movs	r2, #2
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018de:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	fa93 f2a3 	rbit	r2, r3
 80018e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018ec:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80018f0:	601a      	str	r2, [r3, #0]
  return result;
 80018f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018f6:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80018fa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018fc:	fab3 f383 	clz	r3, r3
 8001900:	b2db      	uxtb	r3, r3
 8001902:	095b      	lsrs	r3, r3, #5
 8001904:	b2db      	uxtb	r3, r3
 8001906:	f043 0302 	orr.w	r3, r3, #2
 800190a:	b2db      	uxtb	r3, r3
 800190c:	2b02      	cmp	r3, #2
 800190e:	d102      	bne.n	8001916 <HAL_RCC_OscConfig+0xb4e>
 8001910:	4b43      	ldr	r3, [pc, #268]	@ (8001a20 <HAL_RCC_OscConfig+0xc58>)
 8001912:	6a1b      	ldr	r3, [r3, #32]
 8001914:	e013      	b.n	800193e <HAL_RCC_OscConfig+0xb76>
 8001916:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800191a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800191e:	2202      	movs	r2, #2
 8001920:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001922:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001926:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	fa93 f2a3 	rbit	r2, r3
 8001930:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001934:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	4b39      	ldr	r3, [pc, #228]	@ (8001a20 <HAL_RCC_OscConfig+0xc58>)
 800193c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800193e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001942:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001946:	2102      	movs	r1, #2
 8001948:	6011      	str	r1, [r2, #0]
 800194a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800194e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001952:	6812      	ldr	r2, [r2, #0]
 8001954:	fa92 f1a2 	rbit	r1, r2
 8001958:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800195c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001960:	6011      	str	r1, [r2, #0]
  return result;
 8001962:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001966:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800196a:	6812      	ldr	r2, [r2, #0]
 800196c:	fab2 f282 	clz	r2, r2
 8001970:	b2d2      	uxtb	r2, r2
 8001972:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001976:	b2d2      	uxtb	r2, r2
 8001978:	f002 021f 	and.w	r2, r2, #31
 800197c:	2101      	movs	r1, #1
 800197e:	fa01 f202 	lsl.w	r2, r1, r2
 8001982:	4013      	ands	r3, r2
 8001984:	2b00      	cmp	r3, #0
 8001986:	d184      	bne.n	8001892 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001988:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 800198c:	2b01      	cmp	r3, #1
 800198e:	d105      	bne.n	800199c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001990:	4b23      	ldr	r3, [pc, #140]	@ (8001a20 <HAL_RCC_OscConfig+0xc58>)
 8001992:	69db      	ldr	r3, [r3, #28]
 8001994:	4a22      	ldr	r2, [pc, #136]	@ (8001a20 <HAL_RCC_OscConfig+0xc58>)
 8001996:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800199a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800199c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019a0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	69db      	ldr	r3, [r3, #28]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	f000 8242 	beq.w	8001e32 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001a20 <HAL_RCC_OscConfig+0xc58>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f003 030c 	and.w	r3, r3, #12
 80019b6:	2b08      	cmp	r3, #8
 80019b8:	f000 8213 	beq.w	8001de2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019c0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	69db      	ldr	r3, [r3, #28]
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	f040 8162 	bne.w	8001c92 <HAL_RCC_OscConfig+0xeca>
 80019ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019d2:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80019d6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80019da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019e0:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	fa93 f2a3 	rbit	r2, r3
 80019ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019ee:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80019f2:	601a      	str	r2, [r3, #0]
  return result;
 80019f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019f8:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80019fc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019fe:	fab3 f383 	clz	r3, r3
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001a08:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	461a      	mov	r2, r3
 8001a10:	2300      	movs	r3, #0
 8001a12:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a14:	f7fe feb4 	bl	8000780 <HAL_GetTick>
 8001a18:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a1c:	e00c      	b.n	8001a38 <HAL_RCC_OscConfig+0xc70>
 8001a1e:	bf00      	nop
 8001a20:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a24:	f7fe feac 	bl	8000780 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d901      	bls.n	8001a38 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e1fd      	b.n	8001e34 <HAL_RCC_OscConfig+0x106c>
 8001a38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a3c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001a40:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a4a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	fa93 f2a3 	rbit	r2, r3
 8001a54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a58:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001a5c:	601a      	str	r2, [r3, #0]
  return result;
 8001a5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a62:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001a66:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a68:	fab3 f383 	clz	r3, r3
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	095b      	lsrs	r3, r3, #5
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	f043 0301 	orr.w	r3, r3, #1
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d102      	bne.n	8001a82 <HAL_RCC_OscConfig+0xcba>
 8001a7c:	4bb0      	ldr	r3, [pc, #704]	@ (8001d40 <HAL_RCC_OscConfig+0xf78>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	e027      	b.n	8001ad2 <HAL_RCC_OscConfig+0xd0a>
 8001a82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a86:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001a8a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a94:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	fa93 f2a3 	rbit	r2, r3
 8001a9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aa2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aac:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001ab0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aba:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	fa93 f2a3 	rbit	r2, r3
 8001ac4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ac8:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	4b9c      	ldr	r3, [pc, #624]	@ (8001d40 <HAL_RCC_OscConfig+0xf78>)
 8001ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ad2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ad6:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001ada:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001ade:	6011      	str	r1, [r2, #0]
 8001ae0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ae4:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001ae8:	6812      	ldr	r2, [r2, #0]
 8001aea:	fa92 f1a2 	rbit	r1, r2
 8001aee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001af2:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001af6:	6011      	str	r1, [r2, #0]
  return result;
 8001af8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001afc:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001b00:	6812      	ldr	r2, [r2, #0]
 8001b02:	fab2 f282 	clz	r2, r2
 8001b06:	b2d2      	uxtb	r2, r2
 8001b08:	f042 0220 	orr.w	r2, r2, #32
 8001b0c:	b2d2      	uxtb	r2, r2
 8001b0e:	f002 021f 	and.w	r2, r2, #31
 8001b12:	2101      	movs	r1, #1
 8001b14:	fa01 f202 	lsl.w	r2, r1, r2
 8001b18:	4013      	ands	r3, r2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d182      	bne.n	8001a24 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b1e:	4b88      	ldr	r3, [pc, #544]	@ (8001d40 <HAL_RCC_OscConfig+0xf78>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001b26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b2a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001b32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b36:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	6a1b      	ldr	r3, [r3, #32]
 8001b3e:	430b      	orrs	r3, r1
 8001b40:	497f      	ldr	r1, [pc, #508]	@ (8001d40 <HAL_RCC_OscConfig+0xf78>)
 8001b42:	4313      	orrs	r3, r2
 8001b44:	604b      	str	r3, [r1, #4]
 8001b46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b4a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001b4e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001b52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b58:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	fa93 f2a3 	rbit	r2, r3
 8001b62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b66:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001b6a:	601a      	str	r2, [r3, #0]
  return result;
 8001b6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b70:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001b74:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b76:	fab3 f383 	clz	r3, r3
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001b80:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	461a      	mov	r2, r3
 8001b88:	2301      	movs	r3, #1
 8001b8a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b8c:	f7fe fdf8 	bl	8000780 <HAL_GetTick>
 8001b90:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b94:	e009      	b.n	8001baa <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b96:	f7fe fdf3 	bl	8000780 <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e144      	b.n	8001e34 <HAL_RCC_OscConfig+0x106c>
 8001baa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bae:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001bb2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001bb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bbc:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	fa93 f2a3 	rbit	r2, r3
 8001bc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bca:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001bce:	601a      	str	r2, [r3, #0]
  return result;
 8001bd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bd4:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001bd8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bda:	fab3 f383 	clz	r3, r3
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	095b      	lsrs	r3, r3, #5
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	f043 0301 	orr.w	r3, r3, #1
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d102      	bne.n	8001bf4 <HAL_RCC_OscConfig+0xe2c>
 8001bee:	4b54      	ldr	r3, [pc, #336]	@ (8001d40 <HAL_RCC_OscConfig+0xf78>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	e027      	b.n	8001c44 <HAL_RCC_OscConfig+0xe7c>
 8001bf4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bf8:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001bfc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c06:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	fa93 f2a3 	rbit	r2, r3
 8001c10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c14:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c1e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001c22:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c2c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	fa93 f2a3 	rbit	r2, r3
 8001c36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c3a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	4b3f      	ldr	r3, [pc, #252]	@ (8001d40 <HAL_RCC_OscConfig+0xf78>)
 8001c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c44:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c48:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001c4c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001c50:	6011      	str	r1, [r2, #0]
 8001c52:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c56:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001c5a:	6812      	ldr	r2, [r2, #0]
 8001c5c:	fa92 f1a2 	rbit	r1, r2
 8001c60:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c64:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001c68:	6011      	str	r1, [r2, #0]
  return result;
 8001c6a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c6e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001c72:	6812      	ldr	r2, [r2, #0]
 8001c74:	fab2 f282 	clz	r2, r2
 8001c78:	b2d2      	uxtb	r2, r2
 8001c7a:	f042 0220 	orr.w	r2, r2, #32
 8001c7e:	b2d2      	uxtb	r2, r2
 8001c80:	f002 021f 	and.w	r2, r2, #31
 8001c84:	2101      	movs	r1, #1
 8001c86:	fa01 f202 	lsl.w	r2, r1, r2
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d082      	beq.n	8001b96 <HAL_RCC_OscConfig+0xdce>
 8001c90:	e0cf      	b.n	8001e32 <HAL_RCC_OscConfig+0x106a>
 8001c92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c96:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001c9a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001c9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ca4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	fa93 f2a3 	rbit	r2, r3
 8001cae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cb2:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001cb6:	601a      	str	r2, [r3, #0]
  return result;
 8001cb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cbc:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001cc0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cc2:	fab3 f383 	clz	r3, r3
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001ccc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd8:	f7fe fd52 	bl	8000780 <HAL_GetTick>
 8001cdc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ce0:	e009      	b.n	8001cf6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ce2:	f7fe fd4d 	bl	8000780 <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e09e      	b.n	8001e34 <HAL_RCC_OscConfig+0x106c>
 8001cf6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cfa:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001cfe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d08:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	fa93 f2a3 	rbit	r2, r3
 8001d12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d16:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001d1a:	601a      	str	r2, [r3, #0]
  return result;
 8001d1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d20:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001d24:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d26:	fab3 f383 	clz	r3, r3
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	095b      	lsrs	r3, r3, #5
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	f043 0301 	orr.w	r3, r3, #1
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d104      	bne.n	8001d44 <HAL_RCC_OscConfig+0xf7c>
 8001d3a:	4b01      	ldr	r3, [pc, #4]	@ (8001d40 <HAL_RCC_OscConfig+0xf78>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	e029      	b.n	8001d94 <HAL_RCC_OscConfig+0xfcc>
 8001d40:	40021000 	.word	0x40021000
 8001d44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d48:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001d4c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d56:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	fa93 f2a3 	rbit	r2, r3
 8001d60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d64:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d6e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001d72:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d7c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	fa93 f2a3 	rbit	r2, r3
 8001d86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d8a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	4b2b      	ldr	r3, [pc, #172]	@ (8001e40 <HAL_RCC_OscConfig+0x1078>)
 8001d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d94:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d98:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001d9c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001da0:	6011      	str	r1, [r2, #0]
 8001da2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001da6:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001daa:	6812      	ldr	r2, [r2, #0]
 8001dac:	fa92 f1a2 	rbit	r1, r2
 8001db0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001db4:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001db8:	6011      	str	r1, [r2, #0]
  return result;
 8001dba:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001dbe:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001dc2:	6812      	ldr	r2, [r2, #0]
 8001dc4:	fab2 f282 	clz	r2, r2
 8001dc8:	b2d2      	uxtb	r2, r2
 8001dca:	f042 0220 	orr.w	r2, r2, #32
 8001dce:	b2d2      	uxtb	r2, r2
 8001dd0:	f002 021f 	and.w	r2, r2, #31
 8001dd4:	2101      	movs	r1, #1
 8001dd6:	fa01 f202 	lsl.w	r2, r1, r2
 8001dda:	4013      	ands	r3, r2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d180      	bne.n	8001ce2 <HAL_RCC_OscConfig+0xf1a>
 8001de0:	e027      	b.n	8001e32 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001de2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001de6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d101      	bne.n	8001df6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e01e      	b.n	8001e34 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001df6:	4b12      	ldr	r3, [pc, #72]	@ (8001e40 <HAL_RCC_OscConfig+0x1078>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001dfe:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001e02:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001e06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e0a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6a1b      	ldr	r3, [r3, #32]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d10b      	bne.n	8001e2e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001e16:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001e1a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001e1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e22:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d001      	beq.n	8001e32 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e000      	b.n	8001e34 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40021000 	.word	0x40021000

08001e44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b09e      	sub	sp, #120	@ 0x78
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d101      	bne.n	8001e5c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e162      	b.n	8002122 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e5c:	4b90      	ldr	r3, [pc, #576]	@ (80020a0 <HAL_RCC_ClockConfig+0x25c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0307 	and.w	r3, r3, #7
 8001e64:	683a      	ldr	r2, [r7, #0]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d910      	bls.n	8001e8c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e6a:	4b8d      	ldr	r3, [pc, #564]	@ (80020a0 <HAL_RCC_ClockConfig+0x25c>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f023 0207 	bic.w	r2, r3, #7
 8001e72:	498b      	ldr	r1, [pc, #556]	@ (80020a0 <HAL_RCC_ClockConfig+0x25c>)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e7a:	4b89      	ldr	r3, [pc, #548]	@ (80020a0 <HAL_RCC_ClockConfig+0x25c>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0307 	and.w	r3, r3, #7
 8001e82:	683a      	ldr	r2, [r7, #0]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d001      	beq.n	8001e8c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e14a      	b.n	8002122 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d008      	beq.n	8001eaa <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e98:	4b82      	ldr	r3, [pc, #520]	@ (80020a4 <HAL_RCC_ClockConfig+0x260>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	497f      	ldr	r1, [pc, #508]	@ (80020a4 <HAL_RCC_ClockConfig+0x260>)
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f000 80dc 	beq.w	8002070 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d13c      	bne.n	8001f3a <HAL_RCC_ClockConfig+0xf6>
 8001ec0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ec4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001ec8:	fa93 f3a3 	rbit	r3, r3
 8001ecc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001ece:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ed0:	fab3 f383 	clz	r3, r3
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	095b      	lsrs	r3, r3, #5
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	f043 0301 	orr.w	r3, r3, #1
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d102      	bne.n	8001eea <HAL_RCC_ClockConfig+0xa6>
 8001ee4:	4b6f      	ldr	r3, [pc, #444]	@ (80020a4 <HAL_RCC_ClockConfig+0x260>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	e00f      	b.n	8001f0a <HAL_RCC_ClockConfig+0xc6>
 8001eea:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001eee:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ef2:	fa93 f3a3 	rbit	r3, r3
 8001ef6:	667b      	str	r3, [r7, #100]	@ 0x64
 8001ef8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001efc:	663b      	str	r3, [r7, #96]	@ 0x60
 8001efe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001f00:	fa93 f3a3 	rbit	r3, r3
 8001f04:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001f06:	4b67      	ldr	r3, [pc, #412]	@ (80020a4 <HAL_RCC_ClockConfig+0x260>)
 8001f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f0a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001f0e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001f10:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001f12:	fa92 f2a2 	rbit	r2, r2
 8001f16:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8001f18:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001f1a:	fab2 f282 	clz	r2, r2
 8001f1e:	b2d2      	uxtb	r2, r2
 8001f20:	f042 0220 	orr.w	r2, r2, #32
 8001f24:	b2d2      	uxtb	r2, r2
 8001f26:	f002 021f 	and.w	r2, r2, #31
 8001f2a:	2101      	movs	r1, #1
 8001f2c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f30:	4013      	ands	r3, r2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d17b      	bne.n	800202e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e0f3      	b.n	8002122 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d13c      	bne.n	8001fbc <HAL_RCC_ClockConfig+0x178>
 8001f42:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f46:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f4a:	fa93 f3a3 	rbit	r3, r3
 8001f4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001f50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f52:	fab3 f383 	clz	r3, r3
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	095b      	lsrs	r3, r3, #5
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	f043 0301 	orr.w	r3, r3, #1
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d102      	bne.n	8001f6c <HAL_RCC_ClockConfig+0x128>
 8001f66:	4b4f      	ldr	r3, [pc, #316]	@ (80020a4 <HAL_RCC_ClockConfig+0x260>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	e00f      	b.n	8001f8c <HAL_RCC_ClockConfig+0x148>
 8001f6c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f70:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f74:	fa93 f3a3 	rbit	r3, r3
 8001f78:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f7a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f7e:	643b      	str	r3, [r7, #64]	@ 0x40
 8001f80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f82:	fa93 f3a3 	rbit	r3, r3
 8001f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f88:	4b46      	ldr	r3, [pc, #280]	@ (80020a4 <HAL_RCC_ClockConfig+0x260>)
 8001f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f8c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f90:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001f92:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001f94:	fa92 f2a2 	rbit	r2, r2
 8001f98:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8001f9a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001f9c:	fab2 f282 	clz	r2, r2
 8001fa0:	b2d2      	uxtb	r2, r2
 8001fa2:	f042 0220 	orr.w	r2, r2, #32
 8001fa6:	b2d2      	uxtb	r2, r2
 8001fa8:	f002 021f 	and.w	r2, r2, #31
 8001fac:	2101      	movs	r1, #1
 8001fae:	fa01 f202 	lsl.w	r2, r1, r2
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d13a      	bne.n	800202e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e0b2      	b.n	8002122 <HAL_RCC_ClockConfig+0x2de>
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fc2:	fa93 f3a3 	rbit	r3, r3
 8001fc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8001fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fca:	fab3 f383 	clz	r3, r3
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	095b      	lsrs	r3, r3, #5
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	f043 0301 	orr.w	r3, r3, #1
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d102      	bne.n	8001fe4 <HAL_RCC_ClockConfig+0x1a0>
 8001fde:	4b31      	ldr	r3, [pc, #196]	@ (80020a4 <HAL_RCC_ClockConfig+0x260>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	e00d      	b.n	8002000 <HAL_RCC_ClockConfig+0x1bc>
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fea:	fa93 f3a3 	rbit	r3, r3
 8001fee:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	623b      	str	r3, [r7, #32]
 8001ff4:	6a3b      	ldr	r3, [r7, #32]
 8001ff6:	fa93 f3a3 	rbit	r3, r3
 8001ffa:	61fb      	str	r3, [r7, #28]
 8001ffc:	4b29      	ldr	r3, [pc, #164]	@ (80020a4 <HAL_RCC_ClockConfig+0x260>)
 8001ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002000:	2202      	movs	r2, #2
 8002002:	61ba      	str	r2, [r7, #24]
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	fa92 f2a2 	rbit	r2, r2
 800200a:	617a      	str	r2, [r7, #20]
  return result;
 800200c:	697a      	ldr	r2, [r7, #20]
 800200e:	fab2 f282 	clz	r2, r2
 8002012:	b2d2      	uxtb	r2, r2
 8002014:	f042 0220 	orr.w	r2, r2, #32
 8002018:	b2d2      	uxtb	r2, r2
 800201a:	f002 021f 	and.w	r2, r2, #31
 800201e:	2101      	movs	r1, #1
 8002020:	fa01 f202 	lsl.w	r2, r1, r2
 8002024:	4013      	ands	r3, r2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d101      	bne.n	800202e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e079      	b.n	8002122 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800202e:	4b1d      	ldr	r3, [pc, #116]	@ (80020a4 <HAL_RCC_ClockConfig+0x260>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f023 0203 	bic.w	r2, r3, #3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	491a      	ldr	r1, [pc, #104]	@ (80020a4 <HAL_RCC_ClockConfig+0x260>)
 800203c:	4313      	orrs	r3, r2
 800203e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002040:	f7fe fb9e 	bl	8000780 <HAL_GetTick>
 8002044:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002046:	e00a      	b.n	800205e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002048:	f7fe fb9a 	bl	8000780 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002056:	4293      	cmp	r3, r2
 8002058:	d901      	bls.n	800205e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e061      	b.n	8002122 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800205e:	4b11      	ldr	r3, [pc, #68]	@ (80020a4 <HAL_RCC_ClockConfig+0x260>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f003 020c 	and.w	r2, r3, #12
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	429a      	cmp	r2, r3
 800206e:	d1eb      	bne.n	8002048 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002070:	4b0b      	ldr	r3, [pc, #44]	@ (80020a0 <HAL_RCC_ClockConfig+0x25c>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0307 	and.w	r3, r3, #7
 8002078:	683a      	ldr	r2, [r7, #0]
 800207a:	429a      	cmp	r2, r3
 800207c:	d214      	bcs.n	80020a8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800207e:	4b08      	ldr	r3, [pc, #32]	@ (80020a0 <HAL_RCC_ClockConfig+0x25c>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f023 0207 	bic.w	r2, r3, #7
 8002086:	4906      	ldr	r1, [pc, #24]	@ (80020a0 <HAL_RCC_ClockConfig+0x25c>)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	4313      	orrs	r3, r2
 800208c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800208e:	4b04      	ldr	r3, [pc, #16]	@ (80020a0 <HAL_RCC_ClockConfig+0x25c>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0307 	and.w	r3, r3, #7
 8002096:	683a      	ldr	r2, [r7, #0]
 8002098:	429a      	cmp	r2, r3
 800209a:	d005      	beq.n	80020a8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e040      	b.n	8002122 <HAL_RCC_ClockConfig+0x2de>
 80020a0:	40022000 	.word	0x40022000
 80020a4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0304 	and.w	r3, r3, #4
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d008      	beq.n	80020c6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020b4:	4b1d      	ldr	r3, [pc, #116]	@ (800212c <HAL_RCC_ClockConfig+0x2e8>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	491a      	ldr	r1, [pc, #104]	@ (800212c <HAL_RCC_ClockConfig+0x2e8>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0308 	and.w	r3, r3, #8
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d009      	beq.n	80020e6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020d2:	4b16      	ldr	r3, [pc, #88]	@ (800212c <HAL_RCC_ClockConfig+0x2e8>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	4912      	ldr	r1, [pc, #72]	@ (800212c <HAL_RCC_ClockConfig+0x2e8>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80020e6:	f000 f829 	bl	800213c <HAL_RCC_GetSysClockFreq>
 80020ea:	4601      	mov	r1, r0
 80020ec:	4b0f      	ldr	r3, [pc, #60]	@ (800212c <HAL_RCC_ClockConfig+0x2e8>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020f4:	22f0      	movs	r2, #240	@ 0xf0
 80020f6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	fa92 f2a2 	rbit	r2, r2
 80020fe:	60fa      	str	r2, [r7, #12]
  return result;
 8002100:	68fa      	ldr	r2, [r7, #12]
 8002102:	fab2 f282 	clz	r2, r2
 8002106:	b2d2      	uxtb	r2, r2
 8002108:	40d3      	lsrs	r3, r2
 800210a:	4a09      	ldr	r2, [pc, #36]	@ (8002130 <HAL_RCC_ClockConfig+0x2ec>)
 800210c:	5cd3      	ldrb	r3, [r2, r3]
 800210e:	fa21 f303 	lsr.w	r3, r1, r3
 8002112:	4a08      	ldr	r2, [pc, #32]	@ (8002134 <HAL_RCC_ClockConfig+0x2f0>)
 8002114:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002116:	4b08      	ldr	r3, [pc, #32]	@ (8002138 <HAL_RCC_ClockConfig+0x2f4>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4618      	mov	r0, r3
 800211c:	f7fe faec 	bl	80006f8 <HAL_InitTick>
  
  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3778      	adds	r7, #120	@ 0x78
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	40021000 	.word	0x40021000
 8002130:	080038b0 	.word	0x080038b0
 8002134:	20000000 	.word	0x20000000
 8002138:	20000004 	.word	0x20000004

0800213c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800213c:	b480      	push	{r7}
 800213e:	b087      	sub	sp, #28
 8002140:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002142:	2300      	movs	r3, #0
 8002144:	60fb      	str	r3, [r7, #12]
 8002146:	2300      	movs	r3, #0
 8002148:	60bb      	str	r3, [r7, #8]
 800214a:	2300      	movs	r3, #0
 800214c:	617b      	str	r3, [r7, #20]
 800214e:	2300      	movs	r3, #0
 8002150:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002152:	2300      	movs	r3, #0
 8002154:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002156:	4b1e      	ldr	r3, [pc, #120]	@ (80021d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f003 030c 	and.w	r3, r3, #12
 8002162:	2b04      	cmp	r3, #4
 8002164:	d002      	beq.n	800216c <HAL_RCC_GetSysClockFreq+0x30>
 8002166:	2b08      	cmp	r3, #8
 8002168:	d003      	beq.n	8002172 <HAL_RCC_GetSysClockFreq+0x36>
 800216a:	e026      	b.n	80021ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800216c:	4b19      	ldr	r3, [pc, #100]	@ (80021d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800216e:	613b      	str	r3, [r7, #16]
      break;
 8002170:	e026      	b.n	80021c0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	0c9b      	lsrs	r3, r3, #18
 8002176:	f003 030f 	and.w	r3, r3, #15
 800217a:	4a17      	ldr	r2, [pc, #92]	@ (80021d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800217c:	5cd3      	ldrb	r3, [r2, r3]
 800217e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002180:	4b13      	ldr	r3, [pc, #76]	@ (80021d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002184:	f003 030f 	and.w	r3, r3, #15
 8002188:	4a14      	ldr	r2, [pc, #80]	@ (80021dc <HAL_RCC_GetSysClockFreq+0xa0>)
 800218a:	5cd3      	ldrb	r3, [r2, r3]
 800218c:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d008      	beq.n	80021aa <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002198:	4a0e      	ldr	r2, [pc, #56]	@ (80021d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	fbb2 f2f3 	udiv	r2, r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	fb02 f303 	mul.w	r3, r2, r3
 80021a6:	617b      	str	r3, [r7, #20]
 80021a8:	e004      	b.n	80021b4 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a0c      	ldr	r2, [pc, #48]	@ (80021e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80021ae:	fb02 f303 	mul.w	r3, r2, r3
 80021b2:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	613b      	str	r3, [r7, #16]
      break;
 80021b8:	e002      	b.n	80021c0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021ba:	4b06      	ldr	r3, [pc, #24]	@ (80021d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80021bc:	613b      	str	r3, [r7, #16]
      break;
 80021be:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021c0:	693b      	ldr	r3, [r7, #16]
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	371c      	adds	r7, #28
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	40021000 	.word	0x40021000
 80021d4:	007a1200 	.word	0x007a1200
 80021d8:	080038c8 	.word	0x080038c8
 80021dc:	080038d8 	.word	0x080038d8
 80021e0:	003d0900 	.word	0x003d0900

080021e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021e8:	4b03      	ldr	r3, [pc, #12]	@ (80021f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80021ea:	681b      	ldr	r3, [r3, #0]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	20000000 	.word	0x20000000

080021fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002202:	f7ff ffef 	bl	80021e4 <HAL_RCC_GetHCLKFreq>
 8002206:	4601      	mov	r1, r0
 8002208:	4b0b      	ldr	r3, [pc, #44]	@ (8002238 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002210:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002214:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	fa92 f2a2 	rbit	r2, r2
 800221c:	603a      	str	r2, [r7, #0]
  return result;
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	fab2 f282 	clz	r2, r2
 8002224:	b2d2      	uxtb	r2, r2
 8002226:	40d3      	lsrs	r3, r2
 8002228:	4a04      	ldr	r2, [pc, #16]	@ (800223c <HAL_RCC_GetPCLK1Freq+0x40>)
 800222a:	5cd3      	ldrb	r3, [r2, r3]
 800222c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002230:	4618      	mov	r0, r3
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40021000 	.word	0x40021000
 800223c:	080038c0 	.word	0x080038c0

08002240 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002246:	f7ff ffcd 	bl	80021e4 <HAL_RCC_GetHCLKFreq>
 800224a:	4601      	mov	r1, r0
 800224c:	4b0b      	ldr	r3, [pc, #44]	@ (800227c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002254:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002258:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	fa92 f2a2 	rbit	r2, r2
 8002260:	603a      	str	r2, [r7, #0]
  return result;
 8002262:	683a      	ldr	r2, [r7, #0]
 8002264:	fab2 f282 	clz	r2, r2
 8002268:	b2d2      	uxtb	r2, r2
 800226a:	40d3      	lsrs	r3, r2
 800226c:	4a04      	ldr	r2, [pc, #16]	@ (8002280 <HAL_RCC_GetPCLK2Freq+0x40>)
 800226e:	5cd3      	ldrb	r3, [r2, r3]
 8002270:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002274:	4618      	mov	r0, r3
 8002276:	3708      	adds	r7, #8
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40021000 	.word	0x40021000
 8002280:	080038c0 	.word	0x080038c0

08002284 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b092      	sub	sp, #72	@ 0x48
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800228c:	2300      	movs	r3, #0
 800228e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002290:	2300      	movs	r3, #0
 8002292:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002294:	2300      	movs	r3, #0
 8002296:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f000 80cd 	beq.w	8002442 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022a8:	4b86      	ldr	r3, [pc, #536]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80022aa:	69db      	ldr	r3, [r3, #28]
 80022ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d10e      	bne.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022b4:	4b83      	ldr	r3, [pc, #524]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80022b6:	69db      	ldr	r3, [r3, #28]
 80022b8:	4a82      	ldr	r2, [pc, #520]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80022ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022be:	61d3      	str	r3, [r2, #28]
 80022c0:	4b80      	ldr	r3, [pc, #512]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80022c2:	69db      	ldr	r3, [r3, #28]
 80022c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022c8:	60bb      	str	r3, [r7, #8]
 80022ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022cc:	2301      	movs	r3, #1
 80022ce:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d2:	4b7d      	ldr	r3, [pc, #500]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d118      	bne.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022de:	4b7a      	ldr	r3, [pc, #488]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a79      	ldr	r2, [pc, #484]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80022e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022e8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022ea:	f7fe fa49 	bl	8000780 <HAL_GetTick>
 80022ee:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022f0:	e008      	b.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022f2:	f7fe fa45 	bl	8000780 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b64      	cmp	r3, #100	@ 0x64
 80022fe:	d901      	bls.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e0db      	b.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002304:	4b70      	ldr	r3, [pc, #448]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800230c:	2b00      	cmp	r3, #0
 800230e:	d0f0      	beq.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002310:	4b6c      	ldr	r3, [pc, #432]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002312:	6a1b      	ldr	r3, [r3, #32]
 8002314:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002318:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800231a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800231c:	2b00      	cmp	r3, #0
 800231e:	d07d      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002328:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800232a:	429a      	cmp	r2, r3
 800232c:	d076      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800232e:	4b65      	ldr	r3, [pc, #404]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002330:	6a1b      	ldr	r3, [r3, #32]
 8002332:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002336:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002338:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800233c:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002340:	fa93 f3a3 	rbit	r3, r3
 8002344:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002348:	fab3 f383 	clz	r3, r3
 800234c:	b2db      	uxtb	r3, r3
 800234e:	461a      	mov	r2, r3
 8002350:	4b5e      	ldr	r3, [pc, #376]	@ (80024cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002352:	4413      	add	r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	461a      	mov	r2, r3
 8002358:	2301      	movs	r3, #1
 800235a:	6013      	str	r3, [r2, #0]
 800235c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002360:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002364:	fa93 f3a3 	rbit	r3, r3
 8002368:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800236a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800236c:	fab3 f383 	clz	r3, r3
 8002370:	b2db      	uxtb	r3, r3
 8002372:	461a      	mov	r2, r3
 8002374:	4b55      	ldr	r3, [pc, #340]	@ (80024cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002376:	4413      	add	r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	461a      	mov	r2, r3
 800237c:	2300      	movs	r3, #0
 800237e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002380:	4a50      	ldr	r2, [pc, #320]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002382:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002384:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002386:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	2b00      	cmp	r3, #0
 800238e:	d045      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002390:	f7fe f9f6 	bl	8000780 <HAL_GetTick>
 8002394:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002396:	e00a      	b.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002398:	f7fe f9f2 	bl	8000780 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d901      	bls.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e086      	b.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x238>
 80023ae:	2302      	movs	r3, #2
 80023b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023b4:	fa93 f3a3 	rbit	r3, r3
 80023b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80023ba:	2302      	movs	r3, #2
 80023bc:	623b      	str	r3, [r7, #32]
 80023be:	6a3b      	ldr	r3, [r7, #32]
 80023c0:	fa93 f3a3 	rbit	r3, r3
 80023c4:	61fb      	str	r3, [r7, #28]
  return result;
 80023c6:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023c8:	fab3 f383 	clz	r3, r3
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	095b      	lsrs	r3, r3, #5
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	f043 0302 	orr.w	r3, r3, #2
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d102      	bne.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80023dc:	4b39      	ldr	r3, [pc, #228]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023de:	6a1b      	ldr	r3, [r3, #32]
 80023e0:	e007      	b.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80023e2:	2302      	movs	r3, #2
 80023e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	fa93 f3a3 	rbit	r3, r3
 80023ec:	617b      	str	r3, [r7, #20]
 80023ee:	4b35      	ldr	r3, [pc, #212]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f2:	2202      	movs	r2, #2
 80023f4:	613a      	str	r2, [r7, #16]
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	fa92 f2a2 	rbit	r2, r2
 80023fc:	60fa      	str	r2, [r7, #12]
  return result;
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	fab2 f282 	clz	r2, r2
 8002404:	b2d2      	uxtb	r2, r2
 8002406:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800240a:	b2d2      	uxtb	r2, r2
 800240c:	f002 021f 	and.w	r2, r2, #31
 8002410:	2101      	movs	r1, #1
 8002412:	fa01 f202 	lsl.w	r2, r1, r2
 8002416:	4013      	ands	r3, r2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d0bd      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800241c:	4b29      	ldr	r3, [pc, #164]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800241e:	6a1b      	ldr	r3, [r3, #32]
 8002420:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	4926      	ldr	r1, [pc, #152]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800242a:	4313      	orrs	r3, r2
 800242c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800242e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002432:	2b01      	cmp	r3, #1
 8002434:	d105      	bne.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002436:	4b23      	ldr	r3, [pc, #140]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002438:	69db      	ldr	r3, [r3, #28]
 800243a:	4a22      	ldr	r2, [pc, #136]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800243c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002440:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	2b00      	cmp	r3, #0
 800244c:	d008      	beq.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800244e:	4b1d      	ldr	r3, [pc, #116]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002452:	f023 0203 	bic.w	r2, r3, #3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	491a      	ldr	r1, [pc, #104]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800245c:	4313      	orrs	r3, r2
 800245e:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0320 	and.w	r3, r3, #32
 8002468:	2b00      	cmp	r3, #0
 800246a:	d008      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800246c:	4b15      	ldr	r3, [pc, #84]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800246e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002470:	f023 0210 	bic.w	r2, r3, #16
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	4912      	ldr	r1, [pc, #72]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800247a:	4313      	orrs	r3, r2
 800247c:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002486:	2b00      	cmp	r3, #0
 8002488:	d008      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800248a:	4b0e      	ldr	r3, [pc, #56]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800248c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800248e:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	490b      	ldr	r1, [pc, #44]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002498:	4313      	orrs	r3, r2
 800249a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d008      	beq.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80024a8:	4b06      	ldr	r3, [pc, #24]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80024aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	695b      	ldr	r3, [r3, #20]
 80024b4:	4903      	ldr	r1, [pc, #12]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3748      	adds	r7, #72	@ 0x48
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	40021000 	.word	0x40021000
 80024c8:	40007000 	.word	0x40007000
 80024cc:	10908100 	.word	0x10908100

080024d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d101      	bne.n	80024e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e040      	b.n	8002564 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d106      	bne.n	80024f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f7fd ffe4 	bl	80004c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2224      	movs	r2, #36	@ 0x24
 80024fc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f022 0201 	bic.w	r2, r2, #1
 800250c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002512:	2b00      	cmp	r3, #0
 8002514:	d002      	beq.n	800251c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 fca8 	bl	8002e6c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f000 fb6f 	bl	8002c00 <UART_SetConfig>
 8002522:	4603      	mov	r3, r0
 8002524:	2b01      	cmp	r3, #1
 8002526:	d101      	bne.n	800252c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e01b      	b.n	8002564 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	685a      	ldr	r2, [r3, #4]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800253a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	689a      	ldr	r2, [r3, #8]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800254a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f042 0201 	orr.w	r2, r2, #1
 800255a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f000 fd27 	bl	8002fb0 <UART_CheckIdleState>
 8002562:	4603      	mov	r3, r0
}
 8002564:	4618      	mov	r0, r3
 8002566:	3708      	adds	r7, #8
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b08a      	sub	sp, #40	@ 0x28
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	4613      	mov	r3, r2
 8002578:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002580:	2b20      	cmp	r3, #32
 8002582:	d132      	bne.n	80025ea <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d002      	beq.n	8002590 <HAL_UART_Receive_IT+0x24>
 800258a:	88fb      	ldrh	r3, [r7, #6]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d101      	bne.n	8002594 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e02b      	b.n	80025ec <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2200      	movs	r2, #0
 8002598:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d018      	beq.n	80025da <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	e853 3f00 	ldrex	r3, [r3]
 80025b4:	613b      	str	r3, [r7, #16]
   return(result);
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80025bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	461a      	mov	r2, r3
 80025c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c6:	623b      	str	r3, [r7, #32]
 80025c8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025ca:	69f9      	ldr	r1, [r7, #28]
 80025cc:	6a3a      	ldr	r2, [r7, #32]
 80025ce:	e841 2300 	strex	r3, r2, [r1]
 80025d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1e6      	bne.n	80025a8 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80025da:	88fb      	ldrh	r3, [r7, #6]
 80025dc:	461a      	mov	r2, r3
 80025de:	68b9      	ldr	r1, [r7, #8]
 80025e0:	68f8      	ldr	r0, [r7, #12]
 80025e2:	f000 fdfb 	bl	80031dc <UART_Start_Receive_IT>
 80025e6:	4603      	mov	r3, r0
 80025e8:	e000      	b.n	80025ec <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80025ea:	2302      	movs	r3, #2
  }
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3728      	adds	r7, #40	@ 0x28
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b0ba      	sub	sp, #232	@ 0xe8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	69db      	ldr	r3, [r3, #28]
 8002602:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800261a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800261e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8002622:	4013      	ands	r3, r2
 8002624:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8002628:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800262c:	2b00      	cmp	r3, #0
 800262e:	d115      	bne.n	800265c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002634:	f003 0320 	and.w	r3, r3, #32
 8002638:	2b00      	cmp	r3, #0
 800263a:	d00f      	beq.n	800265c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800263c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002640:	f003 0320 	and.w	r3, r3, #32
 8002644:	2b00      	cmp	r3, #0
 8002646:	d009      	beq.n	800265c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800264c:	2b00      	cmp	r3, #0
 800264e:	f000 82ab 	beq.w	8002ba8 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	4798      	blx	r3
      }
      return;
 800265a:	e2a5      	b.n	8002ba8 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800265c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002660:	2b00      	cmp	r3, #0
 8002662:	f000 8117 	beq.w	8002894 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002666:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	2b00      	cmp	r3, #0
 8002670:	d106      	bne.n	8002680 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002672:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002676:	4b85      	ldr	r3, [pc, #532]	@ (800288c <HAL_UART_IRQHandler+0x298>)
 8002678:	4013      	ands	r3, r2
 800267a:	2b00      	cmp	r3, #0
 800267c:	f000 810a 	beq.w	8002894 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002680:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002684:	f003 0301 	and.w	r3, r3, #1
 8002688:	2b00      	cmp	r3, #0
 800268a:	d011      	beq.n	80026b0 <HAL_UART_IRQHandler+0xbc>
 800268c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002690:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002694:	2b00      	cmp	r3, #0
 8002696:	d00b      	beq.n	80026b0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2201      	movs	r2, #1
 800269e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80026a6:	f043 0201 	orr.w	r2, r3, #1
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80026b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d011      	beq.n	80026e0 <HAL_UART_IRQHandler+0xec>
 80026bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d00b      	beq.n	80026e0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2202      	movs	r2, #2
 80026ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80026d6:	f043 0204 	orr.w	r2, r3, #4
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80026e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026e4:	f003 0304 	and.w	r3, r3, #4
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d011      	beq.n	8002710 <HAL_UART_IRQHandler+0x11c>
 80026ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80026f0:	f003 0301 	and.w	r3, r3, #1
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d00b      	beq.n	8002710 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2204      	movs	r2, #4
 80026fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002706:	f043 0202 	orr.w	r2, r3, #2
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002714:	f003 0308 	and.w	r3, r3, #8
 8002718:	2b00      	cmp	r3, #0
 800271a:	d017      	beq.n	800274c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800271c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002720:	f003 0320 	and.w	r3, r3, #32
 8002724:	2b00      	cmp	r3, #0
 8002726:	d105      	bne.n	8002734 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002728:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800272c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002730:	2b00      	cmp	r3, #0
 8002732:	d00b      	beq.n	800274c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2208      	movs	r2, #8
 800273a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002742:	f043 0208 	orr.w	r2, r3, #8
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800274c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002750:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002754:	2b00      	cmp	r3, #0
 8002756:	d012      	beq.n	800277e <HAL_UART_IRQHandler+0x18a>
 8002758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800275c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d00c      	beq.n	800277e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800276c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002774:	f043 0220 	orr.w	r2, r3, #32
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002784:	2b00      	cmp	r3, #0
 8002786:	f000 8211 	beq.w	8002bac <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800278a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800278e:	f003 0320 	and.w	r3, r3, #32
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00d      	beq.n	80027b2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002796:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800279a:	f003 0320 	and.w	r3, r3, #32
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d007      	beq.n	80027b2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d003      	beq.n	80027b2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80027b8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027c6:	2b40      	cmp	r3, #64	@ 0x40
 80027c8:	d005      	beq.n	80027d6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80027ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80027ce:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d04f      	beq.n	8002876 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 fdc6 	bl	8003368 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027e6:	2b40      	cmp	r3, #64	@ 0x40
 80027e8:	d141      	bne.n	800286e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	3308      	adds	r3, #8
 80027f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80027f8:	e853 3f00 	ldrex	r3, [r3]
 80027fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002800:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002804:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002808:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	3308      	adds	r3, #8
 8002812:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002816:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800281a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800281e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002822:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002826:	e841 2300 	strex	r3, r2, [r1]
 800282a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800282e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d1d9      	bne.n	80027ea <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800283a:	2b00      	cmp	r3, #0
 800283c:	d013      	beq.n	8002866 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002842:	4a13      	ldr	r2, [pc, #76]	@ (8002890 <HAL_UART_IRQHandler+0x29c>)
 8002844:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800284a:	4618      	mov	r0, r3
 800284c:	f7fe f8f3 	bl	8000a36 <HAL_DMA_Abort_IT>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d017      	beq.n	8002886 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800285a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002860:	4610      	mov	r0, r2
 8002862:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002864:	e00f      	b.n	8002886 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f000 f9b4 	bl	8002bd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800286c:	e00b      	b.n	8002886 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 f9b0 	bl	8002bd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002874:	e007      	b.n	8002886 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f000 f9ac 	bl	8002bd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8002884:	e192      	b.n	8002bac <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002886:	bf00      	nop
    return;
 8002888:	e190      	b.n	8002bac <HAL_UART_IRQHandler+0x5b8>
 800288a:	bf00      	nop
 800288c:	04000120 	.word	0x04000120
 8002890:	08003431 	.word	0x08003431

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002898:	2b01      	cmp	r3, #1
 800289a:	f040 814b 	bne.w	8002b34 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800289e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028a2:	f003 0310 	and.w	r3, r3, #16
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	f000 8144 	beq.w	8002b34 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80028ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028b0:	f003 0310 	and.w	r3, r3, #16
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f000 813d 	beq.w	8002b34 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2210      	movs	r2, #16
 80028c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028cc:	2b40      	cmp	r3, #64	@ 0x40
 80028ce:	f040 80b5 	bne.w	8002a3c <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80028de:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	f000 8164 	beq.w	8002bb0 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80028ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80028f2:	429a      	cmp	r2, r3
 80028f4:	f080 815c 	bcs.w	8002bb0 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80028fe:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	2b20      	cmp	r3, #32
 800290a:	f000 8086 	beq.w	8002a1a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002916:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800291a:	e853 3f00 	ldrex	r3, [r3]
 800291e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002922:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002926:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800292a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	461a      	mov	r2, r3
 8002934:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002938:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800293c:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002940:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002944:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002948:	e841 2300 	strex	r3, r2, [r1]
 800294c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002950:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002954:	2b00      	cmp	r3, #0
 8002956:	d1da      	bne.n	800290e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	3308      	adds	r3, #8
 800295e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002960:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002962:	e853 3f00 	ldrex	r3, [r3]
 8002966:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002968:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800296a:	f023 0301 	bic.w	r3, r3, #1
 800296e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	3308      	adds	r3, #8
 8002978:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800297c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002980:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002982:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002984:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002988:	e841 2300 	strex	r3, r2, [r1]
 800298c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800298e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002990:	2b00      	cmp	r3, #0
 8002992:	d1e1      	bne.n	8002958 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	3308      	adds	r3, #8
 800299a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800299c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800299e:	e853 3f00 	ldrex	r3, [r3]
 80029a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80029a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80029aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	3308      	adds	r3, #8
 80029b4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80029b8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80029ba:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029bc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80029be:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80029c0:	e841 2300 	strex	r3, r2, [r1]
 80029c4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80029c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d1e3      	bne.n	8002994 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2220      	movs	r2, #32
 80029d0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80029e2:	e853 3f00 	ldrex	r3, [r3]
 80029e6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80029e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80029ea:	f023 0310 	bic.w	r3, r3, #16
 80029ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	461a      	mov	r2, r3
 80029f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80029fc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80029fe:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a00:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002a02:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002a04:	e841 2300 	strex	r3, r2, [r1]
 8002a08:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002a0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1e4      	bne.n	80029da <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7fd ffd0 	bl	80009ba <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2202      	movs	r2, #2
 8002a1e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	4619      	mov	r1, r3
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f000 f8d7 	bl	8002be8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002a3a:	e0b9      	b.n	8002bb0 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f000 80ab 	beq.w	8002bb4 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8002a5e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	f000 80a6 	beq.w	8002bb4 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a70:	e853 3f00 	ldrex	r3, [r3]
 8002a74:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002a76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002a7c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	461a      	mov	r2, r3
 8002a86:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002a8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a8c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a8e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002a90:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002a92:	e841 2300 	strex	r3, r2, [r1]
 8002a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002a98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1e4      	bne.n	8002a68 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	3308      	adds	r3, #8
 8002aa4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa8:	e853 3f00 	ldrex	r3, [r3]
 8002aac:	623b      	str	r3, [r7, #32]
   return(result);
 8002aae:	6a3b      	ldr	r3, [r7, #32]
 8002ab0:	f023 0301 	bic.w	r3, r3, #1
 8002ab4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	3308      	adds	r3, #8
 8002abe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002ac2:	633a      	str	r2, [r7, #48]	@ 0x30
 8002ac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ac6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002ac8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002aca:	e841 2300 	strex	r3, r2, [r1]
 8002ace:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1e3      	bne.n	8002a9e <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2220      	movs	r2, #32
 8002ada:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	e853 3f00 	ldrex	r3, [r3]
 8002af6:	60fb      	str	r3, [r7, #12]
   return(result);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f023 0310 	bic.w	r3, r3, #16
 8002afe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	461a      	mov	r2, r3
 8002b08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b0c:	61fb      	str	r3, [r7, #28]
 8002b0e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b10:	69b9      	ldr	r1, [r7, #24]
 8002b12:	69fa      	ldr	r2, [r7, #28]
 8002b14:	e841 2300 	strex	r3, r2, [r1]
 8002b18:	617b      	str	r3, [r7, #20]
   return(result);
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d1e4      	bne.n	8002aea <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2202      	movs	r2, #2
 8002b24:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002b26:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f000 f85b 	bl	8002be8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002b32:	e03f      	b.n	8002bb4 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002b34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d00e      	beq.n	8002b5e <HAL_UART_IRQHandler+0x56a>
 8002b40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d008      	beq.n	8002b5e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002b54:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 fe52 	bl	8003800 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002b5c:	e02d      	b.n	8002bba <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002b5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00e      	beq.n	8002b88 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002b6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d008      	beq.n	8002b88 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d01c      	beq.n	8002bb8 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	4798      	blx	r3
    }
    return;
 8002b86:	e017      	b.n	8002bb8 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002b88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d012      	beq.n	8002bba <HAL_UART_IRQHandler+0x5c6>
 8002b94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d00c      	beq.n	8002bba <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f000 fc5b 	bl	800345c <UART_EndTransmit_IT>
    return;
 8002ba6:	e008      	b.n	8002bba <HAL_UART_IRQHandler+0x5c6>
      return;
 8002ba8:	bf00      	nop
 8002baa:	e006      	b.n	8002bba <HAL_UART_IRQHandler+0x5c6>
    return;
 8002bac:	bf00      	nop
 8002bae:	e004      	b.n	8002bba <HAL_UART_IRQHandler+0x5c6>
      return;
 8002bb0:	bf00      	nop
 8002bb2:	e002      	b.n	8002bba <HAL_UART_IRQHandler+0x5c6>
      return;
 8002bb4:	bf00      	nop
 8002bb6:	e000      	b.n	8002bba <HAL_UART_IRQHandler+0x5c6>
    return;
 8002bb8:	bf00      	nop
  }

}
 8002bba:	37e8      	adds	r7, #232	@ 0xe8
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002bf4:	bf00      	nop
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b088      	sub	sp, #32
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689a      	ldr	r2, [r3, #8]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	431a      	orrs	r2, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	431a      	orrs	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	69db      	ldr	r3, [r3, #28]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	4b8a      	ldr	r3, [pc, #552]	@ (8002e54 <UART_SetConfig+0x254>)
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	6812      	ldr	r2, [r2, #0]
 8002c32:	6979      	ldr	r1, [r7, #20]
 8002c34:	430b      	orrs	r3, r1
 8002c36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	68da      	ldr	r2, [r3, #12]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	697a      	ldr	r2, [r7, #20]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	697a      	ldr	r2, [r7, #20]
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a78      	ldr	r2, [pc, #480]	@ (8002e58 <UART_SetConfig+0x258>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d120      	bne.n	8002cbe <UART_SetConfig+0xbe>
 8002c7c:	4b77      	ldr	r3, [pc, #476]	@ (8002e5c <UART_SetConfig+0x25c>)
 8002c7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c80:	f003 0303 	and.w	r3, r3, #3
 8002c84:	2b03      	cmp	r3, #3
 8002c86:	d817      	bhi.n	8002cb8 <UART_SetConfig+0xb8>
 8002c88:	a201      	add	r2, pc, #4	@ (adr r2, 8002c90 <UART_SetConfig+0x90>)
 8002c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c8e:	bf00      	nop
 8002c90:	08002ca1 	.word	0x08002ca1
 8002c94:	08002cad 	.word	0x08002cad
 8002c98:	08002cb3 	.word	0x08002cb3
 8002c9c:	08002ca7 	.word	0x08002ca7
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	77fb      	strb	r3, [r7, #31]
 8002ca4:	e01d      	b.n	8002ce2 <UART_SetConfig+0xe2>
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	77fb      	strb	r3, [r7, #31]
 8002caa:	e01a      	b.n	8002ce2 <UART_SetConfig+0xe2>
 8002cac:	2304      	movs	r3, #4
 8002cae:	77fb      	strb	r3, [r7, #31]
 8002cb0:	e017      	b.n	8002ce2 <UART_SetConfig+0xe2>
 8002cb2:	2308      	movs	r3, #8
 8002cb4:	77fb      	strb	r3, [r7, #31]
 8002cb6:	e014      	b.n	8002ce2 <UART_SetConfig+0xe2>
 8002cb8:	2310      	movs	r3, #16
 8002cba:	77fb      	strb	r3, [r7, #31]
 8002cbc:	e011      	b.n	8002ce2 <UART_SetConfig+0xe2>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a67      	ldr	r2, [pc, #412]	@ (8002e60 <UART_SetConfig+0x260>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d102      	bne.n	8002cce <UART_SetConfig+0xce>
 8002cc8:	2300      	movs	r3, #0
 8002cca:	77fb      	strb	r3, [r7, #31]
 8002ccc:	e009      	b.n	8002ce2 <UART_SetConfig+0xe2>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a64      	ldr	r2, [pc, #400]	@ (8002e64 <UART_SetConfig+0x264>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d102      	bne.n	8002cde <UART_SetConfig+0xde>
 8002cd8:	2300      	movs	r3, #0
 8002cda:	77fb      	strb	r3, [r7, #31]
 8002cdc:	e001      	b.n	8002ce2 <UART_SetConfig+0xe2>
 8002cde:	2310      	movs	r3, #16
 8002ce0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	69db      	ldr	r3, [r3, #28]
 8002ce6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002cea:	d15a      	bne.n	8002da2 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8002cec:	7ffb      	ldrb	r3, [r7, #31]
 8002cee:	2b08      	cmp	r3, #8
 8002cf0:	d827      	bhi.n	8002d42 <UART_SetConfig+0x142>
 8002cf2:	a201      	add	r2, pc, #4	@ (adr r2, 8002cf8 <UART_SetConfig+0xf8>)
 8002cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cf8:	08002d1d 	.word	0x08002d1d
 8002cfc:	08002d25 	.word	0x08002d25
 8002d00:	08002d2d 	.word	0x08002d2d
 8002d04:	08002d43 	.word	0x08002d43
 8002d08:	08002d33 	.word	0x08002d33
 8002d0c:	08002d43 	.word	0x08002d43
 8002d10:	08002d43 	.word	0x08002d43
 8002d14:	08002d43 	.word	0x08002d43
 8002d18:	08002d3b 	.word	0x08002d3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d1c:	f7ff fa6e 	bl	80021fc <HAL_RCC_GetPCLK1Freq>
 8002d20:	61b8      	str	r0, [r7, #24]
        break;
 8002d22:	e013      	b.n	8002d4c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d24:	f7ff fa8c 	bl	8002240 <HAL_RCC_GetPCLK2Freq>
 8002d28:	61b8      	str	r0, [r7, #24]
        break;
 8002d2a:	e00f      	b.n	8002d4c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d2c:	4b4e      	ldr	r3, [pc, #312]	@ (8002e68 <UART_SetConfig+0x268>)
 8002d2e:	61bb      	str	r3, [r7, #24]
        break;
 8002d30:	e00c      	b.n	8002d4c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d32:	f7ff fa03 	bl	800213c <HAL_RCC_GetSysClockFreq>
 8002d36:	61b8      	str	r0, [r7, #24]
        break;
 8002d38:	e008      	b.n	8002d4c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d3e:	61bb      	str	r3, [r7, #24]
        break;
 8002d40:	e004      	b.n	8002d4c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8002d42:	2300      	movs	r3, #0
 8002d44:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	77bb      	strb	r3, [r7, #30]
        break;
 8002d4a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d074      	beq.n	8002e3c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	005a      	lsls	r2, r3, #1
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	085b      	lsrs	r3, r3, #1
 8002d5c:	441a      	add	r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d66:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	2b0f      	cmp	r3, #15
 8002d6c:	d916      	bls.n	8002d9c <UART_SetConfig+0x19c>
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d74:	d212      	bcs.n	8002d9c <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	f023 030f 	bic.w	r3, r3, #15
 8002d7e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	085b      	lsrs	r3, r3, #1
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	f003 0307 	and.w	r3, r3, #7
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	89fb      	ldrh	r3, [r7, #14]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	89fa      	ldrh	r2, [r7, #14]
 8002d98:	60da      	str	r2, [r3, #12]
 8002d9a:	e04f      	b.n	8002e3c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	77bb      	strb	r3, [r7, #30]
 8002da0:	e04c      	b.n	8002e3c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002da2:	7ffb      	ldrb	r3, [r7, #31]
 8002da4:	2b08      	cmp	r3, #8
 8002da6:	d828      	bhi.n	8002dfa <UART_SetConfig+0x1fa>
 8002da8:	a201      	add	r2, pc, #4	@ (adr r2, 8002db0 <UART_SetConfig+0x1b0>)
 8002daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dae:	bf00      	nop
 8002db0:	08002dd5 	.word	0x08002dd5
 8002db4:	08002ddd 	.word	0x08002ddd
 8002db8:	08002de5 	.word	0x08002de5
 8002dbc:	08002dfb 	.word	0x08002dfb
 8002dc0:	08002deb 	.word	0x08002deb
 8002dc4:	08002dfb 	.word	0x08002dfb
 8002dc8:	08002dfb 	.word	0x08002dfb
 8002dcc:	08002dfb 	.word	0x08002dfb
 8002dd0:	08002df3 	.word	0x08002df3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002dd4:	f7ff fa12 	bl	80021fc <HAL_RCC_GetPCLK1Freq>
 8002dd8:	61b8      	str	r0, [r7, #24]
        break;
 8002dda:	e013      	b.n	8002e04 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ddc:	f7ff fa30 	bl	8002240 <HAL_RCC_GetPCLK2Freq>
 8002de0:	61b8      	str	r0, [r7, #24]
        break;
 8002de2:	e00f      	b.n	8002e04 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002de4:	4b20      	ldr	r3, [pc, #128]	@ (8002e68 <UART_SetConfig+0x268>)
 8002de6:	61bb      	str	r3, [r7, #24]
        break;
 8002de8:	e00c      	b.n	8002e04 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002dea:	f7ff f9a7 	bl	800213c <HAL_RCC_GetSysClockFreq>
 8002dee:	61b8      	str	r0, [r7, #24]
        break;
 8002df0:	e008      	b.n	8002e04 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002df2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002df6:	61bb      	str	r3, [r7, #24]
        break;
 8002df8:	e004      	b.n	8002e04 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	77bb      	strb	r3, [r7, #30]
        break;
 8002e02:	bf00      	nop
    }

    if (pclk != 0U)
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d018      	beq.n	8002e3c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	085a      	lsrs	r2, r3, #1
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	441a      	add	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e1c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	2b0f      	cmp	r3, #15
 8002e22:	d909      	bls.n	8002e38 <UART_SetConfig+0x238>
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e2a:	d205      	bcs.n	8002e38 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	b29a      	uxth	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	60da      	str	r2, [r3, #12]
 8002e36:	e001      	b.n	8002e3c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002e48:	7fbb      	ldrb	r3, [r7, #30]
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3720      	adds	r7, #32
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	efff69f3 	.word	0xefff69f3
 8002e58:	40013800 	.word	0x40013800
 8002e5c:	40021000 	.word	0x40021000
 8002e60:	40004400 	.word	0x40004400
 8002e64:	40004800 	.word	0x40004800
 8002e68:	007a1200 	.word	0x007a1200

08002e6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e78:	f003 0308 	and.w	r3, r3, #8
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00a      	beq.n	8002e96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	430a      	orrs	r2, r1
 8002e94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00a      	beq.n	8002eb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	430a      	orrs	r2, r1
 8002eb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00a      	beq.n	8002eda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ede:	f003 0304 	and.w	r3, r3, #4
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00a      	beq.n	8002efc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f00:	f003 0310 	and.w	r3, r3, #16
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d00a      	beq.n	8002f1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f22:	f003 0320 	and.w	r3, r3, #32
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00a      	beq.n	8002f40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d01a      	beq.n	8002f82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f6a:	d10a      	bne.n	8002f82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00a      	beq.n	8002fa4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	605a      	str	r2, [r3, #4]
  }
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b098      	sub	sp, #96	@ 0x60
 8002fb4:	af02      	add	r7, sp, #8
 8002fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002fc0:	f7fd fbde 	bl	8000780 <HAL_GetTick>
 8002fc4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0308 	and.w	r3, r3, #8
 8002fd0:	2b08      	cmp	r3, #8
 8002fd2:	d12e      	bne.n	8003032 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fd4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002fd8:	9300      	str	r3, [sp, #0]
 8002fda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 f88c 	bl	8003100 <UART_WaitOnFlagUntilTimeout>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d021      	beq.n	8003032 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ff6:	e853 3f00 	ldrex	r3, [r3]
 8002ffa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002ffc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ffe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003002:	653b      	str	r3, [r7, #80]	@ 0x50
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	461a      	mov	r2, r3
 800300a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800300c:	647b      	str	r3, [r7, #68]	@ 0x44
 800300e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003010:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003012:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003014:	e841 2300 	strex	r3, r2, [r1]
 8003018:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800301a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800301c:	2b00      	cmp	r3, #0
 800301e:	d1e6      	bne.n	8002fee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2220      	movs	r2, #32
 8003024:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e062      	b.n	80030f8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0304 	and.w	r3, r3, #4
 800303c:	2b04      	cmp	r3, #4
 800303e:	d149      	bne.n	80030d4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003040:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003044:	9300      	str	r3, [sp, #0]
 8003046:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003048:	2200      	movs	r2, #0
 800304a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 f856 	bl	8003100 <UART_WaitOnFlagUntilTimeout>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d03c      	beq.n	80030d4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003062:	e853 3f00 	ldrex	r3, [r3]
 8003066:	623b      	str	r3, [r7, #32]
   return(result);
 8003068:	6a3b      	ldr	r3, [r7, #32]
 800306a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800306e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	461a      	mov	r2, r3
 8003076:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003078:	633b      	str	r3, [r7, #48]	@ 0x30
 800307a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800307c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800307e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003080:	e841 2300 	strex	r3, r2, [r1]
 8003084:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003088:	2b00      	cmp	r3, #0
 800308a:	d1e6      	bne.n	800305a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	3308      	adds	r3, #8
 8003092:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	e853 3f00 	ldrex	r3, [r3]
 800309a:	60fb      	str	r3, [r7, #12]
   return(result);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f023 0301 	bic.w	r3, r3, #1
 80030a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	3308      	adds	r3, #8
 80030aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80030ac:	61fa      	str	r2, [r7, #28]
 80030ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030b0:	69b9      	ldr	r1, [r7, #24]
 80030b2:	69fa      	ldr	r2, [r7, #28]
 80030b4:	e841 2300 	strex	r3, r2, [r1]
 80030b8:	617b      	str	r3, [r7, #20]
   return(result);
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d1e5      	bne.n	800308c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2220      	movs	r2, #32
 80030c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e011      	b.n	80030f8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2220      	movs	r2, #32
 80030d8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2220      	movs	r2, #32
 80030de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3758      	adds	r7, #88	@ 0x58
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	603b      	str	r3, [r7, #0]
 800310c:	4613      	mov	r3, r2
 800310e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003110:	e04f      	b.n	80031b2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003118:	d04b      	beq.n	80031b2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800311a:	f7fd fb31 	bl	8000780 <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	429a      	cmp	r2, r3
 8003128:	d302      	bcc.n	8003130 <UART_WaitOnFlagUntilTimeout+0x30>
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d101      	bne.n	8003134 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e04e      	b.n	80031d2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0304 	and.w	r3, r3, #4
 800313e:	2b00      	cmp	r3, #0
 8003140:	d037      	beq.n	80031b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	2b80      	cmp	r3, #128	@ 0x80
 8003146:	d034      	beq.n	80031b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	2b40      	cmp	r3, #64	@ 0x40
 800314c:	d031      	beq.n	80031b2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	69db      	ldr	r3, [r3, #28]
 8003154:	f003 0308 	and.w	r3, r3, #8
 8003158:	2b08      	cmp	r3, #8
 800315a:	d110      	bne.n	800317e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2208      	movs	r2, #8
 8003162:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003164:	68f8      	ldr	r0, [r7, #12]
 8003166:	f000 f8ff 	bl	8003368 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2208      	movs	r2, #8
 800316e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e029      	b.n	80031d2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	69db      	ldr	r3, [r3, #28]
 8003184:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003188:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800318c:	d111      	bne.n	80031b2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003196:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f000 f8e5 	bl	8003368 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2220      	movs	r2, #32
 80031a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e00f      	b.n	80031d2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	69da      	ldr	r2, [r3, #28]
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	4013      	ands	r3, r2
 80031bc:	68ba      	ldr	r2, [r7, #8]
 80031be:	429a      	cmp	r2, r3
 80031c0:	bf0c      	ite	eq
 80031c2:	2301      	moveq	r3, #1
 80031c4:	2300      	movne	r3, #0
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	461a      	mov	r2, r3
 80031ca:	79fb      	ldrb	r3, [r7, #7]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d0a0      	beq.n	8003112 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3710      	adds	r7, #16
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
	...

080031dc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80031dc:	b480      	push	{r7}
 80031de:	b097      	sub	sp, #92	@ 0x5c
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	4613      	mov	r3, r2
 80031e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	68ba      	ldr	r2, [r7, #8]
 80031ee:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	88fa      	ldrh	r2, [r7, #6]
 80031f4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	88fa      	ldrh	r2, [r7, #6]
 80031fc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800320e:	d10e      	bne.n	800322e <UART_Start_Receive_IT+0x52>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	691b      	ldr	r3, [r3, #16]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d105      	bne.n	8003224 <UART_Start_Receive_IT+0x48>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800321e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003222:	e02d      	b.n	8003280 <UART_Start_Receive_IT+0xa4>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	22ff      	movs	r2, #255	@ 0xff
 8003228:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800322c:	e028      	b.n	8003280 <UART_Start_Receive_IT+0xa4>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d10d      	bne.n	8003252 <UART_Start_Receive_IT+0x76>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d104      	bne.n	8003248 <UART_Start_Receive_IT+0x6c>
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	22ff      	movs	r2, #255	@ 0xff
 8003242:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003246:	e01b      	b.n	8003280 <UART_Start_Receive_IT+0xa4>
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	227f      	movs	r2, #127	@ 0x7f
 800324c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003250:	e016      	b.n	8003280 <UART_Start_Receive_IT+0xa4>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800325a:	d10d      	bne.n	8003278 <UART_Start_Receive_IT+0x9c>
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	691b      	ldr	r3, [r3, #16]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d104      	bne.n	800326e <UART_Start_Receive_IT+0x92>
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	227f      	movs	r2, #127	@ 0x7f
 8003268:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800326c:	e008      	b.n	8003280 <UART_Start_Receive_IT+0xa4>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	223f      	movs	r2, #63	@ 0x3f
 8003272:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003276:	e003      	b.n	8003280 <UART_Start_Receive_IT+0xa4>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2200      	movs	r2, #0
 8003284:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2222      	movs	r2, #34	@ 0x22
 800328c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	3308      	adds	r3, #8
 8003296:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003298:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800329a:	e853 3f00 	ldrex	r3, [r3]
 800329e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80032a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032a2:	f043 0301 	orr.w	r3, r3, #1
 80032a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	3308      	adds	r3, #8
 80032ae:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80032b0:	64ba      	str	r2, [r7, #72]	@ 0x48
 80032b2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80032b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80032b8:	e841 2300 	strex	r3, r2, [r1]
 80032bc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80032be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d1e5      	bne.n	8003290 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032cc:	d107      	bne.n	80032de <UART_Start_Receive_IT+0x102>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d103      	bne.n	80032de <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	4a21      	ldr	r2, [pc, #132]	@ (8003360 <UART_Start_Receive_IT+0x184>)
 80032da:	669a      	str	r2, [r3, #104]	@ 0x68
 80032dc:	e002      	b.n	80032e4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	4a20      	ldr	r2, [pc, #128]	@ (8003364 <UART_Start_Receive_IT+0x188>)
 80032e2:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d019      	beq.n	8003320 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032f4:	e853 3f00 	ldrex	r3, [r3]
 80032f8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80032fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032fc:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8003300:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	461a      	mov	r2, r3
 8003308:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800330a:	637b      	str	r3, [r7, #52]	@ 0x34
 800330c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800330e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003310:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003312:	e841 2300 	strex	r3, r2, [r1]
 8003316:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1e6      	bne.n	80032ec <UART_Start_Receive_IT+0x110>
 800331e:	e018      	b.n	8003352 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	e853 3f00 	ldrex	r3, [r3]
 800332c:	613b      	str	r3, [r7, #16]
   return(result);
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	f043 0320 	orr.w	r3, r3, #32
 8003334:	653b      	str	r3, [r7, #80]	@ 0x50
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	461a      	mov	r2, r3
 800333c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800333e:	623b      	str	r3, [r7, #32]
 8003340:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003342:	69f9      	ldr	r1, [r7, #28]
 8003344:	6a3a      	ldr	r2, [r7, #32]
 8003346:	e841 2300 	strex	r3, r2, [r1]
 800334a:	61bb      	str	r3, [r7, #24]
   return(result);
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1e6      	bne.n	8003320 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	375c      	adds	r7, #92	@ 0x5c
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr
 8003360:	08003659 	.word	0x08003659
 8003364:	080034b1 	.word	0x080034b1

08003368 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003368:	b480      	push	{r7}
 800336a:	b095      	sub	sp, #84	@ 0x54
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003376:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003378:	e853 3f00 	ldrex	r3, [r3]
 800337c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800337e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003380:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003384:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	461a      	mov	r2, r3
 800338c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800338e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003390:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003392:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003394:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003396:	e841 2300 	strex	r3, r2, [r1]
 800339a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800339c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1e6      	bne.n	8003370 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	3308      	adds	r3, #8
 80033a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033aa:	6a3b      	ldr	r3, [r7, #32]
 80033ac:	e853 3f00 	ldrex	r3, [r3]
 80033b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	f023 0301 	bic.w	r3, r3, #1
 80033b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	3308      	adds	r3, #8
 80033c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80033c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80033c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033ca:	e841 2300 	strex	r3, r2, [r1]
 80033ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80033d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1e5      	bne.n	80033a2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d118      	bne.n	8003410 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	e853 3f00 	ldrex	r3, [r3]
 80033ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	f023 0310 	bic.w	r3, r3, #16
 80033f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	461a      	mov	r2, r3
 80033fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033fc:	61bb      	str	r3, [r7, #24]
 80033fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003400:	6979      	ldr	r1, [r7, #20]
 8003402:	69ba      	ldr	r2, [r7, #24]
 8003404:	e841 2300 	strex	r3, r2, [r1]
 8003408:	613b      	str	r3, [r7, #16]
   return(result);
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1e6      	bne.n	80033de <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2220      	movs	r2, #32
 8003414:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003424:	bf00      	nop
 8003426:	3754      	adds	r7, #84	@ 0x54
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800343c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2200      	movs	r2, #0
 8003442:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2200      	movs	r2, #0
 800344a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800344e:	68f8      	ldr	r0, [r7, #12]
 8003450:	f7ff fbc0 	bl	8002bd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003454:	bf00      	nop
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b088      	sub	sp, #32
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	e853 3f00 	ldrex	r3, [r3]
 8003470:	60bb      	str	r3, [r7, #8]
   return(result);
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003478:	61fb      	str	r3, [r7, #28]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	461a      	mov	r2, r3
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	61bb      	str	r3, [r7, #24]
 8003484:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003486:	6979      	ldr	r1, [r7, #20]
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	e841 2300 	strex	r3, r2, [r1]
 800348e:	613b      	str	r3, [r7, #16]
   return(result);
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1e6      	bne.n	8003464 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2220      	movs	r2, #32
 800349a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f7ff fb8c 	bl	8002bc0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80034a8:	bf00      	nop
 80034aa:	3720      	adds	r7, #32
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b09c      	sub	sp, #112	@ 0x70
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80034be:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034c8:	2b22      	cmp	r3, #34	@ 0x22
 80034ca:	f040 80b9 	bne.w	8003640 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80034d4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80034d8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80034dc:	b2d9      	uxtb	r1, r3
 80034de:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80034e2:	b2da      	uxtb	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034e8:	400a      	ands	r2, r1
 80034ea:	b2d2      	uxtb	r2, r2
 80034ec:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034f2:	1c5a      	adds	r2, r3, #1
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80034fe:	b29b      	uxth	r3, r3
 8003500:	3b01      	subs	r3, #1
 8003502:	b29a      	uxth	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003510:	b29b      	uxth	r3, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	f040 809c 	bne.w	8003650 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800351e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003520:	e853 3f00 	ldrex	r3, [r3]
 8003524:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003526:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003528:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800352c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	461a      	mov	r2, r3
 8003534:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003536:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003538:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800353a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800353c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800353e:	e841 2300 	strex	r3, r2, [r1]
 8003542:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003544:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003546:	2b00      	cmp	r3, #0
 8003548:	d1e6      	bne.n	8003518 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	3308      	adds	r3, #8
 8003550:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003554:	e853 3f00 	ldrex	r3, [r3]
 8003558:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800355a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800355c:	f023 0301 	bic.w	r3, r3, #1
 8003560:	667b      	str	r3, [r7, #100]	@ 0x64
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	3308      	adds	r3, #8
 8003568:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800356a:	647a      	str	r2, [r7, #68]	@ 0x44
 800356c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800356e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003570:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003572:	e841 2300 	strex	r3, r2, [r1]
 8003576:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003578:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1e5      	bne.n	800354a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2220      	movs	r2, #32
 8003582:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d018      	beq.n	80035d2 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035a8:	e853 3f00 	ldrex	r3, [r3]
 80035ac:	623b      	str	r3, [r7, #32]
   return(result);
 80035ae:	6a3b      	ldr	r3, [r7, #32]
 80035b0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80035b4:	663b      	str	r3, [r7, #96]	@ 0x60
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	461a      	mov	r2, r3
 80035bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80035be:	633b      	str	r3, [r7, #48]	@ 0x30
 80035c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80035c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035c6:	e841 2300 	strex	r3, r2, [r1]
 80035ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80035cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1e6      	bne.n	80035a0 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d12e      	bne.n	8003638 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	e853 3f00 	ldrex	r3, [r3]
 80035ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f023 0310 	bic.w	r3, r3, #16
 80035f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	461a      	mov	r2, r3
 80035fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80035fe:	61fb      	str	r3, [r7, #28]
 8003600:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003602:	69b9      	ldr	r1, [r7, #24]
 8003604:	69fa      	ldr	r2, [r7, #28]
 8003606:	e841 2300 	strex	r3, r2, [r1]
 800360a:	617b      	str	r3, [r7, #20]
   return(result);
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1e6      	bne.n	80035e0 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	69db      	ldr	r3, [r3, #28]
 8003618:	f003 0310 	and.w	r3, r3, #16
 800361c:	2b10      	cmp	r3, #16
 800361e:	d103      	bne.n	8003628 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2210      	movs	r2, #16
 8003626:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800362e:	4619      	mov	r1, r3
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f7ff fad9 	bl	8002be8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003636:	e00b      	b.n	8003650 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f7fc fed9 	bl	80003f0 <HAL_UART_RxCpltCallback>
}
 800363e:	e007      	b.n	8003650 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	699a      	ldr	r2, [r3, #24]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f042 0208 	orr.w	r2, r2, #8
 800364e:	619a      	str	r2, [r3, #24]
}
 8003650:	bf00      	nop
 8003652:	3770      	adds	r7, #112	@ 0x70
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b09c      	sub	sp, #112	@ 0x70
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003666:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003670:	2b22      	cmp	r3, #34	@ 0x22
 8003672:	f040 80b9 	bne.w	80037e8 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800367c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003684:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8003686:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800368a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800368e:	4013      	ands	r3, r2
 8003690:	b29a      	uxth	r2, r3
 8003692:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003694:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800369a:	1c9a      	adds	r2, r3, #2
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	3b01      	subs	r3, #1
 80036aa:	b29a      	uxth	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	f040 809c 	bne.w	80037f8 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036c8:	e853 3f00 	ldrex	r3, [r3]
 80036cc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80036ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80036d4:	667b      	str	r3, [r7, #100]	@ 0x64
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	461a      	mov	r2, r3
 80036dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80036de:	657b      	str	r3, [r7, #84]	@ 0x54
 80036e0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80036e4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80036e6:	e841 2300 	strex	r3, r2, [r1]
 80036ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80036ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1e6      	bne.n	80036c0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	3308      	adds	r3, #8
 80036f8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036fc:	e853 3f00 	ldrex	r3, [r3]
 8003700:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003704:	f023 0301 	bic.w	r3, r3, #1
 8003708:	663b      	str	r3, [r7, #96]	@ 0x60
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	3308      	adds	r3, #8
 8003710:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003712:	643a      	str	r2, [r7, #64]	@ 0x40
 8003714:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003716:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003718:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800371a:	e841 2300 	strex	r3, r2, [r1]
 800371e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1e5      	bne.n	80036f2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2220      	movs	r2, #32
 800372a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d018      	beq.n	800377a <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800374e:	6a3b      	ldr	r3, [r7, #32]
 8003750:	e853 3f00 	ldrex	r3, [r3]
 8003754:	61fb      	str	r3, [r7, #28]
   return(result);
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800375c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	461a      	mov	r2, r3
 8003764:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003766:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003768:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800376a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800376c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800376e:	e841 2300 	strex	r3, r2, [r1]
 8003772:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003776:	2b00      	cmp	r3, #0
 8003778:	d1e6      	bne.n	8003748 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800377e:	2b01      	cmp	r3, #1
 8003780:	d12e      	bne.n	80037e0 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	e853 3f00 	ldrex	r3, [r3]
 8003794:	60bb      	str	r3, [r7, #8]
   return(result);
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	f023 0310 	bic.w	r3, r3, #16
 800379c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	461a      	mov	r2, r3
 80037a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80037a6:	61bb      	str	r3, [r7, #24]
 80037a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037aa:	6979      	ldr	r1, [r7, #20]
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	e841 2300 	strex	r3, r2, [r1]
 80037b2:	613b      	str	r3, [r7, #16]
   return(result);
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d1e6      	bne.n	8003788 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	69db      	ldr	r3, [r3, #28]
 80037c0:	f003 0310 	and.w	r3, r3, #16
 80037c4:	2b10      	cmp	r3, #16
 80037c6:	d103      	bne.n	80037d0 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2210      	movs	r2, #16
 80037ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80037d6:	4619      	mov	r1, r3
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f7ff fa05 	bl	8002be8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80037de:	e00b      	b.n	80037f8 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f7fc fe05 	bl	80003f0 <HAL_UART_RxCpltCallback>
}
 80037e6:	e007      	b.n	80037f8 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	699a      	ldr	r2, [r3, #24]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f042 0208 	orr.w	r2, r2, #8
 80037f6:	619a      	str	r2, [r3, #24]
}
 80037f8:	bf00      	nop
 80037fa:	3770      	adds	r7, #112	@ 0x70
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003808:	bf00      	nop
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <memset>:
 8003814:	4402      	add	r2, r0
 8003816:	4603      	mov	r3, r0
 8003818:	4293      	cmp	r3, r2
 800381a:	d100      	bne.n	800381e <memset+0xa>
 800381c:	4770      	bx	lr
 800381e:	f803 1b01 	strb.w	r1, [r3], #1
 8003822:	e7f9      	b.n	8003818 <memset+0x4>

08003824 <strncmp>:
 8003824:	b510      	push	{r4, lr}
 8003826:	b16a      	cbz	r2, 8003844 <strncmp+0x20>
 8003828:	3901      	subs	r1, #1
 800382a:	1884      	adds	r4, r0, r2
 800382c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003830:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8003834:	429a      	cmp	r2, r3
 8003836:	d103      	bne.n	8003840 <strncmp+0x1c>
 8003838:	42a0      	cmp	r0, r4
 800383a:	d001      	beq.n	8003840 <strncmp+0x1c>
 800383c:	2a00      	cmp	r2, #0
 800383e:	d1f5      	bne.n	800382c <strncmp+0x8>
 8003840:	1ad0      	subs	r0, r2, r3
 8003842:	bd10      	pop	{r4, pc}
 8003844:	4610      	mov	r0, r2
 8003846:	e7fc      	b.n	8003842 <strncmp+0x1e>

08003848 <__libc_init_array>:
 8003848:	b570      	push	{r4, r5, r6, lr}
 800384a:	4d0d      	ldr	r5, [pc, #52]	@ (8003880 <__libc_init_array+0x38>)
 800384c:	4c0d      	ldr	r4, [pc, #52]	@ (8003884 <__libc_init_array+0x3c>)
 800384e:	1b64      	subs	r4, r4, r5
 8003850:	10a4      	asrs	r4, r4, #2
 8003852:	2600      	movs	r6, #0
 8003854:	42a6      	cmp	r6, r4
 8003856:	d109      	bne.n	800386c <__libc_init_array+0x24>
 8003858:	4d0b      	ldr	r5, [pc, #44]	@ (8003888 <__libc_init_array+0x40>)
 800385a:	4c0c      	ldr	r4, [pc, #48]	@ (800388c <__libc_init_array+0x44>)
 800385c:	f000 f818 	bl	8003890 <_init>
 8003860:	1b64      	subs	r4, r4, r5
 8003862:	10a4      	asrs	r4, r4, #2
 8003864:	2600      	movs	r6, #0
 8003866:	42a6      	cmp	r6, r4
 8003868:	d105      	bne.n	8003876 <__libc_init_array+0x2e>
 800386a:	bd70      	pop	{r4, r5, r6, pc}
 800386c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003870:	4798      	blx	r3
 8003872:	3601      	adds	r6, #1
 8003874:	e7ee      	b.n	8003854 <__libc_init_array+0xc>
 8003876:	f855 3b04 	ldr.w	r3, [r5], #4
 800387a:	4798      	blx	r3
 800387c:	3601      	adds	r6, #1
 800387e:	e7f2      	b.n	8003866 <__libc_init_array+0x1e>
 8003880:	080038e8 	.word	0x080038e8
 8003884:	080038e8 	.word	0x080038e8
 8003888:	080038e8 	.word	0x080038e8
 800388c:	080038ec 	.word	0x080038ec

08003890 <_init>:
 8003890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003892:	bf00      	nop
 8003894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003896:	bc08      	pop	{r3}
 8003898:	469e      	mov	lr, r3
 800389a:	4770      	bx	lr

0800389c <_fini>:
 800389c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800389e:	bf00      	nop
 80038a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038a2:	bc08      	pop	{r3}
 80038a4:	469e      	mov	lr, r3
 80038a6:	4770      	bx	lr
